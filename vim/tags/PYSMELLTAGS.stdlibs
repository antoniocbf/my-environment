{'CLASSES': {'BaseHTTPServer.BaseHTTPRequestHandler': {'bases': ['SocketServer.StreamRequestHandler'],
                                                       'constructor': [],
                                                       'docstring': 'HTTP request handler base class.\n\n    The following explanation of HTTP serves to guide you through the\n    code as well as to expose any misunderstandings I may have about\n    HTTP (so you don\'t need to read the code to figure out I\'m wrong\n    :-).\n\n    HTTP (HyperText Transfer Protocol) is an extensible protocol on\n    top of a reliable stream transport (e.g. TCP/IP).  The protocol\n    recognizes three parts to a request:\n\n    1. One line identifying the request type and path\n    2. An optional set of RFC-822-style headers\n    3. An optional data part\n\n    The headers and data are separated by a blank line.\n\n    The first line of the request has the form\n\n    <command> <path> <version>\n\n    where <command> is a (case-sensitive) keyword such as GET or POST,\n    <path> is a string containing path information for the request,\n    and <version> should be the string "HTTP/1.0" or "HTTP/1.1".\n    <path> is encoded using the URL encoding scheme (using %xx to signify\n    the ASCII character with hex code xx).\n\n    The specification specifies that lines are separated by CRLF but\n    for compatibility with the widest range of clients recommends\n    servers also handle LF.  Similarly, whitespace in the request line\n    is treated sensibly (allowing multiple spaces between components\n    and allowing trailing whitespace).\n\n    Similarly, for output, lines ought to be separated by CRLF pairs\n    but most clients grok LF characters just fine.\n\n    If the first line of the request has the form\n\n    <command> <path>\n\n    (i.e. <version> is left out) then this is assumed to be an HTTP\n    0.9 request; this form has no optional headers and data part and\n    the reply consists of just the data.\n\n    The reply form of the HTTP 1.x protocol again has three parts:\n\n    1. One line giving the response code\n    2. An optional set of RFC-822-style headers\n    3. The data\n\n    Again, the headers and data are separated by a blank line.\n\n    The response code line has the form\n\n    <version> <responsecode> <responsestring>\n\n    where <version> is the protocol version ("HTTP/1.0" or "HTTP/1.1"),\n    <responsecode> is a 3-digit response code indicating success or\n    failure of the request, and <responsestring> is an optional\n    human-readable string explaining what the response code means.\n\n    This server parses the request and the headers, and then calls a\n    function specific to the request type (<command>).  Specifically,\n    a request SPAM will be handled by a method do_SPAM().  If no\n    such method exists the server sends an error response to the\n    client.  If it exists, it is called with no arguments:\n\n    do_SPAM()\n\n    Note that the request name is case sensitive (i.e. SPAM and spam\n    are different requests).\n\n    The various request details are stored in instance variables:\n\n    - client_address is the client IP address in the form (host,\n    port);\n\n    - command, path and version are the broken-down request line;\n\n    - headers is an instance of mimetools.Message (or a derived\n    class) containing the header information;\n\n    - rfile is a file object open for reading positioned at the\n    start of the optional input data part;\n\n    - wfile is a file object open for writing.\n\n    IT IS IMPORTANT TO ADHERE TO THE PROTOCOL FOR WRITING!\n\n    The first thing to be written must be the response line.  Then\n    follow 0 or more header lines, then a blank line, and then the\n    actual data (if any).  The meaning of the header lines depends on\n    the command executed by the server; in most cases, when data is\n    returned, there should be at least one header line of the form\n\n    Content-type: <type>/<subtype>\n\n    where <type> and <subtype> should be registered MIME types,\n    e.g. "text/html" or "text/plain".\n\n    ',
                                                       'methods': [('parse_request',
                                                                    [],
                                                                    'Parse a request (internal).\n\n        The request should be stored in self.raw_requestline; the results\n        are in self.command, self.path, self.request_version and\n        self.headers.\n\n        Return True for success, False for failure; on failure, an\n        error is sent back.\n\n        '),
                                                                   ('handle_one_request',
                                                                    [],
                                                                    "Handle a single HTTP request.\n\n        You normally don't need to override this method; see the class\n        __doc__ string for information on how to handle specific HTTP\n        commands such as GET and POST.\n\n        "),
                                                                   ('handle',
                                                                    [],
                                                                    'Handle multiple requests if necessary.'),
                                                                   ('send_error',
                                                                    ['code', 'message=None'],
                                                                    'Send and log an error reply.\n\n        Arguments are the error code, and a detailed message.\n        The detailed message defaults to the short entry matching the\n        response code.\n\n        This sends an error response (so it must be called before any\n        output has been generated), logs the error, and finally sends\n        a piece of HTML explaining the error to the user.\n\n        '),
                                                                   ('send_response',
                                                                    ['code', 'message=None'],
                                                                    'Send the response header and log the response code.\n\n        Also send two standard headers with the server software\n        version and the current date.\n\n        '),
                                                                   ('send_header',
                                                                    ['keyword', 'value'],
                                                                    'Send a MIME header.'),
                                                                   ('end_headers',
                                                                    [],
                                                                    'Send the blank line ending the MIME headers.'),
                                                                   ('log_request',
                                                                    ["code='-'", "size='-'"],
                                                                    'Log an accepted request.\n\n        This is called by send_response().\n\n        '),
                                                                   ('log_error',
                                                                    ['*args'],
                                                                    'Log an error.\n\n        This is called when a request cannot be fulfilled.  By\n        default it passes the message on to log_message().\n\n        Arguments are the same as for log_message().\n\n        XXX This should go to the separate error log.\n\n        '),
                                                                   ('log_message',
                                                                    ['format', '*args'],
                                                                    "Log an arbitrary message.\n\n        This is used by all other logging functions.  Override\n        it if you have specific logging wishes.\n\n        The first argument, FORMAT, is a format string for the\n        message to be logged.  If the format string contains\n        any % escapes requiring parameters, they should be\n        specified as subsequent arguments (it's just like\n        printf!).\n\n        The client host and current date/time are prefixed to\n        every message.\n\n        "),
                                                                   ('version_string',
                                                                    [],
                                                                    'Return the server software version string.'),
                                                                   ('date_time_string',
                                                                    ['timestamp=None'],
                                                                    'Return the current date and time formatted for a message header.'),
                                                                   ('log_date_time_string',
                                                                    [],
                                                                    'Return the current time formatted for logging.'),
                                                                   ('address_string',
                                                                    [],
                                                                    'Return the client address formatted for logging.\n\n        This version looks up the full hostname using gethostbyaddr(),\n        and tries to find a name that contains at least one dot.\n\n        ')],
                                                       'properties': ['sys_version',
                                                                      'server_version',
                                                                      'command',
                                                                      'request_version',
                                                                      'close_connection',
                                                                      'requestline',
                                                                      'path',
                                                                      'headers',
                                                                      'raw_requestline',
                                                                      'error_message_format',
                                                                      'weekdayname',
                                                                      'monthname',
                                                                      'protocol_version',
                                                                      'MessageClass',
                                                                      'responses']},
             'BaseHTTPServer.HTTPServer': {'bases': ['SocketServer.TCPServer'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('server_bind',
                                                        [],
                                                        'Override server_bind to store the server name.')],
                                           'properties': ['allow_reuse_address',
                                                          'server_name',
                                                          'server_port']},
             'Bastion.BastionClass': {'bases': [],
                                      'constructor': ['get', 'name'],
                                      'docstring': 'Helper class used by the Bastion() function.\n\n    You could subclass this and pass the subclass as the bastionclass\n    argument to the Bastion() function, as long as the constructor has\n    the same signature (a get() function and a name for the object).\n\n    ',
                                      'methods': [('__repr__',
                                                   [],
                                                   'Return a representation string.\n\n        This includes the name passed in to the constructor, so that\n        if you print the bastion during debugging, at least you have\n        some idea of what it is.\n\n        '),
                                                  ('__getattr__',
                                                   ['name'],
                                                   "Get an as-yet undefined attribute value.\n\n        This calls the get() function that was passed to the\n        constructor.  The result is stored as an instance variable so\n        that the next time the same attribute is requested,\n        __getattr__() won't be invoked.\n\n        If the get() function raises an exception, this is simply\n        passed on -- exceptions are not cached.\n\n        ")],
                                      'properties': ['_get_', '_name_']},
             'CGIHTTPServer.CGIHTTPRequestHandler': {'bases': ['SimpleHTTPServer.SimpleHTTPRequestHandler'],
                                                     'constructor': [],
                                                     'docstring': 'Complete HTTP server with GET, HEAD and POST commands.\n\n    GET and HEAD also support running CGI scripts.\n\n    The POST command is *only* implemented for CGI scripts.\n\n    ',
                                                     'methods': [('do_POST',
                                                                  [],
                                                                  'Serve a POST request.\n\n        This is only implemented for CGI scripts.\n\n        '),
                                                                 ('send_head',
                                                                  [],
                                                                  'Version of send_head that support CGI scripts'),
                                                                 ('is_cgi',
                                                                  [],
                                                                  "Test whether self.path corresponds to a CGI script.\n\n        Return a tuple (dir, rest) if self.path requires running a\n        CGI script, None if not.  Note that rest begins with a\n        slash if it is not empty.\n\n        The default implementation tests whether the path\n        begins with one of the strings in the list\n        self.cgi_directories (and the next character is a '/'\n        or the end of the string).\n\n        "),
                                                                 ('is_executable',
                                                                  ['path'],
                                                                  'Test whether argument path is an executable file.'),
                                                                 ('is_python',
                                                                  ['path'],
                                                                  'Test whether argument path is a Python script.'),
                                                                 ('run_cgi',
                                                                  [],
                                                                  'Execute a CGI script.')],
                                                     'properties': ['have_fork',
                                                                    'have_popen2',
                                                                    'have_popen3',
                                                                    'rbufsize',
                                                                    'cgi_info',
                                                                    'cgi_directories']},
             'Canvas.Arc': {'bases': ['Tkinter.CanvasItem'],
                            'constructor': ['canvas', '*args', '**kw'],
                            'docstring': '',
                            'methods': [],
                            'properties': []},
             'Canvas.Bitmap': {'bases': ['Tkinter.CanvasItem'],
                               'constructor': ['canvas', '*args', '**kw'],
                               'docstring': '',
                               'methods': [],
                               'properties': []},
             'Canvas.CanvasItem': {'bases': [],
                                   'constructor': ['canvas', 'itemType', '*args', '**kw'],
                                   'docstring': '',
                                   'methods': [('__str__', [], ''),
                                               ('__repr__', [], ''),
                                               ('delete', [], ''),
                                               ('__getitem__', ['key'], ''),
                                               ('__setitem__', ['key', 'value'], ''),
                                               ('keys', [], ''),
                                               ('has_key', ['key'], ''),
                                               ('__contains__', ['key'], ''),
                                               ('addtag', ['tag', "option='withtag'"], ''),
                                               ('bbox', [], ''),
                                               ('bind',
                                                ['sequence=None', 'command=None', 'add=None'],
                                                ''),
                                               ('unbind', ['sequence', 'funcid=None'], ''),
                                               ('config', ['cnf={}', '**kw'], ''),
                                               ('coords', ['pts=()'], ''),
                                               ('dchars', ['first', 'last=None'], ''),
                                               ('dtag', ['ttd'], ''),
                                               ('focus', [], ''),
                                               ('gettags', [], ''),
                                               ('icursor', ['index'], ''),
                                               ('index', ['index'], ''),
                                               ('insert', ['beforethis', 'string'], ''),
                                               ('lower', ['belowthis=None'], ''),
                                               ('move', ['xamount', 'yamount'], ''),
                                               ('tkraise', ['abovethis=None'], ''),
                                               ('scale',
                                                ['xorigin', 'yorigin', 'xscale', 'yscale'],
                                                ''),
                                               ('type', [], '')],
                                   'properties': ['canvas', 'id', 'cget', '_keys', 'raise_']},
             'Canvas.CanvasText': {'bases': ['Tkinter.CanvasItem'],
                                   'constructor': ['canvas', '*args', '**kw'],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': []},
             'Canvas.Group': {'bases': [],
                              'constructor': ['canvas', 'tag=None'],
                              'docstring': '',
                              'methods': [('str', [], ''),
                                          ('_do', ['cmd', '*args'], ''),
                                          ('addtag_above', ['tagOrId'], ''),
                                          ('addtag_all', [], ''),
                                          ('addtag_below', ['tagOrId'], ''),
                                          ('addtag_closest',
                                           ['x', 'y', 'halo=None', 'start=None'],
                                           ''),
                                          ('addtag_enclosed', ['x1', 'y1', 'x2', 'y2'], ''),
                                          ('addtag_overlapping', ['x1', 'y1', 'x2', 'y2'], ''),
                                          ('addtag_withtag', ['tagOrId'], ''),
                                          ('bbox', [], ''),
                                          ('bind',
                                           ['sequence=None', 'command=None', 'add=None'],
                                           ''),
                                          ('unbind', ['sequence', 'funcid=None'], ''),
                                          ('coords', ['*pts'], ''),
                                          ('dchars', ['first', 'last=None'], ''),
                                          ('delete', [], ''),
                                          ('dtag', ['tagToDelete=None'], ''),
                                          ('focus', [], ''),
                                          ('gettags', [], ''),
                                          ('icursor', ['index'], ''),
                                          ('index', ['index'], ''),
                                          ('insert', ['beforeThis', 'string'], ''),
                                          ('config', ['cnf={}', '**kw'], ''),
                                          ('lower', ['belowThis=None'], ''),
                                          ('move', ['xAmount', 'yAmount'], ''),
                                          ('tkraise', ['aboveThis=None'], ''),
                                          ('scale',
                                           ['xOrigin', 'yOrigin', 'xScale', 'yScale'],
                                           ''),
                                          ('select_adjust', ['index'], ''),
                                          ('select_from', ['index'], ''),
                                          ('select_to', ['index'], ''),
                                          ('type', [], '')],
                              'properties': ['tag', 'id', 'canvas', '__str__', 'lift']},
             'Canvas.ImageItem': {'bases': ['Tkinter.CanvasItem'],
                                  'constructor': ['canvas', '*args', '**kw'],
                                  'docstring': '',
                                  'methods': [],
                                  'properties': []},
             'Canvas.Line': {'bases': ['Tkinter.CanvasItem'],
                             'constructor': ['canvas', '*args', '**kw'],
                             'docstring': '',
                             'methods': [],
                             'properties': []},
             'Canvas.Oval': {'bases': ['Tkinter.CanvasItem'],
                             'constructor': ['canvas', '*args', '**kw'],
                             'docstring': '',
                             'methods': [],
                             'properties': []},
             'Canvas.Polygon': {'bases': ['Tkinter.CanvasItem'],
                                'constructor': ['canvas', '*args', '**kw'],
                                'docstring': '',
                                'methods': [],
                                'properties': []},
             'Canvas.Rectangle': {'bases': ['Tkinter.CanvasItem'],
                                  'constructor': ['canvas', '*args', '**kw'],
                                  'docstring': '',
                                  'methods': [],
                                  'properties': []},
             'Canvas.Window': {'bases': ['Tkinter.CanvasItem'],
                               'constructor': ['canvas', '*args', '**kw'],
                               'docstring': '',
                               'methods': [],
                               'properties': []},
             'ConfigParser.ConfigParser': {'bases': ['ConfigParser.RawConfigParser'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('get',
                                                        ['section',
                                                         'option',
                                                         'raw=False',
                                                         'vars=None'],
                                                        "Get an option value for a given section.\n\n        All % interpolations are expanded in the return values, based on the\n        defaults passed into the constructor, unless the optional argument\n        `raw' is true.  Additional substitutions may be provided using the\n        `vars' argument, which must be a dictionary whose contents overrides\n        any pre-existing defaults.\n\n        The section DEFAULT is special.\n        "),
                                                       ('items',
                                                        ['section', 'raw=False', 'vars=None'],
                                                        "Return a list of tuples with (name, value) for each option\n        in the section.\n\n        All % interpolations are expanded in the return values, based on the\n        defaults passed into the constructor, unless the optional argument\n        `raw' is true.  Additional substitutions may be provided using the\n        `vars' argument, which must be a dictionary whose contents overrides\n        any pre-existing defaults.\n\n        The section DEFAULT is special.\n        "),
                                                       ('_interpolate',
                                                        ['section',
                                                         'option',
                                                         'rawval',
                                                         'vars'],
                                                        ''),
                                                       ('_interpolation_replace',
                                                        ['match'],
                                                        '')],
                                           'properties': ['_KEYCRE']},
             'ConfigParser.DuplicateSectionError': {'bases': ['ConfigParser.Error'],
                                                    'constructor': ['section'],
                                                    'docstring': 'Raised when a section is multiply-created.',
                                                    'methods': [],
                                                    'properties': ['section']},
             'ConfigParser.Error': {'bases': ['Exception'],
                                    'constructor': ["msg=''"],
                                    'docstring': 'Base class for ConfigParser exceptions.',
                                    'methods': [('__repr__', [], '')],
                                    'properties': ['message', '__str__']},
             'ConfigParser.InterpolationDepthError': {'bases': ['ConfigParser.InterpolationError'],
                                                      'constructor': ['option',
                                                                      'section',
                                                                      'rawval'],
                                                      'docstring': 'Raised when substitutions are nested too deeply.',
                                                      'methods': [],
                                                      'properties': []},
             'ConfigParser.InterpolationError': {'bases': ['ConfigParser.Error'],
                                                 'constructor': ['option', 'section', 'msg'],
                                                 'docstring': 'Base class for interpolation-related exceptions.',
                                                 'methods': [],
                                                 'properties': ['option', 'section']},
             'ConfigParser.InterpolationMissingOptionError': {'bases': ['ConfigParser.InterpolationError'],
                                                              'constructor': ['option',
                                                                              'section',
                                                                              'rawval',
                                                                              'reference'],
                                                              'docstring': 'A string substitution required a setting which was not available.',
                                                              'methods': [],
                                                              'properties': ['reference']},
             'ConfigParser.InterpolationSyntaxError': {'bases': ['ConfigParser.InterpolationError'],
                                                       'constructor': [],
                                                       'docstring': 'Raised when the source text into which substitutions are made\n    does not conform to the required syntax.',
                                                       'methods': [],
                                                       'properties': []},
             'ConfigParser.MissingSectionHeaderError': {'bases': ['ConfigParser.ParsingError'],
                                                        'constructor': ['filename',
                                                                        'lineno',
                                                                        'line'],
                                                        'docstring': 'Raised when a key-value pair is found before any section header.',
                                                        'methods': [],
                                                        'properties': ['filename',
                                                                       'lineno',
                                                                       'line']},
             'ConfigParser.NoOptionError': {'bases': ['ConfigParser.Error'],
                                            'constructor': ['option', 'section'],
                                            'docstring': 'A requested option was not found.',
                                            'methods': [],
                                            'properties': ['option', 'section']},
             'ConfigParser.NoSectionError': {'bases': ['ConfigParser.Error'],
                                             'constructor': ['section'],
                                             'docstring': 'Raised when no section matches a requested option.',
                                             'methods': [],
                                             'properties': ['section']},
             'ConfigParser.ParsingError': {'bases': ['ConfigParser.Error'],
                                           'constructor': ['filename'],
                                           'docstring': 'Raised when a configuration file does not follow legal syntax.',
                                           'methods': [('append', ['lineno', 'line'], '')],
                                           'properties': ['filename', 'errors']},
             'ConfigParser.RawConfigParser': {'bases': [],
                                              'constructor': ['defaults=None'],
                                              'docstring': '',
                                              'methods': [('defaults', [], ''),
                                                          ('sections',
                                                           [],
                                                           'Return a list of section names, excluding [DEFAULT]'),
                                                          ('add_section',
                                                           ['section'],
                                                           'Create a new section in the configuration.\n\n        Raise DuplicateSectionError if a section by the specified name\n        already exists.\n        '),
                                                          ('has_section',
                                                           ['section'],
                                                           'Indicate whether the named section is present in the configuration.\n\n        The DEFAULT section is not acknowledged.\n        '),
                                                          ('options',
                                                           ['section'],
                                                           'Return a list of option names for the given section name.'),
                                                          ('read',
                                                           ['filenames'],
                                                           "Read and parse a filename or a list of filenames.\n\n        Files that cannot be opened are silently ignored; this is\n        designed so that you can specify a list of potential\n        configuration file locations (e.g. current directory, user's\n        home directory, systemwide directory), and all existing\n        configuration files in the list will be read.  A single\n        filename may also be given.\n\n        Return list of successfully read files.\n        "),
                                                          ('readfp',
                                                           ['fp', 'filename=None'],
                                                           "Like read() but the argument must be a file-like object.\n\n        The `fp' argument must have a `readline' method.  Optional\n        second argument is the `filename', which if not given, is\n        taken from fp.name.  If fp has no `name' attribute, `<???>' is\n        used.\n\n        "),
                                                          ('get', ['section', 'option'], ''),
                                                          ('items', ['section'], ''),
                                                          ('_get',
                                                           ['section', 'conv', 'option'],
                                                           ''),
                                                          ('getint', ['section', 'option'], ''),
                                                          ('getfloat',
                                                           ['section', 'option'],
                                                           ''),
                                                          ('getboolean',
                                                           ['section', 'option'],
                                                           ''),
                                                          ('optionxform', ['optionstr'], ''),
                                                          ('has_option',
                                                           ['section', 'option'],
                                                           'Check for the existence of a given option in a given section.'),
                                                          ('set',
                                                           ['section', 'option', 'value'],
                                                           'Set an option.'),
                                                          ('write',
                                                           ['fp'],
                                                           'Write an .ini-format representation of the configuration state.'),
                                                          ('remove_option',
                                                           ['section', 'option'],
                                                           'Remove an option.'),
                                                          ('remove_section',
                                                           ['section'],
                                                           'Remove a file section.'),
                                                          ('_read',
                                                           ['fp', 'fpname'],
                                                           "Parse a sectioned setup file.\n\n        The sections in setup file contains a title line at the top,\n        indicated by a name in square brackets (`[]'), plus key/value\n        options lines, indicated by `name: value' format lines.\n        Continuations are represented by an embedded newline then\n        leading whitespace.  Blank lines, lines beginning with a '#',\n        and just about everything else are ignored.\n        ")],
                                              'properties': ['_sections',
                                                             '_defaults',
                                                             '_boolean_states',
                                                             'SECTCRE',
                                                             'OPTCRE']},
             'ConfigParser.SafeConfigParser': {'bases': ['ConfigParser.ConfigParser'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('_interpolate',
                                                            ['section',
                                                             'option',
                                                             'rawval',
                                                             'vars'],
                                                            ''),
                                                           ('_interpolate_some',
                                                            ['option',
                                                             'accum',
                                                             'rest',
                                                             'section',
                                                             'map',
                                                             'depth'],
                                                            ''),
                                                           ('set',
                                                            ['section', 'option', 'value'],
                                                            'Set an option.  Extend ConfigParser.set: check for string values.')],
                                               'properties': ['_interpvar_match']},
             'Cookie.BaseCookie': {'bases': ['dict'],
                                   'constructor': ['input=None'],
                                   'docstring': '',
                                   'methods': [('value_decode',
                                                ['val'],
                                                "real_value, coded_value = value_decode(STRING)\n        Called prior to setting a cookie's value from the network\n        representation.  The VALUE is the value read from HTTP\n        header.\n        Override this function to modify the behavior of cookies.\n        "),
                                               ('value_encode',
                                                ['val'],
                                                "real_value, coded_value = value_encode(VALUE)\n        Called prior to setting a cookie's value from the dictionary\n        representation.  The VALUE is the value being assigned.\n        Override this function to modify the behavior of cookies.\n        "),
                                               ('__set',
                                                ['key', 'real_value', 'coded_value'],
                                                "Private method for setting a cookie's value"),
                                               ('__setitem__',
                                                ['key', 'value'],
                                                'Dictionary style assignment.'),
                                               ('output',
                                                ['attrs=None',
                                                 "header='Set-Cookie:'",
                                                 "sep='\\r\\n'"],
                                                'Return a string suitable for HTTP.'),
                                               ('__repr__', [], ''),
                                               ('js_output',
                                                ['attrs=None'],
                                                'Return a string suitable for JavaScript.'),
                                               ('load',
                                                ['rawdata'],
                                                "Load cookies from a string (presumably HTTP_COOKIE) or\n        from a dictionary.  Loading cookies from a dictionary 'd'\n        is equivalent to calling:\n            map(Cookie.__setitem__, d.keys(), d.values())\n        "),
                                               ('__ParseString',
                                                ['str', 'patt=_CookiePattern'],
                                                '')],
                                   'properties': ['__str__']},
             'Cookie.CookieError': {'bases': ['Exception'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'Cookie.Morsel': {'bases': ['dict'],
                               'constructor': [],
                               'docstring': '',
                               'methods': [('__setitem__', ['K', 'V'], ''),
                                           ('isReservedKey', ['K'], ''),
                                           ('set',
                                            ['key',
                                             'val',
                                             'coded_val',
                                             'LegalChars=_LegalChars',
                                             'idmap=_idmap',
                                             'translate=string.translate'],
                                            ''),
                                           ('output',
                                            ['attrs=None', "header='Set-Cookie:'"],
                                            ''),
                                           ('__repr__', [], ''),
                                           ('js_output', ['attrs=None'], ''),
                                           ('OutputString', ['attrs=None'], '')],
                               'properties': ['_reserved',
                                              'key',
                                              'value',
                                              'coded_value',
                                              '__str__']},
             'Cookie.SerialCookie': {'bases': ['Cookie.BaseCookie'],
                                     'constructor': ['input=None'],
                                     'docstring': 'SerialCookie\n    SerialCookie supports arbitrary objects as cookie values. All\n    values are serialized (using cPickle) before being sent to the\n    client.  All incoming values are assumed to be valid Pickle\n    representations.  IF AN INCOMING VALUE IS NOT IN A VALID PICKLE\n    FORMAT, THEN AN EXCEPTION WILL BE RAISED.\n\n    Note: Large cookie values add overhead because they must be\n    retransmitted on every HTTP transaction.\n\n    Note: HTTP has a 2k limit on the size of a cookie.  This class\n    does not check for this limit, so be careful!!!\n    ',
                                     'methods': [('value_decode', ['val'], ''),
                                                 ('value_encode', ['val'], '')],
                                     'properties': []},
             'Cookie.SimpleCookie': {'bases': ['Cookie.BaseCookie'],
                                     'constructor': [],
                                     'docstring': 'SimpleCookie\n    SimpleCookie supports strings as cookie values.  When setting\n    the value using the dictionary assignment notation, SimpleCookie\n    calls the builtin str() to convert the value to a string.  Values\n    received from HTTP are kept as strings.\n    ',
                                     'methods': [('value_decode', ['val'], ''),
                                                 ('value_encode', ['val'], '')],
                                     'properties': []},
             'Cookie.SmartCookie': {'bases': ['Cookie.BaseCookie'],
                                    'constructor': ['input=None'],
                                    'docstring': 'SmartCookie\n    SmartCookie supports arbitrary objects as cookie values.  If the\n    object is a string, then it is quoted.  If the object is not a\n    string, however, then SmartCookie will use cPickle to serialize\n    the object into a string representation.\n\n    Note: Large cookie values add overhead because they must be\n    retransmitted on every HTTP transaction.\n\n    Note: HTTP has a 2k limit on the size of a cookie.  This class\n    does not check for this limit, so be careful!!!\n    ',
                                    'methods': [('value_decode', ['val'], ''),
                                                ('value_encode', ['val'], '')],
                                    'properties': []},
             'Dialog.Dialog': {'bases': ['Dialog.Widget'],
                               'constructor': ['master=None', 'cnf={}', '**kw'],
                               'docstring': '',
                               'methods': [('destroy', [], '')],
                               'properties': ['widgetName', 'num']},
             'DocXMLRPCServer.DocCGIXMLRPCRequestHandler': {'bases': ['SimpleXMLRPCServer.CGIXMLRPCRequestHandler',
                                                                      'DocXMLRPCServer.XMLRPCDocGenerator'],
                                                            'constructor': [],
                                                            'docstring': 'Handler for XML-RPC data and documentation requests passed through\n    CGI',
                                                            'methods': [('handle_get',
                                                                         [],
                                                                         'Handles the HTTP GET request.\n\n        Interpret all HTTP GET requests as requests for server\n        documentation.\n        ')],
                                                            'properties': []},
             'DocXMLRPCServer.DocXMLRPCRequestHandler': {'bases': ['SimpleXMLRPCServer.SimpleXMLRPCRequestHandler'],
                                                         'constructor': [],
                                                         'docstring': 'XML-RPC and documentation request handler class.\n\n    Handles all HTTP POST requests and attempts to decode them as\n    XML-RPC requests.\n\n    Handles all HTTP GET requests and interprets them as requests\n    for documentation.\n    ',
                                                         'methods': [('do_GET',
                                                                      [],
                                                                      'Handles the HTTP GET request.\n\n        Interpret all HTTP GET requests as requests for server\n        documentation.\n        ')],
                                                         'properties': []},
             'DocXMLRPCServer.DocXMLRPCServer': {'bases': ['SimpleXMLRPCServer.SimpleXMLRPCServer',
                                                           'DocXMLRPCServer.XMLRPCDocGenerator'],
                                                 'constructor': ['addr',
                                                                 'requestHandler=DocXMLRPCRequestHandler',
                                                                 'logRequests=1'],
                                                 'docstring': 'XML-RPC and HTML documentation server.\n\n    Adds the ability to serve server documentation to the capabilities\n    of SimpleXMLRPCServer.\n    ',
                                                 'methods': [],
                                                 'properties': []},
             'DocXMLRPCServer.ServerHTMLDoc': {'bases': ['pydoc.HTMLDoc'],
                                               'constructor': [],
                                               'docstring': 'Class used to generate pydoc HTML document for a server',
                                               'methods': [('markup',
                                                            ['text',
                                                             'escape=None',
                                                             'funcs={}',
                                                             'classes={}',
                                                             'methods={}'],
                                                            'Mark up some plain text, given a context of symbols to look for.\n        Each context dictionary maps object names to anchor names.'),
                                                           ('docroutine',
                                                            ['object',
                                                             'name=None',
                                                             'mod=None',
                                                             'funcs={}',
                                                             'classes={}',
                                                             'methods={}',
                                                             'cl=None'],
                                                            'Produce HTML documentation for a function or method object.'),
                                                           ('docserver',
                                                            ['server_name',
                                                             'package_documentation',
                                                             'methods'],
                                                            'Produce HTML documentation for an XML-RPC server.')],
                                               'properties': []},
             'DocXMLRPCServer.XMLRPCDocGenerator': {'bases': [],
                                                    'constructor': [],
                                                    'docstring': 'Generates documentation for an XML-RPC server.\n\n    This class is designed as mix-in and should not\n    be constructed directly.\n    ',
                                                    'methods': [('set_server_title',
                                                                 ['server_title'],
                                                                 'Set the HTML title of the generated server documentation'),
                                                                ('set_server_name',
                                                                 ['server_name'],
                                                                 'Set the name of the generated HTML server documentation'),
                                                                ('set_server_documentation',
                                                                 ['server_documentation'],
                                                                 'Set the documentation string for the entire server.'),
                                                                ('generate_html_documentation',
                                                                 [],
                                                                 'generate_html_documentation() => html documentation for the server\n\n        Generates HTML documentation for the server using introspection for\n        installed functions and instances that do not implement the\n        _dispatch method. Alternatively, instances can choose to implement\n        the _get_method_argstring(method_name) method to provide the\n        argument string used in the documentation and the\n        _methodHelp(method_name) method to provide the help text used\n        in the documentation.')],
                                                    'properties': ['server_name',
                                                                   'server_documentation',
                                                                   'server_title']},
             'FileDialog.FileDialog': {'bases': [],
                                       'constructor': ['master', 'title=None'],
                                       'docstring': "Standard file selection dialog -- no checks on selected file.\n\n    Usage:\n\n        d = FileDialog(master)\n        fname = d.go(dir_or_file, pattern, default, key)\n        if fname is None: ...canceled...\n        else: ...open file...\n\n    All arguments to go() are optional.\n\n    The 'key' argument specifies a key in the global dictionary\n    'dialogstates', which keeps track of the values for the directory\n    and pattern arguments, overriding the values passed in (it does\n    not keep track of the default argument!).  If no key is specified,\n    the dialog keeps no memory of previous state.  Note that memory is\n    kept even when the dialog is canceled.  (All this emulates the\n    behavior of the Macintosh file selection dialogs.)\n\n    ",
                                       'methods': [('go',
                                                    ['dir_or_file=os.curdir',
                                                     "pattern='*'",
                                                     "default=''",
                                                     'key=None'],
                                                    ''),
                                                   ('quit', ['how=None'], ''),
                                                   ('dirs_double_event', ['event'], ''),
                                                   ('dirs_select_event', ['event'], ''),
                                                   ('files_double_event', ['event'], ''),
                                                   ('files_select_event', ['event'], ''),
                                                   ('ok_event', ['event'], ''),
                                                   ('ok_command', [], ''),
                                                   ('filter_command', ['event=None'], ''),
                                                   ('get_filter', [], ''),
                                                   ('get_selection', [], ''),
                                                   ('cancel_command', ['event=None'], ''),
                                                   ('set_filter', ['dir', 'pat'], ''),
                                                   ('set_selection', ['file'], '')],
                                       'properties': ['title',
                                                      'master',
                                                      'directory',
                                                      'top',
                                                      'botframe',
                                                      'selection',
                                                      'filter',
                                                      'midframe',
                                                      'filesbar',
                                                      'files',
                                                      'dirsbar',
                                                      'dirs',
                                                      'ok_button',
                                                      'filter_button',
                                                      'cancel_button',
                                                      'how']},
             'FileDialog.LoadFileDialog': {'bases': ['FileDialog.FileDialog'],
                                           'constructor': [],
                                           'docstring': 'File selection dialog which checks that the file exists.',
                                           'methods': [('ok_command', [], '')],
                                           'properties': ['title']},
             'FileDialog.SaveFileDialog': {'bases': ['FileDialog.FileDialog'],
                                           'constructor': [],
                                           'docstring': 'File selection dialog which checks that the file may be created.',
                                           'methods': [('ok_command', [], '')],
                                           'properties': ['title']},
             'HTMLParser.HTMLParseError': {'bases': ['Exception'],
                                           'constructor': ['msg', 'position=(None, None)'],
                                           'docstring': 'Exception raised for all parse errors.',
                                           'methods': [('__str__', [], '')],
                                           'properties': ['msg', 'lineno', 'offset']},
             'HTMLParser.HTMLParser': {'bases': ['markupbase.ParserBase'],
                                       'constructor': [],
                                       'docstring': 'Find tags and other markup and call handler functions.\n\n    Usage:\n        p = HTMLParser()\n        p.feed(data)\n        ...\n        p.close()\n\n    Start tags are handled by calling self.handle_starttag() or\n    self.handle_startendtag(); end tags by self.handle_endtag().  The\n    data between tags is passed from the parser to the derived class\n    by calling self.handle_data() with the data as argument (the data\n    may be split up in arbitrary chunks).  Entity references are\n    passed by calling self.handle_entityref() with the entity\n    reference as the argument.  Numeric character references are\n    passed to self.handle_charref() with the string containing the\n    reference as the argument.\n    ',
                                       'methods': [('reset',
                                                    [],
                                                    'Reset this instance.  Loses all unprocessed data.'),
                                                   ('feed',
                                                    ['data'],
                                                    "Feed data to the parser.\n\n        Call this as often as you want, with as little or as much text\n        as you want (may include '\n').\n        "),
                                                   ('close', [], 'Handle any buffered data.'),
                                                   ('error', ['message'], ''),
                                                   ('get_starttag_text',
                                                    [],
                                                    "Return full source of start tag: '<...>'."),
                                                   ('set_cdata_mode', [], ''),
                                                   ('clear_cdata_mode', [], ''),
                                                   ('goahead', ['end'], ''),
                                                   ('parse_pi', ['i'], ''),
                                                   ('parse_starttag', ['i'], ''),
                                                   ('check_for_whole_start_tag', ['i'], ''),
                                                   ('parse_endtag', ['i'], ''),
                                                   ('handle_startendtag', ['tag', 'attrs'], ''),
                                                   ('handle_starttag', ['tag', 'attrs'], ''),
                                                   ('handle_endtag', ['tag'], ''),
                                                   ('handle_charref', ['name'], ''),
                                                   ('handle_entityref', ['name'], ''),
                                                   ('handle_data', ['data'], ''),
                                                   ('handle_comment', ['data'], ''),
                                                   ('handle_decl', ['decl'], ''),
                                                   ('handle_pi', ['data'], ''),
                                                   ('unknown_decl', ['data'], ''),
                                                   ('unescape', ['s'], '')],
                                       'properties': ['CDATA_CONTENT_ELEMENTS',
                                                      'rawdata',
                                                      'lasttag',
                                                      'interesting',
                                                      '__starttag_text']},
             'MimeWriter.MimeWriter': {'bases': [],
                                       'constructor': ['fp'],
                                       'docstring': "Generic MIME writer.\n\n    Methods:\n\n    __init__()\n    addheader()\n    flushheaders()\n    startbody()\n    startmultipartbody()\n    nextpart()\n    lastpart()\n\n    A MIME writer is much more primitive than a MIME parser.  It\n    doesn't seek around on the output file, and it doesn't use large\n    amounts of buffer space, so you have to write the parts in the\n    order they should occur on the output file.  It does buffer the\n    headers you add, allowing you to rearrange their order.\n\n    General usage is:\n\n    f = <open the output file>\n    w = MimeWriter(f)\n    ...call w.addheader(key, value) 0 or more times...\n\n    followed by either:\n\n    f = w.startbody(content_type)\n    ...call f.write(data) for body data...\n\n    or:\n\n    w.startmultipartbody(subtype)\n    for each part:\n        subwriter = w.nextpart()\n        ...use the subwriter's methods to create the subpart...\n    w.lastpart()\n\n    The subwriter is another MimeWriter instance, and should be\n    treated in the same way as the toplevel MimeWriter.  This way,\n    writing recursive body parts is easy.\n\n    Warning: don't forget to call lastpart()!\n\n    XXX There should be more state so calls made in the wrong order\n    are detected.\n\n    Some special cases:\n\n    - startbody() just returns the file passed to the constructor;\n      but don't use this knowledge, as it may be changed.\n\n    - startmultipartbody() actually returns a file as well;\n      this can be used to write the initial 'if you can read this your\n      mailer is not MIME-aware' message.\n\n    - If you call flushheaders(), the headers accumulated so far are\n      written out (and forgotten); this is useful if you don't need a\n      body part at all, e.g. for a subpart of type message/rfc822\n      that's (mis)used to store some header-like information.\n\n    - Passing a keyword argument 'prefix=<flag>' to addheader(),\n      start*body() affects where the header is inserted; 0 means\n      append at the end, 1 means insert at the start; default is\n      append for addheader(), but insert for start*body(), which use\n      it to determine where the Content-Type header goes.\n\n    ",
                                       'methods': [('addheader',
                                                    ['key', 'value', 'prefix=0'],
                                                    'Add a header line to the MIME message.\n\n        The key is the name of the header, where the value obviously provides\n        the value of the header. The optional argument prefix determines\n        where the header is inserted; 0 means append at the end, 1 means\n        insert at the start. The default is to append.\n\n        '),
                                                   ('flushheaders',
                                                    [],
                                                    "Writes out and forgets all headers accumulated so far.\n\n        This is useful if you don't need a body part at all; for example,\n        for a subpart of type message/rfc822 that's (mis)used to store some\n        header-like information.\n\n        "),
                                                   ('startbody',
                                                    ['ctype', 'plist=[]', 'prefix=1'],
                                                    'Returns a file-like object for writing the body of the message.\n\n        The content-type is set to the provided ctype, and the optional\n        parameter, plist, provides additional parameters for the\n        content-type declaration.  The optional argument prefix determines\n        where the header is inserted; 0 means append at the end, 1 means\n        insert at the start. The default is to insert at the start.\n\n        '),
                                                   ('startmultipartbody',
                                                    ['subtype',
                                                     'boundary=None',
                                                     'plist=[]',
                                                     'prefix=1'],
                                                    'Returns a file-like object for writing the body of the message.\n\n        Additionally, this method initializes the multi-part code, where the\n        subtype parameter provides the multipart subtype, the boundary\n        parameter may provide a user-defined boundary specification, and the\n        plist parameter provides optional parameters for the subtype.  The\n        optional argument, prefix, determines where the header is inserted;\n        0 means append at the end, 1 means insert at the start. The default\n        is to insert at the start.  Subparts should be created using the\n        nextpart() method.\n\n        '),
                                                   ('nextpart',
                                                    [],
                                                    'Returns a new instance of MimeWriter which represents an\n        individual part in a multipart message.\n\n        This may be used to write the part as well as used for creating\n        recursively complex multipart messages. The message must first be\n        initialized with the startmultipartbody() method before using the\n        nextpart() method.\n\n        '),
                                                   ('lastpart',
                                                    [],
                                                    'This is used to designate the last part of a multipart message.\n\n        It should always be used when writing multipart messages.\n\n        ')],
                                       'properties': ['_fp', '_headers', '_boundary']},
             'Queue.Empty': {'bases': ['Exception'],
                             'constructor': [],
                             'docstring': 'Exception raised by Queue.get(block=0)/get_nowait().',
                             'methods': [],
                             'properties': []},
             'Queue.Full': {'bases': ['Exception'],
                            'constructor': [],
                            'docstring': 'Exception raised by Queue.put(block=0)/put_nowait().',
                            'methods': [],
                            'properties': []},
             'Queue.Queue': {'bases': [],
                             'constructor': ['maxsize=0'],
                             'docstring': 'Create a queue object with a given maximum size.\n\n    If maxsize is <= 0, the queue size is infinite.\n    ',
                             'methods': [('task_done',
                                          [],
                                          'Indicate that a formerly enqueued task is complete.\n\n        Used by Queue consumer threads.  For each get() used to fetch a task,\n        a subsequent call to task_done() tells the queue that the processing\n        on the task is complete.\n\n        If a join() is currently blocking, it will resume when all items\n        have been processed (meaning that a task_done() call was received\n        for every item that had been put() into the queue).\n\n        Raises a ValueError if called more times than there were items\n        placed in the queue.\n        '),
                                         ('join',
                                          [],
                                          'Blocks until all items in the Queue have been gotten and processed.\n\n        The count of unfinished tasks goes up whenever an item is added to the\n        queue. The count goes down whenever a consumer thread calls task_done()\n        to indicate the item was retrieved and all work on it is complete.\n\n        When the count of unfinished tasks drops to zero, join() unblocks.\n        '),
                                         ('qsize',
                                          [],
                                          'Return the approximate size of the queue (not reliable!).'),
                                         ('empty',
                                          [],
                                          'Return True if the queue is empty, False otherwise (not reliable!).'),
                                         ('full',
                                          [],
                                          'Return True if the queue is full, False otherwise (not reliable!).'),
                                         ('put',
                                          ['item', 'block=True', 'timeout=None'],
                                          "Put an item into the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until a free slot is available. If 'timeout' is\n        a positive number, it blocks at most 'timeout' seconds and raises\n        the Full exception if no free slot was available within that time.\n        Otherwise ('block' is false), put an item on the queue if a free slot\n        is immediately available, else raise the Full exception ('timeout'\n        is ignored in that case).\n        "),
                                         ('put_nowait',
                                          ['item'],
                                          'Put an item into the queue without blocking.\n\n        Only enqueue the item if a free slot is immediately available.\n        Otherwise raise the Full exception.\n        '),
                                         ('get',
                                          ['block=True', 'timeout=None'],
                                          "Remove and return an item from the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until an item is available. If 'timeout' is\n        a positive number, it blocks at most 'timeout' seconds and raises\n        the Empty exception if no item was available within that time.\n        Otherwise ('block' is false), return an item if one is immediately\n        available, else raise the Empty exception ('timeout' is ignored\n        in that case).\n        "),
                                         ('get_nowait',
                                          [],
                                          'Remove and return an item from the queue without blocking.\n\n        Only get an item if one is immediately available. Otherwise\n        raise the Empty exception.\n        '),
                                         ('_init', ['maxsize'], ''),
                                         ('_qsize', [], ''),
                                         ('_empty', [], ''),
                                         ('_full', [], ''),
                                         ('_put', ['item'], ''),
                                         ('_get', [], '')],
                             'properties': ['mutex',
                                            'not_empty',
                                            'not_full',
                                            'all_tasks_done',
                                            'unfinished_tasks',
                                            'maxsize',
                                            'queue']},
             'ScrolledText.ScrolledText': {'bases': ['ScrolledText.Text'],
                                           'constructor': ['master=None', 'cnf=None', '**kw'],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': ['frame', 'vbar']},
             'SimpleDialog.SimpleDialog': {'bases': [],
                                           'constructor': ['master',
                                                           "text=''",
                                                           'buttons=[]',
                                                           'default=None',
                                                           'cancel=None',
                                                           'title=None',
                                                           'class_=None'],
                                           'docstring': '',
                                           'methods': [('_set_transient',
                                                        ['master',
                                                         'relx=0.5',
                                                         'rely=0.29999999999999999'],
                                                        ''),
                                                       ('go', [], ''),
                                                       ('return_event', ['event'], ''),
                                                       ('wm_delete_window', [], ''),
                                                       ('done', ['num'], '')],
                                           'properties': ['root',
                                                          'message',
                                                          'frame',
                                                          'num',
                                                          'cancel',
                                                          'default']},
             'SimpleHTTPServer.SimpleHTTPRequestHandler': {'bases': ['BaseHTTPServer.BaseHTTPRequestHandler'],
                                                           'constructor': [],
                                                           'docstring': 'Simple HTTP request handler with GET and HEAD commands.\n\n    This serves files from the current directory and any of its\n    subdirectories.  The MIME type for files is determined by\n    calling the .guess_type() method.\n\n    The GET and HEAD requests are identical except that the HEAD\n    request omits the actual contents of the file.\n\n    ',
                                                           'methods': [('do_GET',
                                                                        [],
                                                                        'Serve a GET request.'),
                                                                       ('do_HEAD',
                                                                        [],
                                                                        'Serve a HEAD request.'),
                                                                       ('send_head',
                                                                        [],
                                                                        'Common code for GET and HEAD commands.\n\n        This sends the response code and MIME headers.\n\n        Return value is either a file object (which has to be copied\n        to the outputfile by the caller unless the command was HEAD,\n        and must be closed by the caller under all circumstances), or\n        None, in which case the caller has nothing further to do.\n\n        '),
                                                                       ('list_directory',
                                                                        ['path'],
                                                                        'Helper to produce a directory listing (absent index.html).\n\n        Return value is either a file object, or None (indicating an\n        error).  In either case, the headers are sent, making the\n        interface the same as for send_head().\n\n        '),
                                                                       ('translate_path',
                                                                        ['path'],
                                                                        'Translate a /-separated PATH to the local filename syntax.\n\n        Components that mean special things to the local file system\n        (e.g. drive or directory names) are ignored.  (XXX They should\n        probably be diagnosed.)\n\n        '),
                                                                       ('copyfile',
                                                                        ['source',
                                                                         'outputfile'],
                                                                        'Copy all data between two file objects.\n\n        The SOURCE argument is a file object open for reading\n        (or anything with a read() method) and the DESTINATION\n        argument is a file object open for writing (or\n        anything with a write() method).\n\n        The only reason for overriding this would be to change\n        the block size or perhaps to replace newlines by CRLF\n        -- note however that this the default server uses this\n        to copy binary data as well.\n\n        '),
                                                                       ('guess_type',
                                                                        ['path'],
                                                                        "Guess the type of a file.\n\n        Argument is a PATH (a filename).\n\n        Return value is a string of the form type/subtype,\n        usable for a MIME Content-type header.\n\n        The default implementation looks the file's extension\n        up in the table self.extensions_map, using application/octet-stream\n        as a default; however it would be permissible (if\n        slow) to look inside the data to make a better guess.\n\n        ")],
                                                           'properties': ['server_version',
                                                                          'extensions_map']},
             'SimpleXMLRPCServer.CGIXMLRPCRequestHandler': {'bases': ['SimpleXMLRPCServer.SimpleXMLRPCDispatcher'],
                                                            'constructor': ['allow_none=False',
                                                                            'encoding=None'],
                                                            'docstring': 'Simple handler for XML-RPC data passed through CGI.',
                                                            'methods': [('handle_xmlrpc',
                                                                         ['request_text'],
                                                                         'Handle a single XML-RPC request'),
                                                                        ('handle_get',
                                                                         [],
                                                                         'Handle a single HTTP GET request.\n\n        Default implementation indicates an error because\n        XML-RPC uses the POST method.\n        '),
                                                                        ('handle_request',
                                                                         ['request_text=None'],
                                                                         'Handle a single XML-RPC request passed through a CGI post method.\n\n        If no XML data is given then it is read from stdin. The resulting\n        XML-RPC response is printed to stdout along with the correct HTTP\n        headers.\n        ')],
                                                            'properties': []},
             'SimpleXMLRPCServer.SimpleXMLRPCDispatcher': {'bases': [],
                                                           'constructor': ['allow_none',
                                                                           'encoding'],
                                                           'docstring': 'Mix-in class that dispatches XML-RPC requests.\n\n    This class is used to register XML-RPC method handlers\n    and then to dispatch them. There should never be any\n    reason to instantiate this class directly.\n    ',
                                                           'methods': [('register_instance',
                                                                        ['instance',
                                                                         'allow_dotted_names=False'],
                                                                        "Registers an instance to respond to XML-RPC requests.\n\n        Only one instance can be installed at a time.\n\n        If the registered instance has a _dispatch method then that\n        method will be called with the name of the XML-RPC method and\n        its parameters as a tuple\n        e.g. instance._dispatch('add',(2,3))\n\n        If the registered instance does not have a _dispatch method\n        then the instance will be searched to find a matching method\n        and, if found, will be called. Methods beginning with an '_'\n        are considered private and will not be called by\n        SimpleXMLRPCServer.\n\n        If a registered function matches a XML-RPC request, then it\n        will be called instead of the registered instance.\n\n        If the optional allow_dotted_names argument is true and the\n        instance does not have a _dispatch method, method names\n        containing dots are supported and resolved, as long as none of\n        the name segments start with an '_'.\n\n            *** SECURITY WARNING: ***\n\n            Enabling the allow_dotted_names options allows intruders\n            to access your module's global variables and may allow\n            intruders to execute arbitrary code on your machine.  Only\n            use this option on a secure, closed network.\n\n        "),
                                                                       ('register_function',
                                                                        ['function',
                                                                         'name=None'],
                                                                        'Registers a function to respond to XML-RPC requests.\n\n        The optional name argument can be used to set a Unicode name\n        for the function.\n        '),
                                                                       ('register_introspection_functions',
                                                                        [],
                                                                        'Registers the XML-RPC introspection methods in the system\n        namespace.\n\n        see http://xmlrpc.usefulinc.com/doc/reserved.html\n        '),
                                                                       ('register_multicall_functions',
                                                                        [],
                                                                        'Registers the XML-RPC multicall method in the system\n        namespace.\n\n        see http://www.xmlrpc.com/discuss/msgReader$1208'),
                                                                       ('_marshaled_dispatch',
                                                                        ['data',
                                                                         'dispatch_method=None'],
                                                                        'Dispatches an XML-RPC method from marshalled (XML) data.\n\n        XML-RPC methods are dispatched from the marshalled (XML) data\n        using the _dispatch method and the result is returned as\n        marshalled data. For backwards compatibility, a dispatch\n        function can be provided as an argument (see comment in\n        SimpleXMLRPCRequestHandler.do_POST) but overriding the\n        existing method through subclassing is the prefered means\n        of changing method dispatch behavior.\n        '),
                                                                       ('system_listMethods',
                                                                        [],
                                                                        "system.listMethods() => ['add', 'subtract', 'multiple']\n\n        Returns a list of the methods supported by the server."),
                                                                       ('system_methodSignature',
                                                                        ['method_name'],
                                                                        "system.methodSignature('add') => [double, int, int]\n\n        Returns a list describing the signature of the method. In the\n        above example, the add method takes two integers as arguments\n        and returns a double result.\n\n        This server does NOT support system.methodSignature."),
                                                                       ('system_methodHelp',
                                                                        ['method_name'],
                                                                        'system.methodHelp(\'add\') => "Adds two integers together"\n\n        Returns a string containing documentation for the specified method.'),
                                                                       ('system_multicall',
                                                                        ['call_list'],
                                                                        "system.multicall([{'methodName': 'add', 'params': [2, 2]}, ...]) => [[4], ...]\n\n        Allows the caller to package multiple XML-RPC calls into a single\n        request.\n\n        See http://www.xmlrpc.com/discuss/msgReader$1208\n        "),
                                                                       ('_dispatch',
                                                                        ['method', 'params'],
                                                                        "Dispatches the XML-RPC method.\n\n        XML-RPC calls are forwarded to a registered function that\n        matches the called XML-RPC method name. If no such function\n        exists then the call is forwarded to the registered instance,\n        if available.\n\n        If the registered instance has a _dispatch method then that\n        method will be called with the name of the XML-RPC method and\n        its parameters as a tuple\n        e.g. instance._dispatch('add',(2,3))\n\n        If the registered instance does not have a _dispatch method\n        then the instance will be searched to find a matching method\n        and, if found, will be called.\n\n        Methods beginning with an '_' are considered private and will\n        not be called.\n        ")],
                                                           'properties': ['funcs',
                                                                          'instance',
                                                                          'allow_none',
                                                                          'encoding',
                                                                          'allow_dotted_names']},
             'SimpleXMLRPCServer.SimpleXMLRPCRequestHandler': {'bases': ['BaseHTTPServer.BaseHTTPRequestHandler'],
                                                               'constructor': [],
                                                               'docstring': 'Simple XML-RPC request handler class.\n\n    Handles all HTTP POST requests and attempts to decode them as\n    XML-RPC requests.\n    ',
                                                               'methods': [('is_rpc_path_valid',
                                                                            [],
                                                                            ''),
                                                                           ('do_POST',
                                                                            [],
                                                                            "Handles the HTTP POST request.\n\n        Attempts to interpret all HTTP POST requests as XML-RPC calls,\n        which are forwarded to the server's _dispatch method for handling.\n        "),
                                                                           ('report_404',
                                                                            [],
                                                                            ''),
                                                                           ('log_request',
                                                                            ["code='-'",
                                                                             "size='-'"],
                                                                            'Selectively log an accepted request.')],
                                                               'properties': ['rpc_paths']},
             'SimpleXMLRPCServer.SimpleXMLRPCServer': {'bases': ['SocketServer.TCPServer',
                                                                 'SimpleXMLRPCServer.SimpleXMLRPCDispatcher'],
                                                       'constructor': ['addr',
                                                                       'requestHandler=SimpleXMLRPCRequestHandler',
                                                                       'logRequests=True',
                                                                       'allow_none=False',
                                                                       'encoding=None'],
                                                       'docstring': 'Simple XML-RPC server.\n\n    Simple XML-RPC server that allows functions and a single instance\n    to be installed to handle requests. The default implementation\n    attempts to dispatch XML-RPC calls to the functions or instance\n    installed in the server. Override the _dispatch method inhereted\n    from SimpleXMLRPCDispatcher to change this behavior.\n    ',
                                                       'methods': [],
                                                       'properties': ['allow_reuse_address',
                                                                      'logRequests']},
             'SocketServer.BaseRequestHandler': {'bases': [],
                                                 'constructor': ['request',
                                                                 'client_address',
                                                                 'server'],
                                                 'docstring': 'Base class for request handler classes.\n\n    This class is instantiated for each request to be handled.  The\n    constructor sets the instance variables request, client_address\n    and server, and then calls the handle() method.  To implement a\n    specific service, all you need to do is to derive a class which\n    defines a handle() method.\n\n    The handle() method can find the request as self.request, the\n    client address as self.client_address, and the server (in case it\n    needs access to per-server information) as self.server.  Since a\n    separate instance is created for each request, the handle() method\n    can define arbitrary other instance variariables.\n\n    ',
                                                 'methods': [('setup', [], ''),
                                                             ('handle', [], ''),
                                                             ('finish', [], '')],
                                                 'properties': ['request',
                                                                'client_address',
                                                                'server']},
             'SocketServer.BaseServer': {'bases': [],
                                         'constructor': ['server_address',
                                                         'RequestHandlerClass'],
                                         'docstring': 'Base class for server classes.\n\n    Methods for the caller:\n\n    - __init__(server_address, RequestHandlerClass)\n    - serve_forever()\n    - handle_request()  # if you do not use serve_forever()\n    - fileno() -> int   # for select()\n\n    Methods that may be overridden:\n\n    - server_bind()\n    - server_activate()\n    - get_request() -> request, client_address\n    - verify_request(request, client_address)\n    - server_close()\n    - process_request(request, client_address)\n    - close_request(request)\n    - handle_error()\n\n    Methods for derived classes:\n\n    - finish_request(request, client_address)\n\n    Class variables that may be overridden by derived classes or\n    instances:\n\n    - address_family\n    - socket_type\n    - allow_reuse_address\n\n    Instance variables:\n\n    - RequestHandlerClass\n    - socket\n\n    ',
                                         'methods': [('server_activate',
                                                      [],
                                                      'Called by constructor to activate the server.\n\n        May be overridden.\n\n        '),
                                                     ('serve_forever',
                                                      [],
                                                      'Handle one request at a time until doomsday.'),
                                                     ('handle_request',
                                                      [],
                                                      'Handle one request, possibly blocking.'),
                                                     ('verify_request',
                                                      ['request', 'client_address'],
                                                      'Verify the request.  May be overridden.\n\n        Return True if we should proceed with this request.\n\n        '),
                                                     ('process_request',
                                                      ['request', 'client_address'],
                                                      'Call finish_request.\n\n        Overridden by ForkingMixIn and ThreadingMixIn.\n\n        '),
                                                     ('server_close',
                                                      [],
                                                      'Called to clean-up the server.\n\n        May be overridden.\n\n        '),
                                                     ('finish_request',
                                                      ['request', 'client_address'],
                                                      'Finish one request by instantiating RequestHandlerClass.'),
                                                     ('close_request',
                                                      ['request'],
                                                      'Called to clean up an individual request.'),
                                                     ('handle_error',
                                                      ['request', 'client_address'],
                                                      'Handle an error gracefully.  May be overridden.\n\n        The default is to print a traceback and continue.\n\n        ')],
                                         'properties': ['server_address', 'RequestHandlerClass']},
             'SocketServer.DatagramRequestHandler': {'bases': ['SocketServer.BaseRequestHandler'],
                                                     'constructor': [],
                                                     'docstring': 'Define self.rfile and self.wfile for datagram sockets.',
                                                     'methods': [('setup', [], ''),
                                                                 ('finish', [], '')],
                                                     'properties': ['packet',
                                                                    'socket',
                                                                    'rfile',
                                                                    'wfile']},
             'SocketServer.ForkingMixIn': {'bases': [],
                                           'constructor': [],
                                           'docstring': 'Mix-in class to handle each request in a new process.',
                                           'methods': [('collect_children',
                                                        [],
                                                        'Internal routine to wait for died children.'),
                                                       ('process_request',
                                                        ['request', 'client_address'],
                                                        'Fork a new subprocess to process the request.')],
                                           'properties': ['active_children', 'max_children']},
             'SocketServer.ForkingTCPServer': {'bases': ['SocketServer.ForkingMixIn',
                                                         'SocketServer.TCPServer'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'SocketServer.ForkingUDPServer': {'bases': ['SocketServer.ForkingMixIn',
                                                         'SocketServer.UDPServer'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'SocketServer.StreamRequestHandler': {'bases': ['SocketServer.BaseRequestHandler'],
                                                   'constructor': [],
                                                   'docstring': 'Define self.rfile and self.wfile for stream sockets.',
                                                   'methods': [('setup', [], ''),
                                                               ('finish', [], '')],
                                                   'properties': ['rbufsize',
                                                                  'wbufsize',
                                                                  'connection',
                                                                  'rfile',
                                                                  'wfile']},
             'SocketServer.TCPServer': {'bases': ['SocketServer.BaseServer'],
                                        'constructor': ['server_address', 'RequestHandlerClass'],
                                        'docstring': "Base class for various socket-based server classes.\n\n    Defaults to synchronous IP stream (i.e., TCP).\n\n    Methods for the caller:\n\n    - __init__(server_address, RequestHandlerClass)\n    - serve_forever()\n    - handle_request()  # if you don't use serve_forever()\n    - fileno() -> int   # for select()\n\n    Methods that may be overridden:\n\n    - server_bind()\n    - server_activate()\n    - get_request() -> request, client_address\n    - verify_request(request, client_address)\n    - process_request(request, client_address)\n    - close_request(request)\n    - handle_error()\n\n    Methods for derived classes:\n\n    - finish_request(request, client_address)\n\n    Class variables that may be overridden by derived classes or\n    instances:\n\n    - address_family\n    - socket_type\n    - request_queue_size (only for stream sockets)\n    - allow_reuse_address\n\n    Instance variables:\n\n    - server_address\n    - RequestHandlerClass\n    - socket\n\n    ",
                                        'methods': [('server_bind',
                                                     [],
                                                     'Called by constructor to bind the socket.\n\n        May be overridden.\n\n        '),
                                                    ('server_activate',
                                                     [],
                                                     'Called by constructor to activate the server.\n\n        May be overridden.\n\n        '),
                                                    ('server_close',
                                                     [],
                                                     'Called to clean-up the server.\n\n        May be overridden.\n\n        '),
                                                    ('fileno',
                                                     [],
                                                     'Return socket file number.\n\n        Interface required by select().\n\n        '),
                                                    ('get_request',
                                                     [],
                                                     'Get the request and client address from the socket.\n\n        May be overridden.\n\n        '),
                                                    ('close_request',
                                                     ['request'],
                                                     'Called to clean up an individual request.')],
                                        'properties': ['address_family',
                                                       'socket_type',
                                                       'request_queue_size',
                                                       'allow_reuse_address',
                                                       'socket',
                                                       'server_address']},
             'SocketServer.ThreadingMixIn': {'bases': [],
                                             'constructor': [],
                                             'docstring': 'Mix-in class to handle each request in a new thread.',
                                             'methods': [('process_request_thread',
                                                          ['request', 'client_address'],
                                                          'Same as in BaseServer but as a thread.\n\n        In addition, exception handling is done here.\n\n        '),
                                                         ('process_request',
                                                          ['request', 'client_address'],
                                                          'Start a new thread to process the request.')],
                                             'properties': ['daemon_threads']},
             'SocketServer.ThreadingTCPServer': {'bases': ['SocketServer.ThreadingMixIn',
                                                           'SocketServer.TCPServer'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'SocketServer.ThreadingUDPServer': {'bases': ['SocketServer.ThreadingMixIn',
                                                           'SocketServer.UDPServer'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'SocketServer.ThreadingUnixDatagramServer': {'bases': ['SocketServer.ThreadingMixIn',
                                                                    'SocketServer.UnixDatagramServer'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': []},
             'SocketServer.ThreadingUnixStreamServer': {'bases': ['SocketServer.ThreadingMixIn',
                                                                  'SocketServer.UnixStreamServer'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': []},
             'SocketServer.UDPServer': {'bases': ['SocketServer.TCPServer'],
                                        'constructor': [],
                                        'docstring': 'UDP server class.',
                                        'methods': [('get_request', [], ''),
                                                    ('server_activate', [], ''),
                                                    ('close_request', ['request'], '')],
                                        'properties': ['allow_reuse_address',
                                                       'socket_type',
                                                       'max_packet_size']},
             'SocketServer.UnixDatagramServer': {'bases': ['SocketServer.UDPServer'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['address_family']},
             'SocketServer.UnixStreamServer': {'bases': ['SocketServer.TCPServer'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': ['address_family']},
             'StringIO.StringIO': {'bases': [],
                                   'constructor': ["buf=''"],
                                   'docstring': 'class StringIO([buffer])\n\n    When a StringIO object is created, it can be initialized to an existing\n    string by passing the string to the constructor. If no string is given,\n    the StringIO will start empty.\n\n    The StringIO object can accept either Unicode or 8-bit strings, but\n    mixing the two may take some care. If both are used, 8-bit strings that\n    cannot be interpreted as 7-bit ASCII (that use the 8th bit) will cause\n    a UnicodeError to be raised when getvalue() is called.\n    ',
                                   'methods': [('__iter__', [], ''),
                                               ('next',
                                                [],
                                                'A file object is its own iterator, for example iter(f) returns f\n        (unless f is closed). When a file is used as an iterator, typically\n        in a for loop (for example, for line in f: print line), the next()\n        method is called repeatedly. This method returns the next input line,\n        or raises StopIteration when EOF is hit.\n        '),
                                               ('close',
                                                [],
                                                'Free the memory buffer.\n        '),
                                               ('isatty',
                                                [],
                                                'Returns False because StringIO objects are not connected to a\n        tty-like device.\n        '),
                                               ('seek',
                                                ['pos', 'mode=0'],
                                                "Set the file's current position.\n\n        The mode argument is optional and defaults to 0 (absolute file\n        positioning); other values are 1 (seek relative to the current\n        position) and 2 (seek relative to the file's end).\n\n        There is no return value.\n        "),
                                               ('tell',
                                                [],
                                                "Return the file's current position."),
                                               ('read',
                                                ['n=-1'],
                                                'Read at most size bytes from the file\n        (less if the read hits EOF before obtaining size bytes).\n\n        If the size argument is negative or omitted, read all data until EOF\n        is reached. The bytes are returned as a string object. An empty\n        string is returned when EOF is encountered immediately.\n        '),
                                               ('readline',
                                                ['length=None'],
                                                "Read one entire line from the file.\n\n        A trailing newline character is kept in the string (but may be absent\n        when a file ends with an incomplete line). If the size argument is\n        present and non-negative, it is a maximum byte count (including the\n        trailing newline) and an incomplete line may be returned.\n\n        An empty string is returned only when EOF is encountered immediately.\n\n        Note: Unlike stdio's fgets(), the returned string contains null\n        characters ('\\0') if they occurred in the input.\n        "),
                                               ('readlines',
                                                ['sizehint=0'],
                                                'Read until EOF using readline() and return a list containing the\n        lines thus read.\n\n        If the optional sizehint argument is present, instead of reading up\n        to EOF, whole lines totalling approximately sizehint bytes (or more\n        to accommodate a final whole line).\n        '),
                                               ('truncate',
                                                ['size=None'],
                                                "Truncate the file's size.\n\n        If the optional size argument is present, the file is truncated to\n        (at most) that size. The size defaults to the current position.\n        The current file position is not changed unless the position\n        is beyond the new file size.\n\n        If the specified size exceeds the file's current size, the\n        file remains unchanged.\n        "),
                                               ('write',
                                                ['s'],
                                                'Write a string to the file.\n\n        There is no return value.\n        '),
                                               ('writelines',
                                                ['iterable'],
                                                'Write a sequence of strings to the file. The sequence can be any\n        iterable object producing strings, typically a list of strings. There\n        is no return value.\n\n        (The name is intended to match readlines(); writelines() does not add\n        line separators.)\n        '),
                                               ('flush',
                                                [],
                                                'Flush the internal buffer\n        '),
                                               ('getvalue',
                                                [],
                                                '\n        Retrieve the entire contents of the "file" at any time before\n        the StringIO object\'s close() method is called.\n\n        The StringIO object can accept either Unicode or 8-bit strings,\n        but mixing the two may take some care. If both are used, 8-bit\n        strings that cannot be interpreted as 7-bit ASCII (that use the\n        8th bit) will cause a UnicodeError to be raised when getvalue()\n        is called.\n        ')],
                                   'properties': ['buf',
                                                  'len',
                                                  'buflist',
                                                  'pos',
                                                  'closed',
                                                  'softspace']},
             'Tix.Balloon': {'bases': ['Tix.TixWidget'],
                             'constructor': ['master=None', 'cnf={}', '**kw'],
                             'docstring': 'Balloon help widget.\n\n    Subwidget       Class\n    ---------       -----\n    label           Label\n    message         Message',
                             'methods': [('bind_widget',
                                          ['widget', 'cnf={}', '**kw'],
                                          'Bind balloon widget to another.\n        One balloon widget may be bound to several widgets at the same time'),
                                         ('unbind_widget', ['widget'], '')],
                             'properties': []},
             'Tix.ButtonBox': {'bases': ['Tix.TixWidget'],
                               'constructor': ['master=None', 'cnf={}', '**kw'],
                               'docstring': 'ButtonBox - A container for pushbuttons.\n    Subwidgets are the buttons added with the add method.\n    ',
                               'methods': [('add',
                                            ['name', 'cnf={}', '**kw'],
                                            'Add a button with given name to box.'),
                                           ('invoke', ['name'], '')],
                               'properties': []},
             'Tix.CObjView': {'bases': ['Tix.TixWidget'],
                              'constructor': [],
                              'docstring': 'This file implements the Canvas Object View widget. This is a base\n    class of IconView. It implements automatic placement/adjustment of the\n    scrollbars according to the canvas objects inside the canvas subwidget.\n    The scrollbars are adjusted so that the canvas is just large enough\n    to see all the objects.\n    ',
                              'methods': [],
                              'properties': []},
             'Tix.CheckList': {'bases': ['Tix.TixWidget'],
                               'constructor': ['master=None', 'cnf={}', '**kw'],
                               'docstring': 'The CheckList widget\n    displays a list of items to be selected by the user. CheckList acts\n    similarly to the Tk checkbutton or radiobutton widgets, except it is\n    capable of handling many more items than checkbuttons or radiobuttons.\n    ',
                               'methods': [('autosetmode',
                                            [],
                                            'This command calls the setmode method for all the entries in this\n     Tree widget: if an entry has no child entries, its mode is set to\n     none. Otherwise, if the entry has any hidden child entries, its mode is\n     set to open; otherwise its mode is set to close.'),
                                           ('close',
                                            ['entrypath'],
                                            'Close the entry given by entryPath if its mode is close.'),
                                           ('getmode',
                                            ['entrypath'],
                                            'Returns the current mode of the entry given by entryPath.'),
                                           ('open',
                                            ['entrypath'],
                                            'Open the entry given by entryPath if its mode is open.'),
                                           ('getselection',
                                            ["mode='on'"],
                                            'Returns a list of items whose status matches status. If status is\n     not specified, the list of items in the "on" status will be returned.\n     Mode can be on, off, default'),
                                           ('getstatus',
                                            ['entrypath'],
                                            'Returns the current status of entryPath.'),
                                           ('setstatus',
                                            ['entrypath', "mode='on'"],
                                            'Sets the status of entryPath to be status. A bitmap will be\n     displayed next to the entry its status is on, off or default.')],
                               'properties': []},
             'Tix.ComboBox': {'bases': ['Tix.TixWidget'],
                              'constructor': ['master=None', 'cnf={}', '**kw'],
                              'docstring': 'ComboBox - an Entry field with a dropdown menu. The user can select a\n    choice by either typing in the entry subwdget or selecting from the\n    listbox subwidget.\n\n    Subwidget       Class\n    ---------       -----\n    entry       Entry\n    arrow       Button\n    slistbox    ScrolledListBox\n    tick        Button\n    cross       Button : present if created with the fancy option',
                              'methods': [('add_history', ['str'], ''),
                                          ('append_history', ['str'], ''),
                                          ('insert', ['index', 'str'], ''),
                                          ('pick', ['index'], '')],
                              'properties': []},
             'Tix.Control': {'bases': ['Tix.TixWidget'],
                             'constructor': ['master=None', 'cnf={}', '**kw'],
                             'docstring': 'Control - An entry field with value change arrows.  The user can\n    adjust the value by pressing the two arrow buttons or by entering\n    the value directly into the entry. The new value will be checked\n    against the user-defined upper and lower limits.\n\n    Subwidget       Class\n    ---------       -----\n    incr       Button\n    decr       Button\n    entry       Entry\n    label       Label',
                             'methods': [('decrement', [], ''),
                                         ('increment', [], ''),
                                         ('invoke', [], ''),
                                         ('update', [], '')],
                             'properties': []},
             'Tix.DialogShell': {'bases': ['Tix.TixWidget'],
                                 'constructor': ['master=None', 'cnf={}', '**kw'],
                                 'docstring': 'Toplevel window, with popup popdown and center methods.\n    It tells the window manager that it is a dialog window and should be\n    treated specially. The exact treatment depends on the treatment of\n    the window manager.\n\n    Subwidgets - None',
                                 'methods': [('popdown', [], ''),
                                             ('popup', [], ''),
                                             ('center', [], '')],
                                 'properties': []},
             'Tix.DirList': {'bases': ['Tix.TixWidget'],
                             'constructor': ['master', 'cnf={}', '**kw'],
                             'docstring': 'DirList - displays a list view of a directory, its previous\n    directories and its sub-directories. The user can choose one of\n    the directories displayed in the list or change to another directory.\n\n    Subwidget       Class\n    ---------       -----\n    hlist       HList\n    hsb              Scrollbar\n    vsb              Scrollbar',
                             'methods': [('chdir', ['dir'], '')],
                             'properties': []},
             'Tix.DirSelectBox': {'bases': ['Tix.TixWidget'],
                                  'constructor': ['master', 'cnf={}', '**kw'],
                                  'docstring': 'DirSelectBox - Motif style file select box.\n    It is generally used for\n    the user to choose a file. FileSelectBox stores the files mostly\n    recently selected into a ComboBox widget so that they can be quickly\n    selected again.\n\n    Subwidget       Class\n    ---------       -----\n    selection       ComboBox\n    filter          ComboBox\n    dirlist         ScrolledListBox\n    filelist        ScrolledListBox',
                                  'methods': [],
                                  'properties': []},
             'Tix.DirSelectDialog': {'bases': ['Tix.TixWidget'],
                                     'constructor': ['master', 'cnf={}', '**kw'],
                                     'docstring': 'The DirSelectDialog widget presents the directories in the file\n    system in a dialog window. The user can use this dialog window to\n    navigate through the file system to select the desired directory.\n\n    Subwidgets       Class\n    ----------       -----\n    dirbox       DirSelectDialog',
                                     'methods': [('popup', [], ''), ('popdown', [], '')],
                                     'properties': []},
             'Tix.DirTree': {'bases': ['Tix.TixWidget'],
                             'constructor': ['master', 'cnf={}', '**kw'],
                             'docstring': 'DirTree - Directory Listing in a hierarchical view.\n    Displays a tree view of a directory, its previous directories and its\n    sub-directories. The user can choose one of the directories displayed\n    in the list or change to another directory.\n\n    Subwidget       Class\n    ---------       -----\n    hlist           HList\n    hsb             Scrollbar\n    vsb             Scrollbar',
                             'methods': [('chdir', ['dir'], '')],
                             'properties': []},
             'Tix.DisplayStyle': {'bases': [],
                                  'constructor': ['itemtype', 'cnf={}', '**kw'],
                                  'docstring': 'DisplayStyle - handle configuration options shared by\n    (multiple) Display Items',
                                  'methods': [('__str__', [], ''),
                                              ('_options', ['cnf', 'kw'], ''),
                                              ('delete', [], ''),
                                              ('__setitem__', ['key', 'value'], ''),
                                              ('config', ['cnf={}', '**kw'], ''),
                                              ('__getitem__', ['key'], '')],
                                  'properties': ['tk', 'stylename']},
             'Tix.ExFileSelectBox': {'bases': ['Tix.TixWidget'],
                                     'constructor': ['master', 'cnf={}', '**kw'],
                                     'docstring': 'ExFileSelectBox - MS Windows style file select box.\n    It provides an convenient method for the user to select files.\n\n    Subwidget       Class\n    ---------       -----\n    cancel       Button\n    ok              Button\n    hidden       Checkbutton\n    types       ComboBox\n    dir              ComboBox\n    file       ComboBox\n    dirlist       ScrolledListBox\n    filelist       ScrolledListBox',
                                     'methods': [('filter', [], ''), ('invoke', [], '')],
                                     'properties': []},
             'Tix.ExFileSelectDialog': {'bases': ['Tix.TixWidget'],
                                        'constructor': ['master', 'cnf={}', '**kw'],
                                        'docstring': 'ExFileSelectDialog - MS Windows style file select dialog.\n    It provides an convenient method for the user to select files.\n\n    Subwidgets       Class\n    ----------       -----\n    fsbox       ExFileSelectBox',
                                        'methods': [('popup', [], ''), ('popdown', [], '')],
                                        'properties': []},
             'Tix.FileEntry': {'bases': ['Tix.TixWidget'],
                               'constructor': ['master', 'cnf={}', '**kw'],
                               'docstring': 'FileEntry - Entry field with button that invokes a FileSelectDialog.\n    The user can type in the filename manually. Alternatively, the user can\n    press the button widget that sits next to the entry, which will bring\n    up a file selection dialog.\n\n    Subwidgets       Class\n    ----------       -----\n    button       Button\n    entry       Entry',
                               'methods': [('invoke', [], ''), ('file_dialog', [], '')],
                               'properties': []},
             'Tix.FileSelectBox': {'bases': ['Tix.TixWidget'],
                                   'constructor': ['master', 'cnf={}', '**kw'],
                                   'docstring': 'ExFileSelectBox - Motif style file select box.\n    It is generally used for\n    the user to choose a file. FileSelectBox stores the files mostly\n    recently selected into a ComboBox widget so that they can be quickly\n    selected again.\n\n    Subwidget       Class\n    ---------       -----\n    selection       ComboBox\n    filter          ComboBox\n    dirlist         ScrolledListBox\n    filelist        ScrolledListBox',
                                   'methods': [('apply_filter', [], ''), ('invoke', [], '')],
                                   'properties': []},
             'Tix.FileSelectDialog': {'bases': ['Tix.TixWidget'],
                                      'constructor': ['master', 'cnf={}', '**kw'],
                                      'docstring': 'FileSelectDialog - Motif style file select dialog.\n\n    Subwidgets       Class\n    ----------       -----\n    btns       StdButtonBox\n    fsbox       FileSelectBox',
                                      'methods': [('popup', [], ''), ('popdown', [], '')],
                                      'properties': []},
             'Tix.Form': {'bases': [],
                          'constructor': [],
                          'docstring': 'The Tix Form geometry manager\n\n    Widgets can be arranged by specifying attachments to other widgets.\n    See Tix documentation for complete details',
                          'methods': [('config', ['cnf={}', '**kw'], ''),
                                      ('__setitem__', ['key', 'value'], ''),
                                      ('check', [], ''),
                                      ('forget', [], ''),
                                      ('grid', ['xsize=0', 'ysize=0'], ''),
                                      ('info', ['option=None'], ''),
                                      ('slaves', [], '')],
                          'properties': ['form']},
             'Tix.Grid': {'bases': ['Tix.TixWidget'],
                          'constructor': ['master=None', 'cnf={}', '**kw'],
                          'docstring': 'The Tix Grid command creates a new window  and makes it into a\n    tixGrid widget. Additional options, may be specified on the command\n    line or in the option database to configure aspects such as its cursor\n    and relief.\n\n    A Grid widget displays its contents in a two dimensional grid of cells.\n    Each cell may contain one Tix display item, which may be in text,\n    graphics or other formats. See the DisplayStyle class for more information\n    about Tix display items. Individual cells, or groups of cells, can be\n    formatted with a wide range of attributes, such as its color, relief and\n    border.\n\n    Subwidgets - None',
                          'methods': [('anchor_get',
                                       [],
                                       'Get the (x,y) coordinate of the current anchor cell'),
                                      ('delete_row',
                                       ['from_', 'to=None'],
                                       'Delete rows between from_ and to inclusive.\n        If to is not provided,  delete only row at from_'),
                                      ('delete_column',
                                       ['from_', 'to=None'],
                                       'Delete columns between from_ and to inclusive.\n        If to is not provided,  delete only column at from_'),
                                      ('entrycget',
                                       ['x', 'y', 'option'],
                                       'Get the option value for cell at (x,y)'),
                                      ('entryconfigure', ['x', 'y', '**kw'], ''),
                                      ('info_exists',
                                       ['x', 'y'],
                                       'Return True if display item exists at (x,y)'),
                                      ('info_bbox', ['x', 'y'], ''),
                                      ('nearest',
                                       ['x', 'y'],
                                       'Return coordinate of cell nearest pixel coordinate (x,y)'),
                                      ('set', ['x', 'y', 'itemtype=None', '**kw'], ''),
                                      ('xview', [], ''),
                                      ('xview_moveto', ['fraction'], ''),
                                      ('xview_scroll',
                                       ['count', "what='units'"],
                                       'Scroll right (count>0) or left <count> of units|pages'),
                                      ('yview', [], ''),
                                      ('yview_moveto', ['fraction'], ''),
                                      ('yview_scroll',
                                       ['count', "what='units'"],
                                       'Scroll down (count>0) or up <count> of units|pages')],
                          'properties': ['cnf']},
             'Tix.HList': {'bases': ['Tix.TixWidget'],
                           'constructor': ['master=None', 'cnf={}', '**kw'],
                           'docstring': 'HList - Hierarchy display  widget can be used to display any data\n    that have a hierarchical structure, for example, file system directory\n    trees. The list entries are indented and connected by branch lines\n    according to their places in the hierachy.\n\n    Subwidgets - None',
                           'methods': [('add', ['entry', 'cnf={}', '**kw'], ''),
                                       ('add_child', ['parent=None', 'cnf={}', '**kw'], ''),
                                       ('anchor_set', ['entry'], ''),
                                       ('anchor_clear', [], ''),
                                       ('column_width',
                                        ['col=0', 'width=None', 'chars=None'],
                                        ''),
                                       ('delete_all', [], ''),
                                       ('delete_entry', ['entry'], ''),
                                       ('delete_offsprings', ['entry'], ''),
                                       ('delete_siblings', ['entry'], ''),
                                       ('dragsite_set', ['index'], ''),
                                       ('dragsite_clear', [], ''),
                                       ('dropsite_set', ['index'], ''),
                                       ('dropsite_clear', [], ''),
                                       ('header_create', ['col', 'cnf={}', '**kw'], ''),
                                       ('header_configure', ['col', 'cnf={}', '**kw'], ''),
                                       ('header_cget', ['col', 'opt'], ''),
                                       ('header_exists', ['col'], ''),
                                       ('header_delete', ['col'], ''),
                                       ('header_size', ['col'], ''),
                                       ('hide_entry', ['entry'], ''),
                                       ('indicator_create', ['entry', 'cnf={}', '**kw'], ''),
                                       ('indicator_configure', ['entry', 'cnf={}', '**kw'], ''),
                                       ('indicator_cget', ['entry', 'opt'], ''),
                                       ('indicator_exists', ['entry'], ''),
                                       ('indicator_delete', ['entry'], ''),
                                       ('indicator_size', ['entry'], ''),
                                       ('info_anchor', [], ''),
                                       ('info_children', ['entry=None'], ''),
                                       ('info_data', ['entry'], ''),
                                       ('info_exists', ['entry'], ''),
                                       ('info_hidden', ['entry'], ''),
                                       ('info_next', ['entry'], ''),
                                       ('info_parent', ['entry'], ''),
                                       ('info_prev', ['entry'], ''),
                                       ('info_selection', [], ''),
                                       ('item_cget', ['entry', 'col', 'opt'], ''),
                                       ('item_configure',
                                        ['entry', 'col', 'cnf={}', '**kw'],
                                        ''),
                                       ('item_create', ['entry', 'col', 'cnf={}', '**kw'], ''),
                                       ('item_exists', ['entry', 'col'], ''),
                                       ('item_delete', ['entry', 'col'], ''),
                                       ('entrycget', ['entry', 'opt'], ''),
                                       ('entryconfigure', ['entry', 'cnf={}', '**kw'], ''),
                                       ('nearest', ['y'], ''),
                                       ('see', ['entry'], ''),
                                       ('selection_clear', ['cnf={}', '**kw'], ''),
                                       ('selection_includes', ['entry'], ''),
                                       ('selection_set', ['first', 'last=None'], ''),
                                       ('show_entry', ['entry'], ''),
                                       ('xview', ['*args'], ''),
                                       ('yview', ['*args'], '')],
                           'properties': []},
             'Tix.InputOnly': {'bases': ['Tix.TixWidget'],
                               'constructor': ['master=None', 'cnf={}', '**kw'],
                               'docstring': 'InputOnly - Invisible widget. Unix only.\n\n    Subwidgets - None',
                               'methods': [],
                               'properties': []},
             'Tix.LabelEntry': {'bases': ['Tix.TixWidget'],
                                'constructor': ['master=None', 'cnf={}', '**kw'],
                                'docstring': "LabelEntry - Entry field with label. Packages an entry widget\n    and a label into one mega widget. It can beused be used to simplify\n    the creation of ``entry-form'' type of interface.\n\n    Subwidgets       Class\n    ----------       -----\n    label       Label\n    entry       Entry",
                                'methods': [],
                                'properties': []},
             'Tix.LabelFrame': {'bases': ['Tix.TixWidget'],
                                'constructor': ['master=None', 'cnf={}', '**kw'],
                                'docstring': 'LabelFrame - Labelled Frame container. Packages a frame widget\n    and a label into one mega widget. To create widgets inside a\n    LabelFrame widget, one creates the new widgets relative to the\n    frame subwidget and manage them inside the frame subwidget.\n\n    Subwidgets       Class\n    ----------       -----\n    label       Label\n    frame       Frame',
                                'methods': [],
                                'properties': []},
             'Tix.ListNoteBook': {'bases': ['Tix.TixWidget'],
                                  'constructor': ['master', 'cnf={}', '**kw'],
                                  'docstring': 'A ListNoteBook widget is very similar to the TixNoteBook widget:\n    it can be used to display many windows in a limited space using a\n    notebook metaphor. The notebook is divided into a stack of pages\n    (windows). At one time only one of these pages can be shown.\n    The user can navigate through these pages by\n    choosing the name of the desired page in the hlist subwidget.',
                                  'methods': [('add', ['name', 'cnf={}', '**kw'], ''),
                                              ('page', ['name'], ''),
                                              ('pages', [], ''),
                                              ('raise_page', ['name'], '')],
                                  'properties': []},
             'Tix.Meter': {'bases': ['Tix.TixWidget'],
                           'constructor': ['master=None', 'cnf={}', '**kw'],
                           'docstring': 'The Meter widget can be used to show the progress of a background\n    job which may take a long time to execute.\n    ',
                           'methods': [],
                           'properties': []},
             'Tix.NoteBook': {'bases': ['Tix.TixWidget'],
                              'constructor': ['master=None', 'cnf={}', '**kw'],
                              'docstring': 'NoteBook - Multi-page container widget (tabbed notebook metaphor).\n\n    Subwidgets       Class\n    ----------       -----\n    nbframe       NoteBookFrame\n    <pages>       page widgets added dynamically with the add method',
                              'methods': [('add', ['name', 'cnf={}', '**kw'], ''),
                                          ('delete', ['name'], ''),
                                          ('page', ['name'], ''),
                                          ('pages', [], ''),
                                          ('raise_page', ['name'], ''),
                                          ('raised', [], '')],
                              'properties': []},
             'Tix.NoteBookFrame': {'bases': ['Tix.TixWidget'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': []},
             'Tix.OptionMenu': {'bases': ['Tix.TixWidget'],
                                'constructor': ['master', 'cnf={}', '**kw'],
                                'docstring': 'OptionMenu - creates a menu button of options.\n\n    Subwidget       Class\n    ---------       -----\n    menubutton      Menubutton\n    menu            Menu',
                                'methods': [('add_command', ['name', 'cnf={}', '**kw'], ''),
                                            ('add_separator', ['name', 'cnf={}', '**kw'], ''),
                                            ('delete', ['name'], ''),
                                            ('disable', ['name'], ''),
                                            ('enable', ['name'], '')],
                                'properties': []},
             'Tix.PanedWindow': {'bases': ['Tix.TixWidget'],
                                 'constructor': ['master', 'cnf={}', '**kw'],
                                 'docstring': 'PanedWindow - Multi-pane container widget\n    allows the user to interactively manipulate the sizes of several\n    panes. The panes can be arranged either vertically or horizontally.The\n    user changes the sizes of the panes by dragging the resize handle\n    between two panes.\n\n    Subwidgets       Class\n    ----------       -----\n    <panes>       g/p widgets added dynamically with the add method.',
                                 'methods': [('add', ['name', 'cnf={}', '**kw'], ''),
                                             ('delete', ['name'], ''),
                                             ('forget', ['name'], ''),
                                             ('panecget', ['entry', 'opt'], ''),
                                             ('paneconfigure', ['entry', 'cnf={}', '**kw'], ''),
                                             ('panes', [], '')],
                                 'properties': []},
             'Tix.PopupMenu': {'bases': ['Tix.TixWidget'],
                               'constructor': ['master', 'cnf={}', '**kw'],
                               'docstring': 'PopupMenu widget can be used as a replacement of the tk_popup command.\n    The advantage of the Tix PopupMenu widget is it requires less application\n    code to manipulate.\n\n\n    Subwidgets       Class\n    ----------       -----\n    menubutton       Menubutton\n    menu       Menu',
                               'methods': [('bind_widget', ['widget'], ''),
                                           ('unbind_widget', ['widget'], ''),
                                           ('post_widget', ['widget', 'x', 'y'], '')],
                               'properties': []},
             'Tix.ResizeHandle': {'bases': ['Tix.TixWidget'],
                                  'constructor': ['master', 'cnf={}', '**kw'],
                                  'docstring': 'Internal widget to draw resize handles on Scrolled widgets.',
                                  'methods': [('attach_widget', ['widget'], ''),
                                              ('detach_widget', ['widget'], ''),
                                              ('hide', ['widget'], ''),
                                              ('show', ['widget'], '')],
                                  'properties': []},
             'Tix.ScrolledGrid': {'bases': ['Tix.Grid'],
                                  'constructor': ['master=None', 'cnf={}', '**kw'],
                                  'docstring': 'Scrolled Grid widgets',
                                  'methods': [],
                                  'properties': ['cnf']},
             'Tix.ScrolledHList': {'bases': ['Tix.TixWidget'],
                                   'constructor': ['master', 'cnf={}', '**kw'],
                                   'docstring': 'ScrolledHList - HList with automatic scrollbars.',
                                   'methods': [],
                                   'properties': []},
             'Tix.ScrolledListBox': {'bases': ['Tix.TixWidget'],
                                     'constructor': ['master', 'cnf={}', '**kw'],
                                     'docstring': 'ScrolledListBox - Listbox with automatic scrollbars.',
                                     'methods': [],
                                     'properties': []},
             'Tix.ScrolledTList': {'bases': ['Tix.TixWidget'],
                                   'constructor': ['master', 'cnf={}', '**kw'],
                                   'docstring': 'ScrolledTList - TList with automatic scrollbars.',
                                   'methods': [],
                                   'properties': []},
             'Tix.ScrolledText': {'bases': ['Tix.TixWidget'],
                                  'constructor': ['master', 'cnf={}', '**kw'],
                                  'docstring': 'ScrolledText - Text with automatic scrollbars.',
                                  'methods': [],
                                  'properties': []},
             'Tix.ScrolledWindow': {'bases': ['Tix.TixWidget'],
                                    'constructor': ['master', 'cnf={}', '**kw'],
                                    'docstring': 'ScrolledWindow - Window with automatic scrollbars.',
                                    'methods': [],
                                    'properties': []},
             'Tix.Select': {'bases': ['Tix.TixWidget'],
                            'constructor': ['master', 'cnf={}', '**kw'],
                            'docstring': 'Select - Container of button subwidgets. It can be used to provide\n    radio-box or check-box style of selection options for the user.\n\n    Subwidgets are buttons added dynamically using the add method.',
                            'methods': [('add', ['name', 'cnf={}', '**kw'], ''),
                                        ('invoke', ['name'], '')],
                            'properties': []},
             'Tix.Shell': {'bases': ['Tix.TixWidget'],
                           'constructor': ['master=None', 'cnf={}', '**kw'],
                           'docstring': 'Toplevel window.\n\n    Subwidgets - None',
                           'methods': [],
                           'properties': []},
             'Tix.StdButtonBox': {'bases': ['Tix.TixWidget'],
                                  'constructor': ['master=None', 'cnf={}', '**kw'],
                                  'docstring': 'StdButtonBox - Standard Button Box (OK, Apply, Cancel and Help) ',
                                  'methods': [('invoke', ['name'], '')],
                                  'properties': []},
             'Tix.TList': {'bases': ['Tix.TixWidget'],
                           'constructor': ['master=None', 'cnf={}', '**kw'],
                           'docstring': 'TList - Hierarchy display widget which can be\n    used to display data in a tabular format. The list entries of a TList\n    widget are similar to the entries in the Tk listbox widget. The main\n    differences are (1) the TList widget can display the list entries in a\n    two dimensional format and (2) you can use graphical images as well as\n    multiple colors and fonts for the list entries.\n\n    Subwidgets - None',
                           'methods': [('active_set', ['index'], ''),
                                       ('active_clear', [], ''),
                                       ('anchor_set', ['index'], ''),
                                       ('anchor_clear', [], ''),
                                       ('delete', ['from_', 'to=None'], ''),
                                       ('dragsite_set', ['index'], ''),
                                       ('dragsite_clear', [], ''),
                                       ('dropsite_set', ['index'], ''),
                                       ('dropsite_clear', [], ''),
                                       ('insert', ['index', 'cnf={}', '**kw'], ''),
                                       ('info_active', [], ''),
                                       ('info_anchor', [], ''),
                                       ('info_down', ['index'], ''),
                                       ('info_left', ['index'], ''),
                                       ('info_right', ['index'], ''),
                                       ('info_selection', [], ''),
                                       ('info_size', [], ''),
                                       ('info_up', ['index'], ''),
                                       ('nearest', ['x', 'y'], ''),
                                       ('see', ['index'], ''),
                                       ('selection_clear', ['cnf={}', '**kw'], ''),
                                       ('selection_includes', ['index'], ''),
                                       ('selection_set', ['first', 'last=None'], ''),
                                       ('xview', ['*args'], ''),
                                       ('yview', ['*args'], '')],
                           'properties': []},
             'Tix.TixSubWidget': {'bases': ['Tix.TixWidget'],
                                  'constructor': ['master',
                                                  'name',
                                                  'destroy_physically=1',
                                                  'check_intermediate=1'],
                                  'docstring': 'Subwidget class.\n\n    This is used to mirror child widgets automatically created\n    by Tix/Tk as part of a mega-widget in Python (which is not informed\n    of this)',
                                  'methods': [('destroy', [], '')],
                                  'properties': ['destroy_physically']},
             'Tix.TixWidget': {'bases': ['Tkinter.Widget'],
                               'constructor': ['master=None',
                                               'widgetName=None',
                                               'static_options=None',
                                               'cnf={}',
                                               'kw={}'],
                               'docstring': "A TixWidget class is used to package all (or most) Tix widgets.\n\n    Widget initialization is extended in two ways:\n       1) It is possible to give a list of options which must be part of\n       the creation command (so called Tix 'static' options). These cannot be\n       given as a 'config' command later.\n       2) It is possible to give the name of an existing TK widget. These are\n       child widgets created automatically by a Tix mega-widget. The Tk call\n       to create these widgets is therefore bypassed in TixWidget.__init__\n\n    Both options are for use by subclasses only.\n    ",
                               'methods': [('__getattr__', ['name'], ''),
                                           ('set_silent',
                                            ['value'],
                                            'Set a variable without calling its action routine'),
                                           ('subwidget',
                                            ['name'],
                                            'Return the named subwidget (which must have been created by\n        the sub-class).'),
                                           ('subwidgets_all', [], 'Return all subwidgets.'),
                                           ('_subwidget_name',
                                            ['name'],
                                            'Get a subwidget name (returns a String, not a Widget !)'),
                                           ('_subwidget_names',
                                            [],
                                            'Return the name of all subwidgets.'),
                                           ('config_all',
                                            ['option', 'value'],
                                            'Set configuration options for all subwidgets (and self).'),
                                           ('image_create',
                                            ['imgtype', 'cnf={}', 'master=None', '**kw'],
                                            ''),
                                           ('image_delete', ['imgname'], '')],
                               'properties': ['widgetName', 'subwidget_list']},
             'Tix.Tk': {'bases': ['Tkinter.Tk', 'Tix.tixCommand'],
                        'constructor': ['screenName=None', 'baseName=None', "className='Tix'"],
                        'docstring': 'Toplevel widget of Tix which represents mostly the main window\n    of an application. It has an associated Tcl interpreter.',
                        'methods': [('destroy', [], '')],
                        'properties': []},
             'Tix.Tree': {'bases': ['Tix.TixWidget'],
                          'constructor': ['master=None', 'cnf={}', '**kw'],
                          'docstring': 'Tree - The tixTree widget can be used to display hierachical\n    data in a tree form. The user can adjust\n    the view of the tree by opening or closing parts of the tree.',
                          'methods': [('autosetmode',
                                       [],
                                       'This command calls the setmode method for all the entries in this\n     Tree widget: if an entry has no child entries, its mode is set to\n     none. Otherwise, if the entry has any hidden child entries, its mode is\n     set to open; otherwise its mode is set to close.'),
                                      ('close',
                                       ['entrypath'],
                                       'Close the entry given by entryPath if its mode is close.'),
                                      ('getmode',
                                       ['entrypath'],
                                       'Returns the current mode of the entry given by entryPath.'),
                                      ('open',
                                       ['entrypath'],
                                       'Open the entry given by entryPath if its mode is open.'),
                                      ('setmode',
                                       ['entrypath', "mode='none'"],
                                       'This command is used to indicate whether the entry given by\n     entryPath has children entries and whether the children are visible. mode\n     must be one of open, close or none. If mode is set to open, a (+)\n     indicator is drawn next the the entry. If mode is set to close, a (-)\n     indicator is drawn next the the entry. If mode is set to none, no\n     indicators will be drawn for this entry. The default mode is none. The\n     open mode indicates the entry has hidden children and this entry can be\n     opened by the user. The close mode indicates that all the children of the\n     entry are now visible and the entry can be closed by the user.')],
                          'properties': []},
             'Tix._dummyButton': {'bases': ['Tix.Button', 'Tix.TixSubWidget'],
                                  'constructor': ['master', 'name', 'destroy_physically=1'],
                                  'docstring': '',
                                  'methods': [],
                                  'properties': []},
             'Tix._dummyCheckbutton': {'bases': ['Tix.Checkbutton', 'Tix.TixSubWidget'],
                                       'constructor': ['master', 'name', 'destroy_physically=1'],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': []},
             'Tix._dummyComboBox': {'bases': ['Tix.ComboBox', 'Tix.TixSubWidget'],
                                    'constructor': ['master', 'name', 'destroy_physically=1'],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'Tix._dummyDirList': {'bases': ['Tix.DirList', 'Tix.TixSubWidget'],
                                   'constructor': ['master', 'name', 'destroy_physically=1'],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': []},
             'Tix._dummyDirSelectBox': {'bases': ['Tix.DirSelectBox', 'Tix.TixSubWidget'],
                                        'constructor': ['master',
                                                        'name',
                                                        'destroy_physically=1'],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': []},
             'Tix._dummyEntry': {'bases': ['Tix.Entry', 'Tix.TixSubWidget'],
                                 'constructor': ['master', 'name', 'destroy_physically=1'],
                                 'docstring': '',
                                 'methods': [],
                                 'properties': []},
             'Tix._dummyExFileSelectBox': {'bases': ['Tix.ExFileSelectBox', 'Tix.TixSubWidget'],
                                           'constructor': ['master',
                                                           'name',
                                                           'destroy_physically=1'],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': []},
             'Tix._dummyFileComboBox': {'bases': ['Tix.ComboBox', 'Tix.TixSubWidget'],
                                        'constructor': ['master',
                                                        'name',
                                                        'destroy_physically=1'],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': []},
             'Tix._dummyFileSelectBox': {'bases': ['Tix.FileSelectBox', 'Tix.TixSubWidget'],
                                         'constructor': ['master',
                                                         'name',
                                                         'destroy_physically=1'],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': []},
             'Tix._dummyFrame': {'bases': ['Tix.Frame', 'Tix.TixSubWidget'],
                                 'constructor': ['master', 'name', 'destroy_physically=1'],
                                 'docstring': '',
                                 'methods': [],
                                 'properties': []},
             'Tix._dummyHList': {'bases': ['Tix.HList', 'Tix.TixSubWidget'],
                                 'constructor': ['master', 'name', 'destroy_physically=1'],
                                 'docstring': '',
                                 'methods': [],
                                 'properties': []},
             'Tix._dummyLabel': {'bases': ['Tix.Label', 'Tix.TixSubWidget'],
                                 'constructor': ['master', 'name', 'destroy_physically=1'],
                                 'docstring': '',
                                 'methods': [],
                                 'properties': []},
             'Tix._dummyListbox': {'bases': ['Tix.Listbox', 'Tix.TixSubWidget'],
                                   'constructor': ['master', 'name', 'destroy_physically=1'],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': []},
             'Tix._dummyMenu': {'bases': ['Tix.Menu', 'Tix.TixSubWidget'],
                                'constructor': ['master', 'name', 'destroy_physically=1'],
                                'docstring': '',
                                'methods': [],
                                'properties': []},
             'Tix._dummyMenubutton': {'bases': ['Tix.Menubutton', 'Tix.TixSubWidget'],
                                      'constructor': ['master', 'name', 'destroy_physically=1'],
                                      'docstring': '',
                                      'methods': [],
                                      'properties': []},
             'Tix._dummyNoteBookFrame': {'bases': ['Tix.NoteBookFrame', 'Tix.TixSubWidget'],
                                         'constructor': ['master',
                                                         'name',
                                                         'destroy_physically=0'],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': []},
             'Tix._dummyPanedWindow': {'bases': ['Tix.PanedWindow', 'Tix.TixSubWidget'],
                                       'constructor': ['master', 'name', 'destroy_physically=1'],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': []},
             'Tix._dummyScrollbar': {'bases': ['Tix.Scrollbar', 'Tix.TixSubWidget'],
                                     'constructor': ['master', 'name', 'destroy_physically=1'],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': []},
             'Tix._dummyScrolledHList': {'bases': ['Tix.ScrolledHList', 'Tix.TixSubWidget'],
                                         'constructor': ['master',
                                                         'name',
                                                         'destroy_physically=1'],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': []},
             'Tix._dummyScrolledListBox': {'bases': ['Tix.ScrolledListBox', 'Tix.TixSubWidget'],
                                           'constructor': ['master',
                                                           'name',
                                                           'destroy_physically=1'],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': []},
             'Tix._dummyStdButtonBox': {'bases': ['Tix.StdButtonBox', 'Tix.TixSubWidget'],
                                        'constructor': ['master',
                                                        'name',
                                                        'destroy_physically=1'],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': []},
             'Tix._dummyTList': {'bases': ['Tix.TList', 'Tix.TixSubWidget'],
                                 'constructor': ['master', 'name', 'destroy_physically=1'],
                                 'docstring': '',
                                 'methods': [],
                                 'properties': []},
             'Tix._dummyText': {'bases': ['Tix.Text', 'Tix.TixSubWidget'],
                                'constructor': ['master', 'name', 'destroy_physically=1'],
                                'docstring': '',
                                'methods': [],
                                'properties': []},
             'Tix.tixCommand': {'bases': [],
                                'constructor': [],
                                'docstring': "The tix commands provide access to miscellaneous  elements\n    of  Tix's  internal state and the Tix application context.\n    Most of the information manipulated by these  commands pertains\n    to  the  application  as a whole, or to a screen or\n    display, rather than to a particular window.\n\n    This is a mixin class, assumed to be mixed to Tkinter.Tk\n    that supports the self.tk.call method.\n    ",
                                'methods': [('tix_addbitmapdir',
                                             ['directory'],
                                             'Tix maintains a list of directories under which\n        the  tix_getimage  and tix_getbitmap commands will\n        search for image files. The standard bitmap  directory\n        is $TIX_LIBRARY/bitmaps. The addbitmapdir command\n        adds directory into this list. By  using  this\n        command, the  image  files  of an applications can\n        also be located using the tix_getimage or tix_getbitmap\n        command.\n        '),
                                            ('tix_cget',
                                             ['option'],
                                             'Returns  the  current  value  of the configuration\n        option given by option. Option may be  any  of  the\n        options described in the CONFIGURATION OPTIONS section.\n        '),
                                            ('tix_configure',
                                             ['cnf=None', '**kw'],
                                             'Query or modify the configuration options of the Tix application\n        context. If no option is specified, returns a dictionary all of the\n        available options.  If option is specified with no value, then the\n        command returns a list describing the one named option (this list\n        will be identical to the corresponding sublist of the value\n        returned if no option is specified).  If one or more option-value\n        pairs are specified, then the command modifies the given option(s)\n        to have the given value(s); in this case the command returns an\n        empty string. Option may be any of the configuration options.\n        '),
                                            ('tix_filedialog',
                                             ['dlgclass=None'],
                                             'Returns the file selection dialog that may be shared among\n        different calls from this application.  This command will create a\n        file selection dialog widget when it is called the first time. This\n        dialog will be returned by all subsequent calls to tix_filedialog.\n        An optional dlgclass parameter can be passed to specified what type\n        of file selection dialog widget is desired. Possible options are\n        tix FileSelectDialog or tixExFileSelectDialog.\n        '),
                                            ('tix_getbitmap',
                                             ['name'],
                                             "Locates a bitmap file of the name name.xpm or name in one of the\n        bitmap directories (see the tix_addbitmapdir command above).  By\n        using tix_getbitmap, you can avoid hard coding the pathnames of the\n        bitmap files in your application. When successful, it returns the\n        complete pathname of the bitmap file, prefixed with the character\n        '@'.  The returned value can be used to configure the -bitmap\n        option of the TK and Tix widgets.\n        "),
                                            ('tix_getimage',
                                             ['name'],
                                             'Locates an image file of the name name.xpm, name.xbm or name.ppm\n        in one of the bitmap directories (see the addbitmapdir command\n        above). If more than one file with the same name (but different\n        extensions) exist, then the image type is chosen according to the\n        depth of the X display: xbm images are chosen on monochrome\n        displays and color images are chosen on color displays. By using\n        tix_ getimage, you can advoid hard coding the pathnames of the\n        image files in your application. When successful, this command\n        returns the name of the newly created image, which can be used to\n        configure the -image option of the Tk and Tix widgets.\n        '),
                                            ('tix_option_get',
                                             ['name'],
                                             'Gets  the options  manitained  by  the  Tix\n        scheme mechanism. Available options include:\n\n            active_bg       active_fg      bg\n            bold_font       dark1_bg       dark1_fg\n            dark2_bg        dark2_fg       disabled_fg\n            fg              fixed_font     font\n            inactive_bg     inactive_fg    input1_bg\n            input2_bg       italic_font    light1_bg\n            light1_fg       light2_bg      light2_fg\n            menu_font       output1_bg     output2_bg\n            select_bg       select_fg      selector\n            '),
                                            ('tix_resetoptions',
                                             ['newScheme', 'newFontSet', 'newScmPrio=None'],
                                             'Resets the scheme and fontset of the Tix application to\n        newScheme and newFontSet, respectively.  This affects only those\n        widgets created after this call. Therefore, it is best to call the\n        resetoptions command before the creation of any widgets in a Tix\n        application.\n\n        The optional parameter newScmPrio can be given to reset the\n        priority level of the Tk options set by the Tix schemes.\n\n        Because of the way Tk handles the X option database, after Tix has\n        been has imported and inited, it is not possible to reset the color\n        schemes and font sets using the tix config command.  Instead, the\n        tix_resetoptions command must be used.\n        ')],
                                'properties': []},
             'Tkdnd.DndHandler': {'bases': [],
                                  'constructor': ['source', 'event'],
                                  'docstring': '',
                                  'methods': [('__del__', [], ''),
                                              ('on_motion', ['event'], ''),
                                              ('on_release', ['event'], ''),
                                              ('cancel', ['event=None'], ''),
                                              ('finish', ['event', 'commit=0'], '')],
                                  'properties': ['root',
                                                 'source',
                                                 'target',
                                                 'initial_button',
                                                 'initial_widget',
                                                 'release_pattern',
                                                 'save_cursor']},
             'Tkdnd.Icon': {'bases': [],
                            'constructor': ['name'],
                            'docstring': '',
                            'methods': [('attach', ['canvas', 'x=10', 'y=10'], ''),
                                        ('detach', [], ''),
                                        ('press', ['event'], ''),
                                        ('move', ['event'], ''),
                                        ('putback', [], ''),
                                        ('where', ['canvas', 'event'], ''),
                                        ('dnd_end', ['target', 'event'], '')],
                            'properties': ['name',
                                           'canvas',
                                           'label',
                                           'id',
                                           'x_off',
                                           'y_off',
                                           'x_orig',
                                           'y_orig']},
             'Tkdnd.Tester': {'bases': [],
                              'constructor': ['root'],
                              'docstring': '',
                              'methods': [('dnd_accept', ['source', 'event'], ''),
                                          ('dnd_enter', ['source', 'event'], ''),
                                          ('dnd_motion', ['source', 'event'], ''),
                                          ('dnd_leave', ['source', 'event'], ''),
                                          ('dnd_commit', ['source', 'event'], '')],
                              'properties': ['top', 'canvas', 'dndid']},
             'Tkinter.BaseWidget': {'bases': ['Tkinter.Misc'],
                                    'constructor': ['master',
                                                    'widgetName',
                                                    'cnf={}',
                                                    'kw={}',
                                                    'extra=()'],
                                    'docstring': 'Internal class.',
                                    'methods': [('_setup',
                                                 ['master', 'cnf'],
                                                 'Internal function. Sets up information about children.'),
                                                ('destroy',
                                                 [],
                                                 'Destroy this and all descendants widgets.'),
                                                ('_do', ['name', 'args=()'], '')],
                                    'properties': ['master',
                                                   'tk',
                                                   '_name',
                                                   '_w',
                                                   'children',
                                                   'widgetName']},
             'Tkinter.BitmapImage': {'bases': ['Tkinter.Image'],
                                     'constructor': ['name=None',
                                                     'cnf={}',
                                                     'master=None',
                                                     '**kw'],
                                     'docstring': 'Widget which can display a bitmap.',
                                     'methods': [],
                                     'properties': []},
             'Tkinter.BooleanVar': {'bases': ['Tkinter.Variable'],
                                    'constructor': ['master=None', 'value=None', 'name=None'],
                                    'docstring': 'Value holder for boolean variables.',
                                    'methods': [('get',
                                                 [],
                                                 'Return the value of the variable as a bool.')],
                                    'properties': ['_default']},
             'Tkinter.Button': {'bases': ['Tkinter.Widget'],
                                'constructor': ['master=None', 'cnf={}', '**kw'],
                                'docstring': 'Button widget.',
                                'methods': [('tkButtonEnter', ['*dummy'], ''),
                                            ('tkButtonLeave', ['*dummy'], ''),
                                            ('tkButtonDown', ['*dummy'], ''),
                                            ('tkButtonUp', ['*dummy'], ''),
                                            ('tkButtonInvoke', ['*dummy'], ''),
                                            ('flash',
                                             [],
                                             "Flash the button.\n\n        This is accomplished by redisplaying\n        the button several times, alternating between active and\n        normal colors. At the end of the flash the button is left\n        in the same normal/active state as when the command was\n        invoked. This command is ignored if the button's state is\n        disabled.\n        "),
                                            ('invoke',
                                             [],
                                             "Invoke the command associated with the button.\n\n        The return value is the return value from the command,\n        or an empty string if there is no command associated with\n        the button. This command is ignored if the button's state\n        is disabled.\n        ")],
                                'properties': []},
             'Tkinter.CallWrapper': {'bases': [],
                                     'constructor': ['func', 'subst', 'widget'],
                                     'docstring': 'Internal class. Stores function to call when some user\n    defined Tcl function is called e.g. after an event occurred.',
                                     'methods': [('__call__',
                                                  ['*args'],
                                                  'Apply first function SUBST to arguments, than FUNC.')],
                                     'properties': ['func', 'subst', 'widget']},
             'Tkinter.Canvas': {'bases': ['Tkinter.Widget'],
                                'constructor': ['master=None', 'cnf={}', '**kw'],
                                'docstring': 'Canvas widget to display graphical elements like lines or text.',
                                'methods': [('addtag', ['*args'], 'Internal function.'),
                                            ('addtag_above',
                                             ['newtag', 'tagOrId'],
                                             'Add tag NEWTAG to all items above TAGORID.'),
                                            ('addtag_all',
                                             ['newtag'],
                                             'Add tag NEWTAG to all items.'),
                                            ('addtag_below',
                                             ['newtag', 'tagOrId'],
                                             'Add tag NEWTAG to all items below TAGORID.'),
                                            ('addtag_closest',
                                             ['newtag', 'x', 'y', 'halo=None', 'start=None'],
                                             'Add tag NEWTAG to item which is closest to pixel at X, Y.\n        If several match take the top-most.\n        All items closer than HALO are considered overlapping (all are\n        closests). If START is specified the next below this tag is taken.'),
                                            ('addtag_enclosed',
                                             ['newtag', 'x1', 'y1', 'x2', 'y2'],
                                             'Add tag NEWTAG to all items in the rectangle defined\n        by X1,Y1,X2,Y2.'),
                                            ('addtag_overlapping',
                                             ['newtag', 'x1', 'y1', 'x2', 'y2'],
                                             'Add tag NEWTAG to all items which overlap the rectangle\n        defined by X1,Y1,X2,Y2.'),
                                            ('addtag_withtag',
                                             ['newtag', 'tagOrId'],
                                             'Add tag NEWTAG to all items with TAGORID.'),
                                            ('bbox',
                                             ['*args'],
                                             'Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle\n        which encloses all items with tags specified as arguments.'),
                                            ('tag_unbind',
                                             ['tagOrId', 'sequence', 'funcid=None'],
                                             'Unbind for all items with TAGORID for event SEQUENCE  the\n        function identified with FUNCID.'),
                                            ('tag_bind',
                                             ['tagOrId',
                                              'sequence=None',
                                              'func=None',
                                              'add=None'],
                                             'Bind to all items with TAGORID at event SEQUENCE a call to function FUNC.\n\n        An additional boolean parameter ADD specifies whether FUNC will be\n        called additionally to the other bound function or whether it will\n        replace the previous function. See bind for the return value.'),
                                            ('canvasx',
                                             ['screenx', 'gridspacing=None'],
                                             'Return the canvas x coordinate of pixel position SCREENX rounded\n        to nearest multiple of GRIDSPACING units.'),
                                            ('canvasy',
                                             ['screeny', 'gridspacing=None'],
                                             'Return the canvas y coordinate of pixel position SCREENY rounded\n        to nearest multiple of GRIDSPACING units.'),
                                            ('coords',
                                             ['*args'],
                                             'Return a list of coordinates for the item given in ARGS.'),
                                            ('_create',
                                             ['itemType', 'args', 'kw'],
                                             'Internal function.'),
                                            ('create_arc',
                                             ['*args', '**kw'],
                                             'Create arc shaped region with coordinates x1,y1,x2,y2.'),
                                            ('create_bitmap',
                                             ['*args', '**kw'],
                                             'Create bitmap with coordinates x1,y1.'),
                                            ('create_image',
                                             ['*args', '**kw'],
                                             'Create image item with coordinates x1,y1.'),
                                            ('create_line',
                                             ['*args', '**kw'],
                                             'Create line with coordinates x1,y1,...,xn,yn.'),
                                            ('create_oval',
                                             ['*args', '**kw'],
                                             'Create oval with coordinates x1,y1,x2,y2.'),
                                            ('create_polygon',
                                             ['*args', '**kw'],
                                             'Create polygon with coordinates x1,y1,...,xn,yn.'),
                                            ('create_rectangle',
                                             ['*args', '**kw'],
                                             'Create rectangle with coordinates x1,y1,x2,y2.'),
                                            ('create_text',
                                             ['*args', '**kw'],
                                             'Create text with coordinates x1,y1.'),
                                            ('create_window',
                                             ['*args', '**kw'],
                                             'Create window with coordinates x1,y1,x2,y2.'),
                                            ('dchars',
                                             ['*args'],
                                             'Delete characters of text items identified by tag or id in ARGS (possibly\n        several times) from FIRST to LAST character (including).'),
                                            ('delete',
                                             ['*args'],
                                             'Delete items identified by all tag or ids contained in ARGS.'),
                                            ('dtag',
                                             ['*args'],
                                             'Delete tag or id given as last arguments in ARGS from items\n        identified by first argument in ARGS.'),
                                            ('find', ['*args'], 'Internal function.'),
                                            ('find_above',
                                             ['tagOrId'],
                                             'Return items above TAGORID.'),
                                            ('find_all', [], 'Return all items.'),
                                            ('find_below',
                                             ['tagOrId'],
                                             'Return all items below TAGORID.'),
                                            ('find_closest',
                                             ['x', 'y', 'halo=None', 'start=None'],
                                             'Return item which is closest to pixel at X, Y.\n        If several match take the top-most.\n        All items closer than HALO are considered overlapping (all are\n        closests). If START is specified the next below this tag is taken.'),
                                            ('find_enclosed',
                                             ['x1', 'y1', 'x2', 'y2'],
                                             'Return all items in rectangle defined\n        by X1,Y1,X2,Y2.'),
                                            ('find_overlapping',
                                             ['x1', 'y1', 'x2', 'y2'],
                                             'Return all items which overlap the rectangle\n        defined by X1,Y1,X2,Y2.'),
                                            ('find_withtag',
                                             ['tagOrId'],
                                             'Return all items with TAGORID.'),
                                            ('focus',
                                             ['*args'],
                                             'Set focus to the first item specified in ARGS.'),
                                            ('gettags',
                                             ['*args'],
                                             'Return tags associated with the first item specified in ARGS.'),
                                            ('icursor',
                                             ['*args'],
                                             'Set cursor at position POS in the item identified by TAGORID.\n        In ARGS TAGORID must be first.'),
                                            ('index',
                                             ['*args'],
                                             'Return position of cursor as integer in item specified in ARGS.'),
                                            ('insert',
                                             ['*args'],
                                             'Insert TEXT in item TAGORID at position POS. ARGS must\n        be TAGORID POS TEXT.'),
                                            ('itemcget',
                                             ['tagOrId', 'option'],
                                             'Return the resource value for an OPTION for item TAGORID.'),
                                            ('itemconfigure',
                                             ['tagOrId', 'cnf=None', '**kw'],
                                             'Configure resources of an item TAGORID.\n\n        The values for resources are specified as keyword\n        arguments. To get an overview about\n        the allowed keyword arguments call the method without arguments.\n        '),
                                            ('tag_lower',
                                             ['*args'],
                                             'Lower an item TAGORID given in ARGS\n        (optional below another item).'),
                                            ('move',
                                             ['*args'],
                                             'Move an item TAGORID given in ARGS.'),
                                            ('postscript',
                                             ['cnf={}', '**kw'],
                                             'Print the contents of the canvas to a postscript\n        file. Valid options: colormap, colormode, file, fontmap,\n        height, pageanchor, pageheight, pagewidth, pagex, pagey,\n        rotate, witdh, x, y.'),
                                            ('tag_raise',
                                             ['*args'],
                                             'Raise an item TAGORID given in ARGS\n        (optional above another item).'),
                                            ('scale',
                                             ['*args'],
                                             'Scale item TAGORID with XORIGIN, YORIGIN, XSCALE, YSCALE.'),
                                            ('scan_mark',
                                             ['x', 'y'],
                                             'Remember the current X, Y coordinates.'),
                                            ('scan_dragto',
                                             ['x', 'y', 'gain=10'],
                                             'Adjust the view of the canvas to GAIN times the\n        difference between X and Y and the coordinates given in\n        scan_mark.'),
                                            ('select_adjust',
                                             ['tagOrId', 'index'],
                                             'Adjust the end of the selection near the cursor of an item TAGORID to index.'),
                                            ('select_clear',
                                             [],
                                             'Clear the selection if it is in this widget.'),
                                            ('select_from',
                                             ['tagOrId', 'index'],
                                             'Set the fixed end of a selection in item TAGORID to INDEX.'),
                                            ('select_item',
                                             [],
                                             'Return the item which has the selection.'),
                                            ('select_to',
                                             ['tagOrId', 'index'],
                                             'Set the variable end of a selection in item TAGORID to INDEX.'),
                                            ('type',
                                             ['tagOrId'],
                                             'Return the type of the item TAGORID.'),
                                            ('xview',
                                             ['*args'],
                                             'Query and change horizontal position of the view.'),
                                            ('xview_moveto',
                                             ['fraction'],
                                             'Adjusts the view in the window so that FRACTION of the\n        total width of the canvas is off-screen to the left.'),
                                            ('xview_scroll',
                                             ['number', 'what'],
                                             'Shift the x-view according to NUMBER which is measured in "units" or "pages" (WHAT).'),
                                            ('yview',
                                             ['*args'],
                                             'Query and change vertical position of the view.'),
                                            ('yview_moveto',
                                             ['fraction'],
                                             'Adjusts the view in the window so that FRACTION of the\n        total height of the canvas is off-screen to the top.'),
                                            ('yview_scroll',
                                             ['number', 'what'],
                                             'Shift the y-view according to NUMBER which is measured in "units" or "pages" (WHAT).')],
                                'properties': ['itemconfig', 'lower', 'lift', 'tkraise']},
             'Tkinter.Checkbutton': {'bases': ['Tkinter.Widget'],
                                     'constructor': ['master=None', 'cnf={}', '**kw'],
                                     'docstring': 'Checkbutton widget which is either in on- or off-state.',
                                     'methods': [('deselect',
                                                  [],
                                                  'Put the button in off-state.'),
                                                 ('flash', [], 'Flash the button.'),
                                                 ('invoke',
                                                  [],
                                                  'Toggle the button and invoke a command if given as resource.'),
                                                 ('select', [], 'Put the button in on-state.'),
                                                 ('toggle', [], 'Toggle the button.')],
                                     'properties': []},
             'Tkinter.DoubleVar': {'bases': ['Tkinter.Variable'],
                                   'constructor': ['master=None', 'value=None', 'name=None'],
                                   'docstring': 'Value holder for float variables.',
                                   'methods': [('get',
                                                [],
                                                'Return the value of the variable as a float.')],
                                   'properties': ['_default']},
             'Tkinter.Entry': {'bases': ['Tkinter.Widget'],
                               'constructor': ['master=None', 'cnf={}', '**kw'],
                               'docstring': 'Entry widget which allows to display simple text.',
                               'methods': [('delete',
                                            ['first', 'last=None'],
                                            'Delete text from FIRST to LAST (not included).'),
                                           ('get', [], 'Return the text.'),
                                           ('icursor', ['index'], 'Insert cursor at INDEX.'),
                                           ('index', ['index'], 'Return position of cursor.'),
                                           ('insert',
                                            ['index', 'string'],
                                            'Insert STRING at INDEX.'),
                                           ('scan_mark',
                                            ['x'],
                                            'Remember the current X, Y coordinates.'),
                                           ('scan_dragto',
                                            ['x'],
                                            'Adjust the view of the canvas to 10 times the\n        difference between X and Y and the coordinates given in\n        scan_mark.'),
                                           ('selection_adjust',
                                            ['index'],
                                            'Adjust the end of the selection near the cursor to INDEX.'),
                                           ('selection_clear',
                                            [],
                                            'Clear the selection if it is in this widget.'),
                                           ('selection_from',
                                            ['index'],
                                            'Set the fixed end of a selection to INDEX.'),
                                           ('selection_present',
                                            [],
                                            'Return whether the widget has the selection.'),
                                           ('selection_range',
                                            ['start', 'end'],
                                            'Set the selection from START to END (not included).'),
                                           ('selection_to',
                                            ['index'],
                                            'Set the variable end of a selection to INDEX.'),
                                           ('xview',
                                            ['index'],
                                            'Query and change horizontal position of the view.'),
                                           ('xview_moveto',
                                            ['fraction'],
                                            'Adjust the view in the window so that FRACTION of the\n        total width of the entry is off-screen to the left.'),
                                           ('xview_scroll',
                                            ['number', 'what'],
                                            'Shift the x-view according to NUMBER which is measured in "units" or "pages" (WHAT).')],
                               'properties': ['select_adjust',
                                              'select_clear',
                                              'select_from',
                                              'select_present',
                                              'select_range',
                                              'select_to']},
             'Tkinter.Event': {'bases': [],
                               'constructor': [],
                               'docstring': 'Container for the properties of an event.\n\n    Instances of this type are generated if one of the following events occurs:\n\n    KeyPress, KeyRelease - for keyboard events\n    ButtonPress, ButtonRelease, Motion, Enter, Leave, MouseWheel - for mouse events\n    Visibility, Unmap, Map, Expose, FocusIn, FocusOut, Circulate,\n    Colormap, Gravity, Reparent, Property, Destroy, Activate,\n    Deactivate - for window events.\n\n    If a callback function for one of these events is registered\n    using bind, bind_all, bind_class, or tag_bind, the callback is\n    called with an Event as first argument. It will have the\n    following attributes (in braces are the event types for which\n    the attribute is valid):\n\n        serial - serial number of event\n    num - mouse button pressed (ButtonPress, ButtonRelease)\n    focus - whether the window has the focus (Enter, Leave)\n    height - height of the exposed window (Configure, Expose)\n    width - width of the exposed window (Configure, Expose)\n    keycode - keycode of the pressed key (KeyPress, KeyRelease)\n    state - state of the event as a number (ButtonPress, ButtonRelease,\n                            Enter, KeyPress, KeyRelease,\n                            Leave, Motion)\n    state - state as a string (Visibility)\n    time - when the event occurred\n    x - x-position of the mouse\n    y - y-position of the mouse\n    x_root - x-position of the mouse on the screen\n             (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)\n    y_root - y-position of the mouse on the screen\n             (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)\n    char - pressed character (KeyPress, KeyRelease)\n    send_event - see X/Windows documentation\n    keysym - keysym of the event as a string (KeyPress, KeyRelease)\n    keysym_num - keysym of the event as a number (KeyPress, KeyRelease)\n    type - type of the event as a number\n    widget - widget in which the event occurred\n    delta - delta of wheel movement (MouseWheel)\n    ',
                               'methods': [],
                               'properties': []},
             'Tkinter.Frame': {'bases': ['Tkinter.Widget'],
                               'constructor': ['master=None', 'cnf={}', '**kw'],
                               'docstring': 'Frame widget which may contain other widgets and can have a 3D border.',
                               'methods': [],
                               'properties': []},
             'Tkinter.Grid': {'bases': [],
                              'constructor': [],
                              'docstring': 'Geometry manager Grid.\n\n    Base class to use the methods grid_* in every widget.',
                              'methods': [('grid_configure',
                                           ['cnf={}', '**kw'],
                                           "Position a widget in the parent widget in a grid. Use as options:\n        column=number - use cell identified with given column (starting with 0)\n        columnspan=number - this widget will span several columns\n        in=master - use master to contain this widget\n        in_=master - see 'in' option description\n        ipadx=amount - add internal padding in x direction\n        ipady=amount - add internal padding in y direction\n        padx=amount - add padding in x direction\n        pady=amount - add padding in y direction\n        row=number - use cell identified with given row (starting with 0)\n        rowspan=number - this widget will span several rows\n        sticky=NSEW - if cell is larger on which sides will this\n                      widget stick to the cell boundary\n        "),
                                          ('grid_forget', [], 'Unmap this widget.'),
                                          ('grid_remove',
                                           [],
                                           'Unmap this widget but remember the grid options.'),
                                          ('grid_info',
                                           [],
                                           'Return information about the options\n        for positioning this widget in a grid.')],
                              'properties': ['grid',
                                             'configure',
                                             'config',
                                             'bbox',
                                             'grid_bbox',
                                             'columnconfigure',
                                             'grid_columnconfigure',
                                             'forget',
                                             'info',
                                             'location',
                                             'grid_location',
                                             'propagate',
                                             'grid_propagate',
                                             'rowconfigure',
                                             'grid_rowconfigure',
                                             'size',
                                             'grid_size',
                                             'slaves',
                                             'grid_slaves']},
             'Tkinter.Image': {'bases': [],
                               'constructor': ['imgtype',
                                               'name=None',
                                               'cnf={}',
                                               'master=None',
                                               '**kw'],
                               'docstring': 'Base class for images.',
                               'methods': [('__str__', [], ''),
                                           ('__del__', [], ''),
                                           ('__setitem__', ['key', 'value'], ''),
                                           ('__getitem__', ['key'], ''),
                                           ('configure', ['**kw'], 'Configure the image.'),
                                           ('height', [], 'Return the height of the image.'),
                                           ('type',
                                            [],
                                            'Return the type of the imgage, e.g. "photo" or "bitmap".'),
                                           ('width', [], 'Return the width of the image.')],
                               'properties': ['_last_id', 'name', 'tk', 'config']},
             'Tkinter.IntVar': {'bases': ['Tkinter.Variable'],
                                'constructor': ['master=None', 'value=None', 'name=None'],
                                'docstring': 'Value holder for integer variables.',
                                'methods': [('set',
                                             ['value'],
                                             'Set the variable to value, converting booleans to integers.'),
                                            ('get',
                                             [],
                                             'Return the value of the variable as an integer.')],
                                'properties': ['_default']},
             'Tkinter.Label': {'bases': ['Tkinter.Widget'],
                               'constructor': ['master=None', 'cnf={}', '**kw'],
                               'docstring': 'Label widget which can display text and bitmaps.',
                               'methods': [],
                               'properties': []},
             'Tkinter.LabelFrame': {'bases': ['Tkinter.Widget'],
                                    'constructor': ['master=None', 'cnf={}', '**kw'],
                                    'docstring': 'labelframe widget.',
                                    'methods': [],
                                    'properties': []},
             'Tkinter.Listbox': {'bases': ['Tkinter.Widget'],
                                 'constructor': ['master=None', 'cnf={}', '**kw'],
                                 'docstring': 'Listbox widget which can display a list of strings.',
                                 'methods': [('activate',
                                              ['index'],
                                              'Activate item identified by INDEX.'),
                                             ('bbox',
                                              ['*args'],
                                              'Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle\n        which encloses the item identified by index in ARGS.'),
                                             ('curselection',
                                              [],
                                              'Return list of indices of currently selected item.'),
                                             ('delete',
                                              ['first', 'last=None'],
                                              'Delete items from FIRST to LAST (not included).'),
                                             ('get',
                                              ['first', 'last=None'],
                                              'Get list of items from FIRST to LAST (not included).'),
                                             ('index',
                                              ['index'],
                                              'Return index of item identified with INDEX.'),
                                             ('insert',
                                              ['index', '*elements'],
                                              'Insert ELEMENTS at INDEX.'),
                                             ('nearest',
                                              ['y'],
                                              'Get index of item which is nearest to y coordinate Y.'),
                                             ('scan_mark',
                                              ['x', 'y'],
                                              'Remember the current X, Y coordinates.'),
                                             ('scan_dragto',
                                              ['x', 'y'],
                                              'Adjust the view of the listbox to 10 times the\n        difference between X and Y and the coordinates given in\n        scan_mark.'),
                                             ('see',
                                              ['index'],
                                              'Scroll such that INDEX is visible.'),
                                             ('selection_anchor',
                                              ['index'],
                                              'Set the fixed end oft the selection to INDEX.'),
                                             ('selection_clear',
                                              ['first', 'last=None'],
                                              'Clear the selection from FIRST to LAST (not included).'),
                                             ('selection_includes',
                                              ['index'],
                                              'Return 1 if INDEX is part of the selection.'),
                                             ('selection_set',
                                              ['first', 'last=None'],
                                              'Set the selection from FIRST to LAST (not included) without\n        changing the currently selected elements.'),
                                             ('size',
                                              [],
                                              'Return the number of elements in the listbox.'),
                                             ('xview',
                                              ['*what'],
                                              'Query and change horizontal position of the view.'),
                                             ('xview_moveto',
                                              ['fraction'],
                                              'Adjust the view in the window so that FRACTION of the\n        total width of the entry is off-screen to the left.'),
                                             ('xview_scroll',
                                              ['number', 'what'],
                                              'Shift the x-view according to NUMBER which is measured in "units" or "pages" (WHAT).'),
                                             ('yview',
                                              ['*what'],
                                              'Query and change vertical position of the view.'),
                                             ('yview_moveto',
                                              ['fraction'],
                                              'Adjust the view in the window so that FRACTION of the\n        total width of the entry is off-screen to the top.'),
                                             ('yview_scroll',
                                              ['number', 'what'],
                                              'Shift the y-view according to NUMBER which is measured in "units" or "pages" (WHAT).'),
                                             ('itemcget',
                                              ['index', 'option'],
                                              'Return the resource value for an ITEM and an OPTION.'),
                                             ('itemconfigure',
                                              ['index', 'cnf=None', '**kw'],
                                              'Configure resources of an ITEM.\n\n        The values for resources are specified as keyword arguments.\n        To get an overview about the allowed keyword arguments\n        call the method without arguments.\n        Valid resource names: background, bg, foreground, fg,\n        selectbackground, selectforeground.')],
                                 'properties': ['select_anchor',
                                                'select_clear',
                                                'select_includes',
                                                'select_set',
                                                'itemconfig']},
             'Tkinter.Menu': {'bases': ['Tkinter.Widget'],
                              'constructor': ['master=None', 'cnf={}', '**kw'],
                              'docstring': 'Menu widget which allows to display menu bars, pull-down menus and pop-up menus.',
                              'methods': [('tk_bindForTraversal', [], ''),
                                          ('tk_mbPost', [], ''),
                                          ('tk_mbUnpost', [], ''),
                                          ('tk_traverseToMenu', ['char'], ''),
                                          ('tk_traverseWithinMenu', ['char'], ''),
                                          ('tk_getMenuButtons', [], ''),
                                          ('tk_nextMenu', ['count'], ''),
                                          ('tk_nextMenuEntry', ['count'], ''),
                                          ('tk_invokeMenu', [], ''),
                                          ('tk_firstMenu', [], ''),
                                          ('tk_mbButtonDown', [], ''),
                                          ('tk_popup',
                                           ['x', 'y', "entry=''"],
                                           'Post the menu at position X,Y with entry ENTRY.'),
                                          ('activate', ['index'], 'Activate entry at INDEX.'),
                                          ('add',
                                           ['itemType', 'cnf={}', '**kw'],
                                           'Internal function.'),
                                          ('add_cascade',
                                           ['cnf={}', '**kw'],
                                           'Add hierarchical menu item.'),
                                          ('add_checkbutton',
                                           ['cnf={}', '**kw'],
                                           'Add checkbutton menu item.'),
                                          ('add_command',
                                           ['cnf={}', '**kw'],
                                           'Add command menu item.'),
                                          ('add_radiobutton',
                                           ['cnf={}', '**kw'],
                                           'Addd radio menu item.'),
                                          ('add_separator',
                                           ['cnf={}', '**kw'],
                                           'Add separator.'),
                                          ('insert',
                                           ['index', 'itemType', 'cnf={}', '**kw'],
                                           'Internal function.'),
                                          ('insert_cascade',
                                           ['index', 'cnf={}', '**kw'],
                                           'Add hierarchical menu item at INDEX.'),
                                          ('insert_checkbutton',
                                           ['index', 'cnf={}', '**kw'],
                                           'Add checkbutton menu item at INDEX.'),
                                          ('insert_command',
                                           ['index', 'cnf={}', '**kw'],
                                           'Add command menu item at INDEX.'),
                                          ('insert_radiobutton',
                                           ['index', 'cnf={}', '**kw'],
                                           'Addd radio menu item at INDEX.'),
                                          ('insert_separator',
                                           ['index', 'cnf={}', '**kw'],
                                           'Add separator at INDEX.'),
                                          ('delete',
                                           ['index1', 'index2=None'],
                                           'Delete menu items between INDEX1 and INDEX2 (not included).'),
                                          ('entrycget',
                                           ['index', 'option'],
                                           'Return the resource value of an menu item for OPTION at INDEX.'),
                                          ('entryconfigure',
                                           ['index', 'cnf=None', '**kw'],
                                           'Configure a menu item at INDEX.'),
                                          ('index',
                                           ['index'],
                                           'Return the index of a menu item identified by INDEX.'),
                                          ('invoke',
                                           ['index'],
                                           'Invoke a menu item identified by INDEX and execute\n        the associated command.'),
                                          ('post',
                                           ['x', 'y'],
                                           'Display a menu at position X,Y.'),
                                          ('type',
                                           ['index'],
                                           'Return the type of the menu item at INDEX.'),
                                          ('unpost', [], 'Unmap a menu.'),
                                          ('yposition',
                                           ['index'],
                                           'Return the y-position of the topmost pixel of the menu item at INDEX.')],
                              'properties': ['entryconfig']},
             'Tkinter.Menubutton': {'bases': ['Tkinter.Widget'],
                                    'constructor': ['master=None', 'cnf={}', '**kw'],
                                    'docstring': 'Menubutton widget, obsolete since Tk8.0.',
                                    'methods': [],
                                    'properties': []},
             'Tkinter.Message': {'bases': ['Tkinter.Widget'],
                                 'constructor': ['master=None', 'cnf={}', '**kw'],
                                 'docstring': 'Message widget to display multiline text. Obsolete since Label does it too.',
                                 'methods': [],
                                 'properties': []},
             'Tkinter.Misc': {'bases': [],
                              'constructor': [],
                              'docstring': 'Internal class.\n\n    Base class which defines methods common for interior widgets.',
                              'methods': [('destroy',
                                           [],
                                           'Internal function.\n\n        Delete all Tcl commands created for\n        this widget in the Tcl interpreter.'),
                                          ('deletecommand',
                                           ['name'],
                                           'Internal function.\n\n        Delete the Tcl command provided in NAME.'),
                                          ('tk_strictMotif',
                                           ['boolean=None'],
                                           'Set Tcl internal variable, whether the look and feel\n        should adhere to Motif.\n\n        A parameter of 1 means adhere to Motif (e.g. no color\n        change if mouse passes over slider).\n        Returns the set value.'),
                                          ('tk_bisque',
                                           [],
                                           'Change the color scheme to light brown as used in Tk 3.6 and before.'),
                                          ('tk_setPalette',
                                           ['*args', '**kw'],
                                           'Set a new color scheme for all widget elements.\n\n        A single color as argument will cause that all colors of Tk\n        widget elements are derived from this.\n        Alternatively several keyword parameters and its associated\n        colors can be given. The following keywords are valid:\n        activeBackground, foreground, selectColor,\n        activeForeground, highlightBackground, selectBackground,\n        background, highlightColor, selectForeground,\n        disabledForeground, insertBackground, troughColor.'),
                                          ('tk_menuBar',
                                           ['*args'],
                                           'Do not use. Needed in Tk 3.6 and earlier.'),
                                          ('wait_variable',
                                           ["name='PY_VAR'"],
                                           'Wait until the variable is modified.\n\n        A parameter of type IntVar, StringVar, DoubleVar or\n        BooleanVar must be given.'),
                                          ('wait_window',
                                           ['window=None'],
                                           'Wait until a WIDGET is destroyed.\n\n        If no parameter is given self is used.'),
                                          ('wait_visibility',
                                           ['window=None'],
                                           'Wait until the visibility of a WIDGET changes\n        (e.g. it appears).\n\n        If no parameter is given self is used.'),
                                          ('setvar',
                                           ["name='PY_VAR'", "value='1'"],
                                           'Set Tcl variable NAME to VALUE.'),
                                          ('getvar',
                                           ["name='PY_VAR'"],
                                           'Return value of Tcl variable NAME.'),
                                          ('getboolean',
                                           ['s'],
                                           'Return a boolean value for Tcl boolean values true and false given as parameter.'),
                                          ('focus_set',
                                           [],
                                           'Direct input focus to this widget.\n\n        If the application currently does not have the focus\n        this widget will get the focus if the application gets\n        the focus through the window manager.'),
                                          ('focus_force',
                                           [],
                                           'Direct input focus to this widget even if the\n        application does not have the focus. Use with\n        caution!'),
                                          ('focus_get',
                                           [],
                                           'Return the widget which has currently the focus in the\n        application.\n\n        Use focus_displayof to allow working with several\n        displays. Return None if application does not have\n        the focus.'),
                                          ('focus_displayof',
                                           [],
                                           'Return the widget which has currently the focus on the\n        display where this widget is located.\n\n        Return None if the application does not have the focus.'),
                                          ('focus_lastfor',
                                           [],
                                           'Return the widget which would have the focus if top level\n        for this widget gets the focus from the window manager.'),
                                          ('tk_focusFollowsMouse',
                                           [],
                                           'The widget under mouse will get automatically focus. Can not\n        be disabled easily.'),
                                          ('tk_focusNext',
                                           [],
                                           'Return the next widget in the focus order which follows\n        widget which has currently the focus.\n\n        The focus order first goes to the next child, then to\n        the children of the child recursively and then to the\n        next sibling which is higher in the stacking order.  A\n        widget is omitted if it has the takefocus resource set\n        to 0.'),
                                          ('tk_focusPrev',
                                           [],
                                           'Return previous widget in the focus order. See tk_focusNext for details.'),
                                          ('after',
                                           ['ms', 'func=None', '*args'],
                                           'Call function once after given time.\n\n        MS specifies the time in milliseconds. FUNC gives the\n        function which shall be called. Additional parameters\n        are given as parameters to the function call.  Return\n        identifier to cancel scheduling with after_cancel.'),
                                          ('after_idle',
                                           ['func', '*args'],
                                           'Call FUNC once if the Tcl main loop has no event to\n        process.\n\n        Return an identifier to cancel the scheduling with\n        after_cancel.'),
                                          ('after_cancel',
                                           ['id'],
                                           'Cancel scheduling of function identified with ID.\n\n        Identifier returned by after or after_idle must be\n        given as first parameter.'),
                                          ('bell', ['displayof=0'], "Ring a display's bell."),
                                          ('clipboard_get',
                                           ['**kw'],
                                           "Retrieve data from the clipboard on window's display.\n\n        The window keyword defaults to the root window of the Tkinter\n        application.\n\n        The type keyword specifies the form in which the data is\n        to be returned and should be an atom name such as STRING\n        or FILE_NAME.  Type defaults to STRING.\n\n        This command is equivalent to:\n\n        selection_get(CLIPBOARD)\n        "),
                                          ('clipboard_clear',
                                           ['**kw'],
                                           'Clear the data in the Tk clipboard.\n\n        A widget specified for the optional displayof keyword\n        argument specifies the target display.'),
                                          ('clipboard_append',
                                           ['string', '**kw'],
                                           'Append STRING to the Tk clipboard.\n\n        A widget specified at the optional displayof keyword\n        argument specifies the target display. The clipboard\n        can be retrieved with selection_get.'),
                                          ('grab_current',
                                           [],
                                           'Return widget which has currently the grab in this application\n        or None.'),
                                          ('grab_release',
                                           [],
                                           'Release grab for this widget if currently set.'),
                                          ('grab_set',
                                           [],
                                           'Set grab for this widget.\n\n        A grab directs all events to this and descendant\n        widgets in the application.'),
                                          ('grab_set_global',
                                           [],
                                           'Set global grab for this widget.\n\n        A global grab directs all events to this and\n        descendant widgets on the display. Use with caution -\n        other applications do not get events anymore.'),
                                          ('grab_status',
                                           [],
                                           'Return None, "local" or "global" if this widget has\n        no, a local or a global grab.'),
                                          ('lower',
                                           ['belowThis=None'],
                                           'Lower this widget in the stacking order.'),
                                          ('option_add',
                                           ['pattern', 'value', 'priority=None'],
                                           'Set a VALUE (second parameter) for an option\n        PATTERN (first parameter).\n\n        An optional third parameter gives the numeric priority\n        (defaults to 80).'),
                                          ('option_clear',
                                           [],
                                           'Clear the option database.\n\n        It will be reloaded if option_add is called.'),
                                          ('option_get',
                                           ['name', 'className'],
                                           'Return the value for an option NAME for this widget\n        with CLASSNAME.\n\n        Values with higher priority override lower values.'),
                                          ('option_readfile',
                                           ['fileName', 'priority=None'],
                                           'Read file FILENAME into the option database.\n\n        An optional second parameter gives the numeric\n        priority.'),
                                          ('selection_clear',
                                           ['**kw'],
                                           'Clear the current X selection.'),
                                          ('selection_get',
                                           ['**kw'],
                                           'Return the contents of the current X selection.\n\n        A keyword parameter selection specifies the name of\n        the selection and defaults to PRIMARY.  A keyword\n        parameter displayof specifies a widget on the display\n        to use.'),
                                          ('selection_handle',
                                           ['command', '**kw'],
                                           'Specify a function COMMAND to call if the X\n        selection owned by this widget is queried by another\n        application.\n\n        This function must return the contents of the\n        selection. The function will be called with the\n        arguments OFFSET and LENGTH which allows the chunking\n        of very long selections. The following keyword\n        parameters can be provided:\n        selection - name of the selection (default PRIMARY),\n        type - type of the selection (e.g. STRING, FILE_NAME).'),
                                          ('selection_own',
                                           ['**kw'],
                                           'Become owner of X selection.\n\n        A keyword parameter selection specifies the name of\n        the selection (default PRIMARY).'),
                                          ('selection_own_get',
                                           ['**kw'],
                                           'Return owner of X selection.\n\n        The following keyword parameter can\n        be provided:\n        selection - name of the selection (default PRIMARY),\n        type - type of the selection (e.g. STRING, FILE_NAME).'),
                                          ('send',
                                           ['interp', 'cmd', '*args'],
                                           'Send Tcl command CMD to different interpreter INTERP to be executed.'),
                                          ('tkraise',
                                           ['aboveThis=None'],
                                           'Raise this widget in the stacking order.'),
                                          ('colormodel',
                                           ['value=None'],
                                           'Useless. Not implemented in Tk.'),
                                          ('winfo_atom',
                                           ['name', 'displayof=0'],
                                           'Return integer which represents atom NAME.'),
                                          ('winfo_atomname',
                                           ['id', 'displayof=0'],
                                           'Return name of atom with identifier ID.'),
                                          ('winfo_cells',
                                           [],
                                           'Return number of cells in the colormap for this widget.'),
                                          ('winfo_children',
                                           [],
                                           'Return a list of all widgets which are children of this widget.'),
                                          ('winfo_class',
                                           [],
                                           'Return window class name of this widget.'),
                                          ('winfo_colormapfull',
                                           [],
                                           'Return true if at the last color request the colormap was full.'),
                                          ('winfo_containing',
                                           ['rootX', 'rootY', 'displayof=0'],
                                           'Return the widget which is at the root coordinates ROOTX, ROOTY.'),
                                          ('winfo_depth',
                                           [],
                                           'Return the number of bits per pixel.'),
                                          ('winfo_exists',
                                           [],
                                           'Return true if this widget exists.'),
                                          ('winfo_fpixels',
                                           ['number'],
                                           'Return the number of pixels for the given distance NUMBER\n        (e.g. "3c") as float.'),
                                          ('winfo_geometry',
                                           [],
                                           'Return geometry string for this widget in the form "widthxheight+X+Y".'),
                                          ('winfo_height', [], 'Return height of this widget.'),
                                          ('winfo_id',
                                           [],
                                           'Return identifier ID for this widget.'),
                                          ('winfo_interps',
                                           ['displayof=0'],
                                           'Return the name of all Tcl interpreters for this display.'),
                                          ('winfo_ismapped',
                                           [],
                                           'Return true if this widget is mapped.'),
                                          ('winfo_manager',
                                           [],
                                           'Return the window mananger name for this widget.'),
                                          ('winfo_name', [], 'Return the name of this widget.'),
                                          ('winfo_parent',
                                           [],
                                           'Return the name of the parent of this widget.'),
                                          ('winfo_pathname',
                                           ['id', 'displayof=0'],
                                           'Return the pathname of the widget given by ID.'),
                                          ('winfo_pixels',
                                           ['number'],
                                           'Rounded integer value of winfo_fpixels.'),
                                          ('winfo_pointerx',
                                           [],
                                           'Return the x coordinate of the pointer on the root window.'),
                                          ('winfo_pointerxy',
                                           [],
                                           'Return a tuple of x and y coordinates of the pointer on the root window.'),
                                          ('winfo_pointery',
                                           [],
                                           'Return the y coordinate of the pointer on the root window.'),
                                          ('winfo_reqheight',
                                           [],
                                           'Return requested height of this widget.'),
                                          ('winfo_reqwidth',
                                           [],
                                           'Return requested width of this widget.'),
                                          ('winfo_rgb',
                                           ['color'],
                                           'Return tuple of decimal values for red, green, blue for\n        COLOR in this widget.'),
                                          ('winfo_rootx',
                                           [],
                                           'Return x coordinate of upper left corner of this widget on the\n        root window.'),
                                          ('winfo_rooty',
                                           [],
                                           'Return y coordinate of upper left corner of this widget on the\n        root window.'),
                                          ('winfo_screen',
                                           [],
                                           'Return the screen name of this widget.'),
                                          ('winfo_screencells',
                                           [],
                                           'Return the number of the cells in the colormap of the screen\n        of this widget.'),
                                          ('winfo_screendepth',
                                           [],
                                           'Return the number of bits per pixel of the root window of the\n        screen of this widget.'),
                                          ('winfo_screenheight',
                                           [],
                                           'Return the number of pixels of the height of the screen of this widget\n        in pixel.'),
                                          ('winfo_screenmmheight',
                                           [],
                                           'Return the number of pixels of the height of the screen of\n        this widget in mm.'),
                                          ('winfo_screenmmwidth',
                                           [],
                                           'Return the number of pixels of the width of the screen of\n        this widget in mm.'),
                                          ('winfo_screenvisual',
                                           [],
                                           'Return one of the strings directcolor, grayscale, pseudocolor,\n        staticcolor, staticgray, or truecolor for the default\n        colormodel of this screen.'),
                                          ('winfo_screenwidth',
                                           [],
                                           'Return the number of pixels of the width of the screen of\n        this widget in pixel.'),
                                          ('winfo_server',
                                           [],
                                           'Return information of the X-Server of the screen of this widget in\n        the form "XmajorRminor vendor vendorVersion".'),
                                          ('winfo_toplevel',
                                           [],
                                           'Return the toplevel widget of this widget.'),
                                          ('winfo_viewable',
                                           [],
                                           'Return true if the widget and all its higher ancestors are mapped.'),
                                          ('winfo_visual',
                                           [],
                                           'Return one of the strings directcolor, grayscale, pseudocolor,\n        staticcolor, staticgray, or truecolor for the\n        colormodel of this widget.'),
                                          ('winfo_visualid',
                                           [],
                                           'Return the X identifier for the visual for this widget.'),
                                          ('winfo_visualsavailable',
                                           ['includeids=0'],
                                           'Return a list of all visuals available for the screen\n        of this widget.\n\n        Each item in the list consists of a visual name (see winfo_visual), a\n        depth and if INCLUDEIDS=1 is given also the X identifier.'),
                                          ('__winfo_parseitem', ['t'], 'Internal function.'),
                                          ('__winfo_getint', ['x'], 'Internal function.'),
                                          ('winfo_vrootheight',
                                           [],
                                           'Return the height of the virtual root window associated with this\n        widget in pixels. If there is no virtual root window return the\n        height of the screen.'),
                                          ('winfo_vrootwidth',
                                           [],
                                           'Return the width of the virtual root window associated with this\n        widget in pixel. If there is no virtual root window return the\n        width of the screen.'),
                                          ('winfo_vrootx',
                                           [],
                                           'Return the x offset of the virtual root relative to the root\n        window of the screen of this widget.'),
                                          ('winfo_vrooty',
                                           [],
                                           'Return the y offset of the virtual root relative to the root\n        window of the screen of this widget.'),
                                          ('winfo_width',
                                           [],
                                           'Return the width of this widget.'),
                                          ('winfo_x',
                                           [],
                                           'Return the x coordinate of the upper left corner of this widget\n        in the parent.'),
                                          ('winfo_y',
                                           [],
                                           'Return the y coordinate of the upper left corner of this widget\n        in the parent.'),
                                          ('update',
                                           [],
                                           'Enter event loop until all pending events have been processed by Tcl.'),
                                          ('update_idletasks',
                                           [],
                                           'Enter event loop until all idle callbacks have been called. This\n        will update the display of windows but not process events caused by\n        the user.'),
                                          ('bindtags',
                                           ['tagList=None'],
                                           'Set or get the list of bindtags for this widget.\n\n        With no argument return the list of all bindtags associated with\n        this widget. With a list of strings as argument the bindtags are\n        set to this list. The bindtags determine in which order events are\n        processed (see bind).'),
                                          ('_bind',
                                           ['what',
                                            'sequence',
                                            'func',
                                            'add',
                                            'needcleanup=1'],
                                           'Internal function.'),
                                          ('bind',
                                           ['sequence=None', 'func=None', 'add=None'],
                                           'Bind to this widget at event SEQUENCE a call to function FUNC.\n\n        SEQUENCE is a string of concatenated event\n        patterns. An event pattern is of the form\n        <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one\n        of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,\n        Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,\n        B3, Alt, Button4, B4, Double, Button5, B5 Triple,\n        Mod1, M1. TYPE is one of Activate, Enter, Map,\n        ButtonPress, Button, Expose, Motion, ButtonRelease\n        FocusIn, MouseWheel, Circulate, FocusOut, Property,\n        Colormap, Gravity Reparent, Configure, KeyPress, Key,\n        Unmap, Deactivate, KeyRelease Visibility, Destroy,\n        Leave and DETAIL is the button number for ButtonPress,\n        ButtonRelease and DETAIL is the Keysym for KeyPress and\n        KeyRelease. Examples are\n        <Control-Button-1> for pressing Control and mouse button 1 or\n        <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).\n        An event pattern can also be a virtual event of the form\n        <<AString>> where AString can be arbitrary. This\n        event can be generated by event_generate.\n        If events are concatenated they must appear shortly\n        after each other.\n\n        FUNC will be called if the event sequence occurs with an\n        instance of Event as argument. If the return value of FUNC is\n        "break" no further bound function is invoked.\n\n        An additional boolean parameter ADD specifies whether FUNC will\n        be called additionally to the other bound function or whether\n        it will replace the previous function.\n\n        Bind will return an identifier to allow deletion of the bound function with\n        unbind without memory leak.\n\n        If FUNC or SEQUENCE is omitted the bound function or list\n        of bound events are returned.'),
                                          ('unbind',
                                           ['sequence', 'funcid=None'],
                                           'Unbind for this widget for event SEQUENCE  the\n        function identified with FUNCID.'),
                                          ('bind_all',
                                           ['sequence=None', 'func=None', 'add=None'],
                                           'Bind to all widgets at an event SEQUENCE a call to function FUNC.\n        An additional boolean parameter ADD specifies whether FUNC will\n        be called additionally to the other bound function or whether\n        it will replace the previous function. See bind for the return value.'),
                                          ('unbind_all',
                                           ['sequence'],
                                           'Unbind for all widgets for event SEQUENCE all functions.'),
                                          ('bind_class',
                                           ['className',
                                            'sequence=None',
                                            'func=None',
                                            'add=None'],
                                           'Bind to widgets with bindtag CLASSNAME at event\n        SEQUENCE a call of function FUNC. An additional\n        boolean parameter ADD specifies whether FUNC will be\n        called additionally to the other bound function or\n        whether it will replace the previous function. See bind for\n        the return value.'),
                                          ('unbind_class',
                                           ['className', 'sequence'],
                                           'Unbind for a all widgets with bindtag CLASSNAME for event SEQUENCE\n        all functions.'),
                                          ('mainloop', ['n=0'], 'Call the mainloop of Tk.'),
                                          ('quit',
                                           [],
                                           'Quit the Tcl interpreter. All widgets will be destroyed.'),
                                          ('_getints', ['string'], 'Internal function.'),
                                          ('_getdoubles', ['string'], 'Internal function.'),
                                          ('_getboolean', ['string'], 'Internal function.'),
                                          ('_displayof', ['displayof'], 'Internal function.'),
                                          ('_options',
                                           ['cnf', 'kw=None'],
                                           'Internal function.'),
                                          ('nametowidget',
                                           ['name'],
                                           'Return the Tkinter instance of a widget identified by\n        its Tcl name NAME.'),
                                          ('_register',
                                           ['func', 'subst=None', 'needcleanup=1'],
                                           'Return a newly created Tcl function. If this\n        function is called, the Python function FUNC will\n        be executed. An optional function SUBST can\n        be given which will be executed before FUNC.'),
                                          ('_root', [], 'Internal function.'),
                                          ('_substitute', ['*args'], 'Internal function.'),
                                          ('_report_exception', [], 'Internal function.'),
                                          ('_configure',
                                           ['cmd', 'cnf', 'kw'],
                                           'Internal function.'),
                                          ('configure',
                                           ['cnf=None', '**kw'],
                                           'Configure resources of a widget.\n\n        The values for resources are specified as keyword\n        arguments. To get an overview about\n        the allowed keyword arguments call the method keys.\n        '),
                                          ('cget',
                                           ['key'],
                                           'Return the resource value for a KEY given as string.'),
                                          ('__setitem__', ['key', 'value'], ''),
                                          ('keys',
                                           [],
                                           'Return a list of all resource names of this widget.'),
                                          ('__str__',
                                           [],
                                           'Return the window path name of this widget.'),
                                          ('pack_propagate',
                                           ['flag=_noarg_'],
                                           'Set or get the status for propagation of geometry information.\n\n        A boolean argument specifies whether the geometry information\n        of the slaves will determine the size of this widget. If no argument\n        is given the current setting will be returned.\n        '),
                                          ('pack_slaves',
                                           [],
                                           'Return a list of all slaves of this widget\n        in its packing order.'),
                                          ('place_slaves',
                                           [],
                                           'Return a list of all slaves of this widget\n        in its packing order.'),
                                          ('grid_bbox',
                                           ['column=None',
                                            'row=None',
                                            'col2=None',
                                            'row2=None'],
                                           'Return a tuple of integer coordinates for the bounding\n        box of this widget controlled by the geometry manager grid.\n\n        If COLUMN, ROW is given the bounding box applies from\n        the cell with row and column 0 to the specified\n        cell. If COL2 and ROW2 are given the bounding box\n        starts at that cell.\n\n        The returned integers specify the offset of the upper left\n        corner in the master widget and the width and height.\n        '),
                                          ('_grid_configure',
                                           ['command', 'index', 'cnf', 'kw'],
                                           'Internal function.'),
                                          ('grid_columnconfigure',
                                           ['index', 'cnf={}', '**kw'],
                                           'Configure column INDEX of a grid.\n\n        Valid resources are minsize (minimum size of the column),\n        weight (how much does additional space propagate to this column)\n        and pad (how much space to let additionally).'),
                                          ('grid_location',
                                           ['x', 'y'],
                                           'Return a tuple of column and row which identify the cell\n        at which the pixel at position X and Y inside the master\n        widget is located.'),
                                          ('grid_propagate',
                                           ['flag=_noarg_'],
                                           'Set or get the status for propagation of geometry information.\n\n        A boolean argument specifies whether the geometry information\n        of the slaves will determine the size of this widget. If no argument\n        is given, the current setting will be returned.\n        '),
                                          ('grid_rowconfigure',
                                           ['index', 'cnf={}', '**kw'],
                                           'Configure row INDEX of a grid.\n\n        Valid resources are minsize (minimum size of the row),\n        weight (how much does additional space propagate to this row)\n        and pad (how much space to let additionally).'),
                                          ('grid_size',
                                           [],
                                           'Return a tuple of the number of column and rows in the grid.'),
                                          ('grid_slaves',
                                           ['row=None', 'column=None'],
                                           'Return a list of all slaves of this widget\n        in its packing order.'),
                                          ('event_add',
                                           ['virtual', '*sequences'],
                                           'Bind a virtual event VIRTUAL (of the form <<Name>>)\n        to an event SEQUENCE such that the virtual event is triggered\n        whenever SEQUENCE occurs.'),
                                          ('event_delete',
                                           ['virtual', '*sequences'],
                                           'Unbind a virtual event VIRTUAL from SEQUENCE.'),
                                          ('event_generate',
                                           ['sequence', '**kw'],
                                           'Generate an event SEQUENCE. Additional\n        keyword arguments specify parameter of the event\n        (e.g. x, y, rootx, rooty).'),
                                          ('event_info',
                                           ['virtual=None'],
                                           'Return a list of all virtual events or the information\n        about the SEQUENCE bound to the virtual event VIRTUAL.'),
                                          ('image_names',
                                           [],
                                           'Return a list of all existing image names.'),
                                          ('image_types',
                                           [],
                                           'Return a list of all available image types (e.g. phote bitmap).')],
                              'properties': ['_tclCommands',
                                             'waitvar',
                                             'getint',
                                             'getdouble',
                                             'focus',
                                             'lift',
                                             '_nametowidget',
                                             'register',
                                             '_subst_format',
                                             '_subst_format_str',
                                             'config',
                                             '__getitem__',
                                             '_noarg_',
                                             'propagate',
                                             'slaves',
                                             'bbox',
                                             'columnconfigure',
                                             'rowconfigure',
                                             'size']},
             'Tkinter.OptionMenu': {'bases': ['Tkinter.Menubutton'],
                                    'constructor': ['master',
                                                    'variable',
                                                    'value',
                                                    '*values',
                                                    '**kwargs'],
                                    'docstring': 'OptionMenu which allows the user to select a value from a menu.',
                                    'methods': [('__getitem__', ['name'], ''),
                                                ('destroy',
                                                 [],
                                                 'Destroy this widget and the associated menu.')],
                                    'properties': ['widgetName', '__menu', 'menuname']},
             'Tkinter.Pack': {'bases': [],
                              'constructor': [],
                              'docstring': 'Geometry manager Pack.\n\n    Base class to use the methods pack_* in every widget.',
                              'methods': [('pack_configure',
                                           ['cnf={}', '**kw'],
                                           "Pack a widget in the parent widget. Use as options:\n        after=widget - pack it after you have packed widget\n        anchor=NSEW (or subset) - position widget according to\n                                  given direction\n        before=widget - pack it before you will pack widget\n        expand=bool - expand widget if parent size grows\n        fill=NONE or X or Y or BOTH - fill widget if widget grows\n        in=master - use master to contain this widget\n        in_=master - see 'in' option description\n        ipadx=amount - add internal padding in x direction\n        ipady=amount - add internal padding in y direction\n        padx=amount - add padding in x direction\n        pady=amount - add padding in y direction\n        side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.\n        "),
                                          ('pack_forget',
                                           [],
                                           'Unmap this widget and do not use it for the packing order.'),
                                          ('pack_info',
                                           [],
                                           'Return information about the packing options\n        for this widget.')],
                              'properties': ['pack',
                                             'configure',
                                             'config',
                                             'forget',
                                             'info',
                                             'propagate',
                                             'pack_propagate',
                                             'slaves',
                                             'pack_slaves']},
             'Tkinter.PanedWindow': {'bases': ['Tkinter.Widget'],
                                     'constructor': ['master=None', 'cnf={}', '**kw'],
                                     'docstring': 'panedwindow widget.',
                                     'methods': [('add',
                                                  ['child', '**kw'],
                                                  'Add a child widget to the panedwindow in a new pane.\n\n        The child argument is the name of the child widget\n        followed by pairs of arguments that specify how to\n        manage the windows. Options may have any of the values\n        accepted by the configure subcommand.\n        '),
                                                 ('remove',
                                                  ['child'],
                                                  'Remove the pane containing child from the panedwindow\n\n        All geometry management options for child will be forgotten.\n        '),
                                                 ('identify',
                                                  ['x', 'y'],
                                                  'Identify the panedwindow component at point x, y\n\n        If the point is over a sash or a sash handle, the result\n        is a two element list containing the index of the sash or\n        handle, and a word indicating whether it is over a sash\n        or a handle, such as {0 sash} or {2 handle}. If the point\n        is over any other part of the panedwindow, the result is\n        an empty list.\n        '),
                                                 ('proxy', ['*args'], 'Internal function.'),
                                                 ('proxy_coord',
                                                  [],
                                                  'Return the x and y pair of the most recent proxy location\n        '),
                                                 ('proxy_forget',
                                                  [],
                                                  'Remove the proxy from the display.\n        '),
                                                 ('proxy_place',
                                                  ['x', 'y'],
                                                  'Place the proxy at the given x and y coordinates.\n        '),
                                                 ('sash', ['*args'], 'Internal function.'),
                                                 ('sash_coord',
                                                  ['index'],
                                                  'Return the current x and y pair for the sash given by index.\n\n        Index must be an integer between 0 and 1 less than the\n        number of panes in the panedwindow. The coordinates given are\n        those of the top left corner of the region containing the sash.\n        pathName sash dragto index x y This command computes the\n        difference between the given coordinates and the coordinates\n        given to the last sash coord command for the given sash. It then\n        moves that sash the computed difference. The return value is the\n        empty string.\n        '),
                                                 ('sash_mark',
                                                  ['index'],
                                                  'Records x and y for the sash given by index;\n\n        Used in conjunction with later dragto commands to move the sash.\n        '),
                                                 ('sash_place',
                                                  ['index', 'x', 'y'],
                                                  'Place the sash given by index at the given coordinates\n        '),
                                                 ('panecget',
                                                  ['child', 'option'],
                                                  'Query a management option for window.\n\n        Option may be any value allowed by the paneconfigure subcommand\n        '),
                                                 ('paneconfigure',
                                                  ['tagOrId', 'cnf=None', '**kw'],
                                                  'Query or modify the management options for window.\n\n        If no option is specified, returns a list describing all\n        of the available options for pathName.  If option is\n        specified with no value, then the command returns a list\n        describing the one named option (this list will be identical\n        to the corresponding sublist of the value returned if no\n        option is specified). If one or more option-value pairs are\n        specified, then the command modifies the given widget\n        option(s) to have the given value(s); in this case the\n        command returns an empty string. The following options\n        are supported:\n\n        after window\n            Insert the window after the window specified. window\n            should be the name of a window already managed by pathName.\n        before window\n            Insert the window before the window specified. window\n            should be the name of a window already managed by pathName.\n        height size\n            Specify a height for the window. The height will be the\n            outer dimension of the window including its border, if\n            any. If size is an empty string, or if -height is not\n            specified, then the height requested internally by the\n            window will be used initially; the height may later be\n            adjusted by the movement of sashes in the panedwindow.\n            Size may be any value accepted by Tk_GetPixels.\n        minsize n\n            Specifies that the size of the window cannot be made\n            less than n. This constraint only affects the size of\n            the widget in the paned dimension -- the x dimension\n            for horizontal panedwindows, the y dimension for\n            vertical panedwindows. May be any value accepted by\n            Tk_GetPixels.\n        padx n\n            Specifies a non-negative value indicating how much\n            extra space to leave on each side of the window in\n            the X-direction. The value may have any of the forms\n            accepted by Tk_GetPixels.\n        pady n\n            Specifies a non-negative value indicating how much\n            extra space to leave on each side of the window in\n            the Y-direction. The value may have any of the forms\n            accepted by Tk_GetPixels.\n        sticky style\n            If a window\'s pane is larger than the requested\n            dimensions of the window, this option may be used\n            to position (or stretch) the window within its pane.\n            Style is a string that contains zero or more of the\n            characters n, s, e or w. The string can optionally\n            contains spaces or commas, but they are ignored. Each\n            letter refers to a side (north, south, east, or west)\n            that the window will "stick" to. If both n and s\n            (or e and w) are specified, the window will be\n            stretched to fill the entire height (or width) of\n            its cavity.\n        width size\n            Specify a width for the window. The width will be\n            the outer dimension of the window including its\n            border, if any. If size is an empty string, or\n            if -width is not specified, then the width requested\n            internally by the window will be used initially; the\n            width may later be adjusted by the movement of sashes\n            in the panedwindow. Size may be any value accepted by\n            Tk_GetPixels.\n\n        '),
                                                 ('panes',
                                                  [],
                                                  'Returns an ordered list of the child panes.')],
                                     'properties': ['forget', 'paneconfig']},
             'Tkinter.PhotoImage': {'bases': ['Tkinter.Image'],
                                    'constructor': ['name=None',
                                                    'cnf={}',
                                                    'master=None',
                                                    '**kw'],
                                    'docstring': 'Widget which can display colored images in GIF, PPM/PGM format.',
                                    'methods': [('blank', [], 'Display a transparent image.'),
                                                ('cget',
                                                 ['option'],
                                                 'Return the value of OPTION.'),
                                                ('__getitem__', ['key'], ''),
                                                ('copy',
                                                 [],
                                                 'Return a new PhotoImage with the same image as this widget.'),
                                                ('zoom',
                                                 ['x', "y=''"],
                                                 'Return a new PhotoImage with the same image as this widget\n        but zoom it with X and Y.'),
                                                ('subsample',
                                                 ['x', "y=''"],
                                                 'Return a new PhotoImage based on the same image as this widget\n        but use only every Xth or Yth pixel.'),
                                                ('get',
                                                 ['x', 'y'],
                                                 'Return the color (red, green, blue) of the pixel at X,Y.'),
                                                ('put',
                                                 ['data', 'to=None'],
                                                 'Put row formated colors to image starting from\n        position TO, e.g. image.put("{red green} {blue yellow}", to=(4,6))'),
                                                ('write',
                                                 ['filename',
                                                  'format=None',
                                                  'from_coords=None'],
                                                 'Write image to file FILENAME in FORMAT starting from\n        position FROM_COORDS.')],
                                    'properties': []},
             'Tkinter.Place': {'bases': [],
                               'constructor': [],
                               'docstring': 'Geometry manager Place.\n\n    Base class to use the methods place_* in every widget.',
                               'methods': [('place_configure',
                                            ['cnf={}', '**kw'],
                                            'Place a widget in the parent widget. Use as options:\n        in=master - master relative to which the widget is placed\n        in_=master - see \'in\' option description\n        x=amount - locate anchor of this widget at position x of master\n        y=amount - locate anchor of this widget at position y of master\n        relx=amount - locate anchor of this widget between 0.0 and 1.0\n                      relative to width of master (1.0 is right edge)\n        rely=amount - locate anchor of this widget between 0.0 and 1.0\n                      relative to height of master (1.0 is bottom edge)\n        anchor=NSEW (or subset) - position anchor according to given direction\n        width=amount - width of this widget in pixel\n        height=amount - height of this widget in pixel\n        relwidth=amount - width of this widget between 0.0 and 1.0\n                          relative to width of master (1.0 is the same width\n                          as the master)\n        relheight=amount - height of this widget between 0.0 and 1.0\n                           relative to height of master (1.0 is the same\n                           height as the master)\n        bordermode="inside" or "outside" - whether to take border width of\n                                           master widget into account\n        '),
                                           ('place_forget', [], 'Unmap this widget.'),
                                           ('place_info',
                                            [],
                                            'Return information about the placing options\n        for this widget.')],
                               'properties': ['place',
                                              'configure',
                                              'config',
                                              'forget',
                                              'info',
                                              'slaves',
                                              'place_slaves']},
             'Tkinter.Radiobutton': {'bases': ['Tkinter.Widget'],
                                     'constructor': ['master=None', 'cnf={}', '**kw'],
                                     'docstring': 'Radiobutton widget which shows only one of several buttons in on-state.',
                                     'methods': [('deselect',
                                                  [],
                                                  'Put the button in off-state.'),
                                                 ('flash', [], 'Flash the button.'),
                                                 ('invoke',
                                                  [],
                                                  'Toggle the button and invoke a command if given as resource.'),
                                                 ('select', [], 'Put the button in on-state.')],
                                     'properties': []},
             'Tkinter.Scale': {'bases': ['Tkinter.Widget'],
                               'constructor': ['master=None', 'cnf={}', '**kw'],
                               'docstring': 'Scale widget which can display a numerical scale.',
                               'methods': [('get',
                                            [],
                                            'Get the current value as integer or float.'),
                                           ('set', ['value'], 'Set the value to VALUE.'),
                                           ('coords',
                                            ['value=None'],
                                            'Return a tuple (X,Y) of the point along the centerline of the\n        trough that corresponds to VALUE or the current value if None is\n        given.'),
                                           ('identify',
                                            ['x', 'y'],
                                            'Return where the point X,Y lies. Valid return values are "slider",\n        "though1" and "though2".')],
                               'properties': []},
             'Tkinter.Scrollbar': {'bases': ['Tkinter.Widget'],
                                   'constructor': ['master=None', 'cnf={}', '**kw'],
                                   'docstring': 'Scrollbar widget which displays a slider at a certain position.',
                                   'methods': [('activate',
                                                ['index'],
                                                'Display the element at INDEX with activebackground and activerelief.\n        INDEX can be "arrow1","slider" or "arrow2".'),
                                               ('delta',
                                                ['deltax', 'deltay'],
                                                'Return the fractional change of the scrollbar setting if it\n        would be moved by DELTAX or DELTAY pixels.'),
                                               ('fraction',
                                                ['x', 'y'],
                                                'Return the fractional value which corresponds to a slider\n        position of X,Y.'),
                                               ('identify',
                                                ['x', 'y'],
                                                'Return the element under position X,Y as one of\n        "arrow1","slider","arrow2" or "".'),
                                               ('get',
                                                [],
                                                'Return the current fractional values (upper and lower end)\n        of the slider position.'),
                                               ('set',
                                                ['*args'],
                                                'Set the fractional values of the slider position (upper and\n        lower ends as value between 0 and 1).')],
                                   'properties': []},
             'Tkinter.Spinbox': {'bases': ['Tkinter.Widget'],
                                 'constructor': ['master=None', 'cnf={}', '**kw'],
                                 'docstring': 'spinbox widget.',
                                 'methods': [('bbox',
                                              ['index'],
                                              'Return a tuple of X1,Y1,X2,Y2 coordinates for a\n        rectangle which encloses the character given by index.\n\n        The first two elements of the list give the x and y\n        coordinates of the upper-left corner of the screen\n        area covered by the character (in pixels relative\n        to the widget) and the last two elements give the\n        width and height of the character, in pixels. The\n        bounding box may refer to a region outside the\n        visible area of the window.\n        '),
                                             ('delete',
                                              ['first', 'last=None'],
                                              "Delete one or more elements of the spinbox.\n\n        First is the index of the first character to delete,\n        and last is the index of the character just after\n        the last one to delete. If last isn't specified it\n        defaults to first+1, i.e. a single character is\n        deleted.  This command returns an empty string.\n        "),
                                             ('get', [], "Returns the spinbox's string"),
                                             ('icursor',
                                              ['index'],
                                              'Alter the position of the insertion cursor.\n\n        The insertion cursor will be displayed just before\n        the character given by index. Returns an empty string\n        '),
                                             ('identify',
                                              ['x', 'y'],
                                              'Returns the name of the widget at position x, y\n\n        Return value is one of: none, buttondown, buttonup, entry\n        '),
                                             ('index',
                                              ['index'],
                                              'Returns the numerical index corresponding to index\n        '),
                                             ('insert',
                                              ['index', 's'],
                                              'Insert string s at index\n\n         Returns an empty string.\n        '),
                                             ('invoke',
                                              ['element'],
                                              'Causes the specified element to be invoked\n\n        The element could be buttondown or buttonup\n        triggering the action associated with it.\n        '),
                                             ('scan', ['*args'], 'Internal function.'),
                                             ('scan_mark',
                                              ['x'],
                                              'Records x and the current view in the spinbox window;\n\n        used in conjunction with later scan dragto commands.\n        Typically this command is associated with a mouse button\n        press in the widget. It returns an empty string.\n        '),
                                             ('scan_dragto',
                                              ['x'],
                                              'Compute the difference between the given x argument\n        and the x argument to the last scan mark command\n\n        It then adjusts the view left or right by 10 times the\n        difference in x-coordinates. This command is typically\n        associated with mouse motion events in the widget, to\n        produce the effect of dragging the spinbox at high speed\n        through the window. The return value is an empty string.\n        '),
                                             ('selection', ['*args'], 'Internal function.'),
                                             ('selection_adjust',
                                              ['index'],
                                              "Locate the end of the selection nearest to the character\n        given by index,\n\n        Then adjust that end of the selection to be at index\n        (i.e including but not going beyond index). The other\n        end of the selection is made the anchor point for future\n        select to commands. If the selection isn't currently in\n        the spinbox, then a new selection is created to include\n        the characters between index and the most recent selection\n        anchor point, inclusive. Returns an empty string.\n        "),
                                             ('selection_clear',
                                              [],
                                              "Clear the selection\n\n        If the selection isn't in this widget then the\n        command has no effect. Returns an empty string.\n        "),
                                             ('selection_element',
                                              ['element=None'],
                                              'Sets or gets the currently selected element.\n\n        If a spinbutton element is specified, it will be\n        displayed depressed\n        ')],
                                 'properties': []},
             'Tkinter.StringVar': {'bases': ['Tkinter.Variable'],
                                   'constructor': ['master=None', 'value=None', 'name=None'],
                                   'docstring': 'Value holder for strings variables.',
                                   'methods': [('get',
                                                [],
                                                'Return value of variable as string.')],
                                   'properties': ['_default']},
             'Tkinter.Studbutton': {'bases': ['Tkinter.Button'],
                                    'constructor': ['master=None', 'cnf={}', '**kw'],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'Tkinter.Text': {'bases': ['Tkinter.Widget'],
                              'constructor': ['master=None', 'cnf={}', '**kw'],
                              'docstring': 'Text widget which can display text in various forms.',
                              'methods': [('bbox',
                                           ['*args'],
                                           'Return a tuple of (x,y,width,height) which gives the bounding\n        box of the visible part of the character at the index in ARGS.'),
                                          ('tk_textSelectTo', ['index'], ''),
                                          ('tk_textBackspace', [], ''),
                                          ('tk_textIndexCloser', ['a', 'b', 'c'], ''),
                                          ('tk_textResetAnchor', ['index'], ''),
                                          ('compare',
                                           ['index1', 'op', 'index2'],
                                           'Return whether between index INDEX1 and index INDEX2 the\n        relation OP is satisfied. OP is one of <, <=, ==, >=, >, or !=.'),
                                          ('debug',
                                           ['boolean=None'],
                                           'Turn on the internal consistency checks of the B-Tree inside the text\n        widget according to BOOLEAN.'),
                                          ('delete',
                                           ['index1', 'index2=None'],
                                           'Delete the characters between INDEX1 and INDEX2 (not included).'),
                                          ('dlineinfo',
                                           ['index'],
                                           'Return tuple (x,y,width,height,baseline) giving the bounding box\n        and baseline position of the visible part of the line containing\n        the character at INDEX.'),
                                          ('dump',
                                           ['index1', 'index2=None', 'command=None', '**kw'],
                                           "Return the contents of the widget between index1 and index2.\n\n        The type of contents returned in filtered based on the keyword\n        parameters; if 'all', 'image', 'mark', 'tag', 'text', or 'window' are\n        given and true, then the corresponding items are returned. The result\n        is a list of triples of the form (key, value, index). If none of the\n        keywords are true then 'all' is used by default.\n\n        If the 'command' argument is given, it is called once for each element\n        of the list of triples, with the values of each triple serving as the\n        arguments to the function. In this case the list is not returned."),
                                          ('edit',
                                           ['*args'],
                                           'Internal method\n\n        This method controls the undo mechanism and\n        the modified flag. The exact behavior of the\n        command depends on the option argument that\n        follows the edit argument. The following forms\n        of the command are currently supported:\n\n        edit_modified, edit_redo, edit_reset, edit_separator\n        and edit_undo\n\n        '),
                                          ('edit_modified',
                                           ['arg=None'],
                                           'Get or Set the modified flag\n\n        If arg is not specified, returns the modified\n        flag of the widget. The insert, delete, edit undo and\n        edit redo commands or the user can set or clear the\n        modified flag. If boolean is specified, sets the\n        modified flag of the widget to arg.\n        '),
                                          ('edit_redo',
                                           [],
                                           'Redo the last undone edit\n\n        When the undo option is true, reapplies the last\n        undone edits provided no other edits were done since\n        then. Generates an error when the redo stack is empty.\n        Does nothing when the undo option is false.\n        '),
                                          ('edit_reset',
                                           [],
                                           'Clears the undo and redo stacks\n        '),
                                          ('edit_separator',
                                           [],
                                           'Inserts a separator (boundary) on the undo stack.\n\n        Does nothing when the undo option is false\n        '),
                                          ('edit_undo',
                                           [],
                                           'Undoes the last edit action\n\n        If the undo option is true. An edit action is defined\n        as all the insert and delete commands that are recorded\n        on the undo stack in between two separators. Generates\n        an error when the undo stack is empty. Does nothing\n        when the undo option is false\n        '),
                                          ('get',
                                           ['index1', 'index2=None'],
                                           'Return the text from INDEX1 to INDEX2 (not included).'),
                                          ('image_cget',
                                           ['index', 'option'],
                                           'Return the value of OPTION of an embedded image at INDEX.'),
                                          ('image_configure',
                                           ['index', 'cnf=None', '**kw'],
                                           'Configure an embedded image at INDEX.'),
                                          ('image_create',
                                           ['index', 'cnf={}', '**kw'],
                                           'Create an embedded image at INDEX.'),
                                          ('image_names',
                                           [],
                                           'Return all names of embedded images in this widget.'),
                                          ('index',
                                           ['index'],
                                           'Return the index in the form line.char for INDEX.'),
                                          ('insert',
                                           ['index', 'chars', '*args'],
                                           'Insert CHARS before the characters at INDEX. An additional\n        tag can be given in ARGS. Additional CHARS and tags can follow in ARGS.'),
                                          ('mark_gravity',
                                           ['markName', 'direction=None'],
                                           'Change the gravity of a mark MARKNAME to DIRECTION (LEFT or RIGHT).\n        Return the current value if None is given for DIRECTION.'),
                                          ('mark_names', [], 'Return all mark names.'),
                                          ('mark_set',
                                           ['markName', 'index'],
                                           'Set mark MARKNAME before the character at INDEX.'),
                                          ('mark_unset',
                                           ['*markNames'],
                                           'Delete all marks in MARKNAMES.'),
                                          ('mark_next',
                                           ['index'],
                                           'Return the name of the next mark after INDEX.'),
                                          ('mark_previous',
                                           ['index'],
                                           'Return the name of the previous mark before INDEX.'),
                                          ('scan_mark',
                                           ['x', 'y'],
                                           'Remember the current X, Y coordinates.'),
                                          ('scan_dragto',
                                           ['x', 'y'],
                                           'Adjust the view of the text to 10 times the\n        difference between X and Y and the coordinates given in\n        scan_mark.'),
                                          ('search',
                                           ['pattern',
                                            'index',
                                            'stopindex=None',
                                            'forwards=None',
                                            'backwards=None',
                                            'exact=None',
                                            'regexp=None',
                                            'nocase=None',
                                            'count=None'],
                                           'Search PATTERN beginning from INDEX until STOPINDEX.\n        Return the index of the first character of a match or an empty string.'),
                                          ('see',
                                           ['index'],
                                           'Scroll such that the character at INDEX is visible.'),
                                          ('tag_add',
                                           ['tagName', 'index1', '*args'],
                                           'Add tag TAGNAME to all characters between INDEX1 and index2 in ARGS.\n        Additional pairs of indices may follow in ARGS.'),
                                          ('tag_unbind',
                                           ['tagName', 'sequence', 'funcid=None'],
                                           'Unbind for all characters with TAGNAME for event SEQUENCE  the\n        function identified with FUNCID.'),
                                          ('tag_bind',
                                           ['tagName', 'sequence', 'func', 'add=None'],
                                           'Bind to all characters with TAGNAME at event SEQUENCE a call to function FUNC.\n\n        An additional boolean parameter ADD specifies whether FUNC will be\n        called additionally to the other bound function or whether it will\n        replace the previous function. See bind for the return value.'),
                                          ('tag_cget',
                                           ['tagName', 'option'],
                                           'Return the value of OPTION for tag TAGNAME.'),
                                          ('tag_configure',
                                           ['tagName', 'cnf=None', '**kw'],
                                           'Configure a tag TAGNAME.'),
                                          ('tag_delete',
                                           ['*tagNames'],
                                           'Delete all tags in TAGNAMES.'),
                                          ('tag_lower',
                                           ['tagName', 'belowThis=None'],
                                           'Change the priority of tag TAGNAME such that it is lower\n        than the priority of BELOWTHIS.'),
                                          ('tag_names',
                                           ['index=None'],
                                           'Return a list of all tag names.'),
                                          ('tag_nextrange',
                                           ['tagName', 'index1', 'index2=None'],
                                           'Return a list of start and end index for the first sequence of\n        characters between INDEX1 and INDEX2 which all have tag TAGNAME.\n        The text is searched forward from INDEX1.'),
                                          ('tag_prevrange',
                                           ['tagName', 'index1', 'index2=None'],
                                           'Return a list of start and end index for the first sequence of\n        characters between INDEX1 and INDEX2 which all have tag TAGNAME.\n        The text is searched backwards from INDEX1.'),
                                          ('tag_raise',
                                           ['tagName', 'aboveThis=None'],
                                           'Change the priority of tag TAGNAME such that it is higher\n        than the priority of ABOVETHIS.'),
                                          ('tag_ranges',
                                           ['tagName'],
                                           'Return a list of ranges of text which have tag TAGNAME.'),
                                          ('tag_remove',
                                           ['tagName', 'index1', 'index2=None'],
                                           'Remove tag TAGNAME from all characters between INDEX1 and INDEX2.'),
                                          ('window_cget',
                                           ['index', 'option'],
                                           'Return the value of OPTION of an embedded window at INDEX.'),
                                          ('window_configure',
                                           ['index', 'cnf=None', '**kw'],
                                           'Configure an embedded window at INDEX.'),
                                          ('window_create',
                                           ['index', 'cnf={}', '**kw'],
                                           'Create a window at INDEX.'),
                                          ('window_names',
                                           [],
                                           'Return all names of embedded windows in this widget.'),
                                          ('xview',
                                           ['*what'],
                                           'Query and change horizontal position of the view.'),
                                          ('xview_moveto',
                                           ['fraction'],
                                           'Adjusts the view in the window so that FRACTION of the\n        total width of the canvas is off-screen to the left.'),
                                          ('xview_scroll',
                                           ['number', 'what'],
                                           'Shift the x-view according to NUMBER which is measured\n        in "units" or "pages" (WHAT).'),
                                          ('yview',
                                           ['*what'],
                                           'Query and change vertical position of the view.'),
                                          ('yview_moveto',
                                           ['fraction'],
                                           'Adjusts the view in the window so that FRACTION of the\n        total height of the canvas is off-screen to the top.'),
                                          ('yview_scroll',
                                           ['number', 'what'],
                                           'Shift the y-view according to NUMBER which is measured\n        in "units" or "pages" (WHAT).'),
                                          ('yview_pickplace',
                                           ['*what'],
                                           'Obsolete function, use see.')],
                              'properties': ['tag_config', 'window_config']},
             'Tkinter.Tk': {'bases': ['Tkinter.Misc', 'Tkinter.Wm'],
                            'constructor': ['screenName=None',
                                            'baseName=None',
                                            "className='Tk'",
                                            'useTk=1',
                                            'sync=0',
                                            'use=None'],
                            'docstring': 'Toplevel widget of Tk which represents mostly the main window\n    of an appliation. It has an associated Tcl interpreter.',
                            'methods': [('loadtk', [], ''),
                                        ('_loadtk', [], ''),
                                        ('destroy',
                                         [],
                                         'Destroy this and all descendants widgets. This will\n        end the application of this Tcl interpreter.'),
                                        ('readprofile',
                                         ['baseName', 'className'],
                                         'Internal function. It reads BASENAME.tcl and CLASSNAME.tcl into\n        the Tcl Interpreter and calls execfile on BASENAME.py and CLASSNAME.py if\n        such a file exists in the home directory.'),
                                        ('report_callback_exception',
                                         ['exc', 'val', 'tb'],
                                         'Internal function. It reports exception on sys.stderr.'),
                                        ('__getattr__',
                                         ['attr'],
                                         'Delegate attribute access to the interpreter object')],
                            'properties': ['_w',
                                           'master',
                                           'children',
                                           '_tkloaded',
                                           'tk',
                                           '_tclCommands']},
             'Tkinter.Toplevel': {'bases': ['Tkinter.BaseWidget', 'Tkinter.Wm'],
                                  'constructor': ['master=None', 'cnf={}', '**kw'],
                                  'docstring': 'Toplevel widget, e.g. for dialogs.',
                                  'methods': [],
                                  'properties': []},
             'Tkinter.Tributton': {'bases': ['Tkinter.Button'],
                                   'constructor': ['master=None', 'cnf={}', '**kw'],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': []},
             'Tkinter.Variable': {'bases': [],
                                  'constructor': ['master=None', 'value=None', 'name=None'],
                                  'docstring': 'Class to define value holders for e.g. buttons.\n\n    Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations\n    that constrain the type of the value returned from get().',
                                  'methods': [('__del__', [], 'Unset the variable in Tcl.'),
                                              ('__str__',
                                               [],
                                               'Return the name of the variable in Tcl.'),
                                              ('set', ['value'], 'Set the variable to VALUE.'),
                                              ('get', [], 'Return value of variable.'),
                                              ('trace_variable',
                                               ['mode', 'callback'],
                                               'Define a trace callback for the variable.\n\n        MODE is one of "r", "w", "u" for read, write, undefine.\n        CALLBACK must be a function which is called when\n        the variable is read, written or undefined.\n\n        Return the name of the callback.\n        '),
                                              ('trace_vdelete',
                                               ['mode', 'cbname'],
                                               'Delete the trace callback for a variable.\n\n        MODE is one of "r", "w", "u" for read, write, undefine.\n        CBNAME is the name of the callback returned from trace_variable or trace.\n        '),
                                              ('trace_vinfo',
                                               [],
                                               'Return all trace callback information.'),
                                              ('__eq__',
                                               ['other'],
                                               "Comparison for equality (==).\n\n        Note: if the Variable's master matters to behavior\n        also compare self._master == other._master\n        ")],
                                  'properties': ['_default', '_master', '_tk', '_name', 'trace']},
             'Tkinter.Widget': {'bases': ['Tkinter.BaseWidget',
                                          'Tkinter.Pack',
                                          'Tkinter.Place',
                                          'Tkinter.Grid'],
                                'constructor': [],
                                'docstring': 'Internal class.\n\n    Base class for a widget which can be positioned with the geometry managers\n    Pack, Place or Grid.',
                                'methods': [],
                                'properties': []},
             'Tkinter.Wm': {'bases': [],
                            'constructor': [],
                            'docstring': 'Provides functions for the communication with the window manager.',
                            'methods': [('wm_aspect',
                                         ['minNumer=None',
                                          'minDenom=None',
                                          'maxNumer=None',
                                          'maxDenom=None'],
                                         'Instruct the window manager to set the aspect ratio (width/height)\n        of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple\n        of the actual values if no argument is given.'),
                                        ('wm_attributes',
                                         ['*args'],
                                         'This subcommand returns or sets platform specific attributes\n\n        The first form returns a list of the platform specific flags and\n        their values. The second form returns the value for the specific\n        option. The third form sets one or more of the values. The values\n        are as follows:\n\n        On Windows, -disabled gets or sets whether the window is in a\n        disabled state. -toolwindow gets or sets the style of the window\n        to toolwindow (as defined in the MSDN). -topmost gets or sets\n        whether this is a topmost window (displays above all other\n        windows).\n\n        On Macintosh, XXXXX\n\n        On Unix, there are currently no special attribute values.\n        '),
                                        ('wm_client',
                                         ['name=None'],
                                         'Store NAME in WM_CLIENT_MACHINE property of this widget. Return\n        current value.'),
                                        ('wm_colormapwindows',
                                         ['*wlist'],
                                         'Store list of window names (WLIST) into WM_COLORMAPWINDOWS property\n        of this widget. This list contains windows whose colormaps differ from their\n        parents. Return current list of widgets if WLIST is empty.'),
                                        ('wm_command',
                                         ['value=None'],
                                         'Store VALUE in WM_COMMAND property. It is the command\n        which shall be used to invoke the application. Return current\n        command if VALUE is None.'),
                                        ('wm_deiconify',
                                         [],
                                         'Deiconify this widget. If it was never mapped it will not be mapped.\n        On Windows it will raise this widget and give it the focus.'),
                                        ('wm_focusmodel',
                                         ['model=None'],
                                         'Set focus model to MODEL. "active" means that this widget will claim\n        the focus itself, "passive" means that the window manager shall give\n        the focus. Return current focus model if MODEL is None.'),
                                        ('wm_frame',
                                         [],
                                         'Return identifier for decorative frame of this widget if present.'),
                                        ('wm_geometry',
                                         ['newGeometry=None'],
                                         'Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return\n        current value if None is given.'),
                                        ('wm_grid',
                                         ['baseWidth=None',
                                          'baseHeight=None',
                                          'widthInc=None',
                                          'heightInc=None'],
                                         'Instruct the window manager that this widget shall only be\n        resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and\n        height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the\n        number of grid units requested in Tk_GeometryRequest.'),
                                        ('wm_group',
                                         ['pathName=None'],
                                         'Set the group leader widgets for related widgets to PATHNAME. Return\n        the group leader of this widget if None is given.'),
                                        ('wm_iconbitmap',
                                         ['bitmap=None', 'default=None'],
                                         "Set bitmap for the iconified widget to BITMAP. Return\n        the bitmap if None is given.\n\n        Under Windows, the DEFAULT parameter can be used to set the icon\n        for the widget and any descendents that don't have an icon set\n        explicitly.  DEFAULT can be the relative path to a .ico file\n        (example: root.iconbitmap(default='myicon.ico') ).  See Tk\n        documentation for more information."),
                                        ('wm_iconify', [], 'Display widget as icon.'),
                                        ('wm_iconmask',
                                         ['bitmap=None'],
                                         'Set mask for the icon bitmap of this widget. Return the\n        mask if None is given.'),
                                        ('wm_iconname',
                                         ['newName=None'],
                                         'Set the name of the icon for this widget. Return the name if\n        None is given.'),
                                        ('wm_iconposition',
                                         ['x=None', 'y=None'],
                                         'Set the position of the icon of this widget to X and Y. Return\n        a tuple of the current values of X and X if None is given.'),
                                        ('wm_iconwindow',
                                         ['pathName=None'],
                                         'Set widget PATHNAME to be displayed instead of icon. Return the current\n        value if None is given.'),
                                        ('wm_maxsize',
                                         ['width=None', 'height=None'],
                                         'Set max WIDTH and HEIGHT for this widget. If the window is gridded\n        the values are given in grid units. Return the current values if None\n        is given.'),
                                        ('wm_minsize',
                                         ['width=None', 'height=None'],
                                         'Set min WIDTH and HEIGHT for this widget. If the window is gridded\n        the values are given in grid units. Return the current values if None\n        is given.'),
                                        ('wm_overrideredirect',
                                         ['boolean=None'],
                                         'Instruct the window manager to ignore this widget\n        if BOOLEAN is given with 1. Return the current value if None\n        is given.'),
                                        ('wm_positionfrom',
                                         ['who=None'],
                                         'Instruct the window manager that the position of this widget shall\n        be defined by the user if WHO is "user", and by its own policy if WHO is\n        "program".'),
                                        ('wm_protocol',
                                         ['name=None', 'func=None'],
                                         'Bind function FUNC to command NAME for this widget.\n        Return the function bound to NAME if None is given. NAME could be\n        e.g. "WM_SAVE_YOURSELF" or "WM_DELETE_WINDOW".'),
                                        ('wm_resizable',
                                         ['width=None', 'height=None'],
                                         'Instruct the window manager whether this width can be resized\n        in WIDTH or HEIGHT. Both values are boolean values.'),
                                        ('wm_sizefrom',
                                         ['who=None'],
                                         'Instruct the window manager that the size of this widget shall\n        be defined by the user if WHO is "user", and by its own policy if WHO is\n        "program".'),
                                        ('wm_state',
                                         ['newstate=None'],
                                         'Query or set the state of this widget as one of normal, icon,\n        iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).'),
                                        ('wm_title',
                                         ['string=None'],
                                         'Set the title of this widget.'),
                                        ('wm_transient',
                                         ['master=None'],
                                         'Instruct the window manager that this widget is transient\n        with regard to widget MASTER.'),
                                        ('wm_withdraw',
                                         [],
                                         'Withdraw this widget from the screen such that it is unmapped\n        and forgotten by the window manager. Re-draw it with wm_deiconify.')],
                            'properties': ['aspect',
                                           'attributes',
                                           'client',
                                           'colormapwindows',
                                           'command',
                                           'deiconify',
                                           'focusmodel',
                                           'frame',
                                           'geometry',
                                           'grid',
                                           'group',
                                           'iconbitmap',
                                           'iconify',
                                           'iconmask',
                                           'iconname',
                                           'iconposition',
                                           'iconwindow',
                                           'maxsize',
                                           'minsize',
                                           'overrideredirect',
                                           'positionfrom',
                                           'protocol',
                                           'resizable',
                                           'sizefrom',
                                           'state',
                                           'title',
                                           'transient',
                                           'withdraw']},
             'Tkinter._setit': {'bases': [],
                                'constructor': ['var', 'value', 'callback=None'],
                                'docstring': 'Internal class. It wraps the command in the widget OptionMenu.',
                                'methods': [('__call__', ['*args'], '')],
                                'properties': ['__value', '__var', '__callback']},
             'UserDict.DictMixin': {'bases': [],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('__iter__', [], ''),
                                                ('has_key', ['key'], ''),
                                                ('__contains__', ['key'], ''),
                                                ('iteritems', [], ''),
                                                ('iterkeys', [], ''),
                                                ('itervalues', [], ''),
                                                ('values', [], ''),
                                                ('items', [], ''),
                                                ('clear', [], ''),
                                                ('setdefault', ['key', 'default=None'], ''),
                                                ('pop', ['key', '*args'], ''),
                                                ('popitem', [], ''),
                                                ('update', ['other=None', '**kwargs'], ''),
                                                ('get', ['key', 'default=None'], ''),
                                                ('__repr__', [], ''),
                                                ('__cmp__', ['other'], ''),
                                                ('__len__', [], '')],
                                    'properties': []},
             'UserDict.IterableUserDict': {'bases': ['UserDict.UserDict'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('__iter__', [], '')],
                                           'properties': []},
             'UserDict.UserDict': {'bases': [],
                                   'constructor': ['dict=None', '**kwargs'],
                                   'docstring': '',
                                   'methods': [('__repr__', [], ''),
                                               ('__cmp__', ['dict'], ''),
                                               ('__len__', [], ''),
                                               ('__getitem__', ['key'], ''),
                                               ('__setitem__', ['key', 'item'], ''),
                                               ('__delitem__', ['key'], ''),
                                               ('clear', [], ''),
                                               ('copy', [], ''),
                                               ('keys', [], ''),
                                               ('items', [], ''),
                                               ('iteritems', [], ''),
                                               ('iterkeys', [], ''),
                                               ('itervalues', [], ''),
                                               ('values', [], ''),
                                               ('has_key', ['key'], ''),
                                               ('update', ['dict=None', '**kwargs'], ''),
                                               ('get', ['key', 'failobj=None'], ''),
                                               ('setdefault', ['key', 'failobj=None'], ''),
                                               ('pop', ['key', '*args'], ''),
                                               ('popitem', [], ''),
                                               ('__contains__', ['key'], ''),
                                               ('fromkeys', ['iterable', 'value=None'], '')],
                                   'properties': ['data']},
             'UserList.UserList': {'bases': [],
                                   'constructor': ['initlist=None'],
                                   'docstring': '',
                                   'methods': [('__repr__', [], ''),
                                               ('__lt__', ['other'], ''),
                                               ('__le__', ['other'], ''),
                                               ('__eq__', ['other'], ''),
                                               ('__ne__', ['other'], ''),
                                               ('__gt__', ['other'], ''),
                                               ('__ge__', ['other'], ''),
                                               ('__cast', ['other'], ''),
                                               ('__cmp__', ['other'], ''),
                                               ('__contains__', ['item'], ''),
                                               ('__len__', [], ''),
                                               ('__getitem__', ['i'], ''),
                                               ('__setitem__', ['i', 'item'], ''),
                                               ('__delitem__', ['i'], ''),
                                               ('__getslice__', ['i', 'j'], ''),
                                               ('__setslice__', ['i', 'j', 'other'], ''),
                                               ('__delslice__', ['i', 'j'], ''),
                                               ('__add__', ['other'], ''),
                                               ('__radd__', ['other'], ''),
                                               ('__iadd__', ['other'], ''),
                                               ('__mul__', ['n'], ''),
                                               ('__imul__', ['n'], ''),
                                               ('append', ['item'], ''),
                                               ('insert', ['i', 'item'], ''),
                                               ('pop', ['i=-1'], ''),
                                               ('remove', ['item'], ''),
                                               ('count', ['item'], ''),
                                               ('index', ['item', '*args'], ''),
                                               ('reverse', [], ''),
                                               ('sort', ['*args', '**kwds'], ''),
                                               ('extend', ['other'], '')],
                                   'properties': ['data', '__rmul__']},
             'UserString.MutableString': {'bases': ['UserString.UserString'],
                                          'constructor': ["string=''"],
                                          'docstring': "mutable string objects\n\n    Python strings are immutable objects.  This has the advantage, that\n    strings may be used as dictionary keys.  If this property isn't needed\n    and you insist on changing string values in place instead, you may cheat\n    and use MutableString.\n\n    But the purpose of this class is an educational one: to prevent\n    people from inventing their own mutable string class derived\n    from UserString and than forget thereby to remove (override) the\n    __hash__ method inherited from UserString.  This would lead to\n    errors that would be very hard to track down.\n\n    A faster and better solution is to rewrite your program using lists.",
                                          'methods': [('__hash__', [], ''),
                                                      ('__setitem__', ['index', 'sub'], ''),
                                                      ('__delitem__', ['index'], ''),
                                                      ('__setslice__',
                                                       ['start', 'end', 'sub'],
                                                       ''),
                                                      ('__delslice__', ['start', 'end'], ''),
                                                      ('immutable', [], ''),
                                                      ('__iadd__', ['other'], ''),
                                                      ('__imul__', ['n'], '')],
                                          'properties': ['data']},
             'UserString.UserString': {'bases': [],
                                       'constructor': ['seq'],
                                       'docstring': '',
                                       'methods': [('__str__', [], ''),
                                                   ('__repr__', [], ''),
                                                   ('__int__', [], ''),
                                                   ('__long__', [], ''),
                                                   ('__float__', [], ''),
                                                   ('__complex__', [], ''),
                                                   ('__hash__', [], ''),
                                                   ('__cmp__', ['string'], ''),
                                                   ('__contains__', ['char'], ''),
                                                   ('__len__', [], ''),
                                                   ('__getitem__', ['index'], ''),
                                                   ('__getslice__', ['start', 'end'], ''),
                                                   ('__add__', ['other'], ''),
                                                   ('__radd__', ['other'], ''),
                                                   ('__mul__', ['n'], ''),
                                                   ('__mod__', ['args'], ''),
                                                   ('capitalize', [], ''),
                                                   ('center', ['width', '*args'], ''),
                                                   ('count',
                                                    ['sub', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('decode',
                                                    ['encoding=None', 'errors=None'],
                                                    ''),
                                                   ('encode',
                                                    ['encoding=None', 'errors=None'],
                                                    ''),
                                                   ('endswith',
                                                    ['suffix', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('expandtabs', ['tabsize=8'], ''),
                                                   ('find',
                                                    ['sub', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('index',
                                                    ['sub', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('isalpha', [], ''),
                                                   ('isalnum', [], ''),
                                                   ('isdecimal', [], ''),
                                                   ('isdigit', [], ''),
                                                   ('islower', [], ''),
                                                   ('isnumeric', [], ''),
                                                   ('isspace', [], ''),
                                                   ('istitle', [], ''),
                                                   ('isupper', [], ''),
                                                   ('join', ['seq'], ''),
                                                   ('ljust', ['width', '*args'], ''),
                                                   ('lower', [], ''),
                                                   ('lstrip', ['chars=None'], ''),
                                                   ('partition', ['sep'], ''),
                                                   ('replace',
                                                    ['old', 'new', 'maxsplit=-1'],
                                                    ''),
                                                   ('rfind',
                                                    ['sub', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('rindex',
                                                    ['sub', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('rjust', ['width', '*args'], ''),
                                                   ('rpartition', ['sep'], ''),
                                                   ('rstrip', ['chars=None'], ''),
                                                   ('split', ['sep=None', 'maxsplit=-1'], ''),
                                                   ('rsplit', ['sep=None', 'maxsplit=-1'], ''),
                                                   ('splitlines', ['keepends=0'], ''),
                                                   ('startswith',
                                                    ['prefix', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('strip', ['chars=None'], ''),
                                                   ('swapcase', [], ''),
                                                   ('title', [], ''),
                                                   ('translate', ['*args'], ''),
                                                   ('upper', [], ''),
                                                   ('zfill', ['width'], '')],
                                       'properties': ['data', '__rmul__']},
             '_LWPCookieJar.LWPCookieJar': {'bases': ['cookielib.FileCookieJar'],
                                            'constructor': [],
                                            'docstring': '\n    The LWPCookieJar saves a sequence of"Set-Cookie3" lines.\n    "Set-Cookie3" is the format used by the libwww-perl libary, not known\n    to be compatible with any browser, but which is easy to read and\n    doesn\'t lose information about RFC 2965 cookies.\n\n    Additional methods\n\n    as_lwp_str(ignore_discard=True, ignore_expired=True)\n\n    ',
                                            'methods': [('as_lwp_str',
                                                         ['ignore_discard=True',
                                                          'ignore_expires=True'],
                                                         'Return cookies as a string of "\n"-separated "Set-Cookie3" headers.\n\n        ignore_discard and ignore_expires: see docstring for FileCookieJar.save\n\n        '),
                                                        ('save',
                                                         ['filename=None',
                                                          'ignore_discard=False',
                                                          'ignore_expires=False'],
                                                         ''),
                                                        ('_really_load',
                                                         ['f',
                                                          'filename',
                                                          'ignore_discard',
                                                          'ignore_expires'],
                                                         '')],
                                            'properties': []},
             '_MozillaCookieJar.MozillaCookieJar': {'bases': ['cookielib.FileCookieJar'],
                                                    'constructor': [],
                                                    'docstring': "\n\n    WARNING: you may want to backup your browser's cookies file if you use\n    this class to save cookies.  I *think* it works, but there have been\n    bugs in the past!\n\n    This class differs from CookieJar only in the format it uses to save and\n    load cookies to and from a file.  This class uses the Mozilla/Netscape\n    `cookies.txt' format.  lynx uses this file format, too.\n\n    Don't expect cookies saved while the browser is running to be noticed by\n    the browser (in fact, Mozilla on unix will overwrite your saved cookies if\n    you change them on disk while it's running; on Windows, you probably can't\n    save at all while the browser is running).\n\n    Note that the Mozilla/Netscape format will downgrade RFC2965 cookies to\n    Netscape cookies on saving.\n\n    In particular, the cookie version and port number information is lost,\n    together with information about whether or not Path, Port and Discard were\n    specified by the Set-Cookie2 (or Set-Cookie) header, and whether or not the\n    domain as set in the HTTP header started with a dot (yes, I'm aware some\n    domains in Netscape files start with a dot and some don't -- trust me, you\n    really don't want to know any more about this).\n\n    Note that though Mozilla and Netscape use the same format, they use\n    slightly different headers.  The class saves cookies using the Netscape\n    header by default (Mozilla can cope with that).\n\n    ",
                                                    'methods': [('_really_load',
                                                                 ['f',
                                                                  'filename',
                                                                  'ignore_discard',
                                                                  'ignore_expires'],
                                                                 ''),
                                                                ('save',
                                                                 ['filename=None',
                                                                  'ignore_discard=False',
                                                                  'ignore_expires=False'],
                                                                 '')],
                                                    'properties': ['magic_re', 'header']},
             '__future__._Feature': {'bases': [],
                                     'constructor': ['optionalRelease',
                                                     'mandatoryRelease',
                                                     'compiler_flag'],
                                     'docstring': '',
                                     'methods': [('getOptionalRelease',
                                                  [],
                                                  'Return first release in which this feature was recognized.\n\n        This is a 5-tuple, of the same form as sys.version_info.\n        '),
                                                 ('getMandatoryRelease',
                                                  [],
                                                  'Return release in which this feature will become mandatory.\n\n        This is a 5-tuple, of the same form as sys.version_info, or, if\n        the feature was dropped, is None.\n        '),
                                                 ('__repr__', [], '')],
                                     'properties': ['optional', 'mandatory', 'compiler_flag']},
             '_strptime.LocaleTime': {'bases': ['object'],
                                      'constructor': [],
                                      'docstring': 'Stores and handles locale-specific information related to time.\n\n    ATTRIBUTES:\n        f_weekday -- full weekday names (7-item list)\n        a_weekday -- abbreviated weekday names (7-item list)\n        f_month -- full month names (13-item list; dummy value in [0], which\n                    is added by code)\n        a_month -- abbreviated month names (13-item list, dummy value in\n                    [0], which is added by code)\n        am_pm -- AM/PM representation (2-item list)\n        LC_date_time -- format string for date/time representation (string)\n        LC_date -- format string for date representation (string)\n        LC_time -- format string for time representation (string)\n        timezone -- daylight- and non-daylight-savings timezone representation\n                    (2-item list of sets)\n        lang -- Language used by instance (2-item tuple)\n    ',
                                      'methods': [('__pad', ['seq', 'front'], ''),
                                                  ('__calc_weekday', [], ''),
                                                  ('__calc_month', [], ''),
                                                  ('__calc_am_pm', [], ''),
                                                  ('__calc_date_time', [], ''),
                                                  ('__calc_timezone', [], '')],
                                      'properties': ['lang',
                                                     'a_weekday',
                                                     'f_weekday',
                                                     'a_month',
                                                     'f_month',
                                                     'am_pm',
                                                     'LC_date_time',
                                                     'LC_date',
                                                     'LC_time',
                                                     'timezone']},
             '_strptime.TimeRE': {'bases': ['dict'],
                                  'constructor': ['locale_time=None'],
                                  'docstring': 'Handle conversion from format directives to regexes.',
                                  'methods': [('__seqToRE',
                                               ['to_convert', 'directive'],
                                               "Convert a list to a regex string for matching a directive.\n\n        Want possible matching values to be from longest to shortest.  This\n        prevents the possibility of a match occuring for a value that also\n        a substring of a larger value that should have matched (e.g., 'abc'\n        matching when 'abcdef' should have been the match).\n\n        "),
                                              ('pattern',
                                               ['format'],
                                               'Return regex pattern for the format string.\n\n        Need to make sure that any characters that might be interpreted as\n        regex syntax are escaped.\n\n        '),
                                              ('compile',
                                               ['format'],
                                               'Return a compiled re object for the format string.')],
                                  'properties': ['locale_time']},
             '_threading_local._localbase': {'bases': ['object'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('__new__', ['*args', '**kw'], '')],
                                             'properties': ['__slots__']},
             '_threading_local.local': {'bases': ['_threading_local._localbase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('__getattribute__', ['name'], ''),
                                                    ('__setattr__', ['name', 'value'], ''),
                                                    ('__delattr__', ['name'], ''),
                                                    ('__del__', [], '')],
                                        'properties': []},
             'aifc.Aifc_read': {'bases': [],
                                'constructor': ['f'],
                                'docstring': '',
                                'methods': [('initfp', ['file'], ''),
                                            ('getfp', [], ''),
                                            ('rewind', [], ''),
                                            ('close', [], ''),
                                            ('tell', [], ''),
                                            ('getnchannels', [], ''),
                                            ('getnframes', [], ''),
                                            ('getsampwidth', [], ''),
                                            ('getframerate', [], ''),
                                            ('getcomptype', [], ''),
                                            ('getcompname', [], ''),
                                            ('getparams', [], ''),
                                            ('getmarkers', [], ''),
                                            ('getmark', ['id'], ''),
                                            ('setpos', ['pos'], ''),
                                            ('readframes', ['nframes'], ''),
                                            ('_decomp_data', ['data'], ''),
                                            ('_ulaw2lin', ['data'], ''),
                                            ('_adpcm2lin', ['data'], ''),
                                            ('_read_comm_chunk', ['chunk'], ''),
                                            ('_readmark', ['chunk'], '')],
                                'properties': ['_version',
                                               '_decomp',
                                               '_convert',
                                               '_markers',
                                               '_soundpos',
                                               '_file',
                                               '_aifc',
                                               '_comm_chunk_read',
                                               '_ssnd_seek_needed',
                                               '_ssnd_chunk',
                                               '_adpcmstate',
                                               '_nchannels',
                                               '_nframes',
                                               '_sampwidth',
                                               '_framerate',
                                               '_framesize',
                                               '_comptype',
                                               '_compname']},
             'aifc.Aifc_write': {'bases': [],
                                 'constructor': ['f'],
                                 'docstring': '',
                                 'methods': [('initfp', ['file'], ''),
                                             ('__del__', [], ''),
                                             ('aiff', [], ''),
                                             ('aifc', [], ''),
                                             ('setnchannels', ['nchannels'], ''),
                                             ('getnchannels', [], ''),
                                             ('setsampwidth', ['sampwidth'], ''),
                                             ('getsampwidth', [], ''),
                                             ('setframerate', ['framerate'], ''),
                                             ('getframerate', [], ''),
                                             ('setnframes', ['nframes'], ''),
                                             ('getnframes', [], ''),
                                             ('setcomptype', ['comptype', 'compname'], ''),
                                             ('getcomptype', [], ''),
                                             ('getcompname', [], ''),
                                             ('setparams',
                                              ['(nchannels, sampwidth, framerate, nframes, comptype, compname)'],
                                              ''),
                                             ('getparams', [], ''),
                                             ('setmark', ['id', 'pos', 'name'], ''),
                                             ('getmark', ['id'], ''),
                                             ('getmarkers', [], ''),
                                             ('tell', [], ''),
                                             ('writeframesraw', ['data'], ''),
                                             ('writeframes', ['data'], ''),
                                             ('close', [], ''),
                                             ('_comp_data', ['data'], ''),
                                             ('_lin2ulaw', ['data'], ''),
                                             ('_lin2adpcm', ['data'], ''),
                                             ('_ensure_header_written', ['datasize'], ''),
                                             ('_init_compression', [], ''),
                                             ('_write_header', ['initlength'], ''),
                                             ('_write_form_length', ['datalength'], ''),
                                             ('_patchheader', [], ''),
                                             ('_writemarkers', [], '')],
                                 'properties': ['_aifc',
                                                '_file',
                                                '_version',
                                                '_comptype',
                                                '_compname',
                                                '_comp',
                                                '_convert',
                                                '_nchannels',
                                                '_sampwidth',
                                                '_framerate',
                                                '_nframes',
                                                '_nframeswritten',
                                                '_datawritten',
                                                '_datalength',
                                                '_markers',
                                                '_marklength',
                                                '_adpcmstate',
                                                '_form_length_pos',
                                                '_nframes_pos',
                                                '_ssnd_length_pos']},
             'aifc.Error': {'bases': ['Exception'],
                            'constructor': [],
                            'docstring': '',
                            'methods': [],
                            'properties': []},
             'anydbm.error': {'bases': ['Exception'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'asynchat.async_chat': {'bases': ['asyncore.dispatcher'],
                                     'constructor': ['conn=None'],
                                     'docstring': 'This is an abstract class.  You must derive from this class, and add\n    the two methods collect_incoming_data() and found_terminator()',
                                     'methods': [('collect_incoming_data', ['data'], ''),
                                                 ('found_terminator', [], ''),
                                                 ('set_terminator',
                                                  ['term'],
                                                  'Set the input delimiter.  Can be a fixed string of any length, an integer, or None'),
                                                 ('get_terminator', [], ''),
                                                 ('handle_read', [], ''),
                                                 ('handle_write', [], ''),
                                                 ('handle_close', [], ''),
                                                 ('push', ['data'], ''),
                                                 ('push_with_producer', ['producer'], ''),
                                                 ('readable',
                                                  [],
                                                  'predicate for inclusion in the readable for select()'),
                                                 ('writable',
                                                  [],
                                                  'predicate for inclusion in the writable for select()'),
                                                 ('close_when_done',
                                                  [],
                                                  'automatically close this channel once the outgoing queue is empty'),
                                                 ('refill_buffer', [], ''),
                                                 ('initiate_send', [], ''),
                                                 ('discard_buffers', [], '')],
                                     'properties': ['ac_in_buffer_size',
                                                    'ac_out_buffer_size',
                                                    'ac_in_buffer',
                                                    'ac_out_buffer',
                                                    'producer_fifo',
                                                    'terminator']},
             'asynchat.fifo': {'bases': [],
                               'constructor': ['list=None'],
                               'docstring': '',
                               'methods': [('__len__', [], ''),
                                           ('is_empty', [], ''),
                                           ('first', [], ''),
                                           ('push', ['data'], ''),
                                           ('pop', [], '')],
                               'properties': ['list']},
             'asynchat.simple_producer': {'bases': [],
                                          'constructor': ['data', 'buffer_size=512'],
                                          'docstring': '',
                                          'methods': [('more', [], '')],
                                          'properties': ['data', 'buffer_size']},
             'asyncore.ExitNow': {'bases': ['Exception'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [],
                                  'properties': []},
             'asyncore.dispatcher': {'bases': [],
                                     'constructor': ['sock=None', 'map=None'],
                                     'docstring': '',
                                     'methods': [('__repr__', [], ''),
                                                 ('add_channel', ['map=None'], ''),
                                                 ('del_channel', ['map=None'], ''),
                                                 ('create_socket', ['family', 'type'], ''),
                                                 ('set_socket', ['sock', 'map=None'], ''),
                                                 ('set_reuse_addr', [], ''),
                                                 ('readable', [], ''),
                                                 ('writable', [], ''),
                                                 ('listen', ['num'], ''),
                                                 ('bind', ['addr'], ''),
                                                 ('connect', ['address'], ''),
                                                 ('accept', [], ''),
                                                 ('send', ['data'], ''),
                                                 ('recv', ['buffer_size'], ''),
                                                 ('close', [], ''),
                                                 ('__getattr__', ['attr'], ''),
                                                 ('log', ['message'], ''),
                                                 ('log_info', ['message', "type='info'"], ''),
                                                 ('handle_read_event', [], ''),
                                                 ('handle_write_event', [], ''),
                                                 ('handle_expt_event', [], ''),
                                                 ('handle_error', [], ''),
                                                 ('handle_expt', [], ''),
                                                 ('handle_read', [], ''),
                                                 ('handle_write', [], ''),
                                                 ('handle_connect', [], ''),
                                                 ('handle_accept', [], ''),
                                                 ('handle_close', [], '')],
                                     'properties': ['debug',
                                                    'connected',
                                                    'accepting',
                                                    'closing',
                                                    'addr',
                                                    '_map',
                                                    'socket',
                                                    '_fileno',
                                                    'family_and_type']},
             'asyncore.dispatcher_with_send': {'bases': ['asyncore.dispatcher'],
                                               'constructor': ['sock=None', 'map=None'],
                                               'docstring': '',
                                               'methods': [('initiate_send', [], ''),
                                                           ('handle_write', [], ''),
                                                           ('writable', [], ''),
                                                           ('send', ['data'], '')],
                                               'properties': ['out_buffer']},
             'asyncore.file_dispatcher': {'bases': ['asyncore.dispatcher'],
                                          'constructor': ['fd', 'map=None'],
                                          'docstring': '',
                                          'methods': [('set_file', ['fd'], '')],
                                          'properties': ['connected', '_fileno', 'socket']},
             'asyncore.file_wrapper': {'bases': [],
                                       'constructor': ['fd'],
                                       'docstring': '',
                                       'methods': [('recv', ['*args'], ''),
                                                   ('send', ['*args'], ''),
                                                   ('close', [], ''),
                                                   ('fileno', [], '')],
                                       'properties': ['fd', 'read', 'write']},
             'audiodev.Play_Audio_sgi': {'bases': [],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('initclass', [], ''),
                                                     ('__del__', [], ''),
                                                     ('wait', [], ''),
                                                     ('stop', [], ''),
                                                     ('setoutrate', ['rate'], ''),
                                                     ('setsampwidth', ['width'], ''),
                                                     ('setnchannels', ['nchannels'], ''),
                                                     ('writeframes', ['data'], ''),
                                                     ('getfilled', [], ''),
                                                     ('getfillable', [], ''),
                                                     ('ulaw2lin', ['data'], '')],
                                         'properties': ['classinited',
                                                        'frameratelist',
                                                        'nchannelslist',
                                                        'sampwidthlist',
                                                        'oldparams',
                                                        'params',
                                                        'config',
                                                        'inited_outrate',
                                                        'inited_width',
                                                        'inited_nchannels',
                                                        'converter',
                                                        'port']},
             'audiodev.Play_Audio_sun': {'bases': [],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('__del__', [], ''),
                                                     ('setoutrate', ['rate'], ''),
                                                     ('setsampwidth', ['width'], ''),
                                                     ('setnchannels', ['nchannels'], ''),
                                                     ('writeframes', ['data'], ''),
                                                     ('wait', [], ''),
                                                     ('stop', [], ''),
                                                     ('getfilled', [], '')],
                                         'properties': ['outrate',
                                                        'sampwidth',
                                                        'nchannels',
                                                        'inited_outrate',
                                                        'inited_width',
                                                        'inited_nchannels',
                                                        'converter',
                                                        'port',
                                                        'o_encoding']},
             'audiodev.error': {'bases': ['Exception'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [],
                                'properties': []},
             'bdb.Bdb': {'bases': [],
                         'constructor': [],
                         'docstring': 'Generic Python debugger base class.\n\n    This class takes care of details of the trace facility;\n    a derived class should implement user interaction.\n    The standard debugger class (pdb.Pdb) is an example.\n    ',
                         'methods': [('canonic', ['filename'], ''),
                                     ('reset', [], ''),
                                     ('trace_dispatch', ['frame', 'event', 'arg'], ''),
                                     ('dispatch_line', ['frame'], ''),
                                     ('dispatch_call', ['frame', 'arg'], ''),
                                     ('dispatch_return', ['frame', 'arg'], ''),
                                     ('dispatch_exception', ['frame', 'arg'], ''),
                                     ('stop_here', ['frame'], ''),
                                     ('break_here', ['frame'], ''),
                                     ('do_clear', ['arg'], ''),
                                     ('break_anywhere', ['frame'], ''),
                                     ('user_call',
                                      ['frame', 'argument_list'],
                                      'This method is called when there is the remote possibility\n        that we ever need to stop in this function.'),
                                     ('user_line',
                                      ['frame'],
                                      'This method is called when we stop or break at this line.'),
                                     ('user_return',
                                      ['frame', 'return_value'],
                                      'This method is called when a return trap is set here.'),
                                     ('user_exception',
                                      ['frame', '(exc_type, exc_value, exc_traceback)'],
                                      'This method is called if an exception occurs,\n        but only if we are to stop at or just below this level.'),
                                     ('set_step', [], 'Stop after one line of code.'),
                                     ('set_next',
                                      ['frame'],
                                      'Stop on the next line in or below the given frame.'),
                                     ('set_return',
                                      ['frame'],
                                      'Stop when returning from the given frame.'),
                                     ('set_trace',
                                      ['frame=None'],
                                      "Start debugging from `frame`.\n\n        If frame is not specified, debugging starts from caller's frame.\n        "),
                                     ('set_continue', [], ''),
                                     ('set_quit', [], ''),
                                     ('set_break',
                                      ['filename',
                                       'lineno',
                                       'temporary=0',
                                       'cond=None',
                                       'funcname=None'],
                                      ''),
                                     ('clear_break', ['filename', 'lineno'], ''),
                                     ('clear_bpbynumber', ['arg'], ''),
                                     ('clear_all_file_breaks', ['filename'], ''),
                                     ('clear_all_breaks', [], ''),
                                     ('get_break', ['filename', 'lineno'], ''),
                                     ('get_breaks', ['filename', 'lineno'], ''),
                                     ('get_file_breaks', ['filename'], ''),
                                     ('get_all_breaks', [], ''),
                                     ('get_stack', ['f', 't'], ''),
                                     ('format_stack_entry',
                                      ['frame_lineno', "lprefix=': '"],
                                      ''),
                                     ('run', ['cmd', 'globals=None', 'locals=None'], ''),
                                     ('runeval', ['expr', 'globals=None', 'locals=None'], ''),
                                     ('runctx', ['cmd', 'globals', 'locals'], ''),
                                     ('runcall', ['func', '*args', '**kwds'], '')],
                         'properties': ['breaks',
                                        'fncache',
                                        'botframe',
                                        'stopframe',
                                        'returnframe',
                                        'quitting',
                                        'currentbp']},
             'bdb.BdbQuit': {'bases': ['Exception'],
                             'constructor': [],
                             'docstring': 'Exception to give up completely',
                             'methods': [],
                             'properties': []},
             'bdb.Breakpoint': {'bases': [],
                                'constructor': ['file',
                                                'line',
                                                'temporary=0',
                                                'cond=None',
                                                'funcname=None'],
                                'docstring': 'Breakpoint class\n\n    Implements temporary breakpoints, ignore counts, disabling and\n    (re)-enabling, and conditionals.\n\n    Breakpoints are indexed by number through bpbynumber and by\n    the file,line tuple using bplist.  The former points to a\n    single instance of class Breakpoint.  The latter points to a\n    list of such instances since there may be more than one\n    breakpoint per line.\n\n    ',
                                'methods': [('deleteMe', [], ''),
                                            ('enable', [], ''),
                                            ('disable', [], ''),
                                            ('bpprint', ['out=None'], '')],
                                'properties': ['next',
                                               'bplist',
                                               'bpbynumber',
                                               'funcname',
                                               'func_first_executable_line',
                                               'file',
                                               'line',
                                               'temporary',
                                               'cond',
                                               'enabled',
                                               'ignore',
                                               'hits',
                                               'number']},
             'bdb.Tdb': {'bases': ['bdb.Bdb'],
                         'constructor': [],
                         'docstring': '',
                         'methods': [('user_call', ['frame', 'args'], ''),
                                     ('user_line', ['frame'], ''),
                                     ('user_return', ['frame', 'retval'], ''),
                                     ('user_exception', ['frame', 'exc_stuff'], '')],
                         'properties': []},
             'binhex.BinHex': {'bases': [],
                               'constructor': ['(name, finfo, dlen, rlen)', 'ofp'],
                               'docstring': '',
                               'methods': [('_writeinfo', ['name', 'finfo'], ''),
                                           ('_write', ['data'], ''),
                                           ('_writecrc', [], ''),
                                           ('write', ['data'], ''),
                                           ('close_data', [], ''),
                                           ('write_rsrc', ['data'], ''),
                                           ('close', [], '')],
                               'properties': ['ofp', 'crc', 'dlen', 'rlen', 'state']},
             'binhex.Error': {'bases': ['Exception'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'binhex.FInfo': {'bases': [],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': ['Type', 'Creator', 'Flags']},
             'binhex.HexBin': {'bases': [],
                               'constructor': ['ifp'],
                               'docstring': '',
                               'methods': [('_read', ['len'], ''),
                                           ('_checkcrc', [], ''),
                                           ('_readheader', [], ''),
                                           ('read', ['*n'], ''),
                                           ('close_data', [], ''),
                                           ('read_rsrc', ['*n'], ''),
                                           ('close', [], '')],
                               'properties': ['ifp',
                                              'crc',
                                              'dlen',
                                              'rlen',
                                              'FName',
                                              'FInfo',
                                              'state']},
             'binhex._Hqxcoderengine': {'bases': [],
                                        'constructor': ['ofp'],
                                        'docstring': 'Write data to the coder in 3-byte chunks',
                                        'methods': [('write', ['data'], ''),
                                                    ('_flush', ['force'], ''),
                                                    ('close', [], '')],
                                        'properties': ['ofp', 'data', 'hqxdata', 'linelen']},
             'binhex._Hqxdecoderengine': {'bases': [],
                                          'constructor': ['ifp'],
                                          'docstring': 'Read data via the decoder in 4-byte chunks',
                                          'methods': [('read',
                                                       ['totalwtd'],
                                                       'Read at least wtd bytes (or until EOF)'),
                                                      ('close', [], '')],
                                          'properties': ['ifp', 'eof']},
             'binhex._Rlecoderengine': {'bases': [],
                                        'constructor': ['ofp'],
                                        'docstring': 'Write data to the RLE-coder in suitably large chunks',
                                        'methods': [('write', ['data'], ''), ('close', [], '')],
                                        'properties': ['ofp', 'data']},
             'binhex._Rledecoderengine': {'bases': [],
                                          'constructor': ['ifp'],
                                          'docstring': 'Read data via the RLE-coder',
                                          'methods': [('read', ['wtd'], ''),
                                                      ('_fill', ['wtd'], ''),
                                                      ('close', [], '')],
                                          'properties': ['ifp',
                                                         'pre_buffer',
                                                         'post_buffer',
                                                         'eof']},
             'binhex.openrsrc': {'bases': [],
                                 'constructor': ['*args'],
                                 'docstring': '',
                                 'methods': [('read', ['*args'], ''),
                                             ('write', ['*args'], ''),
                                             ('close', [], '')],
                                 'properties': []},
             'bsddb._DBWithCursor': {'bases': ['bsddb._iter_mixin'],
                                     'constructor': ['db'],
                                     'docstring': '\n    A simple wrapper around DB that makes it look like the bsddbobject in\n    the old module.  It uses a cursor as needed to provide DB traversal.\n    ',
                                     'methods': [('__del__', [], ''),
                                                 ('_checkCursor', [], ''),
                                                 ('_closeCursors', ['save=1'], ''),
                                                 ('_checkOpen', [], ''),
                                                 ('isOpen', [], ''),
                                                 ('__len__', [], ''),
                                                 ('__getitem__', ['key'], ''),
                                                 ('__setitem__', ['key', 'value'], ''),
                                                 ('__delitem__', ['key'], ''),
                                                 ('close', [], ''),
                                                 ('keys', [], ''),
                                                 ('has_key', ['key'], ''),
                                                 ('set_location', ['key'], ''),
                                                 ('next', [], ''),
                                                 ('previous', [], ''),
                                                 ('first', [], ''),
                                                 ('last', [], ''),
                                                 ('sync', [], '')],
                                     'properties': ['db',
                                                    'dbc',
                                                    'saved_dbc_key',
                                                    '_cursor_refs']},
             'bsddb._iter_mixin': {'bases': [],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': []},
             'bsddb.dbobj.DB': {'bases': ['UserDict.DictMixin'],
                                'constructor': ['dbenv', '*args', '**kwargs'],
                                'docstring': '',
                                'methods': [('__len__', [], ''),
                                            ('__getitem__', ['arg'], ''),
                                            ('__setitem__', ['key', 'value'], ''),
                                            ('__delitem__', ['arg'], ''),
                                            ('append', ['*args', '**kwargs'], ''),
                                            ('associate', ['*args', '**kwargs'], ''),
                                            ('close', ['*args', '**kwargs'], ''),
                                            ('consume', ['*args', '**kwargs'], ''),
                                            ('consume_wait', ['*args', '**kwargs'], ''),
                                            ('cursor', ['*args', '**kwargs'], ''),
                                            ('delete', ['*args', '**kwargs'], ''),
                                            ('fd', ['*args', '**kwargs'], ''),
                                            ('get', ['*args', '**kwargs'], ''),
                                            ('pget', ['*args', '**kwargs'], ''),
                                            ('get_both', ['*args', '**kwargs'], ''),
                                            ('get_byteswapped', ['*args', '**kwargs'], ''),
                                            ('get_size', ['*args', '**kwargs'], ''),
                                            ('get_type', ['*args', '**kwargs'], ''),
                                            ('join', ['*args', '**kwargs'], ''),
                                            ('key_range', ['*args', '**kwargs'], ''),
                                            ('has_key', ['*args', '**kwargs'], ''),
                                            ('items', ['*args', '**kwargs'], ''),
                                            ('keys', ['*args', '**kwargs'], ''),
                                            ('open', ['*args', '**kwargs'], ''),
                                            ('put', ['*args', '**kwargs'], ''),
                                            ('remove', ['*args', '**kwargs'], ''),
                                            ('rename', ['*args', '**kwargs'], ''),
                                            ('set_bt_minkey', ['*args', '**kwargs'], ''),
                                            ('set_bt_compare', ['*args', '**kwargs'], ''),
                                            ('set_cachesize', ['*args', '**kwargs'], ''),
                                            ('set_flags', ['*args', '**kwargs'], ''),
                                            ('set_h_ffactor', ['*args', '**kwargs'], ''),
                                            ('set_h_nelem', ['*args', '**kwargs'], ''),
                                            ('set_lorder', ['*args', '**kwargs'], ''),
                                            ('set_pagesize', ['*args', '**kwargs'], ''),
                                            ('set_re_delim', ['*args', '**kwargs'], ''),
                                            ('set_re_len', ['*args', '**kwargs'], ''),
                                            ('set_re_pad', ['*args', '**kwargs'], ''),
                                            ('set_re_source', ['*args', '**kwargs'], ''),
                                            ('set_q_extentsize', ['*args', '**kwargs'], ''),
                                            ('stat', ['*args', '**kwargs'], ''),
                                            ('sync', ['*args', '**kwargs'], ''),
                                            ('type', ['*args', '**kwargs'], ''),
                                            ('upgrade', ['*args', '**kwargs'], ''),
                                            ('values', ['*args', '**kwargs'], ''),
                                            ('verify', ['*args', '**kwargs'], ''),
                                            ('set_get_returns_none', ['*args', '**kwargs'], ''),
                                            ('set_encrypt', ['*args', '**kwargs'], '')],
                                'properties': ['_cobj']},
             'bsddb.dbobj.DBEnv': {'bases': [],
                                   'constructor': ['*args', '**kwargs'],
                                   'docstring': '',
                                   'methods': [('close', ['*args', '**kwargs'], ''),
                                               ('open', ['*args', '**kwargs'], ''),
                                               ('remove', ['*args', '**kwargs'], ''),
                                               ('set_shm_key', ['*args', '**kwargs'], ''),
                                               ('set_cachesize', ['*args', '**kwargs'], ''),
                                               ('set_data_dir', ['*args', '**kwargs'], ''),
                                               ('set_flags', ['*args', '**kwargs'], ''),
                                               ('set_lg_bsize', ['*args', '**kwargs'], ''),
                                               ('set_lg_dir', ['*args', '**kwargs'], ''),
                                               ('set_lg_max', ['*args', '**kwargs'], ''),
                                               ('set_lk_detect', ['*args', '**kwargs'], ''),
                                               ('set_lk_max', ['*args', '**kwargs'], ''),
                                               ('set_lk_max_locks', ['*args', '**kwargs'], ''),
                                               ('set_lk_max_lockers',
                                                ['*args', '**kwargs'],
                                                ''),
                                               ('set_lk_max_objects',
                                                ['*args', '**kwargs'],
                                                ''),
                                               ('set_mp_mmapsize', ['*args', '**kwargs'], ''),
                                               ('set_timeout', ['*args', '**kwargs'], ''),
                                               ('set_tmp_dir', ['*args', '**kwargs'], ''),
                                               ('txn_begin', ['*args', '**kwargs'], ''),
                                               ('txn_checkpoint', ['*args', '**kwargs'], ''),
                                               ('txn_stat', ['*args', '**kwargs'], ''),
                                               ('set_tx_max', ['*args', '**kwargs'], ''),
                                               ('set_tx_timestamp', ['*args', '**kwargs'], ''),
                                               ('lock_detect', ['*args', '**kwargs'], ''),
                                               ('lock_get', ['*args', '**kwargs'], ''),
                                               ('lock_id', ['*args', '**kwargs'], ''),
                                               ('lock_put', ['*args', '**kwargs'], ''),
                                               ('lock_stat', ['*args', '**kwargs'], ''),
                                               ('log_archive', ['*args', '**kwargs'], ''),
                                               ('set_get_returns_none',
                                                ['*args', '**kwargs'],
                                                ''),
                                               ('log_stat', ['*args', '**kwargs'], ''),
                                               ('dbremove', ['*args', '**kwargs'], ''),
                                               ('dbrename', ['*args', '**kwargs'], ''),
                                               ('set_encrypt', ['*args', '**kwargs'], ''),
                                               ('lsn_reset', ['*args', '**kwargs'], '')],
                                   'properties': ['_cobj']},
             'bsddb.dbobj.DBSequence': {'bases': [],
                                        'constructor': ['*args', '**kwargs'],
                                        'docstring': '',
                                        'methods': [('close', ['*args', '**kwargs'], ''),
                                                    ('get', ['*args', '**kwargs'], ''),
                                                    ('get_dbp', ['*args', '**kwargs'], ''),
                                                    ('get_key', ['*args', '**kwargs'], ''),
                                                    ('init_value', ['*args', '**kwargs'], ''),
                                                    ('open', ['*args', '**kwargs'], ''),
                                                    ('remove', ['*args', '**kwargs'], ''),
                                                    ('stat', ['*args', '**kwargs'], ''),
                                                    ('set_cachesize',
                                                     ['*args', '**kwargs'],
                                                     ''),
                                                    ('set_flags', ['*args', '**kwargs'], ''),
                                                    ('set_range', ['*args', '**kwargs'], ''),
                                                    ('get_cachesize',
                                                     ['*args', '**kwargs'],
                                                     ''),
                                                    ('get_flags', ['*args', '**kwargs'], ''),
                                                    ('get_range', ['*args', '**kwargs'], '')],
                                        'properties': ['_cobj']},
             'bsddb.dbobj.DictMixin': {'bases': [],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': []},
             'bsddb.dbrecio.DBRecIO': {'bases': [],
                                       'constructor': ['db', 'key', 'txn=None'],
                                       'docstring': '',
                                       'methods': [('close', [], ''),
                                                   ('isatty', [], ''),
                                                   ('seek', ['pos', 'mode=0'], ''),
                                                   ('tell', [], ''),
                                                   ('read', ['n=-1'], ''),
                                                   ('truncate', ['size=None'], ''),
                                                   ('write', ['s'], ''),
                                                   ('writelines', ['list'], ''),
                                                   ('flush', [], '')],
                                       'properties': ['db',
                                                      'key',
                                                      'txn',
                                                      'len',
                                                      'pos',
                                                      'closed',
                                                      'softspace',
                                                      '__fixme']},
             'bsddb.dbshelve.DBShelf': {'bases': ['UserDict.DictMixin'],
                                        'constructor': ['dbenv=None'],
                                        'docstring': 'A shelf to hold pickled objects, built upon a bsddb DB object.  It\n    automatically pickles/unpickles data objects going to/from the DB.\n    ',
                                        'methods': [('__del__', [], ''),
                                                    ('__getattr__',
                                                     ['name'],
                                                     'Many methods we can just pass through to the DB object.\n        (See below)\n        '),
                                                    ('__len__', [], ''),
                                                    ('__getitem__', ['key'], ''),
                                                    ('__setitem__', ['key', 'value'], ''),
                                                    ('__delitem__', ['key'], ''),
                                                    ('keys', ['txn=None'], ''),
                                                    ('items', ['txn=None'], ''),
                                                    ('values', ['txn=None'], ''),
                                                    ('__append', ['value', 'txn=None'], ''),
                                                    ('append', ['value', 'txn=None'], ''),
                                                    ('associate',
                                                     ['secondaryDB', 'callback', 'flags=0'],
                                                     ''),
                                                    ('get', ['*args', '**kw'], ''),
                                                    ('get_both',
                                                     ['key', 'value', 'txn=None', 'flags=0'],
                                                     ''),
                                                    ('cursor', ['txn=None', 'flags=0'], ''),
                                                    ('put',
                                                     ['key', 'value', 'txn=None', 'flags=0'],
                                                     ''),
                                                    ('join', ['cursorList', 'flags=0'], '')],
                                        'properties': ['db', 'binary']},
             'bsddb.dbshelve.DBShelfCursor': {'bases': [],
                                              'constructor': ['cursor'],
                                              'docstring': '\n    ',
                                              'methods': [('__del__', [], ''),
                                                          ('__getattr__',
                                                           ['name'],
                                                           'Some methods we can just pass through to the cursor object.  (See below)'),
                                                          ('dup', ['flags=0'], ''),
                                                          ('put',
                                                           ['key', 'value', 'flags=0'],
                                                           ''),
                                                          ('get', ['*args'], ''),
                                                          ('get_1', ['flags'], ''),
                                                          ('get_2', ['key', 'flags'], ''),
                                                          ('get_3',
                                                           ['key', 'value', 'flags'],
                                                           ''),
                                                          ('current', ['flags=0'], ''),
                                                          ('first', ['flags=0'], ''),
                                                          ('last', ['flags=0'], ''),
                                                          ('next', ['flags=0'], ''),
                                                          ('prev', ['flags=0'], ''),
                                                          ('consume', ['flags=0'], ''),
                                                          ('next_dup', ['flags=0'], ''),
                                                          ('next_nodup', ['flags=0'], ''),
                                                          ('prev_nodup', ['flags=0'], ''),
                                                          ('get_both',
                                                           ['key', 'value', 'flags=0'],
                                                           ''),
                                                          ('set', ['key', 'flags=0'], ''),
                                                          ('set_range', ['key', 'flags=0'], ''),
                                                          ('set_recno',
                                                           ['recno', 'flags=0'],
                                                           ''),
                                                          ('_extract', ['rec'], '')],
                                              'properties': ['dbc', 'set_both']},
             'bsddb.dbshelve.DBShelveError': {'bases': ['db.DBError'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'bsddb.dbshelve.DictMixin': {'bases': [],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': []},
             'bsddb.dbtables.Cond': {'bases': [],
                                     'constructor': [],
                                     'docstring': 'This condition matches everything',
                                     'methods': [('__call__', ['s'], '')],
                                     'properties': []},
             'bsddb.dbtables.DBIncompleteError': {'bases': ['Exception'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'bsddb.dbtables.ExactCond': {'bases': ['bsddb.dbtables.Cond'],
                                          'constructor': ['strtomatch'],
                                          'docstring': 'Acts as an exact match condition function',
                                          'methods': [('__call__', ['s'], '')],
                                          'properties': ['strtomatch']},
             'bsddb.dbtables.LikeCond': {'bases': ['bsddb.dbtables.Cond'],
                                         'constructor': ['likestr', 're_flags=re.IGNORECASE'],
                                         'docstring': "\n    Acts as a function that will match using an SQL 'LIKE' style\n    string.  Case insensitive and % signs are wild cards.\n    This isn't perfect but it should work for the simple common cases.\n    ",
                                         'methods': [('__call__', ['s'], '')],
                                         'properties': ['likestr', 're']},
             'bsddb.dbtables.PostfixCond': {'bases': ['bsddb.dbtables.Cond'],
                                            'constructor': ['postfix'],
                                            'docstring': 'Acts as a condition function for matching a string postfix',
                                            'methods': [('__call__', ['s'], '')],
                                            'properties': ['postfix']},
             'bsddb.dbtables.PrefixCond': {'bases': ['bsddb.dbtables.Cond'],
                                           'constructor': ['prefix'],
                                           'docstring': 'Acts as a condition function for matching a string prefix',
                                           'methods': [('__call__', ['s'], '')],
                                           'properties': ['prefix']},
             'bsddb.dbtables.TableAlreadyExists': {'bases': ['bsddb.dbtables.TableDBError'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'bsddb.dbtables.TableDBError': {'bases': ['StandardError'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': []},
             'bsddb.dbtables.bsdTableDB': {'bases': [],
                                           'constructor': ['filename',
                                                           'dbhome',
                                                           'create=0',
                                                           'truncate=0',
                                                           'mode=384',
                                                           'recover=0',
                                                           'dbflags=0'],
                                           'docstring': '',
                                           'methods': [('__del__', [], ''),
                                                       ('close', [], ''),
                                                       ('checkpoint', ['mins=0'], ''),
                                                       ('sync', [], ''),
                                                       ('_db_print',
                                                        [],
                                                        'Print the database to stdout for debugging'),
                                                       ('CreateTable',
                                                        ['table', 'columns'],
                                                        'CreateTable(table, columns) - Create a new table in the database.\n\n        raises TableDBError if it already exists or for other DB errors.\n        '),
                                                       ('ListTableColumns',
                                                        ['table'],
                                                        "Return a list of columns in the given table.\n        [] if the table doesn't exist.\n        "),
                                                       ('ListTables',
                                                        [],
                                                        'Return a list of tables in this database.'),
                                                       ('CreateOrExtendTable',
                                                        ['table', 'columns'],
                                                        'CreateOrExtendTable(table, columns)\n\n        Create a new table in the database.\n\n        If a table of this name already exists, extend it to have any\n        additional columns present in the given list as well as\n        all of its current columns.\n        '),
                                                       ('__load_column_info',
                                                        ['table'],
                                                        'initialize the self.__tablecolumns dict'),
                                                       ('__new_rowid',
                                                        ['table', 'txn'],
                                                        'Create a new unique row identifier'),
                                                       ('Insert',
                                                        ['table', 'rowdict'],
                                                        'Insert(table, datadict) - Insert a new row into the table\n        using the keys+values from rowdict as the column values.\n        '),
                                                       ('Modify',
                                                        ['table',
                                                         'conditions={}',
                                                         'mappings={}'],
                                                        "Modify(table, conditions={}, mappings={}) - Modify items in rows matching 'conditions' using mapping functions in 'mappings'\n\n        * table - the table name\n        * conditions - a dictionary keyed on column names containing\n          a condition callable expecting the data string as an\n          argument and returning a boolean.\n        * mappings - a dictionary keyed on column names containing a\n          condition callable expecting the data string as an argument and\n          returning the new string for that column.\n        "),
                                                       ('Delete',
                                                        ['table', 'conditions={}'],
                                                        'Delete(table, conditions) - Delete items matching the given\n        conditions from the table.\n\n        * conditions - a dictionary keyed on column names containing\n          condition functions expecting the data string as an\n          argument and returning a boolean.\n        '),
                                                       ('Select',
                                                        ['table', 'columns', 'conditions={}'],
                                                        'Select(table, columns, conditions) - retrieve specific row data\n        Returns a list of row column->value mapping dictionaries.\n\n        * columns - a list of which column data to return.  If\n          columns is None, all columns will be returned.\n        * conditions - a dictionary keyed on column names\n          containing callable conditions expecting the data string as an\n          argument and returning a boolean.\n        '),
                                                       ('__Select',
                                                        ['table', 'columns', 'conditions'],
                                                        '__Select() - Used to implement Select and Delete (above)\n        Returns a dictionary keyed on rowids containing dicts\n        holding the row data for columns listed in the columns param\n        that match the given conditions.\n        * conditions is a dictionary keyed on column names\n        containing callable conditions expecting the data string as an\n        argument and returning a boolean.\n        '),
                                                       ('Drop',
                                                        ['table'],
                                                        'Remove an entire table from the database')],
                                           'properties': ['db',
                                                          'env',
                                                          'dbfilename',
                                                          '__tablecolumns']},
             'cProfile.Profile': {'bases': ['_lsprof.Profiler'],
                                  'constructor': [],
                                  'docstring': 'Profile(custom_timer=None, time_unit=None, subcalls=True, builtins=True)\n\n    Builds a profiler object using the specified timer function.\n    The default timer is a fast built-in one based on real time.\n    For custom timer functions returning integers, time_unit can\n    be a float specifying a scale (i.e. how long each integer unit\n    is, in seconds).\n    ',
                                  'methods': [('print_stats', ['sort=-1'], ''),
                                              ('dump_stats', ['file'], ''),
                                              ('create_stats', [], ''),
                                              ('snapshot_stats', [], ''),
                                              ('run', ['cmd'], ''),
                                              ('runctx', ['cmd', 'globals', 'locals'], ''),
                                              ('runcall', ['func', '*args', '**kw'], '')],
                                  'properties': ['stats']},
             'calendar.Calendar': {'bases': ['object'],
                                   'constructor': ['firstweekday=0'],
                                   'docstring': "\n    Base calendar class. This class doesn't do any formatting. It simply\n    provides data to subclasses.\n    ",
                                   'methods': [('getfirstweekday', [], ''),
                                               ('setfirstweekday', ['firstweekday'], ''),
                                               ('iterweekdays',
                                                [],
                                                '\n        Return a iterator for one week of weekday numbers starting with the\n        configured first one.\n        '),
                                               ('itermonthdates',
                                                ['year', 'month'],
                                                '\n        Return an iterator for one month. The iterator will yield datetime.date\n        values and will always iterate through complete weeks, so it will yield\n        dates outside the specified month.\n        '),
                                               ('itermonthdays2',
                                                ['year', 'month'],
                                                '\n        Like itermonthdates(), but will yield (day number, weekday number)\n        tuples. For days outside the specified month the day number is 0.\n        '),
                                               ('itermonthdays',
                                                ['year', 'month'],
                                                '\n        Like itermonthdates(), but will yield day numbers. For days outside\n        the specified month the day number is 0.\n        '),
                                               ('monthdatescalendar',
                                                ['year', 'month'],
                                                "\n        Return a matrix (list of lists) representing a month's calendar.\n        Each row represents a week; week entries are datetime.date values.\n        "),
                                               ('monthdays2calendar',
                                                ['year', 'month'],
                                                "\n        Return a matrix representing a month's calendar.\n        Each row represents a week; week entries are\n        (day number, weekday number) tuples. Day numbers outside this month\n        are zero.\n        "),
                                               ('monthdayscalendar',
                                                ['year', 'month'],
                                                "\n        Return a matrix representing a month's calendar.\n        Each row represents a week; days outside this month are zero.\n        "),
                                               ('yeardatescalendar',
                                                ['year', 'width=3'],
                                                '\n        Return the data for the specified year ready for formatting. The return\n        value is a list of month rows. Each month row contains upto width months.\n        Each month contains between 4 and 6 weeks and each week contains 1-7\n        days. Days are datetime.date objects.\n        '),
                                               ('yeardays2calendar',
                                                ['year', 'width=3'],
                                                '\n        Return the data for the specified year ready for formatting (similar to\n        yeardatescalendar()). Entries in the week lists are\n        (day number, weekday number) tuples. Day numbers outside this month are\n        zero.\n        '),
                                               ('yeardayscalendar',
                                                ['year', 'width=3'],
                                                '\n        Return the data for the specified year ready for formatting (similar to\n        yeardatescalendar()). Entries in the week lists are day numbers.\n        Day numbers outside this month are zero.\n        ')],
                                   'properties': ['firstweekday', '_firstweekday']},
             'calendar.HTMLCalendar': {'bases': ['calendar.Calendar'],
                                       'constructor': [],
                                       'docstring': '\n    This calendar returns complete HTML pages.\n    ',
                                       'methods': [('formatday',
                                                    ['day', 'weekday'],
                                                    '\n        Return a day as a table cell.\n        '),
                                                   ('formatweek',
                                                    ['theweek'],
                                                    '\n        Return a complete week as a table row.\n        '),
                                                   ('formatweekday',
                                                    ['day'],
                                                    '\n        Return a weekday name as a table header.\n        '),
                                                   ('formatweekheader',
                                                    [],
                                                    '\n        Return a header for a week as a table row.\n        '),
                                                   ('formatmonthname',
                                                    ['theyear', 'themonth', 'withyear=True'],
                                                    '\n        Return a month name as a table row.\n        '),
                                                   ('formatmonth',
                                                    ['theyear', 'themonth', 'withyear=True'],
                                                    '\n        Return a formatted month as a table.\n        '),
                                                   ('formatyear',
                                                    ['theyear', 'width=3'],
                                                    '\n        Return a formatted year as a table of tables.\n        '),
                                                   ('formatyearpage',
                                                    ['theyear',
                                                     'width=3',
                                                     "css='calendar.css'",
                                                     'encoding=None'],
                                                    '\n        Return a formatted year as a complete HTML page.\n        ')],
                                       'properties': ['cssclasses']},
             'calendar.IllegalMonthError': {'bases': ['ValueError'],
                                            'constructor': ['month'],
                                            'docstring': '',
                                            'methods': [('__str__', [], '')],
                                            'properties': ['month']},
             'calendar.IllegalWeekdayError': {'bases': ['ValueError'],
                                              'constructor': ['weekday'],
                                              'docstring': '',
                                              'methods': [('__str__', [], '')],
                                              'properties': ['weekday']},
             'calendar.LocaleHTMLCalendar': {'bases': ['calendar.HTMLCalendar'],
                                             'constructor': ['firstweekday=0', 'locale=None'],
                                             'docstring': '\n    This class can be passed a locale name in the constructor and will return\n    month and weekday names in the specified locale. If this locale includes\n    an encoding all strings containing month and weekday names will be returned\n    as unicode.\n    ',
                                             'methods': [('formatweekday', ['day'], ''),
                                                         ('formatmonthname',
                                                          ['theyear',
                                                           'themonth',
                                                           'withyear=True'],
                                                          '')],
                                             'properties': ['locale']},
             'calendar.LocaleTextCalendar': {'bases': ['calendar.TextCalendar'],
                                             'constructor': ['firstweekday=0', 'locale=None'],
                                             'docstring': '\n    This class can be passed a locale name in the constructor and will return\n    month and weekday names in the specified locale. If this locale includes\n    an encoding all strings containing month and weekday names will be returned\n    as unicode.\n    ',
                                             'methods': [('formatweekday',
                                                          ['day', 'width'],
                                                          ''),
                                                         ('formatmonthname',
                                                          ['theyear',
                                                           'themonth',
                                                           'width',
                                                           'withyear=True'],
                                                          '')],
                                             'properties': ['locale']},
             'calendar.TextCalendar': {'bases': ['calendar.Calendar'],
                                       'constructor': [],
                                       'docstring': '\n    Subclass of Calendar that outputs a calendar as a simple plain text\n    similar to the UNIX program cal.\n    ',
                                       'methods': [('prweek',
                                                    ['theweek', 'width'],
                                                    '\n        Print a single week (no newline).\n        '),
                                                   ('formatday',
                                                    ['day', 'weekday', 'width'],
                                                    '\n        Returns a formatted day.\n        '),
                                                   ('formatweek',
                                                    ['theweek', 'width'],
                                                    '\n        Returns a single week in a string (no newline).\n        '),
                                                   ('formatweekday',
                                                    ['day', 'width'],
                                                    '\n        Returns a formatted week day name.\n        '),
                                                   ('formatweekheader',
                                                    ['width'],
                                                    '\n        Return a header for a week.\n        '),
                                                   ('formatmonthname',
                                                    ['theyear',
                                                     'themonth',
                                                     'width',
                                                     'withyear=True'],
                                                    '\n        Return a formatted month name.\n        '),
                                                   ('prmonth',
                                                    ['theyear', 'themonth', 'w=0', 'l=0'],
                                                    "\n        Print a month's calendar.\n        "),
                                                   ('formatmonth',
                                                    ['theyear', 'themonth', 'w=0', 'l=0'],
                                                    "\n        Return a month's calendar string (multi-line).\n        "),
                                                   ('formatyear',
                                                    ['theyear', 'w=2', 'l=1', 'c=6', 'm=3'],
                                                    "\n        Returns a year's calendar as a multi-line string.\n        "),
                                                   ('pryear',
                                                    ['theyear', 'w=0', 'l=0', 'c=6', 'm=3'],
                                                    "Print a year's calendar.")],
                                       'properties': []},
             'calendar.TimeEncoding': {'bases': [],
                                       'constructor': ['locale'],
                                       'docstring': '',
                                       'methods': [('__enter__', [], ''),
                                                   ('__exit__', ['*args'], '')],
                                       'properties': ['locale', 'oldlocale']},
             'calendar._localized_day': {'bases': [],
                                         'constructor': ['format'],
                                         'docstring': '',
                                         'methods': [('__getitem__', ['i'], ''),
                                                     ('__len__', [], '')],
                                         'properties': ['_days', 'i', 'format']},
             'calendar._localized_month': {'bases': [],
                                           'constructor': ['format'],
                                           'docstring': '',
                                           'methods': [('__getitem__', ['i'], ''),
                                                       ('__len__', [], '')],
                                           'properties': ['_months', 'i', 'format']},
             'cgi.FieldStorage': {'bases': [],
                                  'constructor': ['fp=None',
                                                  'headers=None',
                                                  "outerboundary=''",
                                                  'environ=os.environ',
                                                  'keep_blank_values=0',
                                                  'strict_parsing=0'],
                                  'docstring': "Store a sequence of fields, reading multipart/form-data.\n\n    This class provides naming, typing, files stored on disk, and\n    more.  At the top level, it is accessible like a dictionary, whose\n    keys are the field names.  (Note: None can occur as a field name.)\n    The items are either a Python list (if there's multiple values) or\n    another FieldStorage or MiniFieldStorage object.  If it's a single\n    object, it has the following attributes:\n\n    name: the field name, if specified; otherwise None\n\n    filename: the filename, if specified; otherwise None; this is the\n        client side filename, *not* the file name on which it is\n        stored (that's a temporary file you don't deal with)\n\n    value: the value as a *string*; for file uploads, this\n        transparently reads the file every time you request the value\n\n    file: the file(-like) object from which you can read the data;\n        None if the data is stored a simple string\n\n    type: the content-type, or None if not specified\n\n    type_options: dictionary of options specified on the content-type\n        line\n\n    disposition: content-disposition, or None if not specified\n\n    disposition_options: dictionary of corresponding options\n\n    headers: a dictionary(-like) object (sometimes rfc822.Message or a\n        subclass thereof) containing *all* headers\n\n    The class is subclassable, mostly for the purpose of overriding\n    the make_file() method, which is called internally to come up with\n    a file open for reading and writing.  This makes it possible to\n    override the default choice of storing all files in a temporary\n    directory and unlinking them as soon as they have been opened.\n\n    ",
                                  'methods': [('__repr__',
                                               [],
                                               'Return a printable representation.'),
                                              ('__iter__', [], ''),
                                              ('__getattr__', ['name'], ''),
                                              ('__getitem__',
                                               ['key'],
                                               'Dictionary style indexing.'),
                                              ('getvalue',
                                               ['key', 'default=None'],
                                               "Dictionary style get() method, including 'value' lookup."),
                                              ('getfirst',
                                               ['key', 'default=None'],
                                               ' Return the first value received.'),
                                              ('getlist',
                                               ['key'],
                                               ' Return list of received values.'),
                                              ('keys', [], 'Dictionary style keys() method.'),
                                              ('has_key',
                                               ['key'],
                                               'Dictionary style has_key() method.'),
                                              ('__contains__',
                                               ['key'],
                                               'Dictionary style __contains__ method.'),
                                              ('__len__',
                                               [],
                                               'Dictionary style len(x) support.'),
                                              ('read_urlencoded',
                                               [],
                                               'Internal: read data in query string format.'),
                                              ('read_multi',
                                               ['environ',
                                                'keep_blank_values',
                                                'strict_parsing'],
                                               'Internal: read a part that is itself multipart.'),
                                              ('read_single',
                                               [],
                                               'Internal: read an atomic part.'),
                                              ('read_binary',
                                               [],
                                               'Internal: read binary data.'),
                                              ('read_lines',
                                               [],
                                               'Internal: read lines until EOF or outerboundary.'),
                                              ('__write', ['line'], ''),
                                              ('read_lines_to_eof',
                                               [],
                                               'Internal: read lines until EOF.'),
                                              ('read_lines_to_outerboundary',
                                               [],
                                               'Internal: read lines until outerboundary.'),
                                              ('skip_lines',
                                               [],
                                               'Internal: skip lines until outer boundary if defined.'),
                                              ('make_file',
                                               ['binary=None'],
                                               "Overridable: return a readable & writable file.\n\n        The file will be used as follows:\n        - data is written to it\n        - seek(0)\n        - data is read from it\n\n        The 'binary' argument is unused -- the file is always opened\n        in binary mode.\n\n        This version opens a temporary file for reading and writing,\n        and immediately deletes (unlinks) it.  The trick (on Unix!) is\n        that the file can still be used, but it can't be opened by\n        another process, and it will automatically be deleted when it\n        is closed or when the current process terminates.\n\n        If you want a more permanent file, you derive a class which\n        overrides this method.  If you want a visible temporary file\n        that is nevertheless automatically deleted when the script\n        terminates, try defining a __del__ method in a derived class\n        which unlinks the temporary files you have created.\n\n        ")],
                                  'properties': ['keep_blank_values',
                                                 'strict_parsing',
                                                 'fp',
                                                 'headers',
                                                 'outerboundary',
                                                 'disposition',
                                                 'disposition_options',
                                                 'name',
                                                 'filename',
                                                 'type',
                                                 'type_options',
                                                 'innerboundary',
                                                 'length',
                                                 'list',
                                                 'file',
                                                 'done',
                                                 'FieldStorageClass',
                                                 'bufsize',
                                                 '__file']},
             'cgi.FormContent': {'bases': ['cgi.FormContentDict'],
                                 'constructor': [],
                                 'docstring': 'This class is present for backwards compatibility only.',
                                 'methods': [('values', ['key'], ''),
                                             ('indexed_value', ['key', 'location'], ''),
                                             ('value', ['key'], ''),
                                             ('length', ['key'], ''),
                                             ('stripped', ['key'], ''),
                                             ('pars', [], '')],
                                 'properties': []},
             'cgi.FormContentDict': {'bases': ['UserDict.UserDict'],
                                     'constructor': ['environ=os.environ'],
                                     'docstring': 'Form content as dictionary with a list of values per field.\n\n    form = FormContentDict()\n\n    form[key] -> [value, value, ...]\n    key in form -> Boolean\n    form.keys() -> [key, key, ...]\n    form.values() -> [[val, val, ...], [val, val, ...], ...]\n    form.items() ->  [(key, [val, val, ...]), (key, [val, val, ...]), ...]\n    form.dict == {key: [val, val, ...], ...}\n\n    ',
                                     'methods': [],
                                     'properties': ['dict', 'data', 'query_string']},
             'cgi.InterpFormContentDict': {'bases': ['cgi.SvFormContentDict'],
                                           'constructor': [],
                                           'docstring': 'This class is present for backwards compatibility only.',
                                           'methods': [('__getitem__', ['key'], ''),
                                                       ('values', [], ''),
                                                       ('items', [], '')],
                                           'properties': []},
             'cgi.MiniFieldStorage': {'bases': [],
                                      'constructor': ['name', 'value'],
                                      'docstring': 'Like FieldStorage, for use when no file uploads are possible.',
                                      'methods': [('__repr__',
                                                   [],
                                                   'Return printable representation.')],
                                      'properties': ['filename',
                                                     'list',
                                                     'type',
                                                     'file',
                                                     'type_options',
                                                     'disposition',
                                                     'disposition_options',
                                                     'headers',
                                                     'name',
                                                     'value']},
             'cgi.SvFormContentDict': {'bases': ['cgi.FormContentDict'],
                                       'constructor': [],
                                       'docstring': 'Form content as dictionary expecting a single value per field.\n\n    If you only expect a single value for each field, then form[key]\n    will return that single value.  It will raise an IndexError if\n    that expectation is not true.  If you expect a field to have\n    possible multiple values, than you can use form.getlist(key) to\n    get all of the values.  values() and items() are a compromise:\n    they return single strings where there is a single value, and\n    lists of strings otherwise.\n\n    ',
                                       'methods': [('__getitem__', ['key'], ''),
                                                   ('getlist', ['key'], ''),
                                                   ('values', [], ''),
                                                   ('items', [], '')],
                                       'properties': []},
             'cgitb.Hook': {'bases': [],
                            'constructor': ['display=1',
                                            'logdir=None',
                                            'context=5',
                                            'file=None',
                                            "format='html'"],
                            'docstring': 'A hook to replace sys.excepthook that shows tracebacks in HTML.',
                            'methods': [('__call__', ['etype', 'evalue', 'etb'], ''),
                                        ('handle', ['info=None'], '')],
                            'properties': ['display', 'logdir', 'context', 'file', 'format']},
             'chunk.Chunk': {'bases': [],
                             'constructor': ['file',
                                             'align=True',
                                             'bigendian=True',
                                             'inclheader=False'],
                             'docstring': '',
                             'methods': [('getname',
                                          [],
                                          'Return the name (ID) of the current chunk.'),
                                         ('getsize',
                                          [],
                                          'Return the size of the current chunk.'),
                                         ('close', [], ''),
                                         ('isatty', [], ''),
                                         ('seek',
                                          ['pos', 'whence=0'],
                                          'Seek to specified position into the chunk.\n        Default position is 0 (start of chunk).\n        If the file is not seekable, this will result in an error.\n        '),
                                         ('tell', [], ''),
                                         ('read',
                                          ['size=-1'],
                                          'Read at most size bytes from the chunk.\n        If size is omitted or negative, read until the end\n        of the chunk.\n        '),
                                         ('skip',
                                          [],
                                          'Skip the rest of the chunk.\n        If you are not interested in the contents of the chunk,\n        this method should be called so that the file points to\n        the start of the next chunk.\n        ')],
                             'properties': ['closed',
                                            'align',
                                            'file',
                                            'chunkname',
                                            'chunksize',
                                            'size_read',
                                            'offset',
                                            'seekable']},
             'cmd.Cmd': {'bases': [],
                         'constructor': ["completekey='tab'", 'stdin=None', 'stdout=None'],
                         'docstring': "A simple framework for writing line-oriented command interpreters.\n\n    These are often useful for test harnesses, administrative tools, and\n    prototypes that will later be wrapped in a more sophisticated interface.\n\n    A Cmd instance or subclass instance is a line-oriented interpreter\n    framework.  There is no good reason to instantiate Cmd itself; rather,\n    it's useful as a superclass of an interpreter class you define yourself\n    in order to inherit Cmd's methods and encapsulate action methods.\n\n    ",
                         'methods': [('cmdloop',
                                      ['intro=None'],
                                      'Repeatedly issue a prompt, accept input, parse an initial prefix\n        off the received input, and dispatch to action methods, passing them\n        the remainder of the line as argument.\n\n        '),
                                     ('precmd',
                                      ['line'],
                                      'Hook method executed just before the command line is\n        interpreted, but after the input prompt is generated and issued.\n\n        '),
                                     ('postcmd',
                                      ['stop', 'line'],
                                      'Hook method executed just after a command dispatch is finished.'),
                                     ('preloop',
                                      [],
                                      'Hook method executed once when the cmdloop() method is called.'),
                                     ('postloop',
                                      [],
                                      'Hook method executed once when the cmdloop() method is about to\n        return.\n\n        '),
                                     ('parseline',
                                      ['line'],
                                      "Parse the line into a command name and a string containing\n        the arguments.  Returns a tuple containing (command, args, line).\n        'command' and 'args' may be None if the line couldn't be parsed.\n        "),
                                     ('onecmd',
                                      ['line'],
                                      'Interpret the argument as though it had been typed in response\n        to the prompt.\n\n        This may be overridden, but should not normally need to be;\n        see the precmd() and postcmd() methods for useful execution hooks.\n        The return value is a flag indicating whether interpretation of\n        commands by the interpreter should stop.\n\n        '),
                                     ('emptyline',
                                      [],
                                      'Called when an empty line is entered in response to the prompt.\n\n        If this method is not overridden, it repeats the last nonempty\n        command entered.\n\n        '),
                                     ('default',
                                      ['line'],
                                      'Called on an input line when the command prefix is not recognized.\n\n        If this method is not overridden, it prints an error message and\n        returns.\n\n        '),
                                     ('completedefault',
                                      ['*ignored'],
                                      'Method called to complete an input line when no command-specific\n        complete_*() method is available.\n\n        By default, it returns an empty list.\n\n        '),
                                     ('completenames', ['text', '*ignored'], ''),
                                     ('complete',
                                      ['text', 'state'],
                                      "Return the next possible completion for 'text'.\n\n        If a command has not been entered, then complete against command list.\n        Otherwise try to call complete_<command> to get list of completions.\n        "),
                                     ('get_names', [], ''),
                                     ('complete_help', ['*args'], ''),
                                     ('do_help', ['arg'], ''),
                                     ('print_topics',
                                      ['header', 'cmds', 'cmdlen', 'maxcol'],
                                      ''),
                                     ('columnize',
                                      ['list', 'displaywidth=80'],
                                      'Display a list of strings as a compact set of columns.\n\n        Each column is only as wide as necessary.\n        Columns are separated by two spaces (one was not legible enough).\n        ')],
                         'properties': ['prompt',
                                        'identchars',
                                        'ruler',
                                        'lastcmd',
                                        'intro',
                                        'doc_leader',
                                        'doc_header',
                                        'misc_header',
                                        'undoc_header',
                                        'nohelp',
                                        'use_rawinput',
                                        'stdin',
                                        'stdout',
                                        'cmdqueue',
                                        'completekey',
                                        'old_completer',
                                        'completion_matches']},
             'code.InteractiveConsole': {'bases': ['code.InteractiveInterpreter'],
                                         'constructor': ['locals=None', "filename='<console>'"],
                                         'docstring': 'Closely emulate the behavior of the interactive Python interpreter.\n\n    This class builds on InteractiveInterpreter and adds prompting\n    using the familiar sys.ps1 and sys.ps2, and input buffering.\n\n    ',
                                         'methods': [('resetbuffer',
                                                      [],
                                                      'Reset the input buffer.'),
                                                     ('interact',
                                                      ['banner=None'],
                                                      "Closely emulate the interactive Python console.\n\n        The optional banner argument specify the banner to print\n        before the first interaction; by default it prints a banner\n        similar to the one printed by the real Python interpreter,\n        followed by the current class name in parentheses (so as not\n        to confuse this with the real interpreter -- since it's so\n        close!).\n\n        "),
                                                     ('push',
                                                      ['line'],
                                                      "Push a line to the interpreter.\n\n        The line should not have a trailing newline; it may have\n        internal newlines.  The line is appended to a buffer and the\n        interpreter's runsource() method is called with the\n        concatenated contents of the buffer as source.  If this\n        indicates that the command was executed or invalid, the buffer\n        is reset; otherwise, the command is incomplete, and the buffer\n        is left as it was after the line was appended.  The return\n        value is 1 if more input is required, 0 if the line was dealt\n        with in some way (this is the same as runsource()).\n\n        "),
                                                     ('raw_input',
                                                      ["prompt=''"],
                                                      'Write a prompt and read a line.\n\n        The returned line does not include the trailing newline.\n        When the user enters the EOF key sequence, EOFError is raised.\n\n        The base implementation uses the built-in function\n        raw_input(); a subclass may replace this with a different\n        implementation.\n\n        ')],
                                         'properties': ['filename', 'buffer']},
             'code.InteractiveInterpreter': {'bases': [],
                                             'constructor': ['locals=None'],
                                             'docstring': "Base class for InteractiveConsole.\n\n    This class deals with parsing and interpreter state (the user's\n    namespace); it doesn't deal with input buffering or prompting or\n    input file naming (the filename is always passed in explicitly).\n\n    ",
                                             'methods': [('runsource',
                                                          ['source',
                                                           "filename='<input>'",
                                                           "symbol='single'"],
                                                          'Compile and run some source in the interpreter.\n\n        Arguments are as for compile_command().\n\n        One several things can happen:\n\n        1) The input is incorrect; compile_command() raised an\n        exception (SyntaxError or OverflowError).  A syntax traceback\n        will be printed by calling the showsyntaxerror() method.\n\n        2) The input is incomplete, and more input is required;\n        compile_command() returned None.  Nothing happens.\n\n        3) The input is complete; compile_command() returned a code\n        object.  The code is executed by calling self.runcode() (which\n        also handles run-time exceptions, except for SystemExit).\n\n        The return value is True in case 2, False in the other cases (unless\n        an exception is raised).  The return value can be used to\n        decide whether to use sys.ps1 or sys.ps2 to prompt the next\n        line.\n\n        '),
                                                         ('runcode',
                                                          ['code'],
                                                          'Execute a code object.\n\n        When an exception occurs, self.showtraceback() is called to\n        display a traceback.  All exceptions are caught except\n        SystemExit, which is reraised.\n\n        A note about KeyboardInterrupt: this exception may occur\n        elsewhere in this code, and may not always be caught.  The\n        caller should be prepared to deal with it.\n\n        '),
                                                         ('showsyntaxerror',
                                                          ['filename=None'],
                                                          'Display the syntax error that just occurred.\n\n        This doesn\'t display a stack trace because there isn\'t one.\n\n        If a filename is given, it is stuffed in the exception instead\n        of what was there before (because Python\'s parser always uses\n        "<string>" when reading from a string).\n\n        The output is written by self.write(), below.\n\n        '),
                                                         ('showtraceback',
                                                          [],
                                                          'Display the exception that just occurred.\n\n        We remove the first stack item because it is our own code.\n\n        The output is written by self.write(), below.\n\n        '),
                                                         ('write',
                                                          ['data'],
                                                          'Write a string.\n\n        The base implementation writes to sys.stderr; a subclass may\n        replace this with a different implementation.\n\n        ')],
                                             'properties': ['locals', 'compile']},
             'codecs.BufferedIncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                   'constructor': ["errors='strict'"],
                                                   'docstring': '\n    This subclass of IncrementalDecoder can be used as the baseclass for an\n    incremental decoder if the decoder must be able to handle incomplete byte\n    sequences.\n    ',
                                                   'methods': [('_buffer_decode',
                                                                ['input', 'errors', 'final'],
                                                                ''),
                                                               ('decode',
                                                                ['input', 'final=False'],
                                                                ''),
                                                               ('reset', [], '')],
                                                   'properties': ['buffer']},
             'codecs.BufferedIncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                   'constructor': ["errors='strict'"],
                                                   'docstring': '\n    This subclass of IncrementalEncoder can be used as the baseclass for an\n    incremental encoder if the encoder must keep some of the output in a\n    buffer between calls to encode().\n    ',
                                                   'methods': [('_buffer_encode',
                                                                ['input', 'errors', 'final'],
                                                                ''),
                                                               ('encode',
                                                                ['input', 'final=False'],
                                                                ''),
                                                               ('reset', [], '')],
                                                   'properties': ['buffer']},
             'codecs.Codec': {'bases': [],
                              'constructor': [],
                              'docstring': " Defines the interface for stateless encoders/decoders.\n\n        The .encode()/.decode() methods may use different error\n        handling schemes by providing the errors argument. These\n        string values are predefined:\n\n         'strict' - raise a ValueError error (or a subclass)\n         'ignore' - ignore the character and continue with the next\n         'replace' - replace with a suitable replacement character;\n                    Python will use the official U+FFFD REPLACEMENT\n                    CHARACTER for the builtin Unicode codecs on\n                    decoding and '?' on encoding.\n         'xmlcharrefreplace' - Replace with the appropriate XML\n                               character reference (only for encoding).\n         'backslashreplace'  - Replace with backslashed escape sequences\n                               (only for encoding).\n\n        The set of allowed values can be extended via register_error.\n\n    ",
                              'methods': [('encode',
                                           ['input', "errors='strict'"],
                                           " Encodes the object input and returns a tuple (output\n            object, length consumed).\n\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamCodec for codecs which have to keep state in order to\n            make encoding/decoding efficient.\n\n            The encoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        "),
                                          ('decode',
                                           ['input', "errors='strict'"],
                                           " Decodes the object input and returns a tuple (output\n            object, length consumed).\n\n            input must be an object which provides the bf_getreadbuf\n            buffer slot. Python strings, buffer objects and memory\n            mapped files are examples of objects providing this slot.\n\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamCodec for codecs which have to keep state in order to\n            make encoding/decoding efficient.\n\n            The decoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        ")],
                              'properties': []},
             'codecs.CodecInfo': {'bases': ['tuple'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('__new__',
                                               ['encode',
                                                'decode',
                                                'streamreader=None',
                                                'streamwriter=None',
                                                'incrementalencoder=None',
                                                'incrementaldecoder=None',
                                                'name=None'],
                                               ''),
                                              ('__repr__', [], '')],
                                  'properties': ['name',
                                                 'encode',
                                                 'decode',
                                                 'incrementalencoder',
                                                 'incrementaldecoder',
                                                 'streamwriter',
                                                 'streamreader']},
             'codecs.IncrementalDecoder': {'bases': ['object'],
                                           'constructor': ["errors='strict'"],
                                           'docstring': '\n    An IncrementalDecoder decodes an input in multiple steps. The input can be\n    passed piece by piece to the decode() method. The IncrementalDecoder\n    remembers the state of the decoding process between calls to decode().\n    ',
                                           'methods': [('decode',
                                                        ['input', 'final=False'],
                                                        '\n        Decodes input and returns the resulting object.\n        '),
                                                       ('reset',
                                                        [],
                                                        '\n        Resets the decoder to the initial state.\n        ')],
                                           'properties': ['errors']},
             'codecs.IncrementalEncoder': {'bases': ['object'],
                                           'constructor': ["errors='strict'"],
                                           'docstring': '\n    An IncrementalEncoder encodes an input in multiple steps. The input can be\n    passed piece by piece to the encode() method. The IncrementalEncoder remembers\n    the state of the Encoding process between calls to encode().\n    ',
                                           'methods': [('encode',
                                                        ['input', 'final=False'],
                                                        '\n        Encodes input and returns the resulting object.\n        '),
                                                       ('reset',
                                                        [],
                                                        '\n        Resets the encoder to the initial state.\n        ')],
                                           'properties': ['errors', 'buffer']},
             'codecs.StreamReader': {'bases': ['codecs.Codec'],
                                     'constructor': ['stream', "errors='strict'"],
                                     'docstring': '',
                                     'methods': [('decode', ['input', "errors='strict'"], ''),
                                                 ('read',
                                                  ['size=-1', 'chars=-1', 'firstline=False'],
                                                  ' Decodes data from the stream self.stream and returns the\n            resulting object.\n\n            chars indicates the number of characters to read from the\n            stream. read() will never return more than chars\n            characters, but it might return less, if there are not enough\n            characters available.\n\n            size indicates the approximate maximum number of bytes to\n            read from the stream for decoding purposes. The decoder\n            can modify this setting as appropriate. The default value\n            -1 indicates to read and decode as much as possible.  size\n            is intended to prevent having to decode huge files in one\n            step.\n\n            If firstline is true, and a UnicodeDecodeError happens\n            after the first line terminator in the input only the first line\n            will be returned, the rest of the input will be kept until the\n            next call to read().\n\n            The method should use a greedy read strategy meaning that\n            it should read as much data as is allowed within the\n            definition of the encoding and the given size, e.g.  if\n            optional encoding endings or state markers are available\n            on the stream, these should be read too.\n        '),
                                                 ('readline',
                                                  ['size=None', 'keepends=True'],
                                                  ' Read one line from the input stream and return the\n            decoded data.\n\n            size, if given, is passed as size argument to the\n            read() method.\n\n        '),
                                                 ('readlines',
                                                  ['sizehint=None', 'keepends=True'],
                                                  " Read all lines available on the input stream\n            and return them as list of lines.\n\n            Line breaks are implemented using the codec's decoder\n            method and are included in the list entries.\n\n            sizehint, if given, is ignored since there is no efficient\n            way to finding the true end-of-line.\n\n        "),
                                                 ('reset',
                                                  [],
                                                  ' Resets the codec buffers used for keeping state.\n\n            Note that no stream repositioning should take place.\n            This method is primarily intended to be able to recover\n            from decoding errors.\n\n        '),
                                                 ('seek',
                                                  ['offset', 'whence=0'],
                                                  " Set the input stream's current position.\n\n            Resets the codec buffers used for keeping state.\n        "),
                                                 ('next',
                                                  [],
                                                  ' Return the next decoded line from the input stream.'),
                                                 ('__iter__', [], ''),
                                                 ('__getattr__',
                                                  ['name', 'getattr=getattr'],
                                                  ' Inherit all other methods from the underlying stream.\n        '),
                                                 ('__enter__', [], ''),
                                                 ('__exit__', ['type', 'value', 'tb'], '')],
                                     'properties': ['stream',
                                                    'errors',
                                                    'bytebuffer',
                                                    'charbuffer',
                                                    'linebuffer']},
             'codecs.StreamReaderWriter': {'bases': [],
                                           'constructor': ['stream',
                                                           'Reader',
                                                           'Writer',
                                                           "errors='strict'"],
                                           'docstring': ' StreamReaderWriter instances allow wrapping streams which\n        work in both read and write modes.\n\n        The design is such that one can use the factory functions\n        returned by the codec.lookup() function to construct the\n        instance.\n\n    ',
                                           'methods': [('read', ['size=-1'], ''),
                                                       ('readline', ['size=None'], ''),
                                                       ('readlines', ['sizehint=None'], ''),
                                                       ('next',
                                                        [],
                                                        ' Return the next decoded line from the input stream.'),
                                                       ('__iter__', [], ''),
                                                       ('write', ['data'], ''),
                                                       ('writelines', ['list'], ''),
                                                       ('reset', [], ''),
                                                       ('__getattr__',
                                                        ['name', 'getattr=getattr'],
                                                        ' Inherit all other methods from the underlying stream.\n        '),
                                                       ('__enter__', [], ''),
                                                       ('__exit__',
                                                        ['type', 'value', 'tb'],
                                                        '')],
                                           'properties': ['encoding',
                                                          'stream',
                                                          'reader',
                                                          'writer',
                                                          'errors']},
             'codecs.StreamRecoder': {'bases': [],
                                      'constructor': ['stream',
                                                      'encode',
                                                      'decode',
                                                      'Reader',
                                                      'Writer',
                                                      "errors='strict'"],
                                      'docstring': ' StreamRecoder instances provide a frontend - backend\n        view of encoding data.\n\n        They use the complete set of APIs returned by the\n        codecs.lookup() function to implement their task.\n\n        Data written to the stream is first decoded into an\n        intermediate format (which is dependent on the given codec\n        combination) and then written to the stream using an instance\n        of the provided Writer class.\n\n        In the other direction, data is read from the stream using a\n        Reader instance and then return encoded data to the caller.\n\n    ',
                                      'methods': [('read', ['size=-1'], ''),
                                                  ('readline', ['size=None'], ''),
                                                  ('readlines', ['sizehint=None'], ''),
                                                  ('next',
                                                   [],
                                                   ' Return the next decoded line from the input stream.'),
                                                  ('__iter__', [], ''),
                                                  ('write', ['data'], ''),
                                                  ('writelines', ['list'], ''),
                                                  ('reset', [], ''),
                                                  ('__getattr__',
                                                   ['name', 'getattr=getattr'],
                                                   ' Inherit all other methods from the underlying stream.\n        '),
                                                  ('__enter__', [], ''),
                                                  ('__exit__', ['type', 'value', 'tb'], '')],
                                      'properties': ['data_encoding',
                                                     'file_encoding',
                                                     'stream',
                                                     'encode',
                                                     'decode',
                                                     'reader',
                                                     'writer',
                                                     'errors']},
             'codecs.StreamWriter': {'bases': ['codecs.Codec'],
                                     'constructor': ['stream', "errors='strict'"],
                                     'docstring': '',
                                     'methods': [('write',
                                                  ['object'],
                                                  " Writes the object's contents encoded to self.stream.\n        "),
                                                 ('writelines',
                                                  ['list'],
                                                  ' Writes the concatenated list of strings to the stream\n            using .write().\n        '),
                                                 ('reset',
                                                  [],
                                                  ' Flushes and resets the codec buffers used for keeping state.\n\n            Calling this method should ensure that the data on the\n            output is put into a clean state, that allows appending\n            of new fresh data without having to rescan the whole\n            stream to recover state.\n\n        '),
                                                 ('__getattr__',
                                                  ['name', 'getattr=getattr'],
                                                  ' Inherit all other methods from the underlying stream.\n        '),
                                                 ('__enter__', [], ''),
                                                 ('__exit__', ['type', 'value', 'tb'], '')],
                                     'properties': ['stream', 'errors']},
             'codeop.CommandCompiler': {'bases': [],
                                        'constructor': [],
                                        'docstring': "Instances of this class have __call__ methods identical in\n    signature to compile_command; the difference is that if the\n    instance compiles program text containing a __future__ statement,\n    the instance 'remembers' and compiles all subsequent program texts\n    with the statement in force.",
                                        'methods': [('__call__',
                                                     ['source',
                                                      "filename='<input>'",
                                                      "symbol='single'"],
                                                     'Compile a command and determine whether it is incomplete.\n\n        Arguments:\n\n        source -- the source string; may contain \\n characters\n        filename -- optional filename from which source was read;\n                    default "<input>"\n        symbol -- optional grammar start symbol; "single" (default) or\n                  "eval"\n\n        Return value / exceptions raised:\n\n        - Return a code object if the command is complete and valid\n        - Return None if the command is incomplete\n        - Raise SyntaxError, ValueError or OverflowError if the command is a\n          syntax error (OverflowError and ValueError can be produced by\n          malformed literals).\n        ')],
                                        'properties': ['compiler']},
             'codeop.Compile': {'bases': [],
                                'constructor': [],
                                'docstring': 'Instances of this class behave much like the built-in compile\n    function, but if one is used to compile text containing a future\n    statement, it "remembers" and compiles all subsequent program texts\n    with the statement in force.',
                                'methods': [('__call__', ['source', 'filename', 'symbol'], '')],
                                'properties': ['flags']},
             'compiler.ast.Add': {'bases': ['compiler.ast.Node'],
                                  'constructor': ['(left, right)', 'lineno=None'],
                                  'docstring': '',
                                  'methods': [('getChildren', [], ''),
                                              ('getChildNodes', [], ''),
                                              ('__repr__', [], '')],
                                  'properties': ['left', 'right', 'lineno']},
             'compiler.ast.And': {'bases': ['compiler.ast.Node'],
                                  'constructor': ['nodes', 'lineno=None'],
                                  'docstring': '',
                                  'methods': [('getChildren', [], ''),
                                              ('getChildNodes', [], ''),
                                              ('__repr__', [], '')],
                                  'properties': ['nodes', 'lineno']},
             'compiler.ast.AssAttr': {'bases': ['compiler.ast.Node'],
                                      'constructor': ['expr',
                                                      'attrname',
                                                      'flags',
                                                      'lineno=None'],
                                      'docstring': '',
                                      'methods': [('getChildren', [], ''),
                                                  ('getChildNodes', [], ''),
                                                  ('__repr__', [], '')],
                                      'properties': ['expr', 'attrname', 'flags', 'lineno']},
             'compiler.ast.AssList': {'bases': ['compiler.ast.Node'],
                                      'constructor': ['nodes', 'lineno=None'],
                                      'docstring': '',
                                      'methods': [('getChildren', [], ''),
                                                  ('getChildNodes', [], ''),
                                                  ('__repr__', [], '')],
                                      'properties': ['nodes', 'lineno']},
             'compiler.ast.AssName': {'bases': ['compiler.ast.Node'],
                                      'constructor': ['name', 'flags', 'lineno=None'],
                                      'docstring': '',
                                      'methods': [('getChildren', [], ''),
                                                  ('getChildNodes', [], ''),
                                                  ('__repr__', [], '')],
                                      'properties': ['name', 'flags', 'lineno']},
             'compiler.ast.AssTuple': {'bases': ['compiler.ast.Node'],
                                       'constructor': ['nodes', 'lineno=None'],
                                       'docstring': '',
                                       'methods': [('getChildren', [], ''),
                                                   ('getChildNodes', [], ''),
                                                   ('__repr__', [], '')],
                                       'properties': ['nodes', 'lineno']},
             'compiler.ast.Assert': {'bases': ['compiler.ast.Node'],
                                     'constructor': ['test', 'fail', 'lineno=None'],
                                     'docstring': '',
                                     'methods': [('getChildren', [], ''),
                                                 ('getChildNodes', [], ''),
                                                 ('__repr__', [], '')],
                                     'properties': ['test', 'fail', 'lineno']},
             'compiler.ast.Assign': {'bases': ['compiler.ast.Node'],
                                     'constructor': ['nodes', 'expr', 'lineno=None'],
                                     'docstring': '',
                                     'methods': [('getChildren', [], ''),
                                                 ('getChildNodes', [], ''),
                                                 ('__repr__', [], '')],
                                     'properties': ['nodes', 'expr', 'lineno']},
             'compiler.ast.AugAssign': {'bases': ['compiler.ast.Node'],
                                        'constructor': ['node', 'op', 'expr', 'lineno=None'],
                                        'docstring': '',
                                        'methods': [('getChildren', [], ''),
                                                    ('getChildNodes', [], ''),
                                                    ('__repr__', [], '')],
                                        'properties': ['node', 'op', 'expr', 'lineno']},
             'compiler.ast.Backquote': {'bases': ['compiler.ast.Node'],
                                        'constructor': ['expr', 'lineno=None'],
                                        'docstring': '',
                                        'methods': [('getChildren', [], ''),
                                                    ('getChildNodes', [], ''),
                                                    ('__repr__', [], '')],
                                        'properties': ['expr', 'lineno']},
             'compiler.ast.Bitand': {'bases': ['compiler.ast.Node'],
                                     'constructor': ['nodes', 'lineno=None'],
                                     'docstring': '',
                                     'methods': [('getChildren', [], ''),
                                                 ('getChildNodes', [], ''),
                                                 ('__repr__', [], '')],
                                     'properties': ['nodes', 'lineno']},
             'compiler.ast.Bitor': {'bases': ['compiler.ast.Node'],
                                    'constructor': ['nodes', 'lineno=None'],
                                    'docstring': '',
                                    'methods': [('getChildren', [], ''),
                                                ('getChildNodes', [], ''),
                                                ('__repr__', [], '')],
                                    'properties': ['nodes', 'lineno']},
             'compiler.ast.Bitxor': {'bases': ['compiler.ast.Node'],
                                     'constructor': ['nodes', 'lineno=None'],
                                     'docstring': '',
                                     'methods': [('getChildren', [], ''),
                                                 ('getChildNodes', [], ''),
                                                 ('__repr__', [], '')],
                                     'properties': ['nodes', 'lineno']},
             'compiler.ast.Break': {'bases': ['compiler.ast.Node'],
                                    'constructor': ['lineno=None'],
                                    'docstring': '',
                                    'methods': [('getChildren', [], ''),
                                                ('getChildNodes', [], ''),
                                                ('__repr__', [], '')],
                                    'properties': ['lineno']},
             'compiler.ast.CallFunc': {'bases': ['compiler.ast.Node'],
                                       'constructor': ['node',
                                                       'args',
                                                       'star_args=None',
                                                       'dstar_args=None',
                                                       'lineno=None'],
                                       'docstring': '',
                                       'methods': [('getChildren', [], ''),
                                                   ('getChildNodes', [], ''),
                                                   ('__repr__', [], '')],
                                       'properties': ['node',
                                                      'args',
                                                      'star_args',
                                                      'dstar_args',
                                                      'lineno']},
             'compiler.ast.Class': {'bases': ['compiler.ast.Node'],
                                    'constructor': ['name',
                                                    'bases',
                                                    'doc',
                                                    'code',
                                                    'lineno=None'],
                                    'docstring': '',
                                    'methods': [('getChildren', [], ''),
                                                ('getChildNodes', [], ''),
                                                ('__repr__', [], '')],
                                    'properties': ['name', 'bases', 'doc', 'code', 'lineno']},
             'compiler.ast.Compare': {'bases': ['compiler.ast.Node'],
                                      'constructor': ['expr', 'ops', 'lineno=None'],
                                      'docstring': '',
                                      'methods': [('getChildren', [], ''),
                                                  ('getChildNodes', [], ''),
                                                  ('__repr__', [], '')],
                                      'properties': ['expr', 'ops', 'lineno']},
             'compiler.ast.Const': {'bases': ['compiler.ast.Node'],
                                    'constructor': ['value', 'lineno=None'],
                                    'docstring': '',
                                    'methods': [('getChildren', [], ''),
                                                ('getChildNodes', [], ''),
                                                ('__repr__', [], '')],
                                    'properties': ['value', 'lineno']},
             'compiler.ast.Continue': {'bases': ['compiler.ast.Node'],
                                       'constructor': ['lineno=None'],
                                       'docstring': '',
                                       'methods': [('getChildren', [], ''),
                                                   ('getChildNodes', [], ''),
                                                   ('__repr__', [], '')],
                                       'properties': ['lineno']},
             'compiler.ast.Decorators': {'bases': ['compiler.ast.Node'],
                                         'constructor': ['nodes', 'lineno=None'],
                                         'docstring': '',
                                         'methods': [('getChildren', [], ''),
                                                     ('getChildNodes', [], ''),
                                                     ('__repr__', [], '')],
                                         'properties': ['nodes', 'lineno']},
             'compiler.ast.Dict': {'bases': ['compiler.ast.Node'],
                                   'constructor': ['items', 'lineno=None'],
                                   'docstring': '',
                                   'methods': [('getChildren', [], ''),
                                               ('getChildNodes', [], ''),
                                               ('__repr__', [], '')],
                                   'properties': ['items', 'lineno']},
             'compiler.ast.Discard': {'bases': ['compiler.ast.Node'],
                                      'constructor': ['expr', 'lineno=None'],
                                      'docstring': '',
                                      'methods': [('getChildren', [], ''),
                                                  ('getChildNodes', [], ''),
                                                  ('__repr__', [], '')],
                                      'properties': ['expr', 'lineno']},
             'compiler.ast.Div': {'bases': ['compiler.ast.Node'],
                                  'constructor': ['(left, right)', 'lineno=None'],
                                  'docstring': '',
                                  'methods': [('getChildren', [], ''),
                                              ('getChildNodes', [], ''),
                                              ('__repr__', [], '')],
                                  'properties': ['left', 'right', 'lineno']},
             'compiler.ast.Ellipsis': {'bases': ['compiler.ast.Node'],
                                       'constructor': ['lineno=None'],
                                       'docstring': '',
                                       'methods': [('getChildren', [], ''),
                                                   ('getChildNodes', [], ''),
                                                   ('__repr__', [], '')],
                                       'properties': ['lineno']},
             'compiler.ast.EmptyNode': {'bases': ['compiler.ast.Node'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': []},
             'compiler.ast.Exec': {'bases': ['compiler.ast.Node'],
                                   'constructor': ['expr', 'locals', 'globals', 'lineno=None'],
                                   'docstring': '',
                                   'methods': [('getChildren', [], ''),
                                               ('getChildNodes', [], ''),
                                               ('__repr__', [], '')],
                                   'properties': ['expr', 'locals', 'globals', 'lineno']},
             'compiler.ast.Expression': {'bases': ['compiler.ast.Node'],
                                         'constructor': ['node'],
                                         'docstring': '',
                                         'methods': [('getChildren', [], ''),
                                                     ('getChildNodes', [], ''),
                                                     ('__repr__', [], '')],
                                         'properties': ['node']},
             'compiler.ast.FloorDiv': {'bases': ['compiler.ast.Node'],
                                       'constructor': ['(left, right)', 'lineno=None'],
                                       'docstring': '',
                                       'methods': [('getChildren', [], ''),
                                                   ('getChildNodes', [], ''),
                                                   ('__repr__', [], '')],
                                       'properties': ['left', 'right', 'lineno']},
             'compiler.ast.For': {'bases': ['compiler.ast.Node'],
                                  'constructor': ['assign',
                                                  'list',
                                                  'body',
                                                  'else_',
                                                  'lineno=None'],
                                  'docstring': '',
                                  'methods': [('getChildren', [], ''),
                                              ('getChildNodes', [], ''),
                                              ('__repr__', [], '')],
                                  'properties': ['assign', 'list', 'body', 'else_', 'lineno']},
             'compiler.ast.From': {'bases': ['compiler.ast.Node'],
                                   'constructor': ['modname', 'names', 'level', 'lineno=None'],
                                   'docstring': '',
                                   'methods': [('getChildren', [], ''),
                                               ('getChildNodes', [], ''),
                                               ('__repr__', [], '')],
                                   'properties': ['modname', 'names', 'level', 'lineno']},
             'compiler.ast.Function': {'bases': ['compiler.ast.Node'],
                                       'constructor': ['decorators',
                                                       'name',
                                                       'argnames',
                                                       'defaults',
                                                       'flags',
                                                       'doc',
                                                       'code',
                                                       'lineno=None'],
                                       'docstring': '',
                                       'methods': [('getChildren', [], ''),
                                                   ('getChildNodes', [], ''),
                                                   ('__repr__', [], '')],
                                       'properties': ['decorators',
                                                      'name',
                                                      'argnames',
                                                      'defaults',
                                                      'flags',
                                                      'doc',
                                                      'code',
                                                      'lineno',
                                                      'varargs',
                                                      'kwargs']},
             'compiler.ast.GenExpr': {'bases': ['compiler.ast.Node'],
                                      'constructor': ['code', 'lineno=None'],
                                      'docstring': '',
                                      'methods': [('getChildren', [], ''),
                                                  ('getChildNodes', [], ''),
                                                  ('__repr__', [], '')],
                                      'properties': ['code',
                                                     'lineno',
                                                     'argnames',
                                                     'varargs',
                                                     'kwargs']},
             'compiler.ast.GenExprFor': {'bases': ['compiler.ast.Node'],
                                         'constructor': ['assign', 'iter', 'ifs', 'lineno=None'],
                                         'docstring': '',
                                         'methods': [('getChildren', [], ''),
                                                     ('getChildNodes', [], ''),
                                                     ('__repr__', [], '')],
                                         'properties': ['assign',
                                                        'iter',
                                                        'ifs',
                                                        'lineno',
                                                        'is_outmost']},
             'compiler.ast.GenExprIf': {'bases': ['compiler.ast.Node'],
                                        'constructor': ['test', 'lineno=None'],
                                        'docstring': '',
                                        'methods': [('getChildren', [], ''),
                                                    ('getChildNodes', [], ''),
                                                    ('__repr__', [], '')],
                                        'properties': ['test', 'lineno']},
             'compiler.ast.GenExprInner': {'bases': ['compiler.ast.Node'],
                                           'constructor': ['expr', 'quals', 'lineno=None'],
                                           'docstring': '',
                                           'methods': [('getChildren', [], ''),
                                                       ('getChildNodes', [], ''),
                                                       ('__repr__', [], '')],
                                           'properties': ['expr', 'quals', 'lineno']},
             'compiler.ast.Getattr': {'bases': ['compiler.ast.Node'],
                                      'constructor': ['expr', 'attrname', 'lineno=None'],
                                      'docstring': '',
                                      'methods': [('getChildren', [], ''),
                                                  ('getChildNodes', [], ''),
                                                  ('__repr__', [], '')],
                                      'properties': ['expr', 'attrname', 'lineno']},
             'compiler.ast.Global': {'bases': ['compiler.ast.Node'],
                                     'constructor': ['names', 'lineno=None'],
                                     'docstring': '',
                                     'methods': [('getChildren', [], ''),
                                                 ('getChildNodes', [], ''),
                                                 ('__repr__', [], '')],
                                     'properties': ['names', 'lineno']},
             'compiler.ast.If': {'bases': ['compiler.ast.Node'],
                                 'constructor': ['tests', 'else_', 'lineno=None'],
                                 'docstring': '',
                                 'methods': [('getChildren', [], ''),
                                             ('getChildNodes', [], ''),
                                             ('__repr__', [], '')],
                                 'properties': ['tests', 'else_', 'lineno']},
             'compiler.ast.IfExp': {'bases': ['compiler.ast.Node'],
                                    'constructor': ['test', 'then', 'else_', 'lineno=None'],
                                    'docstring': '',
                                    'methods': [('getChildren', [], ''),
                                                ('getChildNodes', [], ''),
                                                ('__repr__', [], '')],
                                    'properties': ['test', 'then', 'else_', 'lineno']},
             'compiler.ast.Import': {'bases': ['compiler.ast.Node'],
                                     'constructor': ['names', 'lineno=None'],
                                     'docstring': '',
                                     'methods': [('getChildren', [], ''),
                                                 ('getChildNodes', [], ''),
                                                 ('__repr__', [], '')],
                                     'properties': ['names', 'lineno']},
             'compiler.ast.Invert': {'bases': ['compiler.ast.Node'],
                                     'constructor': ['expr', 'lineno=None'],
                                     'docstring': '',
                                     'methods': [('getChildren', [], ''),
                                                 ('getChildNodes', [], ''),
                                                 ('__repr__', [], '')],
                                     'properties': ['expr', 'lineno']},
             'compiler.ast.Keyword': {'bases': ['compiler.ast.Node'],
                                      'constructor': ['name', 'expr', 'lineno=None'],
                                      'docstring': '',
                                      'methods': [('getChildren', [], ''),
                                                  ('getChildNodes', [], ''),
                                                  ('__repr__', [], '')],
                                      'properties': ['name', 'expr', 'lineno']},
             'compiler.ast.Lambda': {'bases': ['compiler.ast.Node'],
                                     'constructor': ['argnames',
                                                     'defaults',
                                                     'flags',
                                                     'code',
                                                     'lineno=None'],
                                     'docstring': '',
                                     'methods': [('getChildren', [], ''),
                                                 ('getChildNodes', [], ''),
                                                 ('__repr__', [], '')],
                                     'properties': ['argnames',
                                                    'defaults',
                                                    'flags',
                                                    'code',
                                                    'lineno',
                                                    'varargs',
                                                    'kwargs']},
             'compiler.ast.LeftShift': {'bases': ['compiler.ast.Node'],
                                        'constructor': ['(left, right)', 'lineno=None'],
                                        'docstring': '',
                                        'methods': [('getChildren', [], ''),
                                                    ('getChildNodes', [], ''),
                                                    ('__repr__', [], '')],
                                        'properties': ['left', 'right', 'lineno']},
             'compiler.ast.List': {'bases': ['compiler.ast.Node'],
                                   'constructor': ['nodes', 'lineno=None'],
                                   'docstring': '',
                                   'methods': [('getChildren', [], ''),
                                               ('getChildNodes', [], ''),
                                               ('__repr__', [], '')],
                                   'properties': ['nodes', 'lineno']},
             'compiler.ast.ListComp': {'bases': ['compiler.ast.Node'],
                                       'constructor': ['expr', 'quals', 'lineno=None'],
                                       'docstring': '',
                                       'methods': [('getChildren', [], ''),
                                                   ('getChildNodes', [], ''),
                                                   ('__repr__', [], '')],
                                       'properties': ['expr', 'quals', 'lineno']},
             'compiler.ast.ListCompFor': {'bases': ['compiler.ast.Node'],
                                          'constructor': ['assign',
                                                          'list',
                                                          'ifs',
                                                          'lineno=None'],
                                          'docstring': '',
                                          'methods': [('getChildren', [], ''),
                                                      ('getChildNodes', [], ''),
                                                      ('__repr__', [], '')],
                                          'properties': ['assign', 'list', 'ifs', 'lineno']},
             'compiler.ast.ListCompIf': {'bases': ['compiler.ast.Node'],
                                         'constructor': ['test', 'lineno=None'],
                                         'docstring': '',
                                         'methods': [('getChildren', [], ''),
                                                     ('getChildNodes', [], ''),
                                                     ('__repr__', [], '')],
                                         'properties': ['test', 'lineno']},
             'compiler.ast.Mod': {'bases': ['compiler.ast.Node'],
                                  'constructor': ['(left, right)', 'lineno=None'],
                                  'docstring': '',
                                  'methods': [('getChildren', [], ''),
                                              ('getChildNodes', [], ''),
                                              ('__repr__', [], '')],
                                  'properties': ['left', 'right', 'lineno']},
             'compiler.ast.Module': {'bases': ['compiler.ast.Node'],
                                     'constructor': ['doc', 'node', 'lineno=None'],
                                     'docstring': '',
                                     'methods': [('getChildren', [], ''),
                                                 ('getChildNodes', [], ''),
                                                 ('__repr__', [], '')],
                                     'properties': ['doc', 'node', 'lineno']},
             'compiler.ast.Mul': {'bases': ['compiler.ast.Node'],
                                  'constructor': ['(left, right)', 'lineno=None'],
                                  'docstring': '',
                                  'methods': [('getChildren', [], ''),
                                              ('getChildNodes', [], ''),
                                              ('__repr__', [], '')],
                                  'properties': ['left', 'right', 'lineno']},
             'compiler.ast.Name': {'bases': ['compiler.ast.Node'],
                                   'constructor': ['name', 'lineno=None'],
                                   'docstring': '',
                                   'methods': [('getChildren', [], ''),
                                               ('getChildNodes', [], ''),
                                               ('__repr__', [], '')],
                                   'properties': ['name', 'lineno']},
             'compiler.ast.Node': {'bases': [],
                                   'constructor': [],
                                   'docstring': 'Abstract base class for ast nodes.',
                                   'methods': [('getChildren', [], ''),
                                               ('__iter__', [], ''),
                                               ('asList', [], ''),
                                               ('getChildNodes', [], '')],
                                   'properties': []},
             'compiler.ast.Not': {'bases': ['compiler.ast.Node'],
                                  'constructor': ['expr', 'lineno=None'],
                                  'docstring': '',
                                  'methods': [('getChildren', [], ''),
                                              ('getChildNodes', [], ''),
                                              ('__repr__', [], '')],
                                  'properties': ['expr', 'lineno']},
             'compiler.ast.Or': {'bases': ['compiler.ast.Node'],
                                 'constructor': ['nodes', 'lineno=None'],
                                 'docstring': '',
                                 'methods': [('getChildren', [], ''),
                                             ('getChildNodes', [], ''),
                                             ('__repr__', [], '')],
                                 'properties': ['nodes', 'lineno']},
             'compiler.ast.Pass': {'bases': ['compiler.ast.Node'],
                                   'constructor': ['lineno=None'],
                                   'docstring': '',
                                   'methods': [('getChildren', [], ''),
                                               ('getChildNodes', [], ''),
                                               ('__repr__', [], '')],
                                   'properties': ['lineno']},
             'compiler.ast.Power': {'bases': ['compiler.ast.Node'],
                                    'constructor': ['(left, right)', 'lineno=None'],
                                    'docstring': '',
                                    'methods': [('getChildren', [], ''),
                                                ('getChildNodes', [], ''),
                                                ('__repr__', [], '')],
                                    'properties': ['left', 'right', 'lineno']},
             'compiler.ast.Print': {'bases': ['compiler.ast.Node'],
                                    'constructor': ['nodes', 'dest', 'lineno=None'],
                                    'docstring': '',
                                    'methods': [('getChildren', [], ''),
                                                ('getChildNodes', [], ''),
                                                ('__repr__', [], '')],
                                    'properties': ['nodes', 'dest', 'lineno']},
             'compiler.ast.Printnl': {'bases': ['compiler.ast.Node'],
                                      'constructor': ['nodes', 'dest', 'lineno=None'],
                                      'docstring': '',
                                      'methods': [('getChildren', [], ''),
                                                  ('getChildNodes', [], ''),
                                                  ('__repr__', [], '')],
                                      'properties': ['nodes', 'dest', 'lineno']},
             'compiler.ast.Raise': {'bases': ['compiler.ast.Node'],
                                    'constructor': ['expr1', 'expr2', 'expr3', 'lineno=None'],
                                    'docstring': '',
                                    'methods': [('getChildren', [], ''),
                                                ('getChildNodes', [], ''),
                                                ('__repr__', [], '')],
                                    'properties': ['expr1', 'expr2', 'expr3', 'lineno']},
             'compiler.ast.Return': {'bases': ['compiler.ast.Node'],
                                     'constructor': ['value', 'lineno=None'],
                                     'docstring': '',
                                     'methods': [('getChildren', [], ''),
                                                 ('getChildNodes', [], ''),
                                                 ('__repr__', [], '')],
                                     'properties': ['value', 'lineno']},
             'compiler.ast.RightShift': {'bases': ['compiler.ast.Node'],
                                         'constructor': ['(left, right)', 'lineno=None'],
                                         'docstring': '',
                                         'methods': [('getChildren', [], ''),
                                                     ('getChildNodes', [], ''),
                                                     ('__repr__', [], '')],
                                         'properties': ['left', 'right', 'lineno']},
             'compiler.ast.Slice': {'bases': ['compiler.ast.Node'],
                                    'constructor': ['expr',
                                                    'flags',
                                                    'lower',
                                                    'upper',
                                                    'lineno=None'],
                                    'docstring': '',
                                    'methods': [('getChildren', [], ''),
                                                ('getChildNodes', [], ''),
                                                ('__repr__', [], '')],
                                    'properties': ['expr', 'flags', 'lower', 'upper', 'lineno']},
             'compiler.ast.Sliceobj': {'bases': ['compiler.ast.Node'],
                                       'constructor': ['nodes', 'lineno=None'],
                                       'docstring': '',
                                       'methods': [('getChildren', [], ''),
                                                   ('getChildNodes', [], ''),
                                                   ('__repr__', [], '')],
                                       'properties': ['nodes', 'lineno']},
             'compiler.ast.Stmt': {'bases': ['compiler.ast.Node'],
                                   'constructor': ['nodes', 'lineno=None'],
                                   'docstring': '',
                                   'methods': [('getChildren', [], ''),
                                               ('getChildNodes', [], ''),
                                               ('__repr__', [], '')],
                                   'properties': ['nodes', 'lineno']},
             'compiler.ast.Sub': {'bases': ['compiler.ast.Node'],
                                  'constructor': ['(left, right)', 'lineno=None'],
                                  'docstring': '',
                                  'methods': [('getChildren', [], ''),
                                              ('getChildNodes', [], ''),
                                              ('__repr__', [], '')],
                                  'properties': ['left', 'right', 'lineno']},
             'compiler.ast.Subscript': {'bases': ['compiler.ast.Node'],
                                        'constructor': ['expr', 'flags', 'subs', 'lineno=None'],
                                        'docstring': '',
                                        'methods': [('getChildren', [], ''),
                                                    ('getChildNodes', [], ''),
                                                    ('__repr__', [], '')],
                                        'properties': ['expr', 'flags', 'subs', 'lineno']},
             'compiler.ast.TryExcept': {'bases': ['compiler.ast.Node'],
                                        'constructor': ['body',
                                                        'handlers',
                                                        'else_',
                                                        'lineno=None'],
                                        'docstring': '',
                                        'methods': [('getChildren', [], ''),
                                                    ('getChildNodes', [], ''),
                                                    ('__repr__', [], '')],
                                        'properties': ['body', 'handlers', 'else_', 'lineno']},
             'compiler.ast.TryFinally': {'bases': ['compiler.ast.Node'],
                                         'constructor': ['body', 'final', 'lineno=None'],
                                         'docstring': '',
                                         'methods': [('getChildren', [], ''),
                                                     ('getChildNodes', [], ''),
                                                     ('__repr__', [], '')],
                                         'properties': ['body', 'final', 'lineno']},
             'compiler.ast.Tuple': {'bases': ['compiler.ast.Node'],
                                    'constructor': ['nodes', 'lineno=None'],
                                    'docstring': '',
                                    'methods': [('getChildren', [], ''),
                                                ('getChildNodes', [], ''),
                                                ('__repr__', [], '')],
                                    'properties': ['nodes', 'lineno']},
             'compiler.ast.UnaryAdd': {'bases': ['compiler.ast.Node'],
                                       'constructor': ['expr', 'lineno=None'],
                                       'docstring': '',
                                       'methods': [('getChildren', [], ''),
                                                   ('getChildNodes', [], ''),
                                                   ('__repr__', [], '')],
                                       'properties': ['expr', 'lineno']},
             'compiler.ast.UnarySub': {'bases': ['compiler.ast.Node'],
                                       'constructor': ['expr', 'lineno=None'],
                                       'docstring': '',
                                       'methods': [('getChildren', [], ''),
                                                   ('getChildNodes', [], ''),
                                                   ('__repr__', [], '')],
                                       'properties': ['expr', 'lineno']},
             'compiler.ast.While': {'bases': ['compiler.ast.Node'],
                                    'constructor': ['test', 'body', 'else_', 'lineno=None'],
                                    'docstring': '',
                                    'methods': [('getChildren', [], ''),
                                                ('getChildNodes', [], ''),
                                                ('__repr__', [], '')],
                                    'properties': ['test', 'body', 'else_', 'lineno']},
             'compiler.ast.With': {'bases': ['compiler.ast.Node'],
                                   'constructor': ['expr', 'vars', 'body', 'lineno=None'],
                                   'docstring': '',
                                   'methods': [('getChildren', [], ''),
                                               ('getChildNodes', [], ''),
                                               ('__repr__', [], '')],
                                   'properties': ['expr', 'vars', 'body', 'lineno']},
             'compiler.ast.Yield': {'bases': ['compiler.ast.Node'],
                                    'constructor': ['value', 'lineno=None'],
                                    'docstring': '',
                                    'methods': [('getChildren', [], ''),
                                                ('getChildNodes', [], ''),
                                                ('__repr__', [], '')],
                                    'properties': ['value', 'lineno']},
             'compiler.future.BadFutureParser': {'bases': [],
                                                 'constructor': [],
                                                 'docstring': 'Check for invalid future statements',
                                                 'methods': [('visitFrom', ['node'], '')],
                                                 'properties': []},
             'compiler.future.FutureParser': {'bases': [],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('visitModule', ['node'], ''),
                                                          ('check_stmt', ['stmt'], ''),
                                                          ('get_features',
                                                           [],
                                                           'Return list of features enabled by future statements')],
                                              'properties': ['features', 'found']},
             'compiler.misc.Set': {'bases': [],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [('__len__', [], ''),
                                               ('__contains__', ['elt'], ''),
                                               ('add', ['elt'], ''),
                                               ('elements', [], ''),
                                               ('has_elt', ['elt'], ''),
                                               ('remove', ['elt'], ''),
                                               ('copy', [], '')],
                                   'properties': ['elts']},
             'compiler.misc.Stack': {'bases': [],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('__len__', [], ''),
                                                 ('push', ['elt'], ''),
                                                 ('top', [], ''),
                                                 ('__getitem__', ['index'], '')],
                                     'properties': ['stack', 'pop']},
             'compiler.pyassem.Block': {'bases': [],
                                        'constructor': ["label=''"],
                                        'docstring': '',
                                        'methods': [('__repr__', [], ''),
                                                    ('__str__', [], ''),
                                                    ('emit', ['inst'], ''),
                                                    ('getInstructions', [], ''),
                                                    ('addInEdge', ['block'], ''),
                                                    ('addOutEdge', ['block'], ''),
                                                    ('addNext', ['block'], ''),
                                                    ('pruneNext',
                                                     [],
                                                     "Remove bogus edge for unconditional transfers\n\n        Each block has a next edge that accounts for implicit control\n        transfers, e.g. from a JUMP_IF_FALSE to the block that will be\n        executed if the test is true.\n\n        These edges must remain for the current assembler code to\n        work. If they are removed, the dfs_postorder gets things in\n        weird orders.  However, they shouldn't be there for other\n        purposes, e.g. conversion to SSA form.  This method will\n        remove the next edge when it follows an unconditional control\n        transfer.\n        "),
                                                    ('get_children', [], ''),
                                                    ('getContainedGraphs',
                                                     [],
                                                     'Return all graphs contained within this block.\n\n        For example, a MAKE_FUNCTION block will contain a reference to\n        the graph for the function body.\n        ')],
                                        'properties': ['_count',
                                                       'insts',
                                                       'inEdges',
                                                       'outEdges',
                                                       'label',
                                                       'bid',
                                                       'next',
                                                       '_uncond_transfer']},
             'compiler.pyassem.FlowGraph': {'bases': [],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('startBlock', ['block'], ''),
                                                        ('nextBlock', ['block=None'], ''),
                                                        ('newBlock', [], ''),
                                                        ('startExitBlock', [], ''),
                                                        ('_enable_debug', [], ''),
                                                        ('_disable_debug', [], ''),
                                                        ('emit', ['*inst'], ''),
                                                        ('getBlocksInOrder',
                                                         [],
                                                         'Return the blocks in reverse postorder\n\n        i.e. each node appears before all of its successors\n        '),
                                                        ('fixupOrder',
                                                         ['blocks', 'default_next'],
                                                         'Fixup bad order introduced by DFS.'),
                                                        ('fixupOrderHonorNext',
                                                         ['blocks', 'default_next'],
                                                         'Fix one problem with DFS.\n\n        The DFS uses child block, but doesn\'t know about the special\n        "next" block.  As a result, the DFS can order blocks so that a\n        block isn\'t next to the right block for implicit control\n        transfers.\n        '),
                                                        ('fixupOrderForward',
                                                         ['blocks', 'default_next'],
                                                         'Make sure all JUMP_FORWARDs jump forward'),
                                                        ('getBlocks', [], ''),
                                                        ('getRoot',
                                                         [],
                                                         'Return nodes appropriate for use with dominator'),
                                                        ('getContainedGraphs', [], '')],
                                            'properties': ['current',
                                                           'entry',
                                                           'exit',
                                                           'blocks',
                                                           '_debug']},
             'compiler.pyassem.LineAddrTable': {'bases': [],
                                                'constructor': [],
                                                'docstring': "lnotab\n\n    This class builds the lnotab, which is documented in compile.c.\n    Here's a brief recap:\n\n    For each SET_LINENO instruction after the first one, two bytes are\n    added to lnotab.  (In some cases, multiple two-byte entries are\n    added.)  The first byte is the distance in bytes between the\n    instruction for the last SET_LINENO and the current SET_LINENO.\n    The second byte is offset in line numbers.  If either offset is\n    greater than 255, multiple two-byte entries are added -- see\n    compile.c for the delicate details.\n    ",
                                                'methods': [('addCode', ['*args'], ''),
                                                            ('nextLine', ['lineno'], ''),
                                                            ('getCode', [], ''),
                                                            ('getTable', [], '')],
                                                'properties': ['code',
                                                               'codeOffset',
                                                               'firstline',
                                                               'lastline',
                                                               'lastoff',
                                                               'lnotab']},
             'compiler.pyassem.PyFlowGraph': {'bases': ['compiler.pyassem.FlowGraph'],
                                              'constructor': ['name',
                                                              'filename',
                                                              'args=()',
                                                              'optimized=0',
                                                              'klass=None'],
                                              'docstring': '',
                                              'methods': [('setDocstring', ['doc'], ''),
                                                          ('setFlag', ['flag'], ''),
                                                          ('checkFlag', ['flag'], ''),
                                                          ('setFreeVars', ['names'], ''),
                                                          ('setCellVars', ['names'], ''),
                                                          ('getCode',
                                                           [],
                                                           'Get a Python code object'),
                                                          ('dump', ['io=None'], ''),
                                                          ('computeStackDepth',
                                                           [],
                                                           'Compute the max stack depth.\n\n        Approach is to compute the stack effect of each basic block.\n        Then find the path through the code with the largest total\n        effect.\n        '),
                                                          ('flattenGraph',
                                                           [],
                                                           'Arrange the blocks in order and resolve jumps'),
                                                          ('convertArgs',
                                                           [],
                                                           'Convert arguments from symbolic to concrete form'),
                                                          ('sort_cellvars',
                                                           [],
                                                           'Sort cellvars in the order of varnames and prune from freevars.\n        '),
                                                          ('_lookupName',
                                                           ['name', 'list'],
                                                           "Return index of name in list, appending if necessary\n\n        This routine uses a list instead of a dictionary, because a\n        dictionary can't store two different keys if the keys have the\n        same value but different types, e.g. 2 and 2L.  The compiler\n        must treat these two separately, so it does an explicit type\n        comparison before comparing the values.\n        "),
                                                          ('_convert_LOAD_CONST', ['arg'], ''),
                                                          ('_convert_LOAD_FAST', ['arg'], ''),
                                                          ('_convert_LOAD_NAME', ['arg'], ''),
                                                          ('_convert_NAME', ['arg'], ''),
                                                          ('_convert_DEREF', ['arg'], ''),
                                                          ('_convert_LOAD_CLOSURE',
                                                           ['arg'],
                                                           ''),
                                                          ('_convert_COMPARE_OP', ['arg'], ''),
                                                          ('makeByteCode', [], ''),
                                                          ('newCodeObject', [], ''),
                                                          ('getConsts',
                                                           [],
                                                           'Return a tuple for the const slot of the code object\n\n        Must convert references to code (MAKE_FUNCTION) to code\n        objects recursively.\n        ')],
                                              'properties': ['super_init',
                                                             'name',
                                                             'filename',
                                                             'docstring',
                                                             'args',
                                                             'argcount',
                                                             'klass',
                                                             'flags',
                                                             'consts',
                                                             'names',
                                                             'freevars',
                                                             'cellvars',
                                                             'closure',
                                                             'varnames',
                                                             'stage',
                                                             'stacksize',
                                                             'insts',
                                                             'hasjrel',
                                                             'i',
                                                             'hasjabs',
                                                             '_converters',
                                                             '_convert_STORE_FAST',
                                                             '_convert_DELETE_FAST',
                                                             '_convert_STORE_NAME',
                                                             '_convert_DELETE_NAME',
                                                             '_convert_IMPORT_NAME',
                                                             '_convert_IMPORT_FROM',
                                                             '_convert_STORE_ATTR',
                                                             '_convert_LOAD_ATTR',
                                                             '_convert_DELETE_ATTR',
                                                             '_convert_LOAD_GLOBAL',
                                                             '_convert_STORE_GLOBAL',
                                                             '_convert_DELETE_GLOBAL',
                                                             '_convert_LOAD_DEREF',
                                                             '_convert_STORE_DEREF',
                                                             '_cmp',
                                                             'obj',
                                                             'opname',
                                                             'lnotab',
                                                             'opnum',
                                                             'num']},
             'compiler.pyassem.StackDepthTracker': {'bases': [],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('findDepth',
                                                                 ['insts', 'debug=0'],
                                                                 ''),
                                                                ('UNPACK_SEQUENCE',
                                                                 ['count'],
                                                                 ''),
                                                                ('BUILD_TUPLE', ['count'], ''),
                                                                ('BUILD_LIST', ['count'], ''),
                                                                ('CALL_FUNCTION', ['argc'], ''),
                                                                ('CALL_FUNCTION_VAR',
                                                                 ['argc'],
                                                                 ''),
                                                                ('CALL_FUNCTION_KW',
                                                                 ['argc'],
                                                                 ''),
                                                                ('CALL_FUNCTION_VAR_KW',
                                                                 ['argc'],
                                                                 ''),
                                                                ('MAKE_FUNCTION', ['argc'], ''),
                                                                ('MAKE_CLOSURE', ['argc'], ''),
                                                                ('BUILD_SLICE', ['argc'], ''),
                                                                ('DUP_TOPX', ['argc'], '')],
                                                    'properties': ['effect', 'patterns']},
             'compiler.pyassem.TupleArg': {'bases': [],
                                           'constructor': ['count', 'names'],
                                           'docstring': 'Helper for marking func defs with nested tuples in arglist',
                                           'methods': [('__repr__', [], ''),
                                                       ('getName', [], '')],
                                           'properties': ['count', 'names']},
             'compiler.pycodegen.AbstractClassCode': {'bases': [],
                                                      'constructor': ['klass',
                                                                      'scopes',
                                                                      'module'],
                                                      'docstring': '',
                                                      'methods': [('get_module', [], ''),
                                                                  ('finish', [], '')],
                                                      'properties': ['class_name',
                                                                     'module',
                                                                     'graph']},
             'compiler.pycodegen.AbstractCompileMode': {'bases': [],
                                                        'constructor': ['source', 'filename'],
                                                        'docstring': '',
                                                        'methods': [('_get_tree', [], ''),
                                                                    ('compile', [], ''),
                                                                    ('getCode', [], '')],
                                                        'properties': ['mode',
                                                                       'source',
                                                                       'filename',
                                                                       'code']},
             'compiler.pycodegen.AbstractFunctionCode': {'bases': [],
                                                         'constructor': ['func',
                                                                         'scopes',
                                                                         'isLambda',
                                                                         'class_name',
                                                                         'mod'],
                                                         'docstring': '',
                                                         'methods': [('get_module', [], ''),
                                                                     ('finish', [], ''),
                                                                     ('generateArgUnpack',
                                                                      ['args'],
                                                                      ''),
                                                                     ('unpackSequence',
                                                                      ['tup'],
                                                                      '')],
                                                         'properties': ['optimized',
                                                                        'lambdaCount',
                                                                        'class_name',
                                                                        'module',
                                                                        'graph',
                                                                        'isLambda',
                                                                        'unpackTuple']},
             'compiler.pycodegen.AugGetattr': {'bases': ['compiler.pycodegen.Delegator'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'compiler.pycodegen.AugName': {'bases': ['compiler.pycodegen.Delegator'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': []},
             'compiler.pycodegen.AugSlice': {'bases': ['compiler.pycodegen.Delegator'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': []},
             'compiler.pycodegen.AugSubscript': {'bases': ['compiler.pycodegen.Delegator'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'compiler.pycodegen.ClassCodeGenerator': {'bases': ['compiler.pycodegen.NestedScopeMixin',
                                                                 'compiler.pycodegen.AbstractClassCode',
                                                                 'compiler.pycodegen.CodeGenerator'],
                                                       'constructor': ['klass',
                                                                       'scopes',
                                                                       'module'],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['super_init',
                                                                      'scopes',
                                                                      '__super_init',
                                                                      'scope']},
             'compiler.pycodegen.CodeGenerator': {'bases': [],
                                                  'constructor': [],
                                                  'docstring': 'Defines basic code generator for Python bytecode\n\n    This class is an abstract base class.  Concrete subclasses must\n    define an __init__() that defines self.graph and then calls the\n    __init__() defined in this class.\n\n    The concrete class must also define the class attributes\n    NameFinder, FunctionGen, and ClassGen.  These attributes can be\n    defined in the initClass() method, which is a hook for\n    initializing these methods after all the classes have been\n    defined.\n    ',
                                                  'methods': [('initClass',
                                                               [],
                                                               'This method is called once for each class'),
                                                              ('checkClass',
                                                               [],
                                                               'Verify that class is constructed correctly'),
                                                              ('_setupGraphDelegation', [], ''),
                                                              ('getCode',
                                                               [],
                                                               'Return a code object'),
                                                              ('mangle', ['name'], ''),
                                                              ('parseSymbols', ['tree'], ''),
                                                              ('get_module', [], ''),
                                                              ('isLocalName', ['name'], ''),
                                                              ('storeName', ['name'], ''),
                                                              ('loadName', ['name'], ''),
                                                              ('delName', ['name'], ''),
                                                              ('_nameOp',
                                                               ['prefix', 'name'],
                                                               ''),
                                                              ('_implicitNameOp',
                                                               ['prefix', 'name'],
                                                               "Emit name ops for names generated implicitly by for loops\n\n        The interpreter generates names that start with a period or\n        dollar sign.  The symbol table ignores these names because\n        they aren't present in the program text.\n        "),
                                                              ('set_lineno',
                                                               ['node', 'force=False'],
                                                               'Emit SET_LINENO if necessary.\n\n        The instruction is considered necessary if the node has a\n        lineno attribute and it is different than the last lineno\n        emitted.\n\n        Returns true if SET_LINENO was emitted.\n\n        There are no rules for when an AST node should have a lineno\n        attribute.  The transformer and AST code need to be reviewed\n        and a consistent policy implemented and documented.  Until\n        then, this method works around missing line numbers.\n        '),
                                                              ('visitModule', ['node'], ''),
                                                              ('visitExpression', ['node'], ''),
                                                              ('visitFunction', ['node'], ''),
                                                              ('visitLambda', ['node'], ''),
                                                              ('_visitFuncOrLambda',
                                                               ['node', 'isLambda=0'],
                                                               ''),
                                                              ('visitClass', ['node'], ''),
                                                              ('visitIf', ['node'], ''),
                                                              ('visitWhile', ['node'], ''),
                                                              ('visitFor', ['node'], ''),
                                                              ('visitBreak', ['node'], ''),
                                                              ('visitContinue', ['node'], ''),
                                                              ('visitTest',
                                                               ['node', 'jump'],
                                                               ''),
                                                              ('visitAnd', ['node'], ''),
                                                              ('visitOr', ['node'], ''),
                                                              ('visitIfExp', ['node'], ''),
                                                              ('visitCompare', ['node'], ''),
                                                              ('visitListComp', ['node'], ''),
                                                              ('visitListCompFor',
                                                               ['node'],
                                                               ''),
                                                              ('visitListCompIf',
                                                               ['node', 'branch'],
                                                               ''),
                                                              ('_makeClosure',
                                                               ['gen', 'args'],
                                                               ''),
                                                              ('visitGenExpr', ['node'], ''),
                                                              ('visitGenExprInner',
                                                               ['node'],
                                                               ''),
                                                              ('visitGenExprFor', ['node'], ''),
                                                              ('visitGenExprIf',
                                                               ['node', 'branch'],
                                                               ''),
                                                              ('visitAssert', ['node'], ''),
                                                              ('visitRaise', ['node'], ''),
                                                              ('visitTryExcept', ['node'], ''),
                                                              ('visitTryFinally', ['node'], ''),
                                                              ('visitWith', ['node'], ''),
                                                              ('visitDiscard', ['node'], ''),
                                                              ('visitConst', ['node'], ''),
                                                              ('visitKeyword', ['node'], ''),
                                                              ('visitGlobal', ['node'], ''),
                                                              ('visitName', ['node'], ''),
                                                              ('visitPass', ['node'], ''),
                                                              ('visitImport', ['node'], ''),
                                                              ('visitFrom', ['node'], ''),
                                                              ('_resolveDots', ['name'], ''),
                                                              ('visitGetattr', ['node'], ''),
                                                              ('visitAssign', ['node'], ''),
                                                              ('visitAssName', ['node'], ''),
                                                              ('visitAssAttr', ['node'], ''),
                                                              ('_visitAssSequence',
                                                               ['node',
                                                                "op='UNPACK_SEQUENCE'"],
                                                               ''),
                                                              ('visitAssTuple', ['node'], ''),
                                                              ('visitAssList', ['node'], ''),
                                                              ('visitAugAssign', ['node'], ''),
                                                              ('visitAugName',
                                                               ['node', 'mode'],
                                                               ''),
                                                              ('visitAugGetattr',
                                                               ['node', 'mode'],
                                                               ''),
                                                              ('visitAugSlice',
                                                               ['node', 'mode'],
                                                               ''),
                                                              ('visitAugSubscript',
                                                               ['node', 'mode'],
                                                               ''),
                                                              ('visitExec', ['node'], ''),
                                                              ('visitCallFunc', ['node'], ''),
                                                              ('visitPrint',
                                                               ['node', 'newline=0'],
                                                               ''),
                                                              ('visitPrintnl', ['node'], ''),
                                                              ('visitReturn', ['node'], ''),
                                                              ('visitYield', ['node'], ''),
                                                              ('visitSlice',
                                                               ['node', 'aug_flag=None'],
                                                               ''),
                                                              ('visitSubscript',
                                                               ['node', 'aug_flag=None'],
                                                               ''),
                                                              ('binaryOp', ['node', 'op'], ''),
                                                              ('visitAdd', ['node'], ''),
                                                              ('visitSub', ['node'], ''),
                                                              ('visitMul', ['node'], ''),
                                                              ('visitDiv', ['node'], ''),
                                                              ('visitFloorDiv', ['node'], ''),
                                                              ('visitMod', ['node'], ''),
                                                              ('visitPower', ['node'], ''),
                                                              ('visitLeftShift', ['node'], ''),
                                                              ('visitRightShift', ['node'], ''),
                                                              ('unaryOp', ['node', 'op'], ''),
                                                              ('visitInvert', ['node'], ''),
                                                              ('visitUnarySub', ['node'], ''),
                                                              ('visitUnaryAdd', ['node'], ''),
                                                              ('visitUnaryInvert',
                                                               ['node'],
                                                               ''),
                                                              ('visitNot', ['node'], ''),
                                                              ('visitBackquote', ['node'], ''),
                                                              ('bitOp', ['nodes', 'op'], ''),
                                                              ('visitBitand', ['node'], ''),
                                                              ('visitBitor', ['node'], ''),
                                                              ('visitBitxor', ['node'], ''),
                                                              ('visitEllipsis', ['node'], ''),
                                                              ('visitTuple', ['node'], ''),
                                                              ('visitList', ['node'], ''),
                                                              ('visitSliceobj', ['node'], ''),
                                                              ('visitDict', ['node'], '')],
                                                  'properties': ['optimized',
                                                                 '__initialized',
                                                                 'class_name',
                                                                 'locals',
                                                                 'setups',
                                                                 'last_lineno',
                                                                 '_div_op',
                                                                 'emit',
                                                                 'newBlock',
                                                                 'startBlock',
                                                                 'nextBlock',
                                                                 'setDocstring',
                                                                 'NameFinder',
                                                                 'FunctionGen',
                                                                 'ClassGen',
                                                                 'scopes',
                                                                 'scope',
                                                                 '__list_count',
                                                                 '__with_count',
                                                                 'namespace',
                                                                 'visitAssTuple',
                                                                 'visitAssList',
                                                                 '_augmented_opcode']},
             'compiler.pycodegen.Delegator': {'bases': [],
                                              'constructor': ['obj'],
                                              'docstring': 'Base class to support delegation for augmented assignment nodes\n\n    To generator code for augmented assignments, we use the following\n    wrapper classes.  In visitAugAssign, the left-hand expression node\n    is visited twice.  The first time the visit uses the normal method\n    for that node .  The second time the visit uses a different method\n    that generates the appropriate code to perform the assignment.\n    These delegator classes wrap the original AST nodes in order to\n    support the variant visit methods.\n    ',
                                              'methods': [('__getattr__', ['attr'], '')],
                                              'properties': ['obj']},
             'compiler.pycodegen.Expression': {'bases': ['compiler.pycodegen.AbstractCompileMode'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('compile', [], '')],
                                               'properties': ['mode', 'code']},
             'compiler.pycodegen.ExpressionCodeGenerator': {'bases': ['compiler.pycodegen.NestedScopeMixin',
                                                                      'compiler.pycodegen.CodeGenerator'],
                                                            'constructor': ['tree'],
                                                            'docstring': '',
                                                            'methods': [('get_module', [], '')],
                                                            'properties': ['__super_init',
                                                                           'scopes',
                                                                           'futures',
                                                                           'graph']},
             'compiler.pycodegen.FunctionCodeGenerator': {'bases': ['compiler.pycodegen.NestedScopeMixin',
                                                                    'compiler.pycodegen.AbstractFunctionCode',
                                                                    'compiler.pycodegen.CodeGenerator'],
                                                          'constructor': ['func',
                                                                          'scopes',
                                                                          'isLambda',
                                                                          'class_name',
                                                                          'mod'],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['super_init',
                                                                         'scopes',
                                                                         '__super_init',
                                                                         'scope']},
             'compiler.pycodegen.GenExprCodeGenerator': {'bases': ['compiler.pycodegen.NestedScopeMixin',
                                                                   'compiler.pycodegen.AbstractFunctionCode',
                                                                   'compiler.pycodegen.CodeGenerator'],
                                                         'constructor': ['gexp',
                                                                         'scopes',
                                                                         'class_name',
                                                                         'mod'],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['super_init',
                                                                        'scopes',
                                                                        '__super_init',
                                                                        'scope']},
             'compiler.pycodegen.Interactive': {'bases': ['compiler.pycodegen.AbstractCompileMode'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('compile', [], '')],
                                                'properties': ['mode', 'code']},
             'compiler.pycodegen.InteractiveCodeGenerator': {'bases': ['compiler.pycodegen.NestedScopeMixin',
                                                                       'compiler.pycodegen.CodeGenerator'],
                                                             'constructor': ['tree'],
                                                             'docstring': '',
                                                             'methods': [('get_module', [], ''),
                                                                         ('visitDiscard',
                                                                          ['node'],
                                                                          '')],
                                                             'properties': ['__super_init',
                                                                            'scopes',
                                                                            'futures',
                                                                            'graph']},
             'compiler.pycodegen.LocalNameFinder': {'bases': [],
                                                    'constructor': ['names=()'],
                                                    'docstring': 'Find local names in scope',
                                                    'methods': [('getLocals', [], ''),
                                                                ('visitDict', ['node'], ''),
                                                                ('visitGlobal', ['node'], ''),
                                                                ('visitFunction', ['node'], ''),
                                                                ('visitLambda', ['node'], ''),
                                                                ('visitImport', ['node'], ''),
                                                                ('visitFrom', ['node'], ''),
                                                                ('visitClass', ['node'], ''),
                                                                ('visitAssName', ['node'], '')],
                                                    'properties': ['names', 'globals']},
             'compiler.pycodegen.Module': {'bases': ['compiler.pycodegen.AbstractCompileMode'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('compile', ['display=0'], ''),
                                                       ('dump', ['f'], ''),
                                                       ('getPycHeader', [], '')],
                                           'properties': ['mode', 'code', 'MAGIC']},
             'compiler.pycodegen.ModuleCodeGenerator': {'bases': ['compiler.pycodegen.NestedScopeMixin',
                                                                  'compiler.pycodegen.CodeGenerator'],
                                                        'constructor': ['tree'],
                                                        'docstring': '',
                                                        'methods': [('get_module', [], '')],
                                                        'properties': ['__super_init',
                                                                       'scopes',
                                                                       'graph',
                                                                       'futures']},
             'compiler.pycodegen.NestedScopeMixin': {'bases': [],
                                                     'constructor': [],
                                                     'docstring': 'Defines initClass() for nested scoping (Python 2.2-compatible)',
                                                     'methods': [('initClass', [], '')],
                                                     'properties': []},
             'compiler.pycodegen.OpFinder': {'bases': [],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('visitAssName', ['node'], '')],
                                             'properties': ['op',
                                                            'visitAssAttr',
                                                            'visitSubscript']},
             'compiler.symbols.ClassScope': {'bases': ['compiler.symbols.Scope'],
                                             'constructor': ['name', 'module'],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['__super_init']},
             'compiler.symbols.FunctionScope': {'bases': ['compiler.symbols.Scope'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': []},
             'compiler.symbols.GenExprScope': {'bases': ['compiler.symbols.Scope'],
                                               'constructor': ['module', 'klass=None'],
                                               'docstring': '',
                                               'methods': [('get_names', [], '')],
                                               'properties': ['__super_init', '__counter']},
             'compiler.symbols.LambdaScope': {'bases': ['compiler.symbols.FunctionScope'],
                                              'constructor': ['module', 'klass=None'],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['__super_init', '__counter']},
             'compiler.symbols.ModuleScope': {'bases': ['compiler.symbols.Scope'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['__super_init']},
             'compiler.symbols.Scope': {'bases': [],
                                        'constructor': ['name', 'module', 'klass=None'],
                                        'docstring': '',
                                        'methods': [('__repr__', [], ''),
                                                    ('mangle', ['name'], ''),
                                                    ('add_def', ['name'], ''),
                                                    ('add_use', ['name'], ''),
                                                    ('add_global', ['name'], ''),
                                                    ('add_param', ['name'], ''),
                                                    ('get_names', [], ''),
                                                    ('add_child', ['child'], ''),
                                                    ('get_children', [], ''),
                                                    ('DEBUG', [], ''),
                                                    ('check_name',
                                                     ['name'],
                                                     'Return scope of name.\n\n        The scope of a name could be LOCAL, GLOBAL, FREE, or CELL.\n        '),
                                                    ('get_free_vars', [], ''),
                                                    ('handle_children', [], ''),
                                                    ('force_global',
                                                     ['name'],
                                                     'Force name to be global in scope.\n\n        Some child of the current node had a free reference to name.\n        When the child was processed, it was labelled a free\n        variable.  Now that all its enclosing scope have been\n        processed, the name is known to be a global or builtin.  So\n        walk back down the child chain and set the name to be global\n        rather than free.\n\n        Be careful to stop if a child does not think the name is\n        free.\n        '),
                                                    ('add_frees',
                                                     ['names'],
                                                     'Process list of free vars from nested scope.\n\n        Returns a list of names that are either 1) declared global in the\n        parent or 2) undefined in a top-level parent.  In either case,\n        the nested scope should treat them as globals.\n        '),
                                                    ('get_cell_vars', [], '')],
                                        'properties': ['name',
                                                       'module',
                                                       'defs',
                                                       'uses',
                                                       'globals',
                                                       'params',
                                                       'frees',
                                                       'cells',
                                                       'children',
                                                       'nested',
                                                       'generator',
                                                       'klass']},
             'compiler.symbols.SymbolVisitor': {'bases': [],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('visitModule', ['node'], ''),
                                                            ('visitFunction',
                                                             ['node', 'parent'],
                                                             ''),
                                                            ('visitGenExpr',
                                                             ['node', 'parent'],
                                                             ''),
                                                            ('visitGenExprInner',
                                                             ['node', 'scope'],
                                                             ''),
                                                            ('visitGenExprFor',
                                                             ['node', 'scope'],
                                                             ''),
                                                            ('visitGenExprIf',
                                                             ['node', 'scope'],
                                                             ''),
                                                            ('visitLambda',
                                                             ['node', 'parent', 'assign=0'],
                                                             ''),
                                                            ('_do_args', ['scope', 'args'], ''),
                                                            ('handle_free_vars',
                                                             ['scope', 'parent'],
                                                             ''),
                                                            ('visitClass',
                                                             ['node', 'parent'],
                                                             ''),
                                                            ('visitName',
                                                             ['node', 'scope', 'assign=0'],
                                                             ''),
                                                            ('visitFor', ['node', 'scope'], ''),
                                                            ('visitFrom',
                                                             ['node', 'scope'],
                                                             ''),
                                                            ('visitImport',
                                                             ['node', 'scope'],
                                                             ''),
                                                            ('visitGlobal',
                                                             ['node', 'scope'],
                                                             ''),
                                                            ('visitAssign',
                                                             ['node', 'scope'],
                                                             "Propagate assignment flag down to child nodes.\n\n        The Assign node doesn't itself contains the variables being\n        assigned to.  Instead, the children in node.nodes are visited\n        with the assign flag set to true.  When the names occur in\n        those nodes, they are marked as defs.\n\n        Some names that occur in an assignment target are not bound by\n        the assignment, e.g. a name occurring inside a slice.  The\n        visitor handles these nodes specially; they do not propagate\n        the assign flag to their children.\n        "),
                                                            ('visitAssName',
                                                             ['node', 'scope', 'assign=1'],
                                                             ''),
                                                            ('visitAssAttr',
                                                             ['node', 'scope', 'assign=0'],
                                                             ''),
                                                            ('visitSubscript',
                                                             ['node', 'scope', 'assign=0'],
                                                             ''),
                                                            ('visitSlice',
                                                             ['node', 'scope', 'assign=0'],
                                                             ''),
                                                            ('visitAugAssign',
                                                             ['node', 'scope'],
                                                             ''),
                                                            ('visitIf', ['node', 'scope'], ''),
                                                            ('visitYield',
                                                             ['node', 'scope'],
                                                             '')],
                                                'properties': ['scopes',
                                                               'klass',
                                                               'module',
                                                               'visitExpression',
                                                               '_const_types']},
             'compiler.syntax.SyntaxErrorChecker': {'bases': [],
                                                    'constructor': ['multi=None'],
                                                    'docstring': 'A visitor to find syntax errors in the AST.',
                                                    'methods': [('error', ['node', 'msg'], ''),
                                                                ('visitAssign', ['node'], '')],
                                                    'properties': ['multi', 'errors']},
             'compiler.transformer.Transformer': {'bases': [],
                                                  'constructor': [],
                                                  'docstring': 'Utility object for transforming Python parse trees.\n\n    Exposes the following methods:\n        tree = transform(ast_tree)\n        tree = parsesuite(text)\n        tree = parseexpr(text)\n        tree = parsefile(fileob | filename)\n    ',
                                                  'methods': [('transform',
                                                               ['tree'],
                                                               'Transform an AST into a modified parse tree.'),
                                                              ('parsesuite',
                                                               ['text'],
                                                               'Return a modified parse tree for the given suite text.'),
                                                              ('parseexpr',
                                                               ['text'],
                                                               'Return a modified parse tree for the given expression text.'),
                                                              ('parsefile',
                                                               ['file'],
                                                               'Return a modified parse tree for the contents of the given file.'),
                                                              ('compile_node', ['node'], ''),
                                                              ('single_input', ['node'], ''),
                                                              ('file_input', ['nodelist'], ''),
                                                              ('eval_input', ['nodelist'], ''),
                                                              ('decorator_name',
                                                               ['nodelist'],
                                                               ''),
                                                              ('decorator', ['nodelist'], ''),
                                                              ('decorators', ['nodelist'], ''),
                                                              ('funcdef', ['nodelist'], ''),
                                                              ('lambdef', ['nodelist'], ''),
                                                              ('classdef', ['nodelist'], ''),
                                                              ('stmt', ['nodelist'], ''),
                                                              ('simple_stmt', ['nodelist'], ''),
                                                              ('parameters', ['nodelist'], ''),
                                                              ('varargslist', ['nodelist'], ''),
                                                              ('fpdef', ['nodelist'], ''),
                                                              ('fplist', ['nodelist'], ''),
                                                              ('dotted_name', ['nodelist'], ''),
                                                              ('comp_op', ['nodelist'], ''),
                                                              ('trailer', ['nodelist'], ''),
                                                              ('sliceop', ['nodelist'], ''),
                                                              ('argument', ['nodelist'], ''),
                                                              ('expr_stmt', ['nodelist'], ''),
                                                              ('print_stmt', ['nodelist'], ''),
                                                              ('del_stmt', ['nodelist'], ''),
                                                              ('pass_stmt', ['nodelist'], ''),
                                                              ('break_stmt', ['nodelist'], ''),
                                                              ('continue_stmt',
                                                               ['nodelist'],
                                                               ''),
                                                              ('return_stmt', ['nodelist'], ''),
                                                              ('yield_stmt', ['nodelist'], ''),
                                                              ('yield_expr', ['nodelist'], ''),
                                                              ('raise_stmt', ['nodelist'], ''),
                                                              ('import_stmt', ['nodelist'], ''),
                                                              ('import_name', ['nodelist'], ''),
                                                              ('import_from', ['nodelist'], ''),
                                                              ('global_stmt', ['nodelist'], ''),
                                                              ('exec_stmt', ['nodelist'], ''),
                                                              ('assert_stmt', ['nodelist'], ''),
                                                              ('if_stmt', ['nodelist'], ''),
                                                              ('while_stmt', ['nodelist'], ''),
                                                              ('for_stmt', ['nodelist'], ''),
                                                              ('try_stmt', ['nodelist'], ''),
                                                              ('with_stmt', ['nodelist'], ''),
                                                              ('with_var', ['nodelist'], ''),
                                                              ('suite', ['nodelist'], ''),
                                                              ('testlist', ['nodelist'], ''),
                                                              ('testlist_gexp',
                                                               ['nodelist'],
                                                               ''),
                                                              ('test', ['nodelist'], ''),
                                                              ('or_test', ['nodelist'], ''),
                                                              ('and_test', ['nodelist'], ''),
                                                              ('not_test', ['nodelist'], ''),
                                                              ('comparison', ['nodelist'], ''),
                                                              ('expr', ['nodelist'], ''),
                                                              ('xor_expr', ['nodelist'], ''),
                                                              ('and_expr', ['nodelist'], ''),
                                                              ('shift_expr', ['nodelist'], ''),
                                                              ('arith_expr', ['nodelist'], ''),
                                                              ('term', ['nodelist'], ''),
                                                              ('factor', ['nodelist'], ''),
                                                              ('power', ['nodelist'], ''),
                                                              ('atom', ['nodelist'], ''),
                                                              ('atom_lpar', ['nodelist'], ''),
                                                              ('atom_lsqb', ['nodelist'], ''),
                                                              ('atom_lbrace', ['nodelist'], ''),
                                                              ('atom_backquote',
                                                               ['nodelist'],
                                                               ''),
                                                              ('atom_number', ['nodelist'], ''),
                                                              ('decode_literal', ['lit'], ''),
                                                              ('atom_string', ['nodelist'], ''),
                                                              ('atom_name', ['nodelist'], ''),
                                                              ('lookup_node', ['node'], ''),
                                                              ('com_node', ['node'], ''),
                                                              ('com_NEWLINE', ['*args'], ''),
                                                              ('com_arglist', ['nodelist'], ''),
                                                              ('com_fpdef', ['node'], ''),
                                                              ('com_fplist', ['node'], ''),
                                                              ('com_dotted_name', ['node'], ''),
                                                              ('com_dotted_as_name',
                                                               ['node'],
                                                               ''),
                                                              ('com_dotted_as_names',
                                                               ['node'],
                                                               ''),
                                                              ('com_import_as_name',
                                                               ['node'],
                                                               ''),
                                                              ('com_import_as_names',
                                                               ['node'],
                                                               ''),
                                                              ('com_bases', ['node'], ''),
                                                              ('com_try_except_finally',
                                                               ['nodelist'],
                                                               ''),
                                                              ('com_with', ['nodelist'], ''),
                                                              ('com_with_var',
                                                               ['nodelist'],
                                                               ''),
                                                              ('com_augassign_op',
                                                               ['node'],
                                                               ''),
                                                              ('com_augassign',
                                                               ['node'],
                                                               'Return node suitable for lvalue of augmented assignment\n\n        Names, slices, and attributes are the only allowable nodes.\n        '),
                                                              ('com_assign',
                                                               ['node', 'assigning'],
                                                               ''),
                                                              ('com_assign_tuple',
                                                               ['node', 'assigning'],
                                                               ''),
                                                              ('com_assign_list',
                                                               ['node', 'assigning'],
                                                               ''),
                                                              ('com_assign_name',
                                                               ['node', 'assigning'],
                                                               ''),
                                                              ('com_assign_trailer',
                                                               ['primary',
                                                                'node',
                                                                'assigning'],
                                                               ''),
                                                              ('com_assign_attr',
                                                               ['primary',
                                                                'node',
                                                                'assigning'],
                                                               ''),
                                                              ('com_binary',
                                                               ['constructor', 'nodelist'],
                                                               "Compile 'NODE (OP NODE)*' into (type, [ node1, ..., nodeN ])."),
                                                              ('com_stmt', ['node'], ''),
                                                              ('com_append_stmt',
                                                               ['stmts', 'node'],
                                                               ''),
                                                              ('com_list_constructor',
                                                               ['nodelist'],
                                                               ''),
                                                              ('com_list_comprehension',
                                                               ['expr', 'node'],
                                                               ''),
                                                              ('com_list_iter', ['node'], ''),
                                                              ('com_generator_expression',
                                                               ['expr', 'node'],
                                                               ''),
                                                              ('com_gen_iter', ['node'], ''),
                                                              ('com_dictmaker',
                                                               ['nodelist'],
                                                               ''),
                                                              ('com_apply_trailer',
                                                               ['primaryNode', 'nodelist'],
                                                               ''),
                                                              ('com_select_member',
                                                               ['primaryNode', 'nodelist'],
                                                               ''),
                                                              ('com_call_function',
                                                               ['primaryNode', 'nodelist'],
                                                               ''),
                                                              ('com_argument',
                                                               ['nodelist', 'kw'],
                                                               ''),
                                                              ('com_subscriptlist',
                                                               ['primary',
                                                                'nodelist',
                                                                'assigning'],
                                                               ''),
                                                              ('com_subscript', ['node'], ''),
                                                              ('com_sliceobj', ['node'], ''),
                                                              ('com_slice',
                                                               ['primary',
                                                                'node',
                                                                'assigning'],
                                                               ''),
                                                              ('get_docstring',
                                                               ['node', 'n=None'],
                                                               '')],
                                                  'properties': ['_dispatch',
                                                                 '_atom_dispatch',
                                                                 'encoding',
                                                                 'old_lambdef',
                                                                 'small_stmt',
                                                                 'flow_stmt',
                                                                 'compound_stmt',
                                                                 'testlist_safe',
                                                                 'testlist1',
                                                                 'exprlist',
                                                                 'old_test']},
             'compiler.transformer.WalkerError': {'bases': ['StandardError'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'compiler.visitor.ASTVisitor': {'bases': [],
                                             'constructor': [],
                                             'docstring': "Performs a depth-first walk of the AST\n\n    The ASTVisitor will walk the AST, performing either a preorder or\n    postorder traversal depending on which method is called.\n\n    methods:\n    preorder(tree, visitor)\n    postorder(tree, visitor)\n        tree: an instance of ast.Node\n        visitor: an instance with visitXXX methods\n\n    The ASTVisitor is responsible for walking over the tree in the\n    correct order.  For each node, it checks the visitor argument for\n    a method named 'visitNodeType' where NodeType is the name of the\n    node's class, e.g. Class.  If the method exists, it is called\n    with the node as its sole argument.\n\n    The visitor method for a particular node type can control how\n    child nodes are visited during a preorder walk.  (It can't control\n    the order during a postorder walk, because it is called _after_\n    the walk has occurred.)  The ASTVisitor modifies the visitor\n    argument by adding a visit method to the visitor; this method can\n    be used to visit a child node of arbitrary type.\n    ",
                                             'methods': [('default', ['node', '*args'], ''),
                                                         ('dispatch', ['node', '*args'], ''),
                                                         ('preorder',
                                                          ['tree', 'visitor', '*args'],
                                                          'Do preorder walk of tree using visitor')],
                                             'properties': ['VERBOSE',
                                                            'node',
                                                            '_cache',
                                                            'visitor']},
             'compiler.visitor.ExampleASTVisitor': {'bases': ['compiler.visitor.ASTVisitor'],
                                                    'constructor': [],
                                                    'docstring': "Prints examples of the nodes that aren't visited\n\n    This visitor-driver is only useful for development, when it's\n    helpful to develop a visitor incrementally, and get feedback on what\n    you still have to do.\n    ",
                                                    'methods': [('dispatch',
                                                                 ['node', '*args'],
                                                                 '')],
                                                    'properties': ['examples', 'node']},
             'contextlib.GeneratorContextManager': {'bases': ['object'],
                                                    'constructor': ['gen'],
                                                    'docstring': 'Helper for @contextmanager decorator.',
                                                    'methods': [('__enter__', [], ''),
                                                                ('__exit__',
                                                                 ['type',
                                                                  'value',
                                                                  'traceback'],
                                                                 '')],
                                                    'properties': ['gen']},
             'contextlib.closing': {'bases': ['object'],
                                    'constructor': ['thing'],
                                    'docstring': 'Context to automatically close something at the end of a block.\n\n    Code like this:\n\n        with closing(<module>.open(<arguments>)) as f:\n            <block>\n\n    is equivalent to this:\n\n        f = <module>.open(<arguments>)\n        try:\n            <block>\n        finally:\n            f.close()\n\n    ',
                                    'methods': [('__enter__', [], ''),
                                                ('__exit__', ['*exc_info'], '')],
                                    'properties': ['thing']},
             'cookielib.Absent': {'bases': [],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [],
                                  'properties': []},
             'cookielib.Cookie': {'bases': [],
                                  'constructor': ['version',
                                                  'name',
                                                  'value',
                                                  'port',
                                                  'port_specified',
                                                  'domain',
                                                  'domain_specified',
                                                  'domain_initial_dot',
                                                  'path',
                                                  'path_specified',
                                                  'secure',
                                                  'expires',
                                                  'discard',
                                                  'comment',
                                                  'comment_url',
                                                  'rest',
                                                  'rfc2109=False'],
                                  'docstring': 'HTTP Cookie.\n\n    This class represents both Netscape and RFC 2965 cookies.\n\n    This is deliberately a very simple class.  It just holds attributes.  It\'s\n    possible to construct Cookie instances that don\'t comply with the cookie\n    standards.  CookieJar.make_cookies is the factory function for Cookie\n    objects -- it deals with cookie parsing, supplying defaults, and\n    normalising to the representation used in this class.  CookiePolicy is\n    responsible for checking them to see whether they should be accepted from\n    and returned to the server.\n\n    Note that the port may be present in the headers, but unspecified ("Port"\n    rather than"Port=80", for example); if this is the case, port is None.\n\n    ',
                                  'methods': [('has_nonstandard_attr', ['name'], ''),
                                              ('get_nonstandard_attr',
                                               ['name', 'default=None'],
                                               ''),
                                              ('set_nonstandard_attr', ['name', 'value'], ''),
                                              ('is_expired', ['now=None'], ''),
                                              ('__str__', [], ''),
                                              ('__repr__', [], '')],
                                  'properties': ['version',
                                                 'name',
                                                 'value',
                                                 'port',
                                                 'port_specified',
                                                 'domain',
                                                 'domain_specified',
                                                 'domain_initial_dot',
                                                 'path',
                                                 'path_specified',
                                                 'secure',
                                                 'expires',
                                                 'discard',
                                                 'comment',
                                                 'comment_url',
                                                 'rfc2109',
                                                 '_rest']},
             'cookielib.CookieJar': {'bases': [],
                                     'constructor': ['policy=None'],
                                     'docstring': 'Collection of HTTP cookies.\n\n    You may not need to know about this class: try\n    urllib2.build_opener(HTTPCookieProcessor).open(url).\n\n    ',
                                     'methods': [('set_policy', ['policy'], ''),
                                                 ('_cookies_for_domain',
                                                  ['domain', 'request'],
                                                  ''),
                                                 ('_cookies_for_request',
                                                  ['request'],
                                                  'Return a list of cookies to be returned to server.'),
                                                 ('_cookie_attrs',
                                                  ['cookies'],
                                                  'Return a list of cookie-attributes to be returned to server.\n\n        like [\'foo="bar"; $Path="/"\', ...]\n\n        The $Version attribute is also added when appropriate (currently only\n        once per request).\n\n        '),
                                                 ('add_cookie_header',
                                                  ['request'],
                                                  'Add correct Cookie: header to request (urllib2.Request object).\n\n        The Cookie2 header is also added unless policy.hide_cookie2 is true.\n\n        '),
                                                 ('_normalized_cookie_tuples',
                                                  ['attrs_set'],
                                                  'Return list of tuples containing normalised cookie information.\n\n        attrs_set is the list of lists of key,value pairs extracted from\n        the Set-Cookie or Set-Cookie2 headers.\n\n        Tuples are name, value, standard, rest, where name and value are the\n        cookie name and value, standard is a dictionary containing the standard\n        cookie-attributes (discard, secure, version, expires or max-age,\n        domain, path and port) and rest is a dictionary containing the rest of\n        the cookie-attributes.\n\n        '),
                                                 ('_cookie_from_cookie_tuple',
                                                  ['tup', 'request'],
                                                  ''),
                                                 ('_cookies_from_attrs_set',
                                                  ['attrs_set', 'request'],
                                                  ''),
                                                 ('_process_rfc2109_cookies', ['cookies'], ''),
                                                 ('make_cookies',
                                                  ['response', 'request'],
                                                  'Return sequence of Cookie objects extracted from response object.'),
                                                 ('set_cookie_if_ok',
                                                  ['cookie', 'request'],
                                                  "Set a cookie if policy says it's OK to do so."),
                                                 ('set_cookie',
                                                  ['cookie'],
                                                  'Set a cookie, without checking whether or not it should be set.'),
                                                 ('extract_cookies',
                                                  ['response', 'request'],
                                                  'Extract cookies from response, where allowable given the request.'),
                                                 ('clear',
                                                  ['domain=None', 'path=None', 'name=None'],
                                                  'Clear some cookies.\n\n        Invoking this method without arguments will clear all cookies.  If\n        given a single argument, only cookies belonging to that domain will be\n        removed.  If given two arguments, cookies belonging to the specified\n        path within that domain are removed.  If given three arguments, then\n        the cookie with the specified name, path and domain is removed.\n\n        Raises KeyError if no matching cookie exists.\n\n        '),
                                                 ('clear_session_cookies',
                                                  [],
                                                  "Discard all session cookies.\n\n        Note that the .save() method won't save session cookies anyway, unless\n        you ask otherwise by passing a true ignore_discard argument.\n\n        "),
                                                 ('clear_expired_cookies',
                                                  [],
                                                  "Discard all expired cookies.\n\n        You probably don't need to call this method: expired cookies are never\n        sent back to the server (provided you're using DefaultCookiePolicy),\n        this method is called by CookieJar itself every so often, and the\n        .save() method won't save expired cookies anyway (unless you ask\n        otherwise by passing a true ignore_expires argument).\n\n        "),
                                                 ('__iter__', [], ''),
                                                 ('__len__',
                                                  [],
                                                  'Return number of contained cookies.'),
                                                 ('__repr__', [], ''),
                                                 ('__str__', [], '')],
                                     'properties': ['non_word_re',
                                                    'quote_re',
                                                    'strict_domain_re',
                                                    'domain_re',
                                                    'dots_re',
                                                    'magic_re',
                                                    '_policy',
                                                    '_cookies_lock',
                                                    '_cookies',
                                                    '_now']},
             'cookielib.CookiePolicy': {'bases': [],
                                        'constructor': [],
                                        'docstring': 'Defines which cookies get accepted from and returned to server.\n\n    May also modify cookies, though this is probably a bad idea.\n\n    The subclass DefaultCookiePolicy defines the standard rules for Netscape\n    and RFC 2965 cookies -- override that if you want a customised policy.\n\n    ',
                                        'methods': [('set_ok',
                                                     ['cookie', 'request'],
                                                     'Return true if (and only if) cookie should be accepted from server.\n\n        Currently, pre-expired cookies never get this far -- the CookieJar\n        class deletes such cookies itself.\n\n        '),
                                                    ('return_ok',
                                                     ['cookie', 'request'],
                                                     'Return true if (and only if) cookie should be returned to server.'),
                                                    ('domain_return_ok',
                                                     ['domain', 'request'],
                                                     'Return false if cookies should not be returned, given cookie domain.\n        '),
                                                    ('path_return_ok',
                                                     ['path', 'request'],
                                                     'Return false if cookies should not be returned, given cookie path.\n        ')],
                                        'properties': []},
             'cookielib.DefaultCookiePolicy': {'bases': ['cookielib.CookiePolicy'],
                                               'constructor': ['blocked_domains=None',
                                                               'allowed_domains=None',
                                                               'netscape=True',
                                                               'rfc2965=False',
                                                               'rfc2109_as_netscape=None',
                                                               'hide_cookie2=False',
                                                               'strict_domain=False',
                                                               'strict_rfc2965_unverifiable=True',
                                                               'strict_ns_unverifiable=False',
                                                               'strict_ns_domain=DomainLiberal',
                                                               'strict_ns_set_initial_dollar=False',
                                                               'strict_ns_set_path=False'],
                                               'docstring': 'Implements the standard rules for accepting and returning cookies.',
                                               'methods': [('blocked_domains',
                                                            [],
                                                            'Return the sequence of blocked domains (as a tuple).'),
                                                           ('set_blocked_domains',
                                                            ['blocked_domains'],
                                                            'Set the sequence of blocked domains.'),
                                                           ('is_blocked', ['domain'], ''),
                                                           ('allowed_domains',
                                                            [],
                                                            'Return None, or the sequence of allowed domains (as a tuple).'),
                                                           ('set_allowed_domains',
                                                            ['allowed_domains'],
                                                            'Set the sequence of allowed domains, or None.'),
                                                           ('is_not_allowed', ['domain'], ''),
                                                           ('set_ok',
                                                            ['cookie', 'request'],
                                                            '\n        If you override .set_ok(), be sure to call this method.  If it returns\n        false, so should your subclass (assuming your subclass wants to be more\n        strict about which cookies to accept).\n\n        '),
                                                           ('set_ok_version',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('set_ok_verifiability',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('set_ok_name',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('set_ok_path',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('set_ok_domain',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('set_ok_port',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('return_ok',
                                                            ['cookie', 'request'],
                                                            '\n        If you override .return_ok(), be sure to call this method.  If it\n        returns false, so should your subclass (assuming your subclass wants to\n        be more strict about which cookies to return).\n\n        '),
                                                           ('return_ok_version',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('return_ok_verifiability',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('return_ok_secure',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('return_ok_expires',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('return_ok_port',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('return_ok_domain',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('domain_return_ok',
                                                            ['domain', 'request'],
                                                            ''),
                                                           ('path_return_ok',
                                                            ['path', 'request'],
                                                            '')],
                                               'properties': ['DomainStrictNoDots',
                                                              'DomainStrictNonDomain',
                                                              'DomainRFC2965Match',
                                                              'DomainLiberal',
                                                              'DomainStrict',
                                                              'netscape',
                                                              'rfc2965',
                                                              'rfc2109_as_netscape',
                                                              'hide_cookie2',
                                                              'strict_domain',
                                                              'strict_rfc2965_unverifiable',
                                                              'strict_ns_unverifiable',
                                                              'strict_ns_domain',
                                                              'strict_ns_set_initial_dollar',
                                                              'strict_ns_set_path',
                                                              '_blocked_domains',
                                                              '_allowed_domains']},
             'cookielib.FileCookieJar': {'bases': ['cookielib.CookieJar'],
                                         'constructor': ['filename=None',
                                                         'delayload=False',
                                                         'policy=None'],
                                         'docstring': 'CookieJar that can be loaded from and saved to a file.',
                                         'methods': [('save',
                                                      ['filename=None',
                                                       'ignore_discard=False',
                                                       'ignore_expires=False'],
                                                      'Save cookies to a file.'),
                                                     ('load',
                                                      ['filename=None',
                                                       'ignore_discard=False',
                                                       'ignore_expires=False'],
                                                      'Load cookies from a file.'),
                                                     ('revert',
                                                      ['filename=None',
                                                       'ignore_discard=False',
                                                       'ignore_expires=False'],
                                                      "Clear all cookies and reload cookies from a saved file.\n\n        Raises LoadError (or IOError) if reversion is not successful; the\n        object's state will not be altered if this happens.\n\n        ")],
                                         'properties': ['filename', 'delayload', '_cookies']},
             'cookielib.LoadError': {'bases': ['IOError'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': []},
             'copy.Error': {'bases': ['Exception'],
                            'constructor': [],
                            'docstring': '',
                            'methods': [],
                            'properties': []},
             'copy._EmptyClass': {'bases': [],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [],
                                  'properties': []},
             'csv.Dialect': {'bases': [],
                             'constructor': [],
                             'docstring': 'Describe an Excel dialect.\n\n    This must be subclassed (see csv.excel).  Valid attributes are:\n    delimiter, quotechar, escapechar, doublequote, skipinitialspace,\n    lineterminator, quoting.\n\n    ',
                             'methods': [('_validate', [], '')],
                             'properties': ['_name',
                                            '_valid',
                                            'delimiter',
                                            'quotechar',
                                            'escapechar',
                                            'doublequote',
                                            'skipinitialspace',
                                            'lineterminator',
                                            'quoting']},
             'csv.DictReader': {'bases': [],
                                'constructor': ['f',
                                                'fieldnames=None',
                                                'restkey=None',
                                                'restval=None',
                                                "dialect='excel'",
                                                '*args',
                                                '**kwds'],
                                'docstring': '',
                                'methods': [('__iter__', [], ''), ('next', [], '')],
                                'properties': ['fieldnames',
                                               'restkey',
                                               'restval',
                                               'reader',
                                               'dialect',
                                               'line_num']},
             'csv.DictWriter': {'bases': [],
                                'constructor': ['f',
                                                'fieldnames',
                                                "restval=''",
                                                "extrasaction='raise'",
                                                "dialect='excel'",
                                                '*args',
                                                '**kwds'],
                                'docstring': '',
                                'methods': [('_dict_to_list', ['rowdict'], ''),
                                            ('writerow', ['rowdict'], ''),
                                            ('writerows', ['rowdicts'], '')],
                                'properties': ['fieldnames',
                                               'restval',
                                               'extrasaction',
                                               'writer']},
             'csv.Sniffer': {'bases': [],
                             'constructor': [],
                             'docstring': '\n    "Sniffs" the format of a CSV file (i.e. delimiter, quotechar)\n    Returns a Dialect object.\n    ',
                             'methods': [('sniff',
                                          ['sample', 'delimiters=None'],
                                          '\n        Returns a dialect (or None) corresponding to the sample\n        '),
                                         ('_guess_quote_and_delimiter',
                                          ['data', 'delimiters'],
                                          "\n        Looks for text enclosed between two identical quotes\n        (the probable quotechar) which are preceded and followed\n        by the same character (the probable delimiter).\n        For example:\n                         ,'some text',\n        The quote with the most wins, same with the delimiter.\n        If there is no quotechar the delimiter can't be determined\n        this way.\n        "),
                                         ('_guess_delimiter',
                                          ['data', 'delimiters'],
                                          "\n        The delimiter /should/ occur the same number of times on\n        each row. However, due to malformed data, it may not. We don't want\n        an all or nothing approach, so we allow for small variations in this\n        number.\n          1) build a table of the frequency of each character on every line.\n          2) build a table of freqencies of this frequency (meta-frequency?),\n             e.g.  'x occurred 5 times in 10 rows, 6 times in 1000 rows,\n             7 times in 2 rows'\n          3) use the mode of the meta-frequency to determine the /expected/\n             frequency for that character\n          4) find out how often the character actually meets that goal\n          5) the character that best meets its goal is the delimiter\n        For performance reasons, the data is evaluated in chunks, so it can\n        try and evaluate the smallest portion of the data possible, evaluating\n        additional chunks as necessary.\n        "),
                                         ('has_header', ['sample'], '')],
                             'properties': ['preferred']},
             'csv.excel': {'bases': ['csv.Dialect'],
                           'constructor': [],
                           'docstring': 'Describe the usual properties of Excel-generated CSV files.',
                           'methods': [],
                           'properties': ['delimiter',
                                          'quotechar',
                                          'doublequote',
                                          'skipinitialspace',
                                          'lineterminator',
                                          'quoting']},
             'csv.excel_tab': {'bases': ['csv.excel'],
                               'constructor': [],
                               'docstring': 'Describe the usual properties of Excel-generated TAB-delimited files.',
                               'methods': [],
                               'properties': ['delimiter']},
             'ctypes.CDLL': {'bases': ['object'],
                             'constructor': ['name', 'mode=DEFAULT_MODE', 'handle=None'],
                             'docstring': "An instance of this class represents a loaded dll/shared\n    library, exporting functions using the standard C calling\n    convention (named 'cdecl' on Windows).\n\n    The exported functions can be accessed as attributes, or by\n    indexing with the function name.  Examples:\n\n    <obj>.qsort -> callable object\n    <obj>['qsort'] -> callable object\n\n    Calling the functions releases the Python GIL during the call and\n    reaquires it afterwards.\n    ",
                             'methods': [('__repr__', [], ''),
                                         ('__getattr__', ['name'], ''),
                                         ('__getitem__', ['name_or_ordinal'], '')],
                             'properties': ['_name', '_handle']},
             'ctypes.HRESULT': {'bases': ['_ctypes._SimpleCData'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [],
                                'properties': ['_type_', '_check_retval_']},
             'ctypes.LibraryLoader': {'bases': ['object'],
                                      'constructor': ['dlltype'],
                                      'docstring': '',
                                      'methods': [('__getattr__', ['name'], ''),
                                                  ('__getitem__', ['name'], ''),
                                                  ('LoadLibrary', ['name'], '')],
                                      'properties': ['_dlltype']},
             'ctypes.OleDLL': {'bases': ['ctypes.CDLL'],
                               'constructor': [],
                               'docstring': 'This class represents a dll exporting functions using the\n        Windows stdcall calling convention, and returning HRESULT.\n        HRESULT error values are automatically raised as WindowsError\n        exceptions.\n        ',
                               'methods': [],
                               'properties': []},
             'ctypes.PyDLL': {'bases': ['ctypes.CDLL'],
                              'constructor': [],
                              'docstring': 'This class represents the Python library itself.  It allows to\n    access Python API functions.  The GIL is not released, and\n    Python exceptions are handled correctly.\n    ',
                              'methods': [],
                              'properties': []},
             'ctypes.WinDLL': {'bases': ['ctypes.CDLL'],
                               'constructor': [],
                               'docstring': 'This class represents a dll exporting functions using the\n        Windows stdcall calling convention.\n        ',
                               'methods': [],
                               'properties': []},
             'ctypes._endian.BigEndianStructure': {'bases': ['ctypes._endian.Structure'],
                                                   'constructor': [],
                                                   'docstring': 'Structure with big endian byte order',
                                                   'methods': [],
                                                   'properties': ['__metaclass__',
                                                                  '_swappedbytes_']},
             'ctypes._endian.LittleEndianStructure': {'bases': ['ctypes._endian.Structure'],
                                                      'constructor': [],
                                                      'docstring': 'Structure with little endian byte order',
                                                      'methods': [],
                                                      'properties': ['__metaclass__',
                                                                     '_swappedbytes_']},
             'ctypes._endian._swapped_meta': {'bases': ['ctypes._endian.type(Structure)'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('__setattr__',
                                                           ['attrname', 'value'],
                                                           '')],
                                              'properties': []},
             'ctypes.c_byte': {'bases': ['_ctypes._SimpleCData'],
                               'constructor': [],
                               'docstring': '',
                               'methods': [],
                               'properties': ['_type_']},
             'ctypes.c_char': {'bases': ['_ctypes._SimpleCData'],
                               'constructor': [],
                               'docstring': '',
                               'methods': [],
                               'properties': ['_type_']},
             'ctypes.c_char_p': {'bases': ['_ctypes._SimpleCData'],
                                 'constructor': [],
                                 'docstring': '',
                                 'methods': [('__repr__', [], '')],
                                 'properties': ['_type_']},
             'ctypes.c_double': {'bases': ['_ctypes._SimpleCData'],
                                 'constructor': [],
                                 'docstring': '',
                                 'methods': [],
                                 'properties': ['_type_']},
             'ctypes.c_float': {'bases': ['_ctypes._SimpleCData'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [],
                                'properties': ['_type_']},
             'ctypes.c_int': {'bases': ['_ctypes._SimpleCData'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': ['_type_']},
             'ctypes.c_long': {'bases': ['_ctypes._SimpleCData'],
                               'constructor': [],
                               'docstring': '',
                               'methods': [],
                               'properties': ['_type_']},
             'ctypes.c_longlong': {'bases': ['_ctypes._SimpleCData'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': ['_type_']},
             'ctypes.c_short': {'bases': ['_ctypes._SimpleCData'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [],
                                'properties': ['_type_']},
             'ctypes.c_ubyte': {'bases': ['_ctypes._SimpleCData'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [],
                                'properties': ['_type_']},
             'ctypes.c_uint': {'bases': ['_ctypes._SimpleCData'],
                               'constructor': [],
                               'docstring': '',
                               'methods': [],
                               'properties': ['_type_']},
             'ctypes.c_ulong': {'bases': ['_ctypes._SimpleCData'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [],
                                'properties': ['_type_']},
             'ctypes.c_ulonglong': {'bases': ['_ctypes._SimpleCData'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': ['_type_']},
             'ctypes.c_ushort': {'bases': ['_ctypes._SimpleCData'],
                                 'constructor': [],
                                 'docstring': '',
                                 'methods': [],
                                 'properties': ['_type_']},
             'ctypes.c_void_p': {'bases': ['_ctypes._SimpleCData'],
                                 'constructor': [],
                                 'docstring': '',
                                 'methods': [],
                                 'properties': ['_type_']},
             'ctypes.c_wchar': {'bases': ['_ctypes._SimpleCData'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [],
                                'properties': ['_type_']},
             'ctypes.c_wchar_p': {'bases': ['_ctypes._SimpleCData'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [],
                                  'properties': ['_type_']},
             'ctypes.py_object': {'bases': ['_ctypes._SimpleCData'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('__repr__', [], '')],
                                  'properties': ['_type_']},
             'ctypes.wintypes.FILETIME': {'bases': ['ctypes.wintypes.Structure'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': ['_fields_']},
             'ctypes.wintypes.MSG': {'bases': ['ctypes.wintypes.Structure'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': ['_fields_']},
             'ctypes.wintypes.POINT': {'bases': ['ctypes.wintypes.Structure'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': ['_fields_']},
             'ctypes.wintypes.RECT': {'bases': ['ctypes.wintypes.Structure'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [],
                                      'properties': ['_fields_']},
             'ctypes.wintypes.SIZE': {'bases': ['ctypes.wintypes.Structure'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [],
                                      'properties': ['_fields_']},
             'ctypes.wintypes.VARIANT_BOOL': {'bases': ['ctypes._SimpleCData'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('__repr__', [], '')],
                                              'properties': ['_type_']},
             'ctypes.wintypes.WIN32_FIND_DATAA': {'bases': ['ctypes.wintypes.Structure'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['_fields_']},
             'ctypes.wintypes.WIN32_FIND_DATAW': {'bases': ['ctypes.wintypes.Structure'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['_fields_']},
             'ctypes.wintypes._COORD': {'bases': ['ctypes.wintypes.Structure'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': ['_fields_']},
             'ctypes.wintypes._SMALL_RECT': {'bases': ['ctypes.wintypes.Structure'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['_fields_']},
             'curses.textpad.Textbox': {'bases': [],
                                        'constructor': ['win'],
                                        'docstring': 'Editing widget using the interior of a window object.\n     Supports the following Emacs-like key bindings:\n\n    Ctrl-A      Go to left edge of window.\n    Ctrl-B      Cursor left, wrapping to previous line if appropriate.\n    Ctrl-D      Delete character under cursor.\n    Ctrl-E      Go to right edge (stripspaces off) or end of line (stripspaces on).\n    Ctrl-F      Cursor right, wrapping to next line when appropriate.\n    Ctrl-G      Terminate, returning the window contents.\n    Ctrl-H      Delete character backward.\n    Ctrl-J      Terminate if the window is 1 line, otherwise insert newline.\n    Ctrl-K      If line is blank, delete it, otherwise clear to end of line.\n    Ctrl-L      Refresh screen.\n    Ctrl-N      Cursor down; move down one line.\n    Ctrl-O      Insert a blank line at cursor location.\n    Ctrl-P      Cursor up; move up one line.\n\n    Move operations do nothing if the cursor is at an edge where the movement\n    is not possible.  The following synonyms are supported where possible:\n\n    KEY_LEFT = Ctrl-B, KEY_RIGHT = Ctrl-F, KEY_UP = Ctrl-P, KEY_DOWN = Ctrl-N\n    KEY_BACKSPACE = Ctrl-h\n    ',
                                        'methods': [('_end_of_line',
                                                     ['y'],
                                                     'Go to the location of the first blank on the given line.'),
                                                    ('do_command',
                                                     ['ch'],
                                                     'Process a single editing command.'),
                                                    ('gather',
                                                     [],
                                                     'Collect and return the contents of the window.'),
                                                    ('edit',
                                                     ['validate=None'],
                                                     'Edit in the widget window and collect the results.')],
                                        'properties': ['win',
                                                       'maxy',
                                                       'maxx',
                                                       'stripspaces',
                                                       'lastcmd']},
             'decimal.Clamped': {'bases': ['decimal.DecimalException'],
                                 'constructor': [],
                                 'docstring': 'Exponent of a 0 changed to fit bounds.\n\n    This occurs and signals clamped if the exponent of a result has been\n    altered in order to fit the constraints of a specific concrete\n    representation.  This may occur when the exponent of a zero result would\n    be outside the bounds of a representation, or when a large normal\n    number would have an encoded exponent that cannot be represented.  In\n    this latter case, the exponent is reduced to fit and the corresponding\n    number of zero digits are appended to the coefficient ("fold-down").\n    ',
                                 'methods': [],
                                 'properties': []},
             'decimal.Context': {'bases': ['object'],
                                 'constructor': ['prec=None',
                                                 'rounding=None',
                                                 'traps=None',
                                                 'flags=None',
                                                 'Emin=None',
                                                 'Emax=None',
                                                 'capitals=None',
                                                 '_clamp=0',
                                                 '_ignored_flags=None'],
                                 'docstring': 'Contains the context for a Decimal instance.\n\n    Contains:\n    prec - precision (for use in rounding, division, square roots..)\n    rounding - rounding type (how you round)\n    traps - If traps[exception] = 1, then the exception is\n                    raised when it is caused.  Otherwise, a value is\n                    substituted in.\n    flags  - When an exception is caused, flags[exception] is incremented.\n             (Whether or not the trap_enabler is set)\n             Should be reset by user of Decimal instance.\n    Emin -   Minimum exponent\n    Emax -   Maximum exponent\n    capitals -      If 1, 1*10^1 is printed as 1E+1.\n                    If 0, printed as 1e1\n    _clamp - If 1, change exponents if too high (Default 0)\n    ',
                                 'methods': [('__repr__', [], 'Show the current context.'),
                                             ('clear_flags', [], 'Reset all flags to zero'),
                                             ('_shallow_copy',
                                              [],
                                              'Returns a shallow copy from self.'),
                                             ('copy', [], 'Returns a deep copy from self.'),
                                             ('_raise_error',
                                              ['condition', 'explanation=None', '*args'],
                                              'Handles an error\n\n        If the flag is in _ignored_flags, returns the default response.\n        Otherwise, it increments the flag, then, if the corresponding\n        trap_enabler is set, it reaises the exception.  Otherwise, it returns\n        the default value after incrementing the flag.\n        '),
                                             ('_ignore_all_flags',
                                              [],
                                              'Ignore all flags, if they are raised'),
                                             ('_ignore_flags',
                                              ['*flags'],
                                              'Ignore the flags, if they are raised'),
                                             ('_regard_flags',
                                              ['*flags'],
                                              'Stop ignoring the flags, if they are raised'),
                                             ('__hash__', [], 'A Context cannot be hashed.'),
                                             ('Etiny', [], 'Returns Etiny (= Emin - prec + 1)'),
                                             ('Etop',
                                              [],
                                              'Returns maximum exponent (= Emax - prec + 1)'),
                                             ('_set_rounding',
                                              ['type'],
                                              "Sets the rounding type.\n\n        Sets the rounding type, and returns the current (previous)\n        rounding type.  Often used like:\n\n        context = context.copy()\n        # so you don't change the calling context\n        # if an error occurs in the middle.\n        rounding = context._set_rounding(ROUND_UP)\n        val = self.__sub__(other, context=context)\n        context._set_rounding(rounding)\n\n        This will make it round up for that operation.\n        "),
                                             ('create_decimal',
                                              ["num='0'"],
                                              'Creates a new Decimal instance but using self as context.'),
                                             ('abs',
                                              ['a'],
                                              'Returns the absolute value of the operand.\n\n        If the operand is negative, the result is the same as using the minus\n        operation on the operand.  Otherwise, the result is the same as using\n        the plus operation on the operand.\n\n        >>> ExtendedContext.abs(Decimal(\'2.1\'))\n        Decimal("2.1")\n        >>> ExtendedContext.abs(Decimal(\'-100\'))\n        Decimal("100")\n        >>> ExtendedContext.abs(Decimal(\'101.5\'))\n        Decimal("101.5")\n        >>> ExtendedContext.abs(Decimal(\'-101.5\'))\n        Decimal("101.5")\n        '),
                                             ('add',
                                              ['a', 'b'],
                                              'Return the sum of the two operands.\n\n        >>> ExtendedContext.add(Decimal(\'12\'), Decimal(\'7.00\'))\n        Decimal("19.00")\n        >>> ExtendedContext.add(Decimal(\'1E+2\'), Decimal(\'1.01E+4\'))\n        Decimal("1.02E+4")\n        '),
                                             ('_apply', ['a'], ''),
                                             ('canonical',
                                              ['a'],
                                              'Returns the same Decimal object.\n\n        As we do not have different encodings for the same number, the\n        received object already is in its canonical form.\n\n        >>> ExtendedContext.canonical(Decimal(\'2.50\'))\n        Decimal("2.50")\n        '),
                                             ('compare',
                                              ['a', 'b'],
                                              'Compares values numerically.\n\n        If the signs of the operands differ, a value representing each operand\n        (\'-1\' if the operand is less than zero, \'0\' if the operand is zero or\n        negative zero, or \'1\' if the operand is greater than zero) is used in\n        place of that operand for the comparison instead of the actual\n        operand.\n\n        The comparison is then effected by subtracting the second operand from\n        the first and then returning a value according to the result of the\n        subtraction: \'-1\' if the result is less than zero, \'0\' if the result is\n        zero or negative zero, or \'1\' if the result is greater than zero.\n\n        >>> ExtendedContext.compare(Decimal(\'2.1\'), Decimal(\'3\'))\n        Decimal("-1")\n        >>> ExtendedContext.compare(Decimal(\'2.1\'), Decimal(\'2.1\'))\n        Decimal("0")\n        >>> ExtendedContext.compare(Decimal(\'2.1\'), Decimal(\'2.10\'))\n        Decimal("0")\n        >>> ExtendedContext.compare(Decimal(\'3\'), Decimal(\'2.1\'))\n        Decimal("1")\n        >>> ExtendedContext.compare(Decimal(\'2.1\'), Decimal(\'-3\'))\n        Decimal("1")\n        >>> ExtendedContext.compare(Decimal(\'-3\'), Decimal(\'2.1\'))\n        Decimal("-1")\n        '),
                                             ('compare_signal',
                                              ['a', 'b'],
                                              'Compares the values of the two operands numerically.\n\n        It\'s pretty much like compare(), but all NaNs signal, with signaling\n        NaNs taking precedence over quiet NaNs.\n\n        >>> c = ExtendedContext\n        >>> c.compare_signal(Decimal(\'2.1\'), Decimal(\'3\'))\n        Decimal("-1")\n        >>> c.compare_signal(Decimal(\'2.1\'), Decimal(\'2.1\'))\n        Decimal("0")\n        >>> c.flags[InvalidOperation] = 0\n        >>> print c.flags[InvalidOperation]\n        0\n        >>> c.compare_signal(Decimal(\'NaN\'), Decimal(\'2.1\'))\n        Decimal("NaN")\n        >>> print c.flags[InvalidOperation]\n        1\n        >>> c.flags[InvalidOperation] = 0\n        >>> print c.flags[InvalidOperation]\n        0\n        >>> c.compare_signal(Decimal(\'sNaN\'), Decimal(\'2.1\'))\n        Decimal("NaN")\n        >>> print c.flags[InvalidOperation]\n        1\n        '),
                                             ('compare_total',
                                              ['a', 'b'],
                                              'Compares two operands using their abstract representation.\n\n        This is not like the standard compare, which use their numerical\n        value. Note that a total ordering is defined for all possible abstract\n        representations.\n\n        >>> ExtendedContext.compare_total(Decimal(\'12.73\'), Decimal(\'127.9\'))\n        Decimal("-1")\n        >>> ExtendedContext.compare_total(Decimal(\'-127\'),  Decimal(\'12\'))\n        Decimal("-1")\n        >>> ExtendedContext.compare_total(Decimal(\'12.30\'), Decimal(\'12.3\'))\n        Decimal("-1")\n        >>> ExtendedContext.compare_total(Decimal(\'12.30\'), Decimal(\'12.30\'))\n        Decimal("0")\n        >>> ExtendedContext.compare_total(Decimal(\'12.3\'),  Decimal(\'12.300\'))\n        Decimal("1")\n        >>> ExtendedContext.compare_total(Decimal(\'12.3\'),  Decimal(\'NaN\'))\n        Decimal("-1")\n        '),
                                             ('compare_total_mag',
                                              ['a', 'b'],
                                              "Compares two operands using their abstract representation ignoring sign.\n\n        Like compare_total, but with operand's sign ignored and assumed to be 0.\n        "),
                                             ('copy_abs',
                                              ['a'],
                                              'Returns a copy of the operand with the sign set to 0.\n\n        >>> ExtendedContext.copy_abs(Decimal(\'2.1\'))\n        Decimal("2.1")\n        >>> ExtendedContext.copy_abs(Decimal(\'-100\'))\n        Decimal("100")\n        '),
                                             ('copy_decimal',
                                              ['a'],
                                              'Returns a copy of the decimal objet.\n\n        >>> ExtendedContext.copy_decimal(Decimal(\'2.1\'))\n        Decimal("2.1")\n        >>> ExtendedContext.copy_decimal(Decimal(\'-1.00\'))\n        Decimal("-1.00")\n        '),
                                             ('copy_negate',
                                              ['a'],
                                              'Returns a copy of the operand with the sign inverted.\n\n        >>> ExtendedContext.copy_negate(Decimal(\'101.5\'))\n        Decimal("-101.5")\n        >>> ExtendedContext.copy_negate(Decimal(\'-101.5\'))\n        Decimal("101.5")\n        '),
                                             ('copy_sign',
                                              ['a', 'b'],
                                              'Copies the second operand\'s sign to the first one.\n\n        In detail, it returns a copy of the first operand with the sign\n        equal to the sign of the second operand.\n\n        >>> ExtendedContext.copy_sign(Decimal( \'1.50\'), Decimal(\'7.33\'))\n        Decimal("1.50")\n        >>> ExtendedContext.copy_sign(Decimal(\'-1.50\'), Decimal(\'7.33\'))\n        Decimal("1.50")\n        >>> ExtendedContext.copy_sign(Decimal( \'1.50\'), Decimal(\'-7.33\'))\n        Decimal("-1.50")\n        >>> ExtendedContext.copy_sign(Decimal(\'-1.50\'), Decimal(\'-7.33\'))\n        Decimal("-1.50")\n        '),
                                             ('divide',
                                              ['a', 'b'],
                                              'Decimal division in a specified context.\n\n        >>> ExtendedContext.divide(Decimal(\'1\'), Decimal(\'3\'))\n        Decimal("0.333333333")\n        >>> ExtendedContext.divide(Decimal(\'2\'), Decimal(\'3\'))\n        Decimal("0.666666667")\n        >>> ExtendedContext.divide(Decimal(\'5\'), Decimal(\'2\'))\n        Decimal("2.5")\n        >>> ExtendedContext.divide(Decimal(\'1\'), Decimal(\'10\'))\n        Decimal("0.1")\n        >>> ExtendedContext.divide(Decimal(\'12\'), Decimal(\'12\'))\n        Decimal("1")\n        >>> ExtendedContext.divide(Decimal(\'8.00\'), Decimal(\'2\'))\n        Decimal("4.00")\n        >>> ExtendedContext.divide(Decimal(\'2.400\'), Decimal(\'2.0\'))\n        Decimal("1.20")\n        >>> ExtendedContext.divide(Decimal(\'1000\'), Decimal(\'100\'))\n        Decimal("10")\n        >>> ExtendedContext.divide(Decimal(\'1000\'), Decimal(\'1\'))\n        Decimal("1000")\n        >>> ExtendedContext.divide(Decimal(\'2.40E+6\'), Decimal(\'2\'))\n        Decimal("1.20E+6")\n        '),
                                             ('divide_int',
                                              ['a', 'b'],
                                              'Divides two numbers and returns the integer part of the result.\n\n        >>> ExtendedContext.divide_int(Decimal(\'2\'), Decimal(\'3\'))\n        Decimal("0")\n        >>> ExtendedContext.divide_int(Decimal(\'10\'), Decimal(\'3\'))\n        Decimal("3")\n        >>> ExtendedContext.divide_int(Decimal(\'1\'), Decimal(\'0.3\'))\n        Decimal("3")\n        '),
                                             ('divmod', ['a', 'b'], ''),
                                             ('exp',
                                              ['a'],
                                              'Returns e ** a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.exp(Decimal(\'-Infinity\'))\n        Decimal("0")\n        >>> c.exp(Decimal(\'-1\'))\n        Decimal("0.367879441")\n        >>> c.exp(Decimal(\'0\'))\n        Decimal("1")\n        >>> c.exp(Decimal(\'1\'))\n        Decimal("2.71828183")\n        >>> c.exp(Decimal(\'0.693147181\'))\n        Decimal("2.00000000")\n        >>> c.exp(Decimal(\'+Infinity\'))\n        Decimal("Infinity")\n        '),
                                             ('fma',
                                              ['a', 'b', 'c'],
                                              'Returns a multiplied by b, plus c.\n\n        The first two operands are multiplied together, using multiply,\n        the third operand is then added to the result of that\n        multiplication, using add, all with only one final rounding.\n\n        >>> ExtendedContext.fma(Decimal(\'3\'), Decimal(\'5\'), Decimal(\'7\'))\n        Decimal("22")\n        >>> ExtendedContext.fma(Decimal(\'3\'), Decimal(\'-5\'), Decimal(\'7\'))\n        Decimal("-8")\n        >>> ExtendedContext.fma(Decimal(\'888565290\'), Decimal(\'1557.96930\'), Decimal(\'-86087.7578\'))\n        Decimal("1.38435736E+12")\n        '),
                                             ('is_canonical',
                                              ['a'],
                                              "Return True if the operand is canonical; otherwise return False.\n\n        Currently, the encoding of a Decimal instance is always\n        canonical, so this method returns True for any Decimal.\n\n        >>> ExtendedContext.is_canonical(Decimal('2.50'))\n        True\n        "),
                                             ('is_finite',
                                              ['a'],
                                              "Return True if the operand is finite; otherwise return False.\n\n        A Decimal instance is considered finite if it is neither\n        infinite nor a NaN.\n\n        >>> ExtendedContext.is_finite(Decimal('2.50'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('-0.3'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('0'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('Inf'))\n        False\n        >>> ExtendedContext.is_finite(Decimal('NaN'))\n        False\n        "),
                                             ('is_infinite',
                                              ['a'],
                                              "Return True if the operand is infinite; otherwise return False.\n\n        >>> ExtendedContext.is_infinite(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_infinite(Decimal('-Inf'))\n        True\n        >>> ExtendedContext.is_infinite(Decimal('NaN'))\n        False\n        "),
                                             ('is_nan',
                                              ['a'],
                                              "Return True if the operand is a qNaN or sNaN;\n        otherwise return False.\n\n        >>> ExtendedContext.is_nan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_nan(Decimal('NaN'))\n        True\n        >>> ExtendedContext.is_nan(Decimal('-sNaN'))\n        True\n        "),
                                             ('is_normal',
                                              ['a'],
                                              "Return True if the operand is a normal number;\n        otherwise return False.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.is_normal(Decimal('2.50'))\n        True\n        >>> c.is_normal(Decimal('0.1E-999'))\n        False\n        >>> c.is_normal(Decimal('0.00'))\n        False\n        >>> c.is_normal(Decimal('-Inf'))\n        False\n        >>> c.is_normal(Decimal('NaN'))\n        False\n        "),
                                             ('is_qnan',
                                              ['a'],
                                              "Return True if the operand is a quiet NaN; otherwise return False.\n\n        >>> ExtendedContext.is_qnan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_qnan(Decimal('NaN'))\n        True\n        >>> ExtendedContext.is_qnan(Decimal('sNaN'))\n        False\n        "),
                                             ('is_signed',
                                              ['a'],
                                              "Return True if the operand is negative; otherwise return False.\n\n        >>> ExtendedContext.is_signed(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_signed(Decimal('-12'))\n        True\n        >>> ExtendedContext.is_signed(Decimal('-0'))\n        True\n        "),
                                             ('is_snan',
                                              ['a'],
                                              "Return True if the operand is a signaling NaN;\n        otherwise return False.\n\n        >>> ExtendedContext.is_snan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_snan(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_snan(Decimal('sNaN'))\n        True\n        "),
                                             ('is_subnormal',
                                              ['a'],
                                              "Return True if the operand is subnormal; otherwise return False.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.is_subnormal(Decimal('2.50'))\n        False\n        >>> c.is_subnormal(Decimal('0.1E-999'))\n        True\n        >>> c.is_subnormal(Decimal('0.00'))\n        False\n        >>> c.is_subnormal(Decimal('-Inf'))\n        False\n        >>> c.is_subnormal(Decimal('NaN'))\n        False\n        "),
                                             ('is_zero',
                                              ['a'],
                                              "Return True if the operand is a zero; otherwise return False.\n\n        >>> ExtendedContext.is_zero(Decimal('0'))\n        True\n        >>> ExtendedContext.is_zero(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_zero(Decimal('-0E+2'))\n        True\n        "),
                                             ('ln',
                                              ['a'],
                                              'Returns the natural (base e) logarithm of the operand.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.ln(Decimal(\'0\'))\n        Decimal("-Infinity")\n        >>> c.ln(Decimal(\'1.000\'))\n        Decimal("0")\n        >>> c.ln(Decimal(\'2.71828183\'))\n        Decimal("1.00000000")\n        >>> c.ln(Decimal(\'10\'))\n        Decimal("2.30258509")\n        >>> c.ln(Decimal(\'+Infinity\'))\n        Decimal("Infinity")\n        '),
                                             ('log10',
                                              ['a'],
                                              'Returns the base 10 logarithm of the operand.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.log10(Decimal(\'0\'))\n        Decimal("-Infinity")\n        >>> c.log10(Decimal(\'0.001\'))\n        Decimal("-3")\n        >>> c.log10(Decimal(\'1.000\'))\n        Decimal("0")\n        >>> c.log10(Decimal(\'2\'))\n        Decimal("0.301029996")\n        >>> c.log10(Decimal(\'10\'))\n        Decimal("1")\n        >>> c.log10(Decimal(\'70\'))\n        Decimal("1.84509804")\n        >>> c.log10(Decimal(\'+Infinity\'))\n        Decimal("Infinity")\n        '),
                                             ('logb',
                                              ['a'],
                                              ' Returns the exponent of the magnitude of the operand\'s MSD.\n\n        The result is the integer which is the exponent of the magnitude\n        of the most significant digit of the operand (as though the\n        operand were truncated to a single digit while maintaining the\n        value of that digit and without limiting the resulting exponent).\n\n        >>> ExtendedContext.logb(Decimal(\'250\'))\n        Decimal("2")\n        >>> ExtendedContext.logb(Decimal(\'2.50\'))\n        Decimal("0")\n        >>> ExtendedContext.logb(Decimal(\'0.03\'))\n        Decimal("-2")\n        >>> ExtendedContext.logb(Decimal(\'0\'))\n        Decimal("-Infinity")\n        '),
                                             ('logical_and',
                                              ['a', 'b'],
                                              'Applies the logical operation \'and\' between each operand\'s digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_and(Decimal(\'0\'), Decimal(\'0\'))\n        Decimal("0")\n        >>> ExtendedContext.logical_and(Decimal(\'0\'), Decimal(\'1\'))\n        Decimal("0")\n        >>> ExtendedContext.logical_and(Decimal(\'1\'), Decimal(\'0\'))\n        Decimal("0")\n        >>> ExtendedContext.logical_and(Decimal(\'1\'), Decimal(\'1\'))\n        Decimal("1")\n        >>> ExtendedContext.logical_and(Decimal(\'1100\'), Decimal(\'1010\'))\n        Decimal("1000")\n        >>> ExtendedContext.logical_and(Decimal(\'1111\'), Decimal(\'10\'))\n        Decimal("10")\n        '),
                                             ('logical_invert',
                                              ['a'],
                                              'Invert all the digits in the operand.\n\n        The operand must be a logical number.\n\n        >>> ExtendedContext.logical_invert(Decimal(\'0\'))\n        Decimal("111111111")\n        >>> ExtendedContext.logical_invert(Decimal(\'1\'))\n        Decimal("111111110")\n        >>> ExtendedContext.logical_invert(Decimal(\'111111111\'))\n        Decimal("0")\n        >>> ExtendedContext.logical_invert(Decimal(\'101010101\'))\n        Decimal("10101010")\n        '),
                                             ('logical_or',
                                              ['a', 'b'],
                                              'Applies the logical operation \'or\' between each operand\'s digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_or(Decimal(\'0\'), Decimal(\'0\'))\n        Decimal("0")\n        >>> ExtendedContext.logical_or(Decimal(\'0\'), Decimal(\'1\'))\n        Decimal("1")\n        >>> ExtendedContext.logical_or(Decimal(\'1\'), Decimal(\'0\'))\n        Decimal("1")\n        >>> ExtendedContext.logical_or(Decimal(\'1\'), Decimal(\'1\'))\n        Decimal("1")\n        >>> ExtendedContext.logical_or(Decimal(\'1100\'), Decimal(\'1010\'))\n        Decimal("1110")\n        >>> ExtendedContext.logical_or(Decimal(\'1110\'), Decimal(\'10\'))\n        Decimal("1110")\n        '),
                                             ('logical_xor',
                                              ['a', 'b'],
                                              'Applies the logical operation \'xor\' between each operand\'s digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_xor(Decimal(\'0\'), Decimal(\'0\'))\n        Decimal("0")\n        >>> ExtendedContext.logical_xor(Decimal(\'0\'), Decimal(\'1\'))\n        Decimal("1")\n        >>> ExtendedContext.logical_xor(Decimal(\'1\'), Decimal(\'0\'))\n        Decimal("1")\n        >>> ExtendedContext.logical_xor(Decimal(\'1\'), Decimal(\'1\'))\n        Decimal("0")\n        >>> ExtendedContext.logical_xor(Decimal(\'1100\'), Decimal(\'1010\'))\n        Decimal("110")\n        >>> ExtendedContext.logical_xor(Decimal(\'1111\'), Decimal(\'10\'))\n        Decimal("1101")\n        '),
                                             ('max',
                                              ['a', 'b'],
                                              'max compares two values numerically and returns the maximum.\n\n        If either operand is a NaN then the general rules apply.\n        Otherwise, the operands are compared as as though by the compare\n        operation.  If they are numerically equal then the left-hand operand\n        is chosen as the result.  Otherwise the maximum (closer to positive\n        infinity) of the two operands is chosen as the result.\n\n        >>> ExtendedContext.max(Decimal(\'3\'), Decimal(\'2\'))\n        Decimal("3")\n        >>> ExtendedContext.max(Decimal(\'-10\'), Decimal(\'3\'))\n        Decimal("3")\n        >>> ExtendedContext.max(Decimal(\'1.0\'), Decimal(\'1\'))\n        Decimal("1")\n        >>> ExtendedContext.max(Decimal(\'7\'), Decimal(\'NaN\'))\n        Decimal("7")\n        '),
                                             ('max_mag',
                                              ['a', 'b'],
                                              'Compares the values numerically with their sign ignored.'),
                                             ('min',
                                              ['a', 'b'],
                                              'min compares two values numerically and returns the minimum.\n\n        If either operand is a NaN then the general rules apply.\n        Otherwise, the operands are compared as as though by the compare\n        operation.  If they are numerically equal then the left-hand operand\n        is chosen as the result.  Otherwise the minimum (closer to negative\n        infinity) of the two operands is chosen as the result.\n\n        >>> ExtendedContext.min(Decimal(\'3\'), Decimal(\'2\'))\n        Decimal("2")\n        >>> ExtendedContext.min(Decimal(\'-10\'), Decimal(\'3\'))\n        Decimal("-10")\n        >>> ExtendedContext.min(Decimal(\'1.0\'), Decimal(\'1\'))\n        Decimal("1.0")\n        >>> ExtendedContext.min(Decimal(\'7\'), Decimal(\'NaN\'))\n        Decimal("7")\n        '),
                                             ('min_mag',
                                              ['a', 'b'],
                                              'Compares the values numerically with their sign ignored.'),
                                             ('minus',
                                              ['a'],
                                              'Minus corresponds to unary prefix minus in Python.\n\n        The operation is evaluated using the same rules as subtract; the\n        operation minus(a) is calculated as subtract(\'0\', a) where the \'0\'\n        has the same exponent as the operand.\n\n        >>> ExtendedContext.minus(Decimal(\'1.3\'))\n        Decimal("-1.3")\n        >>> ExtendedContext.minus(Decimal(\'-1.3\'))\n        Decimal("1.3")\n        '),
                                             ('multiply',
                                              ['a', 'b'],
                                              'multiply multiplies two operands.\n\n        If either operand is a special value then the general rules apply.\n        Otherwise, the operands are multiplied together (\'long multiplication\'),\n        resulting in a number which may be as long as the sum of the lengths\n        of the two operands.\n\n        >>> ExtendedContext.multiply(Decimal(\'1.20\'), Decimal(\'3\'))\n        Decimal("3.60")\n        >>> ExtendedContext.multiply(Decimal(\'7\'), Decimal(\'3\'))\n        Decimal("21")\n        >>> ExtendedContext.multiply(Decimal(\'0.9\'), Decimal(\'0.8\'))\n        Decimal("0.72")\n        >>> ExtendedContext.multiply(Decimal(\'0.9\'), Decimal(\'-0\'))\n        Decimal("-0.0")\n        >>> ExtendedContext.multiply(Decimal(\'654321\'), Decimal(\'654321\'))\n        Decimal("4.28135971E+11")\n        '),
                                             ('next_minus',
                                              ['a'],
                                              'Returns the largest representable number smaller than a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> ExtendedContext.next_minus(Decimal(\'1\'))\n        Decimal("0.999999999")\n        >>> c.next_minus(Decimal(\'1E-1007\'))\n        Decimal("0E-1007")\n        >>> ExtendedContext.next_minus(Decimal(\'-1.00000003\'))\n        Decimal("-1.00000004")\n        >>> c.next_minus(Decimal(\'Infinity\'))\n        Decimal("9.99999999E+999")\n        '),
                                             ('next_plus',
                                              ['a'],
                                              'Returns the smallest representable number larger than a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> ExtendedContext.next_plus(Decimal(\'1\'))\n        Decimal("1.00000001")\n        >>> c.next_plus(Decimal(\'-1E-1007\'))\n        Decimal("-0E-1007")\n        >>> ExtendedContext.next_plus(Decimal(\'-1.00000003\'))\n        Decimal("-1.00000002")\n        >>> c.next_plus(Decimal(\'-Infinity\'))\n        Decimal("-9.99999999E+999")\n        '),
                                             ('next_toward',
                                              ['a', 'b'],
                                              'Returns the number closest to a, in direction towards b.\n\n        The result is the closest representable number from the first\n        operand (but not the first operand) that is in the direction\n        towards the second operand, unless the operands have the same\n        value.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.next_toward(Decimal(\'1\'), Decimal(\'2\'))\n        Decimal("1.00000001")\n        >>> c.next_toward(Decimal(\'-1E-1007\'), Decimal(\'1\'))\n        Decimal("-0E-1007")\n        >>> c.next_toward(Decimal(\'-1.00000003\'), Decimal(\'0\'))\n        Decimal("-1.00000002")\n        >>> c.next_toward(Decimal(\'1\'), Decimal(\'0\'))\n        Decimal("0.999999999")\n        >>> c.next_toward(Decimal(\'1E-1007\'), Decimal(\'-100\'))\n        Decimal("0E-1007")\n        >>> c.next_toward(Decimal(\'-1.00000003\'), Decimal(\'-10\'))\n        Decimal("-1.00000004")\n        >>> c.next_toward(Decimal(\'0.00\'), Decimal(\'-0.0000\'))\n        Decimal("-0.00")\n        '),
                                             ('normalize',
                                              ['a'],
                                              'normalize reduces an operand to its simplest form.\n\n        Essentially a plus operation with all trailing zeros removed from the\n        result.\n\n        >>> ExtendedContext.normalize(Decimal(\'2.1\'))\n        Decimal("2.1")\n        >>> ExtendedContext.normalize(Decimal(\'-2.0\'))\n        Decimal("-2")\n        >>> ExtendedContext.normalize(Decimal(\'1.200\'))\n        Decimal("1.2")\n        >>> ExtendedContext.normalize(Decimal(\'-120\'))\n        Decimal("-1.2E+2")\n        >>> ExtendedContext.normalize(Decimal(\'120.00\'))\n        Decimal("1.2E+2")\n        >>> ExtendedContext.normalize(Decimal(\'0.00\'))\n        Decimal("0")\n        '),
                                             ('number_class',
                                              ['a'],
                                              "Returns an indication of the class of the operand.\n\n        The class is one of the following strings:\n          -sNaN\n          -NaN\n          -Infinity\n          -Normal\n          -Subnormal\n          -Zero\n          +Zero\n          +Subnormal\n          +Normal\n          +Infinity\n\n        >>> c = Context(ExtendedContext)\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.number_class(Decimal('Infinity'))\n        '+Infinity'\n        >>> c.number_class(Decimal('1E-10'))\n        '+Normal'\n        >>> c.number_class(Decimal('2.50'))\n        '+Normal'\n        >>> c.number_class(Decimal('0.1E-999'))\n        '+Subnormal'\n        >>> c.number_class(Decimal('0'))\n        '+Zero'\n        >>> c.number_class(Decimal('-0'))\n        '-Zero'\n        >>> c.number_class(Decimal('-0.1E-999'))\n        '-Subnormal'\n        >>> c.number_class(Decimal('-1E-10'))\n        '-Normal'\n        >>> c.number_class(Decimal('-2.50'))\n        '-Normal'\n        >>> c.number_class(Decimal('-Infinity'))\n        '-Infinity'\n        >>> c.number_class(Decimal('NaN'))\n        'NaN'\n        >>> c.number_class(Decimal('-NaN'))\n        'NaN'\n        >>> c.number_class(Decimal('sNaN'))\n        'sNaN'\n        "),
                                             ('plus',
                                              ['a'],
                                              'Plus corresponds to unary prefix plus in Python.\n\n        The operation is evaluated using the same rules as add; the\n        operation plus(a) is calculated as add(\'0\', a) where the \'0\'\n        has the same exponent as the operand.\n\n        >>> ExtendedContext.plus(Decimal(\'1.3\'))\n        Decimal("1.3")\n        >>> ExtendedContext.plus(Decimal(\'-1.3\'))\n        Decimal("-1.3")\n        '),
                                             ('power',
                                              ['a', 'b', 'modulo=None'],
                                              'Raises a to the power of b, to modulo if given.\n\n        With two arguments, compute a**b.  If a is negative then b\n        must be integral.  The result will be inexact unless b is\n        integral and the result is finite and can be expressed exactly\n        in \'precision\' digits.\n\n        With three arguments, compute (a**b) % modulo.  For the\n        three argument form, the following restrictions on the\n        arguments hold:\n\n         - all three arguments must be integral\n         - b must be nonnegative\n         - at least one of a or b must be nonzero\n         - modulo must be nonzero and have at most \'precision\' digits\n\n        The result of pow(a, b, modulo) is identical to the result\n        that would be obtained by computing (a**b) % modulo with\n        unbounded precision, but is computed more efficiently.  It is\n        always exact.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.power(Decimal(\'2\'), Decimal(\'3\'))\n        Decimal("8")\n        >>> c.power(Decimal(\'-2\'), Decimal(\'3\'))\n        Decimal("-8")\n        >>> c.power(Decimal(\'2\'), Decimal(\'-3\'))\n        Decimal("0.125")\n        >>> c.power(Decimal(\'1.7\'), Decimal(\'8\'))\n        Decimal("69.7575744")\n        >>> c.power(Decimal(\'10\'), Decimal(\'0.301029996\'))\n        Decimal("2.00000000")\n        >>> c.power(Decimal(\'Infinity\'), Decimal(\'-1\'))\n        Decimal("0")\n        >>> c.power(Decimal(\'Infinity\'), Decimal(\'0\'))\n        Decimal("1")\n        >>> c.power(Decimal(\'Infinity\'), Decimal(\'1\'))\n        Decimal("Infinity")\n        >>> c.power(Decimal(\'-Infinity\'), Decimal(\'-1\'))\n        Decimal("-0")\n        >>> c.power(Decimal(\'-Infinity\'), Decimal(\'0\'))\n        Decimal("1")\n        >>> c.power(Decimal(\'-Infinity\'), Decimal(\'1\'))\n        Decimal("-Infinity")\n        >>> c.power(Decimal(\'-Infinity\'), Decimal(\'2\'))\n        Decimal("Infinity")\n        >>> c.power(Decimal(\'0\'), Decimal(\'0\'))\n        Decimal("NaN")\n\n        >>> c.power(Decimal(\'3\'), Decimal(\'7\'), Decimal(\'16\'))\n        Decimal("11")\n        >>> c.power(Decimal(\'-3\'), Decimal(\'7\'), Decimal(\'16\'))\n        Decimal("-11")\n        >>> c.power(Decimal(\'-3\'), Decimal(\'8\'), Decimal(\'16\'))\n        Decimal("1")\n        >>> c.power(Decimal(\'3\'), Decimal(\'7\'), Decimal(\'-16\'))\n        Decimal("11")\n        >>> c.power(Decimal(\'23E12345\'), Decimal(\'67E189\'), Decimal(\'123456789\'))\n        Decimal("11729830")\n        >>> c.power(Decimal(\'-0\'), Decimal(\'17\'), Decimal(\'1729\'))\n        Decimal("-0")\n        >>> c.power(Decimal(\'-23\'), Decimal(\'0\'), Decimal(\'65537\'))\n        Decimal("1")\n        '),
                                             ('quantize',
                                              ['a', 'b'],
                                              'Returns a value equal to \'a\' (rounded), having the exponent of \'b\'.\n\n        The coefficient of the result is derived from that of the left-hand\n        operand.  It may be rounded using the current rounding setting (if the\n        exponent is being increased), multiplied by a positive power of ten (if\n        the exponent is being decreased), or is unchanged (if the exponent is\n        already equal to that of the right-hand operand).\n\n        Unlike other operations, if the length of the coefficient after the\n        quantize operation would be greater than precision then an Invalid\n        operation condition is raised.  This guarantees that, unless there is\n        an error condition, the exponent of the result of a quantize is always\n        equal to that of the right-hand operand.\n\n        Also unlike other operations, quantize will never raise Underflow, even\n        if the result is subnormal and inexact.\n\n        >>> ExtendedContext.quantize(Decimal(\'2.17\'), Decimal(\'0.001\'))\n        Decimal("2.170")\n        >>> ExtendedContext.quantize(Decimal(\'2.17\'), Decimal(\'0.01\'))\n        Decimal("2.17")\n        >>> ExtendedContext.quantize(Decimal(\'2.17\'), Decimal(\'0.1\'))\n        Decimal("2.2")\n        >>> ExtendedContext.quantize(Decimal(\'2.17\'), Decimal(\'1e+0\'))\n        Decimal("2")\n        >>> ExtendedContext.quantize(Decimal(\'2.17\'), Decimal(\'1e+1\'))\n        Decimal("0E+1")\n        >>> ExtendedContext.quantize(Decimal(\'-Inf\'), Decimal(\'Infinity\'))\n        Decimal("-Infinity")\n        >>> ExtendedContext.quantize(Decimal(\'2\'), Decimal(\'Infinity\'))\n        Decimal("NaN")\n        >>> ExtendedContext.quantize(Decimal(\'-0.1\'), Decimal(\'1\'))\n        Decimal("-0")\n        >>> ExtendedContext.quantize(Decimal(\'-0\'), Decimal(\'1e+5\'))\n        Decimal("-0E+5")\n        >>> ExtendedContext.quantize(Decimal(\'+35236450.6\'), Decimal(\'1e-2\'))\n        Decimal("NaN")\n        >>> ExtendedContext.quantize(Decimal(\'-35236450.6\'), Decimal(\'1e-2\'))\n        Decimal("NaN")\n        >>> ExtendedContext.quantize(Decimal(\'217\'), Decimal(\'1e-1\'))\n        Decimal("217.0")\n        >>> ExtendedContext.quantize(Decimal(\'217\'), Decimal(\'1e-0\'))\n        Decimal("217")\n        >>> ExtendedContext.quantize(Decimal(\'217\'), Decimal(\'1e+1\'))\n        Decimal("2.2E+2")\n        >>> ExtendedContext.quantize(Decimal(\'217\'), Decimal(\'1e+2\'))\n        Decimal("2E+2")\n        '),
                                             ('radix',
                                              [],
                                              'Just returns 10, as this is Decimal, :)\n\n        >>> ExtendedContext.radix()\n        Decimal("10")\n        '),
                                             ('remainder',
                                              ['a', 'b'],
                                              'Returns the remainder from integer division.\n\n        The result is the residue of the dividend after the operation of\n        calculating integer division as described for divide-integer, rounded\n        to precision digits if necessary.  The sign of the result, if\n        non-zero, is the same as that of the original dividend.\n\n        This operation will fail under the same conditions as integer division\n        (that is, if integer division on the same two operands would fail, the\n        remainder cannot be calculated).\n\n        >>> ExtendedContext.remainder(Decimal(\'2.1\'), Decimal(\'3\'))\n        Decimal("2.1")\n        >>> ExtendedContext.remainder(Decimal(\'10\'), Decimal(\'3\'))\n        Decimal("1")\n        >>> ExtendedContext.remainder(Decimal(\'-10\'), Decimal(\'3\'))\n        Decimal("-1")\n        >>> ExtendedContext.remainder(Decimal(\'10.2\'), Decimal(\'1\'))\n        Decimal("0.2")\n        >>> ExtendedContext.remainder(Decimal(\'10\'), Decimal(\'0.3\'))\n        Decimal("0.1")\n        >>> ExtendedContext.remainder(Decimal(\'3.6\'), Decimal(\'1.3\'))\n        Decimal("1.0")\n        '),
                                             ('remainder_near',
                                              ['a', 'b'],
                                              'Returns to be "a - b * n", where n is the integer nearest the exact\n        value of "x / b" (if two integers are equally near then the even one\n        is chosen).  If the result is equal to 0 then its sign will be the\n        sign of a.\n\n        This operation will fail under the same conditions as integer division\n        (that is, if integer division on the same two operands would fail, the\n        remainder cannot be calculated).\n\n        >>> ExtendedContext.remainder_near(Decimal(\'2.1\'), Decimal(\'3\'))\n        Decimal("-0.9")\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'6\'))\n        Decimal("-2")\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'3\'))\n        Decimal("1")\n        >>> ExtendedContext.remainder_near(Decimal(\'-10\'), Decimal(\'3\'))\n        Decimal("-1")\n        >>> ExtendedContext.remainder_near(Decimal(\'10.2\'), Decimal(\'1\'))\n        Decimal("0.2")\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'0.3\'))\n        Decimal("0.1")\n        >>> ExtendedContext.remainder_near(Decimal(\'3.6\'), Decimal(\'1.3\'))\n        Decimal("-0.3")\n        '),
                                             ('rotate',
                                              ['a', 'b'],
                                              'Returns a rotated copy of a, b times.\n\n        The coefficient of the result is a rotated copy of the digits in\n        the coefficient of the first operand.  The number of places of\n        rotation is taken from the absolute value of the second operand,\n        with the rotation being to the left if the second operand is\n        positive or to the right otherwise.\n\n        >>> ExtendedContext.rotate(Decimal(\'34\'), Decimal(\'8\'))\n        Decimal("400000003")\n        >>> ExtendedContext.rotate(Decimal(\'12\'), Decimal(\'9\'))\n        Decimal("12")\n        >>> ExtendedContext.rotate(Decimal(\'123456789\'), Decimal(\'-2\'))\n        Decimal("891234567")\n        >>> ExtendedContext.rotate(Decimal(\'123456789\'), Decimal(\'0\'))\n        Decimal("123456789")\n        >>> ExtendedContext.rotate(Decimal(\'123456789\'), Decimal(\'+2\'))\n        Decimal("345678912")\n        '),
                                             ('same_quantum',
                                              ['a', 'b'],
                                              "Returns True if the two operands have the same exponent.\n\n        The result is never affected by either the sign or the coefficient of\n        either operand.\n\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.001'))\n        False\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.01'))\n        True\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('1'))\n        False\n        >>> ExtendedContext.same_quantum(Decimal('Inf'), Decimal('-Inf'))\n        True\n        "),
                                             ('scaleb',
                                              ['a', 'b'],
                                              'Returns the first operand after adding the second value its exp.\n\n        >>> ExtendedContext.scaleb(Decimal(\'7.50\'), Decimal(\'-2\'))\n        Decimal("0.0750")\n        >>> ExtendedContext.scaleb(Decimal(\'7.50\'), Decimal(\'0\'))\n        Decimal("7.50")\n        >>> ExtendedContext.scaleb(Decimal(\'7.50\'), Decimal(\'3\'))\n        Decimal("7.50E+3")\n        '),
                                             ('shift',
                                              ['a', 'b'],
                                              'Returns a shifted copy of a, b times.\n\n        The coefficient of the result is a shifted copy of the digits\n        in the coefficient of the first operand.  The number of places\n        to shift is taken from the absolute value of the second operand,\n        with the shift being to the left if the second operand is\n        positive or to the right otherwise.  Digits shifted into the\n        coefficient are zeros.\n\n        >>> ExtendedContext.shift(Decimal(\'34\'), Decimal(\'8\'))\n        Decimal("400000000")\n        >>> ExtendedContext.shift(Decimal(\'12\'), Decimal(\'9\'))\n        Decimal("0")\n        >>> ExtendedContext.shift(Decimal(\'123456789\'), Decimal(\'-2\'))\n        Decimal("1234567")\n        >>> ExtendedContext.shift(Decimal(\'123456789\'), Decimal(\'0\'))\n        Decimal("123456789")\n        >>> ExtendedContext.shift(Decimal(\'123456789\'), Decimal(\'+2\'))\n        Decimal("345678900")\n        '),
                                             ('sqrt',
                                              ['a'],
                                              'Square root of a non-negative number to context precision.\n\n        If the result must be inexact, it is rounded using the round-half-even\n        algorithm.\n\n        >>> ExtendedContext.sqrt(Decimal(\'0\'))\n        Decimal("0")\n        >>> ExtendedContext.sqrt(Decimal(\'-0\'))\n        Decimal("-0")\n        >>> ExtendedContext.sqrt(Decimal(\'0.39\'))\n        Decimal("0.624499800")\n        >>> ExtendedContext.sqrt(Decimal(\'100\'))\n        Decimal("10")\n        >>> ExtendedContext.sqrt(Decimal(\'1\'))\n        Decimal("1")\n        >>> ExtendedContext.sqrt(Decimal(\'1.0\'))\n        Decimal("1.0")\n        >>> ExtendedContext.sqrt(Decimal(\'1.00\'))\n        Decimal("1.0")\n        >>> ExtendedContext.sqrt(Decimal(\'7\'))\n        Decimal("2.64575131")\n        >>> ExtendedContext.sqrt(Decimal(\'10\'))\n        Decimal("3.16227766")\n        >>> ExtendedContext.prec\n        9\n        '),
                                             ('subtract',
                                              ['a', 'b'],
                                              'Return the difference between the two operands.\n\n        >>> ExtendedContext.subtract(Decimal(\'1.3\'), Decimal(\'1.07\'))\n        Decimal("0.23")\n        >>> ExtendedContext.subtract(Decimal(\'1.3\'), Decimal(\'1.30\'))\n        Decimal("0.00")\n        >>> ExtendedContext.subtract(Decimal(\'1.3\'), Decimal(\'2.07\'))\n        Decimal("-0.77")\n        '),
                                             ('to_eng_string',
                                              ['a'],
                                              'Converts a number to a string, using scientific notation.\n\n        The operation is not affected by the context.\n        '),
                                             ('to_sci_string',
                                              ['a'],
                                              'Converts a number to a string, using scientific notation.\n\n        The operation is not affected by the context.\n        '),
                                             ('to_integral_exact',
                                              ['a'],
                                              'Rounds to an integer.\n\n        When the operand has a negative exponent, the result is the same\n        as using the quantize() operation using the given operand as the\n        left-hand-operand, 1E+0 as the right-hand-operand, and the precision\n        of the operand as the precision setting; Inexact and Rounded flags\n        are allowed in this operation.  The rounding mode is taken from the\n        context.\n\n        >>> ExtendedContext.to_integral_exact(Decimal(\'2.1\'))\n        Decimal("2")\n        >>> ExtendedContext.to_integral_exact(Decimal(\'100\'))\n        Decimal("100")\n        >>> ExtendedContext.to_integral_exact(Decimal(\'100.0\'))\n        Decimal("100")\n        >>> ExtendedContext.to_integral_exact(Decimal(\'101.5\'))\n        Decimal("102")\n        >>> ExtendedContext.to_integral_exact(Decimal(\'-101.5\'))\n        Decimal("-102")\n        >>> ExtendedContext.to_integral_exact(Decimal(\'10E+5\'))\n        Decimal("1.0E+6")\n        >>> ExtendedContext.to_integral_exact(Decimal(\'7.89E+77\'))\n        Decimal("7.89E+77")\n        >>> ExtendedContext.to_integral_exact(Decimal(\'-Inf\'))\n        Decimal("-Infinity")\n        '),
                                             ('to_integral_value',
                                              ['a'],
                                              'Rounds to an integer.\n\n        When the operand has a negative exponent, the result is the same\n        as using the quantize() operation using the given operand as the\n        left-hand-operand, 1E+0 as the right-hand-operand, and the precision\n        of the operand as the precision setting, except that no flags will\n        be set.  The rounding mode is taken from the context.\n\n        >>> ExtendedContext.to_integral_value(Decimal(\'2.1\'))\n        Decimal("2")\n        >>> ExtendedContext.to_integral_value(Decimal(\'100\'))\n        Decimal("100")\n        >>> ExtendedContext.to_integral_value(Decimal(\'100.0\'))\n        Decimal("100")\n        >>> ExtendedContext.to_integral_value(Decimal(\'101.5\'))\n        Decimal("102")\n        >>> ExtendedContext.to_integral_value(Decimal(\'-101.5\'))\n        Decimal("-102")\n        >>> ExtendedContext.to_integral_value(Decimal(\'10E+5\'))\n        Decimal("1.0E+6")\n        >>> ExtendedContext.to_integral_value(Decimal(\'7.89E+77\'))\n        Decimal("7.89E+77")\n        >>> ExtendedContext.to_integral_value(Decimal(\'-Inf\'))\n        Decimal("-Infinity")\n        ')],
                                 'properties': ['self',
                                                '__copy__',
                                                '_ignored_flags',
                                                'rounding',
                                                'to_integral']},
             'decimal.ConversionSyntax': {'bases': ['decimal.InvalidOperation'],
                                          'constructor': [],
                                          'docstring': 'Trying to convert badly formed string.\n\n    This occurs and signals invalid-operation if an string is being\n    converted to a number and it does not conform to the numeric string\n    syntax.  The result is [0,qNaN].\n    ',
                                          'methods': [('handle', ['context', '*args'], '')],
                                          'properties': []},
             'decimal.Decimal': {'bases': ['object'],
                                 'constructor': [],
                                 'docstring': 'Floating point class for decimal arithmetic.',
                                 'methods': [('__new__',
                                              ["value='0'", 'context=None'],
                                              'Create a decimal point instance.\n\n        >>> Decimal(\'3.14\')              # string input\n        Decimal("3.14")\n        >>> Decimal((0, (3, 1, 4), -2))  # tuple (sign, digit_tuple, exponent)\n        Decimal("3.14")\n        >>> Decimal(314)                 # int or long\n        Decimal("314")\n        >>> Decimal(Decimal(314))        # another decimal instance\n        Decimal("314")\n        '),
                                             ('_isnan',
                                              [],
                                              'Returns whether the number is not actually one.\n\n        0 if a number\n        1 if NaN\n        2 if sNaN\n        '),
                                             ('_isinfinity',
                                              [],
                                              'Returns whether the number is infinite\n\n        0 if finite or not a number\n        1 if +INF\n        -1 if -INF\n        '),
                                             ('_check_nans',
                                              ['other=None', 'context=None'],
                                              'Returns whether the number is not actually one.\n\n        if self, other are sNaN, signal\n        if self, other are NaN return nan\n        return 0\n\n        Done before operations.\n        '),
                                             ('__nonzero__',
                                              [],
                                              'Return True if self is nonzero; otherwise return False.\n\n        NaNs and infinities are considered nonzero.\n        '),
                                             ('__cmp__', ['other'], ''),
                                             ('__eq__', ['other'], ''),
                                             ('__ne__', ['other'], ''),
                                             ('compare',
                                              ['other', 'context=None'],
                                              'Compares one to another.\n\n        -1 => a < b\n        0  => a = b\n        1  => a > b\n        NaN => one is NaN\n        Like __cmp__, but returns Decimal instances.\n        '),
                                             ('__hash__', [], 'x.__hash__() <==> hash(x)'),
                                             ('as_tuple',
                                              [],
                                              'Represents the number as a triple tuple.\n\n        To show the internals exactly as they are.\n        '),
                                             ('__repr__',
                                              [],
                                              'Represents the number as an instance of Decimal.'),
                                             ('__str__',
                                              ['eng=False', 'context=None'],
                                              'Return string representation of the number in scientific notation.\n\n        Captures all of the information in the underlying representation.\n        '),
                                             ('to_eng_string',
                                              ['context=None'],
                                              'Convert to engineering-type string.\n\n        Engineering notation has an exponent which is a multiple of 3, so there\n        are up to 3 digits left of the decimal place.\n\n        Same rules for when in exponential and when as a value as in __str__.\n        '),
                                             ('__neg__',
                                              ['context=None'],
                                              'Returns a copy with the sign switched.\n\n        Rounds, if it has reason.\n        '),
                                             ('__pos__',
                                              ['context=None'],
                                              'Returns a copy, unless it is a sNaN.\n\n        Rounds the number (if more then precision digits)\n        '),
                                             ('__abs__',
                                              ['round=True', 'context=None'],
                                              "Returns the absolute value of self.\n\n        If the keyword argument 'round' is false, do not round.  The\n        expression self.__abs__(round=False) is equivalent to\n        self.copy_abs().\n        "),
                                             ('__add__',
                                              ['other', 'context=None'],
                                              'Returns self + other.\n\n        -INF + INF (or the reverse) cause InvalidOperation errors.\n        '),
                                             ('__sub__',
                                              ['other', 'context=None'],
                                              'Return self - other'),
                                             ('__rsub__',
                                              ['other', 'context=None'],
                                              'Return other - self'),
                                             ('__mul__',
                                              ['other', 'context=None'],
                                              'Return self * other.\n\n        (+-) INF * 0 (or its reverse) raise InvalidOperation.\n        '),
                                             ('__div__',
                                              ['other', 'context=None'],
                                              'Return self / other.'),
                                             ('_divide',
                                              ['other', 'context'],
                                              'Return (self // other, self % other), to context.prec precision.\n\n        Assumes that neither self nor other is a NaN, that self is not\n        infinite and that other is nonzero.\n        '),
                                             ('__rdiv__',
                                              ['other', 'context=None'],
                                              'Swaps self/other and returns __div__.'),
                                             ('__divmod__',
                                              ['other', 'context=None'],
                                              '\n        Return (self // other, self % other)\n        '),
                                             ('__rdivmod__',
                                              ['other', 'context=None'],
                                              'Swaps self/other and returns __divmod__.'),
                                             ('__mod__',
                                              ['other', 'context=None'],
                                              '\n        self % other\n        '),
                                             ('__rmod__',
                                              ['other', 'context=None'],
                                              'Swaps self/other and returns __mod__.'),
                                             ('remainder_near',
                                              ['other', 'context=None'],
                                              '\n        Remainder nearest to 0-  abs(remainder-near) <= other/2\n        '),
                                             ('__floordiv__',
                                              ['other', 'context=None'],
                                              'self // other'),
                                             ('__rfloordiv__',
                                              ['other', 'context=None'],
                                              'Swaps self/other and returns __floordiv__.'),
                                             ('__float__', [], 'Float representation.'),
                                             ('__int__',
                                              [],
                                              'Converts self to an int, truncating if necessary.'),
                                             ('__long__',
                                              [],
                                              'Converts to a long.\n\n        Equivalent to long(int(self))\n        '),
                                             ('_fix_nan',
                                              ['context'],
                                              'Decapitate the payload of a NaN to fit the context'),
                                             ('_fix',
                                              ['context'],
                                              'Round if it is necessary to keep self within prec precision.\n\n        Rounds and fixes the exponent.  Does not raise on a sNaN.\n\n        Arguments:\n        self - Decimal instance\n        context - context used.\n        '),
                                             ('_round_down',
                                              ['prec'],
                                              'Also known as round-towards-0, truncate.'),
                                             ('_round_up', ['prec'], 'Rounds away from 0.'),
                                             ('_round_half_up',
                                              ['prec'],
                                              'Rounds 5 up (away from 0)'),
                                             ('_round_half_down', ['prec'], 'Round 5 down'),
                                             ('_round_half_even',
                                              ['prec'],
                                              'Round 5 to even, rest to nearest.'),
                                             ('_round_ceiling',
                                              ['prec'],
                                              'Rounds up (not away from 0 if negative.)'),
                                             ('_round_floor',
                                              ['prec'],
                                              'Rounds down (not towards 0 if negative)'),
                                             ('_round_05up',
                                              ['prec'],
                                              'Round down unless digit prec-1 is 0 or 5.'),
                                             ('fma',
                                              ['other', 'third', 'context=None'],
                                              'Fused multiply-add.\n\n        Returns self*other+third with no rounding of the intermediate\n        product self*other.\n\n        self and other are multiplied together, with no rounding of\n        the result.  The third operand is then added to the result,\n        and a single final rounding is performed.\n        '),
                                             ('_power_modulo',
                                              ['other', 'modulo', 'context=None'],
                                              'Three argument version of __pow__'),
                                             ('_power_exact',
                                              ['other', 'p'],
                                              'Attempt to compute self**other exactly.\n\n        Given Decimals self and other and an integer p, attempt to\n        compute an exact result for the power self**other, with p\n        digits of precision.  Return None if self**other is not\n        exactly representable in p digits.\n\n        Assumes that elimination of special cases has already been\n        performed: self and other must both be nonspecial; self must\n        be positive and not numerically equal to 1; other must be\n        nonzero.  For efficiency, other._exp should not be too large,\n        so that 10**abs(other._exp) is a feasible calculation.'),
                                             ('__pow__',
                                              ['other', 'modulo=None', 'context=None'],
                                              'Return self ** other [ % modulo].\n\n        With two arguments, compute self**other.\n\n        With three arguments, compute (self**other) % modulo.  For the\n        three argument form, the following restrictions on the\n        arguments hold:\n\n         - all three arguments must be integral\n         - other must be nonnegative\n         - either self or other (or both) must be nonzero\n         - modulo must be nonzero and must have at most p digits,\n           where p is the context precision.\n\n        If any of these restrictions is violated the InvalidOperation\n        flag is raised.\n\n        The result of pow(self, other, modulo) is identical to the\n        result that would be obtained by computing (self**other) %\n        modulo with unbounded precision, but is computed more\n        efficiently.  It is always exact.\n        '),
                                             ('__rpow__',
                                              ['other', 'context=None'],
                                              'Swaps self/other and returns __pow__.'),
                                             ('normalize',
                                              ['context=None'],
                                              'Normalize- strip trailing 0s, change anything equal to 0 to 0e0'),
                                             ('quantize',
                                              ['exp',
                                               'rounding=None',
                                               'context=None',
                                               'watchexp=True'],
                                              'Quantize self so its exponent is the same as that of exp.\n\n        Similar to self._rescale(exp._exp) but with error checking.\n        '),
                                             ('same_quantum',
                                              ['other'],
                                              'Return True if self and other have the same exponent; otherwise\n        return False.\n\n        If either operand is a special value, the following rules are used:\n           * return True if both operands are infinities\n           * return True if both operands are NaNs\n           * otherwise, return False.\n        '),
                                             ('_rescale',
                                              ['exp', 'rounding'],
                                              'Rescale self so that the exponent is exp, either by padding with zeros\n        or by truncating digits, using the given rounding mode.\n\n        Specials are returned without change.  This operation is\n        quiet: it raises no flags, and uses no information from the\n        context.\n\n        exp = exp to scale to (an integer)\n        rounding = rounding mode\n        '),
                                             ('to_integral_exact',
                                              ['rounding=None', 'context=None'],
                                              "Rounds to a nearby integer.\n\n        If no rounding mode is specified, take the rounding mode from\n        the context.  This method raises the Rounded and Inexact flags\n        when appropriate.\n\n        See also: to_integral_value, which does exactly the same as\n        this method except that it doesn't raise Inexact or Rounded.\n        "),
                                             ('to_integral_value',
                                              ['rounding=None', 'context=None'],
                                              'Rounds to the nearest integer, without raising inexact, rounded.'),
                                             ('sqrt',
                                              ['context=None'],
                                              'Return the square root of self.'),
                                             ('max',
                                              ['other', 'context=None'],
                                              'Returns the larger value.\n\n        Like max(self, other) except if one is not a number, returns\n        NaN (and signals if one is sNaN).  Also rounds.\n        '),
                                             ('min',
                                              ['other', 'context=None'],
                                              'Returns the smaller value.\n\n        Like min(self, other) except if one is not a number, returns\n        NaN (and signals if one is sNaN).  Also rounds.\n        '),
                                             ('_isinteger',
                                              [],
                                              'Returns whether self is an integer'),
                                             ('_iseven',
                                              [],
                                              'Returns True if self is even.  Assumes self is an integer.'),
                                             ('adjusted',
                                              [],
                                              'Return the adjusted exponent of self'),
                                             ('canonical',
                                              ['context=None'],
                                              'Returns the same Decimal object.\n\n        As we do not have different encodings for the same number, the\n        received object already is in its canonical form.\n        '),
                                             ('compare_signal',
                                              ['other', 'context=None'],
                                              "Compares self to the other operand numerically.\n\n        It's pretty much like compare(), but all NaNs signal, with signaling\n        NaNs taking precedence over quiet NaNs.\n        "),
                                             ('compare_total',
                                              ['other'],
                                              'Compares self to other using the abstract representations.\n\n        This is not like the standard compare, which use their numerical\n        value. Note that a total ordering is defined for all possible abstract\n        representations.\n        '),
                                             ('compare_total_mag',
                                              ['other'],
                                              "Compares self to other using abstract repr., ignoring sign.\n\n        Like compare_total, but with operand's sign ignored and assumed to be 0.\n        "),
                                             ('copy_abs',
                                              [],
                                              'Returns a copy with the sign set to 0. '),
                                             ('copy_negate',
                                              [],
                                              'Returns a copy with the sign inverted.'),
                                             ('copy_sign',
                                              ['other'],
                                              'Returns self with the sign of other.'),
                                             ('exp', ['context=None'], 'Returns e ** self.'),
                                             ('is_canonical',
                                              [],
                                              'Return True if self is canonical; otherwise return False.\n\n        Currently, the encoding of a Decimal instance is always\n        canonical, so this method returns True for any Decimal.\n        '),
                                             ('is_finite',
                                              [],
                                              'Return True if self is finite; otherwise return False.\n\n        A Decimal instance is considered finite if it is neither\n        infinite nor a NaN.\n        '),
                                             ('is_infinite',
                                              [],
                                              'Return True if self is infinite; otherwise return False.'),
                                             ('is_nan',
                                              [],
                                              'Return True if self is a qNaN or sNaN; otherwise return False.'),
                                             ('is_normal',
                                              ['context=None'],
                                              'Return True if self is a normal number; otherwise return False.'),
                                             ('is_qnan',
                                              [],
                                              'Return True if self is a quiet NaN; otherwise return False.'),
                                             ('is_signed',
                                              [],
                                              'Return True if self is negative; otherwise return False.'),
                                             ('is_snan',
                                              [],
                                              'Return True if self is a signaling NaN; otherwise return False.'),
                                             ('is_subnormal',
                                              ['context=None'],
                                              'Return True if self is subnormal; otherwise return False.'),
                                             ('is_zero',
                                              [],
                                              'Return True if self is a zero; otherwise return False.'),
                                             ('_ln_exp_bound',
                                              [],
                                              'Compute a lower bound for the adjusted exponent of self.ln().\n        In other words, compute r such that self.ln() >= 10**r.  Assumes\n        that self is finite and positive and that self != 1.\n        '),
                                             ('ln',
                                              ['context=None'],
                                              'Returns the natural (base e) logarithm of self.'),
                                             ('_log10_exp_bound',
                                              [],
                                              'Compute a lower bound for the adjusted exponent of self.log10().\n        In other words, find r such that self.log10() >= 10**r.\n        Assumes that self is finite and positive and that self != 1.\n        '),
                                             ('log10',
                                              ['context=None'],
                                              'Returns the base 10 logarithm of self.'),
                                             ('logb',
                                              ['context=None'],
                                              " Returns the exponent of the magnitude of self's MSD.\n\n        The result is the integer which is the exponent of the magnitude\n        of the most significant digit of self (as though it were truncated\n        to a single digit while maintaining the value of that digit and\n        without limiting the resulting exponent).\n        "),
                                             ('_islogical',
                                              [],
                                              'Return True if self is a logical operand.\n\n        For being logical, it must be a finite numbers with a sign of 0,\n        an exponent of 0, and a coefficient whose digits must all be\n        either 0 or 1.\n        '),
                                             ('_fill_logical', ['context', 'opa', 'opb'], ''),
                                             ('logical_and',
                                              ['other', 'context=None'],
                                              "Applies an 'and' operation between self and other's digits."),
                                             ('logical_invert',
                                              ['context=None'],
                                              'Invert all its digits.'),
                                             ('logical_or',
                                              ['other', 'context=None'],
                                              "Applies an 'or' operation between self and other's digits."),
                                             ('logical_xor',
                                              ['other', 'context=None'],
                                              "Applies an 'xor' operation between self and other's digits."),
                                             ('max_mag',
                                              ['other', 'context=None'],
                                              'Compares the values numerically with their sign ignored.'),
                                             ('min_mag',
                                              ['other', 'context=None'],
                                              'Compares the values numerically with their sign ignored.'),
                                             ('next_minus',
                                              ['context=None'],
                                              'Returns the largest representable number smaller than itself.'),
                                             ('next_plus',
                                              ['context=None'],
                                              'Returns the smallest representable number larger than itself.'),
                                             ('next_toward',
                                              ['other', 'context=None'],
                                              'Returns the number closest to self, in the direction towards other.\n\n        The result is the closest representable number to self\n        (excluding self) that is in the direction towards other,\n        unless both have the same value.  If the two operands are\n        numerically equal, then the result is a copy of self with the\n        sign set to be the same as the sign of other.\n        '),
                                             ('number_class',
                                              ['context=None'],
                                              'Returns an indication of the class of self.\n\n        The class is one of the following strings:\n          sNaN\n          NaN\n          -Infinity\n          -Normal\n          -Subnormal\n          -Zero\n          +Zero\n          +Subnormal\n          +Normal\n          +Infinity\n        '),
                                             ('radix',
                                              [],
                                              'Just returns 10, as this is Decimal, :)'),
                                             ('rotate',
                                              ['other', 'context=None'],
                                              'Returns a rotated copy of self, value-of-other times.'),
                                             ('scaleb',
                                              ['other', 'context=None'],
                                              'Returns self operand after adding the second value to its exp.'),
                                             ('shift',
                                              ['other', 'context=None'],
                                              'Returns a shifted copy of self, value-of-other times.'),
                                             ('__reduce__', [], ''),
                                             ('__copy__', [], ''),
                                             ('__deepcopy__', ['memo'], '')],
                                 'properties': ['__slots__',
                                                '_sign',
                                                '_int',
                                                '_exp',
                                                '_is_special',
                                                '__radd__',
                                                '__rmul__',
                                                '__truediv__',
                                                '__rtruediv__',
                                                '_pick_rounding_function',
                                                'to_integral']},
             'decimal.DecimalException': {'bases': ['ArithmeticError'],
                                          'constructor': [],
                                          'docstring': "Base exception class.\n\n    Used exceptions derive from this.\n    If an exception derives from another exception besides this (such as\n    Underflow (Inexact, Rounded, Subnormal) that indicates that it is only\n    called if the others are present.  This isn't actually used for\n    anything, though.\n\n    handle  -- Called when context._raise_error is called and the\n               trap_enabler is set.  First argument is self, second is the\n               context.  More arguments can be given, those being after\n               the explanation in _raise_error (For example,\n               context._raise_error(NewError, '(-x)!', self._sign) would\n               call NewError().handle(context, self._sign).)\n\n    To define a new exception, it should be sufficient to have it derive\n    from DecimalException.\n    ",
                                          'methods': [('handle', ['context', '*args'], '')],
                                          'properties': []},
             'decimal.DivisionByZero': {'bases': ['decimal.DecimalException',
                                                  'ZeroDivisionError'],
                                        'constructor': [],
                                        'docstring': 'Division by 0.\n\n    This occurs and signals division-by-zero if division of a finite number\n    by zero was attempted (during a divide-integer or divide operation, or a\n    power operation with negative right-hand operand), and the dividend was\n    not zero.\n\n    The result of the operation is [sign,inf], where sign is the exclusive\n    or of the signs of the operands for divide, or is 1 for an odd power of\n    -0, for power.\n    ',
                                        'methods': [('handle',
                                                     ['context', 'sign', '*args'],
                                                     '')],
                                        'properties': []},
             'decimal.DivisionImpossible': {'bases': ['decimal.InvalidOperation'],
                                            'constructor': [],
                                            'docstring': 'Cannot perform the division adequately.\n\n    This occurs and signals invalid-operation if the integer result of a\n    divide-integer or remainder operation had too many digits (would be\n    longer than precision).  The result is [0,qNaN].\n    ',
                                            'methods': [('handle', ['context', '*args'], '')],
                                            'properties': []},
             'decimal.DivisionUndefined': {'bases': ['decimal.InvalidOperation',
                                                     'ZeroDivisionError'],
                                           'constructor': [],
                                           'docstring': 'Undefined result of division.\n\n    This occurs and signals invalid-operation if division by zero was\n    attempted (during a divide-integer, divide, or remainder operation), and\n    the dividend is also zero.  The result is [0,qNaN].\n    ',
                                           'methods': [('handle', ['context', '*args'], '')],
                                           'properties': []},
             'decimal.Inexact': {'bases': ['decimal.DecimalException'],
                                 'constructor': [],
                                 'docstring': 'Had to round, losing information.\n\n    This occurs and signals inexact whenever the result of an operation is\n    not exact (that is, it needed to be rounded and any discarded digits\n    were non-zero), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n\n    The inexact signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) was inexact.\n    ',
                                 'methods': [],
                                 'properties': []},
             'decimal.InvalidContext': {'bases': ['decimal.InvalidOperation'],
                                        'constructor': [],
                                        'docstring': 'Invalid context.  Unknown rounding, for example.\n\n    This occurs and signals invalid-operation if an invalid context was\n    detected during an operation.  This can occur if contexts are not checked\n    on creation and either the precision exceeds the capability of the\n    underlying concrete representation or an unknown or unsupported rounding\n    was specified.  These aspects of the context need only be checked when\n    the values are required to be used.  The result is [0,qNaN].\n    ',
                                        'methods': [('handle', ['context', '*args'], '')],
                                        'properties': []},
             'decimal.InvalidOperation': {'bases': ['decimal.DecimalException'],
                                          'constructor': [],
                                          'docstring': 'An invalid operation was performed.\n\n    Various bad things cause this:\n\n    Something creates a signaling NaN\n    -INF + INF\n    0 * (+-)INF\n    (+-)INF / (+-)INF\n    x % 0\n    (+-)INF % x\n    x._rescale( non-integer )\n    sqrt(-x) , x > 0\n    0 ** 0\n    x ** (non-integer)\n    x ** (+-)INF\n    An operand is invalid\n\n    The result of the operation after these is a quiet positive NaN,\n    except when the cause is a signaling NaN, in which case the result is\n    also a quiet NaN, but with the original sign, and an optional\n    diagnostic information.\n    ',
                                          'methods': [('handle', ['context', '*args'], '')],
                                          'properties': []},
             'decimal.MockThreading': {'bases': ['object'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('local', ['sys=sys'], '')],
                                       'properties': []},
             'decimal.Overflow': {'bases': ['decimal.Inexact', 'decimal.Rounded'],
                                  'constructor': [],
                                  'docstring': 'Numerical overflow.\n\n    This occurs and signals overflow if the adjusted exponent of a result\n    (from a conversion or from an operation that is not an attempt to divide\n    by zero), after rounding, would be greater than the largest value that\n    can be handled by the implementation (the value Emax).\n\n    The result depends on the rounding mode:\n\n    For round-half-up and round-half-even (and for round-half-down and\n    round-up, if implemented), the result of the operation is [sign,inf],\n    where sign is the sign of the intermediate result.  For round-down, the\n    result is the largest finite number that can be represented in the\n    current precision, with the sign of the intermediate result.  For\n    round-ceiling, the result is the same as for round-down if the sign of\n    the intermediate result is 1, or is [0,inf] otherwise.  For round-floor,\n    the result is the same as for round-down if the sign of the intermediate\n    result is 0, or is [1,inf] otherwise.  In all cases, Inexact and Rounded\n    will also be raised.\n    ',
                                  'methods': [('handle', ['context', 'sign', '*args'], '')],
                                  'properties': []},
             'decimal.Rounded': {'bases': ['decimal.DecimalException'],
                                 'constructor': [],
                                 'docstring': 'Number got rounded (not  necessarily changed during rounding).\n\n    This occurs and signals rounded whenever the result of an operation is\n    rounded (that is, some zero or non-zero digits were discarded from the\n    coefficient), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n\n    The rounded signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) caused a loss of precision.\n    ',
                                 'methods': [],
                                 'properties': []},
             'decimal.Subnormal': {'bases': ['decimal.DecimalException'],
                                   'constructor': [],
                                   'docstring': 'Exponent < Emin before rounding.\n\n    This occurs and signals subnormal whenever the result of a conversion or\n    operation is subnormal (that is, its adjusted exponent is less than\n    Emin, before any rounding).  The result in all cases is unchanged.\n\n    The subnormal signal may be tested (or trapped) to determine if a given\n    or operation (or sequence of operations) yielded a subnormal result.\n    ',
                                   'methods': [],
                                   'properties': []},
             'decimal.Underflow': {'bases': ['decimal.Inexact',
                                             'decimal.Rounded',
                                             'decimal.Subnormal'],
                                   'constructor': [],
                                   'docstring': 'Numerical underflow with result rounded to 0.\n\n    This occurs and signals underflow if a result is inexact and the\n    adjusted exponent of the result would be smaller (more negative) than\n    the smallest value that can be handled by the implementation (the value\n    Emin).  That is, the result is both inexact and subnormal.\n\n    The result after an underflow will be a subnormal number rounded, if\n    necessary, so that its exponent is not less than Etiny.  This may result\n    in 0 with the sign of the intermediate result and an exponent of Etiny.\n\n    In all cases, Inexact, Rounded, and Subnormal will also be raised.\n    ',
                                   'methods': [],
                                   'properties': []},
             'decimal._ContextManager': {'bases': ['object'],
                                         'constructor': ['new_context'],
                                         'docstring': 'Context manager class to support localcontext().\n\n      Sets a copy of the supplied context in __enter__() and restores\n      the previous decimal context in __exit__()\n    ',
                                         'methods': [('__enter__', [], ''),
                                                     ('__exit__', ['t', 'v', 'tb'], '')],
                                         'properties': ['new_context', 'saved_context']},
             'decimal._Log10Memoize': {'bases': ['object'],
                                       'constructor': [],
                                       'docstring': 'Class to compute, store, and allow retrieval of, digits of the\n    constant log(10) = 2.302585....  This constant is needed by\n    Decimal.ln, Decimal.log10, Decimal.exp and Decimal.__pow__.',
                                       'methods': [('getdigits',
                                                    ['p'],
                                                    'Given an integer p >= 0, return floor(10**p)*log(10).\n\n        For example, self.getdigits(3) returns 2302.\n        ')],
                                       'properties': ['digits']},
             'decimal._WorkRep': {'bases': ['object'],
                                  'constructor': ['value=None'],
                                  'docstring': '',
                                  'methods': [('__repr__', [], '')],
                                  'properties': ['__slots__', 'sign', 'int', 'exp', '__str__']},
             'difflib.Differ': {'bases': [],
                                'constructor': ['linejunk=None', 'charjunk=None'],
                                'docstring': "\n    Differ is a class for comparing sequences of lines of text, and\n    producing human-readable differences or deltas.  Differ uses\n    SequenceMatcher both to compare sequences of lines, and to compare\n    sequences of characters within similar (near-matching) lines.\n\n    Each line of a Differ delta begins with a two-letter code:\n\n        '- '    line unique to sequence 1\n        '+ '    line unique to sequence 2\n        '  '    line common to both sequences\n        '? '    line not present in either input sequence\n\n    Lines beginning with '? ' attempt to guide the eye to intraline\n    differences, and were not present in either input sequence.  These lines\n    can be confusing if the sequences contain tab characters.\n\n    Note that Differ makes no claim to produce a *minimal* diff.  To the\n    contrary, minimal diffs are often counter-intuitive, because they synch\n    up anywhere possible, sometimes accidental matches 100 pages apart.\n    Restricting synch points to contiguous matches preserves some notion of\n    locality, at the occasional cost of producing a longer diff.\n\n    Example: Comparing two texts.\n\n    First we set up the texts, sequences of individual single-line strings\n    ending with newlines (such sequences can also be obtained from the\n    `readlines()` method of file-like objects):\n\n    >>> text1 = '''  1. Beautiful is better than ugly.\n    ...   2. Explicit is better than implicit.\n    ...   3. Simple is better than complex.\n    ...   4. Complex is better than complicated.\n    ... '''.splitlines(1)\n    >>> len(text1)\n    4\n    >>> text1[0][-1]\n    '\\n'\n    >>> text2 = '''  1. Beautiful is better than ugly.\n    ...   3.   Simple is better than complex.\n    ...   4. Complicated is better than complex.\n    ...   5. Flat is better than nested.\n    ... '''.splitlines(1)\n\n    Next we instantiate a Differ object:\n\n    >>> d = Differ()\n\n    Note that when instantiating a Differ object we may pass functions to\n    filter out line and character 'junk'.  See Differ.__init__ for details.\n\n    Finally, we compare the two:\n\n    >>> result = list(d.compare(text1, text2))\n\n    'result' is a list of strings, so let's pretty-print it:\n\n    >>> from pprint import pprint as _pprint\n    >>> _pprint(result)\n    ['    1. Beautiful is better than ugly.\\n',\n     '-   2. Explicit is better than implicit.\\n',\n     '-   3. Simple is better than complex.\\n',\n     '+   3.   Simple is better than complex.\\n',\n     '?     ++\\n',\n     '-   4. Complex is better than complicated.\\n',\n     '?            ^                     ---- ^\\n',\n     '+   4. Complicated is better than complex.\\n',\n     '?           ++++ ^                      ^\\n',\n     '+   5. Flat is better than nested.\\n']\n\n    As a single multi-line string it looks like this:\n\n    >>> print ''.join(result),\n        1. Beautiful is better than ugly.\n    -   2. Explicit is better than implicit.\n    -   3. Simple is better than complex.\n    +   3.   Simple is better than complex.\n    ?     ++\n    -   4. Complex is better than complicated.\n    ?            ^                     ---- ^\n    +   4. Complicated is better than complex.\n    ?           ++++ ^                      ^\n    +   5. Flat is better than nested.\n\n    Methods:\n\n    __init__(linejunk=None, charjunk=None)\n        Construct a text differencer, with optional filters.\n\n    compare(a, b)\n        Compare two sequences of lines; generate the resulting delta.\n    ",
                                'methods': [('compare',
                                             ['a', 'b'],
                                             "\n        Compare two sequences of lines; generate the resulting delta.\n\n        Each sequence must contain individual single-line strings ending with\n        newlines. Such sequences can be obtained from the `readlines()` method\n        of file-like objects.  The delta generated also consists of newline-\n        terminated strings, ready to be printed as-is via the writeline()\n        method of a file-like object.\n\n        Example:\n\n        >>> print ''.join(Differ().compare('one\\ntwo\\nthree\\n'.splitlines(1),\n        ...                                'ore\\ntree\\nemu\\n'.splitlines(1))),\n        - one\n        ?  ^\n        + ore\n        ?  ^\n        - two\n        - three\n        ?  -\n        + tree\n        + emu\n        "),
                                            ('_dump',
                                             ['tag', 'x', 'lo', 'hi'],
                                             'Generate comparison results for a same-tagged range.'),
                                            ('_plain_replace',
                                             ['a', 'alo', 'ahi', 'b', 'blo', 'bhi'],
                                             ''),
                                            ('_fancy_replace',
                                             ['a', 'alo', 'ahi', 'b', 'blo', 'bhi'],
                                             "\n        When replacing one block of lines with another, search the blocks\n        for *similar* lines; the best-matching pair (if any) is used as a\n        synch point, and intraline difference marking is done on the\n        similar pair. Lots of work, but often worth it.\n\n        Example:\n\n        >>> d = Differ()\n        >>> results = d._fancy_replace(['abcDefghiJkl\\n'], 0, 1,\n        ...                            ['abcdefGhijkl\\n'], 0, 1)\n        >>> print ''.join(results),\n        - abcDefghiJkl\n        ?    ^  ^  ^\n        + abcdefGhijkl\n        ?    ^  ^  ^\n        "),
                                            ('_fancy_helper',
                                             ['a', 'alo', 'ahi', 'b', 'blo', 'bhi'],
                                             ''),
                                            ('_qformat',
                                             ['aline', 'bline', 'atags', 'btags'],
                                             '\n        Format "?" output and deal with leading tabs.\n\n        Example:\n\n        >>> d = Differ()\n        >>> results = d._qformat(\'\\tabcDefghiJkl\\n\', \'\\t\\tabcdefGhijkl\\n\',\n        ...                      \'  ^ ^  ^      \', \'+  ^ ^  ^      \')\n        >>> for line in results: print repr(line)\n        ...\n        \'- \\tabcDefghiJkl\\n\'\n        \'? \\t ^ ^  ^\\n\'\n        \'+ \\t\\tabcdefGhijkl\\n\'\n        \'? \\t  ^ ^  ^\\n\'\n        ')],
                                'properties': ['linejunk', 'charjunk']},
             'difflib.HtmlDiff': {'bases': ['object'],
                                  'constructor': ['tabsize=8',
                                                  'wrapcolumn=None',
                                                  'linejunk=None',
                                                  'charjunk=IS_CHARACTER_JUNK'],
                                  'docstring': 'For producing HTML side by side comparison with change highlights.\n\n    This class can be used to create an HTML table (or a complete HTML file\n    containing the table) showing a side by side, line by line comparison\n    of text with inter-line and intra-line change highlights.  The table can\n    be generated in either full or contextual difference mode.\n\n    The following methods are provided for HTML generation:\n\n    make_table -- generates HTML for a single side by side table\n    make_file -- generates complete HTML file with a single side by side table\n\n    See tools/scripts/diff.py for an example usage of this class.\n    ',
                                  'methods': [('make_file',
                                               ['fromlines',
                                                'tolines',
                                                "fromdesc=''",
                                                "todesc=''",
                                                'context=False',
                                                'numlines=5'],
                                               'Returns HTML file of side by side comparison with change highlights\n\n        Arguments:\n        fromlines -- list of "from" lines\n        tolines -- list of "to" lines\n        fromdesc -- "from" file column header string\n        todesc -- "to" file column header string\n        context -- set to True for contextual differences (defaults to False\n            which shows full differences).\n        numlines -- number of context lines.  When context is set True,\n            controls number of lines displayed before and after the change.\n            When context is False, controls the number of lines to place\n            the "next" link anchors before the next change (so click of\n            "next" link jumps to just before the change).\n        '),
                                              ('_tab_newline_replace',
                                               ['fromlines', 'tolines'],
                                               'Returns from/to line lists with tabs expanded and newlines removed.\n\n        Instead of tab characters being replaced by the number of spaces\n        needed to fill in to the next tab stop, this function will fill\n        the space with tab characters.  This is done so that the difference\n        algorithms can identify changes in a file when tabs are replaced by\n        spaces and vice versa.  At the end of the HTML generation, the tab\n        characters will be replaced with a nonbreakable space.\n        '),
                                              ('_split_line',
                                               ['data_list', 'line_num', 'text'],
                                               'Builds list of text lines by splitting text lines at wrap point\n\n        This function will determine if the input text line needs to be\n        wrapped (split) into separate lines.  If so, the first wrap point\n        will be determined and the first line appended to the output\n        text line list.  This function is used recursively to handle\n        the second part of the split line to further split it.\n        '),
                                              ('_line_wrapper',
                                               ['diffs'],
                                               'Returns iterator that splits (wraps) mdiff text lines'),
                                              ('_collect_lines',
                                               ['diffs'],
                                               'Collects mdiff output into separate lists\n\n        Before storing the mdiff from/to data into a list, it is converted\n        into a single line of text with HTML markup.\n        '),
                                              ('_format_line',
                                               ['side', 'flag', 'linenum', 'text'],
                                               'Returns HTML markup of "from" / "to" text lines\n\n        side -- 0 or 1 indicating "from" or "to" text\n        flag -- indicates if difference on line\n        linenum -- line number (used for line number column)\n        text -- line text to be marked up\n        '),
                                              ('_make_prefix',
                                               [],
                                               'Create unique anchor prefixes'),
                                              ('_convert_flags',
                                               ['fromlist',
                                                'tolist',
                                                'flaglist',
                                                'context',
                                                'numlines'],
                                               'Makes list of "next" links'),
                                              ('make_table',
                                               ['fromlines',
                                                'tolines',
                                                "fromdesc=''",
                                                "todesc=''",
                                                'context=False',
                                                'numlines=5'],
                                               'Returns HTML table of side by side comparison with change highlights\n\n        Arguments:\n        fromlines -- list of "from" lines\n        tolines -- list of "to" lines\n        fromdesc -- "from" file column header string\n        todesc -- "to" file column header string\n        context -- set to True for contextual differences (defaults to False\n            which shows full differences).\n        numlines -- number of context lines.  When context is set True,\n            controls number of lines displayed before and after the change.\n            When context is False, controls the number of lines to place\n            the "next" link anchors before the next change (so click of\n            "next" link jumps to just before the change).\n        ')],
                                  'properties': ['_file_template',
                                                 '_styles',
                                                 '_table_template',
                                                 '_legend',
                                                 '_default_prefix',
                                                 '_tabsize',
                                                 '_wrapcolumn',
                                                 '_linejunk',
                                                 '_charjunk',
                                                 '_prefix']},
             'difflib.SequenceMatcher': {'bases': [],
                                         'constructor': ['isjunk=None', "a=''", "b=''"],
                                         'docstring': '\n    SequenceMatcher is a flexible class for comparing pairs of sequences of\n    any type, so long as the sequence elements are hashable.  The basic\n    algorithm predates, and is a little fancier than, an algorithm\n    published in the late 1980\'s by Ratcliff and Obershelp under the\n    hyperbolic name "gestalt pattern matching".  The basic idea is to find\n    the longest contiguous matching subsequence that contains no "junk"\n    elements (R-O doesn\'t address junk).  The same idea is then applied\n    recursively to the pieces of the sequences to the left and to the right\n    of the matching subsequence.  This does not yield minimal edit\n    sequences, but does tend to yield matches that "look right" to people.\n\n    SequenceMatcher tries to compute a "human-friendly diff" between two\n    sequences.  Unlike e.g. UNIX(tm) diff, the fundamental notion is the\n    longest *contiguous* & junk-free matching subsequence.  That\'s what\n    catches peoples\' eyes.  The Windows(tm) windiff has another interesting\n    notion, pairing up elements that appear uniquely in each sequence.\n    That, and the method here, appear to yield more intuitive difference\n    reports than does diff.  This method appears to be the least vulnerable\n    to synching up on blocks of "junk lines", though (like blank lines in\n    ordinary text files, or maybe "<P>" lines in HTML files).  That may be\n    because this is the only method of the 3 that has a *concept* of\n    "junk" <wink>.\n\n    Example, comparing two strings, and considering blanks to be "junk":\n\n    >>> s = SequenceMatcher(lambda x: x == " ",\n    ...                     "private Thread currentThread;",\n    ...                     "private volatile Thread currentThread;")\n    >>>\n\n    .ratio() returns a float in [0, 1], measuring the "similarity" of the\n    sequences.  As a rule of thumb, a .ratio() value over 0.6 means the\n    sequences are close matches:\n\n    >>> print round(s.ratio(), 3)\n    0.866\n    >>>\n\n    If you\'re only interested in where the sequences match,\n    .get_matching_blocks() is handy:\n\n    >>> for block in s.get_matching_blocks():\n    ...     print "a[%d] and b[%d] match for %d elements" % block\n    a[0] and b[0] match for 8 elements\n    a[8] and b[17] match for 21 elements\n    a[29] and b[38] match for 0 elements\n\n    Note that the last tuple returned by .get_matching_blocks() is always a\n    dummy, (len(a), len(b), 0), and this is the only case in which the last\n    tuple element (number of elements matched) is 0.\n\n    If you want to know how to change the first sequence into the second,\n    use .get_opcodes():\n\n    >>> for opcode in s.get_opcodes():\n    ...     print "%6s a[%d:%d] b[%d:%d]" % opcode\n     equal a[0:8] b[0:8]\n    insert a[8:8] b[8:17]\n     equal a[8:29] b[17:38]\n\n    See the Differ class for a fancy human-friendly file differencer, which\n    uses SequenceMatcher both to compare sequences of lines, and to compare\n    sequences of characters within similar (near-matching) lines.\n\n    See also function get_close_matches() in this module, which shows how\n    simple code building on SequenceMatcher can be used to do useful work.\n\n    Timing:  Basic R-O is cubic time worst case and quadratic time expected\n    case.  SequenceMatcher is quadratic time for the worst case and has\n    expected-case behavior dependent in a complicated way on how many\n    elements the sequences have in common; best case time is linear.\n\n    Methods:\n\n    __init__(isjunk=None, a=\'\', b=\'\')\n        Construct a SequenceMatcher.\n\n    set_seqs(a, b)\n        Set the two sequences to be compared.\n\n    set_seq1(a)\n        Set the first sequence to be compared.\n\n    set_seq2(b)\n        Set the second sequence to be compared.\n\n    find_longest_match(alo, ahi, blo, bhi)\n        Find longest matching block in a[alo:ahi] and b[blo:bhi].\n\n    get_matching_blocks()\n        Return list of triples describing matching subsequences.\n\n    get_opcodes()\n        Return list of 5-tuples describing how to turn a into b.\n\n    ratio()\n        Return a measure of the sequences\' similarity (float in [0,1]).\n\n    quick_ratio()\n        Return an upper bound on .ratio() relatively quickly.\n\n    real_quick_ratio()\n        Return an upper bound on ratio() very quickly.\n    ',
                                         'methods': [('set_seqs',
                                                      ['a', 'b'],
                                                      'Set the two sequences to be compared.\n\n        >>> s = SequenceMatcher()\n        >>> s.set_seqs("abcd", "bcde")\n        >>> s.ratio()\n        0.75\n        '),
                                                     ('set_seq1',
                                                      ['a'],
                                                      'Set the first sequence to be compared.\n\n        The second sequence to be compared is not changed.\n\n        >>> s = SequenceMatcher(None, "abcd", "bcde")\n        >>> s.ratio()\n        0.75\n        >>> s.set_seq1("bcde")\n        >>> s.ratio()\n        1.0\n        >>>\n\n        SequenceMatcher computes and caches detailed information about the\n        second sequence, so if you want to compare one sequence S against\n        many sequences, use .set_seq2(S) once and call .set_seq1(x)\n        repeatedly for each of the other sequences.\n\n        See also set_seqs() and set_seq2().\n        '),
                                                     ('set_seq2',
                                                      ['b'],
                                                      'Set the second sequence to be compared.\n\n        The first sequence to be compared is not changed.\n\n        >>> s = SequenceMatcher(None, "abcd", "bcde")\n        >>> s.ratio()\n        0.75\n        >>> s.set_seq2("abcd")\n        >>> s.ratio()\n        1.0\n        >>>\n\n        SequenceMatcher computes and caches detailed information about the\n        second sequence, so if you want to compare one sequence S against\n        many sequences, use .set_seq2(S) once and call .set_seq1(x)\n        repeatedly for each of the other sequences.\n\n        See also set_seqs() and set_seq1().\n        '),
                                                     ('__chain_b', [], ''),
                                                     ('find_longest_match',
                                                      ['alo', 'ahi', 'blo', 'bhi'],
                                                      'Find longest matching block in a[alo:ahi] and b[blo:bhi].\n\n        If isjunk is not defined:\n\n        Return (i,j,k) such that a[i:i+k] is equal to b[j:j+k], where\n            alo <= i <= i+k <= ahi\n            blo <= j <= j+k <= bhi\n        and for all (i\',j\',k\') meeting those conditions,\n            k >= k\'\n            i <= i\'\n            and if i == i\', j <= j\'\n\n        In other words, of all maximal matching blocks, return one that\n        starts earliest in a, and of all those maximal matching blocks that\n        start earliest in a, return the one that starts earliest in b.\n\n        >>> s = SequenceMatcher(None, " abcd", "abcd abcd")\n        >>> s.find_longest_match(0, 5, 0, 9)\n        (0, 4, 5)\n\n        If isjunk is defined, first the longest matching block is\n        determined as above, but with the additional restriction that no\n        junk element appears in the block.  Then that block is extended as\n        far as possible by matching (only) junk elements on both sides.  So\n        the resulting block never matches on junk except as identical junk\n        happens to be adjacent to an "interesting" match.\n\n        Here\'s the same example as before, but considering blanks to be\n        junk.  That prevents " abcd" from matching the " abcd" at the tail\n        end of the second sequence directly.  Instead only the "abcd" can\n        match, and matches the leftmost "abcd" in the second sequence:\n\n        >>> s = SequenceMatcher(lambda x: x==" ", " abcd", "abcd abcd")\n        >>> s.find_longest_match(0, 5, 0, 9)\n        (1, 0, 4)\n\n        If no blocks match, return (alo, blo, 0).\n\n        >>> s = SequenceMatcher(None, "ab", "c")\n        >>> s.find_longest_match(0, 2, 0, 1)\n        (0, 0, 0)\n        '),
                                                     ('get_matching_blocks',
                                                      [],
                                                      'Return list of triples describing matching subsequences.\n\n        Each triple is of the form (i, j, n), and means that\n        a[i:i+n] == b[j:j+n].  The triples are monotonically increasing in\n        i and in j.  New in Python 2.5, it\'s also guaranteed that if\n        (i, j, n) and (i\', j\', n\') are adjacent triples in the list, and\n        the second is not the last triple in the list, then i+n != i\' or\n        j+n != j\'.  IOW, adjacent triples never describe adjacent equal\n        blocks.\n\n        The last triple is a dummy, (len(a), len(b), 0), and is the only\n        triple with n==0.\n\n        >>> s = SequenceMatcher(None, "abxcd", "abcd")\n        >>> s.get_matching_blocks()\n        [(0, 0, 2), (3, 2, 2), (5, 4, 0)]\n        '),
                                                     ('get_opcodes',
                                                      [],
                                                      'Return list of 5-tuples describing how to turn a into b.\n\n        Each tuple is of the form (tag, i1, i2, j1, j2).  The first tuple\n        has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the\n        tuple preceding it, and likewise for j1 == the previous j2.\n\n        The tags are strings, with these meanings:\n\n        \'replace\':  a[i1:i2] should be replaced by b[j1:j2]\n        \'delete\':   a[i1:i2] should be deleted.\n                    Note that j1==j2 in this case.\n        \'insert\':   b[j1:j2] should be inserted at a[i1:i1].\n                    Note that i1==i2 in this case.\n        \'equal\':    a[i1:i2] == b[j1:j2]\n\n        >>> a = "qabxcd"\n        >>> b = "abycdf"\n        >>> s = SequenceMatcher(None, a, b)\n        >>> for tag, i1, i2, j1, j2 in s.get_opcodes():\n        ...    print ("%7s a[%d:%d] (%s) b[%d:%d] (%s)" %\n        ...           (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2]))\n         delete a[0:1] (q) b[0:0] ()\n          equal a[1:3] (ab) b[0:2] (ab)\n        replace a[3:4] (x) b[2:3] (y)\n          equal a[4:6] (cd) b[3:5] (cd)\n         insert a[6:6] () b[5:6] (f)\n        '),
                                                     ('get_grouped_opcodes',
                                                      ['n=3'],
                                                      " Isolate change clusters by eliminating ranges with no changes.\n\n        Return a generator of groups with upto n lines of context.\n        Each group is in the same format as returned by get_opcodes().\n\n        >>> from pprint import pprint\n        >>> a = map(str, range(1,40))\n        >>> b = a[:]\n        >>> b[8:8] = ['i']     # Make an insertion\n        >>> b[20] += 'x'       # Make a replacement\n        >>> b[23:28] = []      # Make a deletion\n        >>> b[30] += 'y'       # Make another replacement\n        >>> pprint(list(SequenceMatcher(None,a,b).get_grouped_opcodes()))\n        [[('equal', 5, 8, 5, 8), ('insert', 8, 8, 8, 9), ('equal', 8, 11, 9, 12)],\n         [('equal', 16, 19, 17, 20),\n          ('replace', 19, 20, 20, 21),\n          ('equal', 20, 22, 21, 23),\n          ('delete', 22, 27, 23, 23),\n          ('equal', 27, 30, 23, 26)],\n         [('equal', 31, 34, 27, 30),\n          ('replace', 34, 35, 30, 31),\n          ('equal', 35, 38, 31, 34)]]\n        "),
                                                     ('ratio',
                                                      [],
                                                      'Return a measure of the sequences\' similarity (float in [0,1]).\n\n        Where T is the total number of elements in both sequences, and\n        M is the number of matches, this is 2.0*M / T.\n        Note that this is 1 if the sequences are identical, and 0 if\n        they have nothing in common.\n\n        .ratio() is expensive to compute if you haven\'t already computed\n        .get_matching_blocks() or .get_opcodes(), in which case you may\n        want to try .quick_ratio() or .real_quick_ratio() first to get an\n        upper bound.\n\n        >>> s = SequenceMatcher(None, "abcd", "bcde")\n        >>> s.ratio()\n        0.75\n        >>> s.quick_ratio()\n        0.75\n        >>> s.real_quick_ratio()\n        1.0\n        '),
                                                     ('quick_ratio',
                                                      [],
                                                      "Return an upper bound on ratio() relatively quickly.\n\n        This isn't defined beyond that it is an upper bound on .ratio(), and\n        is faster to compute.\n        "),
                                                     ('real_quick_ratio',
                                                      [],
                                                      "Return an upper bound on ratio() very quickly.\n\n        This isn't defined beyond that it is an upper bound on .ratio(), and\n        is faster to compute than either .ratio() or .quick_ratio().\n        ")],
                                         'properties': ['isjunk',
                                                        'a',
                                                        'b',
                                                        'matching_blocks',
                                                        'opcodes',
                                                        'fullbcount',
                                                        'b2j',
                                                        'isbjunk',
                                                        'isbpopular']},
             'distutils.bcppcompiler.BCPPCompiler': {'bases': ['distutils.ccompiler.CCompiler'],
                                                     'constructor': ['verbose=0',
                                                                     'dry_run=0',
                                                                     'force=0'],
                                                     'docstring': 'Concrete class that implements an interface to the Borland C/C++\n    compiler, as defined by the CCompiler abstract class.\n    ',
                                                     'methods': [('compile',
                                                                  ['sources',
                                                                   'output_dir=None',
                                                                   'macros=None',
                                                                   'include_dirs=None',
                                                                   'debug=0',
                                                                   'extra_preargs=None',
                                                                   'extra_postargs=None',
                                                                   'depends=None'],
                                                                  ''),
                                                                 ('create_static_lib',
                                                                  ['objects',
                                                                   'output_libname',
                                                                   'output_dir=None',
                                                                   'debug=0',
                                                                   'target_lang=None'],
                                                                  ''),
                                                                 ('link',
                                                                  ['target_desc',
                                                                   'objects',
                                                                   'output_filename',
                                                                   'output_dir=None',
                                                                   'libraries=None',
                                                                   'library_dirs=None',
                                                                   'runtime_library_dirs=None',
                                                                   'export_symbols=None',
                                                                   'debug=0',
                                                                   'extra_preargs=None',
                                                                   'extra_postargs=None',
                                                                   'build_temp=None',
                                                                   'target_lang=None'],
                                                                  ''),
                                                                 ('find_library_file',
                                                                  ['dirs', 'lib', 'debug=0'],
                                                                  ''),
                                                                 ('object_filenames',
                                                                  ['source_filenames',
                                                                   'strip_dir=0',
                                                                   "output_dir=''"],
                                                                  ''),
                                                                 ('preprocess',
                                                                  ['source',
                                                                   'output_file=None',
                                                                   'macros=None',
                                                                   'include_dirs=None',
                                                                   'extra_preargs=None',
                                                                   'extra_postargs=None'],
                                                                  '')],
                                                     'properties': ['compiler_type',
                                                                    'executables',
                                                                    '_c_extensions',
                                                                    '_cpp_extensions',
                                                                    'src_extensions',
                                                                    'obj_extension',
                                                                    'static_lib_extension',
                                                                    'shared_lib_extension',
                                                                    'static_lib_format',
                                                                    'shared_lib_format',
                                                                    'exe_extension',
                                                                    'cc',
                                                                    'linker',
                                                                    'lib',
                                                                    'preprocess_options',
                                                                    'compile_options',
                                                                    'compile_options_debug',
                                                                    'ldflags_shared',
                                                                    'ldflags_shared_debug',
                                                                    'ldflags_static',
                                                                    'ldflags_exe',
                                                                    'ldflags_exe_debug']},
             'distutils.ccompiler.CCompiler': {'bases': [],
                                               'constructor': ['verbose=0',
                                                               'dry_run=0',
                                                               'force=0'],
                                               'docstring': 'Abstract base class to define the interface that must be implemented\n    by real compiler classes.  Also has some utility methods used by\n    several compiler classes.\n\n    The basic idea behind a compiler abstraction class is that each\n    instance can be used for all the compile/link steps in building a\n    single project.  Thus, attributes common to all of those compile and\n    link steps -- include directories, macros to define, libraries to link\n    against, etc. -- are attributes of the compiler instance.  To allow for\n    variability in how individual files are treated, most of those\n    attributes may be varied on a per-compilation or per-link basis.\n    ',
                                               'methods': [('set_executables',
                                                            ['**args'],
                                                            "Define the executables (and options for them) that will be run\n        to perform the various stages of compilation.  The exact set of\n        executables that may be specified here depends on the compiler\n        class (via the 'executables' class attribute), but most will have:\n          compiler      the C/C++ compiler\n          linker_so     linker used to create shared objects and libraries\n          linker_exe    linker used to create binary executables\n          archiver      static library creator\n\n        On platforms with a command-line (Unix, DOS/Windows), each of these\n        is a string that will be split into executable name and (optional)\n        list of arguments.  (Splitting the string is done similarly to how\n        Unix shells operate: words are delimited by spaces, but quotes and\n        backslashes can override this.  See\n        'distutils.util.split_quoted()'.)\n        "),
                                                           ('set_executable',
                                                            ['key', 'value'],
                                                            ''),
                                                           ('_find_macro', ['name'], ''),
                                                           ('_check_macro_definitions',
                                                            ['definitions'],
                                                            "Ensures that every element of 'definitions' is a valid macro\n        definition, ie. either (name,value) 2-tuple or a (name,) tuple.  Do\n        nothing if all definitions are OK, raise TypeError otherwise.\n        "),
                                                           ('define_macro',
                                                            ['name', 'value=None'],
                                                            "Define a preprocessor macro for all compilations driven by this\n        compiler object.  The optional parameter 'value' should be a\n        string; if it is not supplied, then the macro will be defined\n        without an explicit value and the exact outcome depends on the\n        compiler used (XXX true? does ANSI say anything about this?)\n        "),
                                                           ('undefine_macro',
                                                            ['name'],
                                                            "Undefine a preprocessor macro for all compilations driven by\n        this compiler object.  If the same macro is defined by\n        'define_macro()' and undefined by 'undefine_macro()' the last call\n        takes precedence (including multiple redefinitions or\n        undefinitions).  If the macro is redefined/undefined on a\n        per-compilation basis (ie. in the call to 'compile()'), then that\n        takes precedence.\n        "),
                                                           ('add_include_dir',
                                                            ['dir'],
                                                            "Add 'dir' to the list of directories that will be searched for\n        header files.  The compiler is instructed to search directories in\n        the order in which they are supplied by successive calls to\n        'add_include_dir()'.\n        "),
                                                           ('set_include_dirs',
                                                            ['dirs'],
                                                            "Set the list of directories that will be searched to 'dirs' (a\n        list of strings).  Overrides any preceding calls to\n        'add_include_dir()'; subsequence calls to 'add_include_dir()' add\n        to the list passed to 'set_include_dirs()'.  This does not affect\n        any list of standard include directories that the compiler may\n        search by default.\n        "),
                                                           ('add_library',
                                                            ['libname'],
                                                            "Add 'libname' to the list of libraries that will be included in\n        all links driven by this compiler object.  Note that 'libname'\n        should *not* be the name of a file containing a library, but the\n        name of the library itself: the actual filename will be inferred by\n        the linker, the compiler, or the compiler class (depending on the\n        platform).\n\n        The linker will be instructed to link against libraries in the\n        order they were supplied to 'add_library()' and/or\n        'set_libraries()'.  It is perfectly valid to duplicate library\n        names; the linker will be instructed to link against libraries as\n        many times as they are mentioned.\n        "),
                                                           ('set_libraries',
                                                            ['libnames'],
                                                            "Set the list of libraries to be included in all links driven by\n        this compiler object to 'libnames' (a list of strings).  This does\n        not affect any standard system libraries that the linker may\n        include by default.\n        "),
                                                           ('add_library_dir',
                                                            ['dir'],
                                                            "Add 'dir' to the list of directories that will be searched for\n        libraries specified to 'add_library()' and 'set_libraries()'.  The\n        linker will be instructed to search for libraries in the order they\n        are supplied to 'add_library_dir()' and/or 'set_library_dirs()'.\n        "),
                                                           ('set_library_dirs',
                                                            ['dirs'],
                                                            "Set the list of library search directories to 'dirs' (a list of\n        strings).  This does not affect any standard library search path\n        that the linker may search by default.\n        "),
                                                           ('add_runtime_library_dir',
                                                            ['dir'],
                                                            "Add 'dir' to the list of directories that will be searched for\n        shared libraries at runtime.\n        "),
                                                           ('set_runtime_library_dirs',
                                                            ['dirs'],
                                                            "Set the list of directories to search for shared libraries at\n        runtime to 'dirs' (a list of strings).  This does not affect any\n        standard search path that the runtime linker may search by\n        default.\n        "),
                                                           ('add_link_object',
                                                            ['object'],
                                                            'Add \'object\' to the list of object files (or analogues, such as\n        explicitly named library files or the output of "resource\n        compilers") to be included in every link driven by this compiler\n        object.\n        '),
                                                           ('set_link_objects',
                                                            ['objects'],
                                                            "Set the list of object files (or analogues) to be included in\n        every link to 'objects'.  This does not affect any standard object\n        files that the linker may include by default (such as system\n        libraries).\n        "),
                                                           ('_setup_compile',
                                                            ['outdir',
                                                             'macros',
                                                             'incdirs',
                                                             'sources',
                                                             'depends',
                                                             'extra'],
                                                            'Process arguments and decide which source files to compile.\n\n        Merges _fix_compile_args() and _prep_compile().\n        '),
                                                           ('_get_cc_args',
                                                            ['pp_opts', 'debug', 'before'],
                                                            ''),
                                                           ('_fix_compile_args',
                                                            ['output_dir',
                                                             'macros',
                                                             'include_dirs'],
                                                            "Typecheck and fix-up some of the arguments to the 'compile()'\n        method, and return fixed-up values.  Specifically: if 'output_dir'\n        is None, replaces it with 'self.output_dir'; ensures that 'macros'\n        is a list, and augments it with 'self.macros'; ensures that\n        'include_dirs' is a list, and augments it with 'self.include_dirs'.\n        Guarantees that the returned values are of the correct type,\n        i.e. for 'output_dir' either string or None, and for 'macros' and\n        'include_dirs' either list or None.\n        "),
                                                           ('_prep_compile',
                                                            ['sources',
                                                             'output_dir',
                                                             'depends=None'],
                                                            "Decide which souce files must be recompiled.\n\n        Determine the list of object files corresponding to 'sources',\n        and figure out which ones really need to be recompiled.\n        Return a list of all object files and a dictionary telling\n        which source files can be skipped.\n        "),
                                                           ('_fix_object_args',
                                                            ['objects', 'output_dir'],
                                                            "Typecheck and fix up some arguments supplied to various methods.\n        Specifically: ensure that 'objects' is a list; if output_dir is\n        None, replace with self.output_dir.  Return fixed versions of\n        'objects' and 'output_dir'.\n        "),
                                                           ('_fix_lib_args',
                                                            ['libraries',
                                                             'library_dirs',
                                                             'runtime_library_dirs'],
                                                            "Typecheck and fix up some of the arguments supplied to the\n        'link_*' methods.  Specifically: ensure that all arguments are\n        lists, and augment them with their permanent versions\n        (eg. 'self.libraries' augments 'libraries').  Return a tuple with\n        fixed versions of all arguments.\n        "),
                                                           ('_need_link',
                                                            ['objects', 'output_file'],
                                                            "Return true if we need to relink the files listed in 'objects'\n        to recreate 'output_file'.\n        "),
                                                           ('detect_language',
                                                            ['sources'],
                                                            'Detect the language of a given file, or list of files. Uses\n        language_map, and language_order to do the job.\n        '),
                                                           ('preprocess',
                                                            ['source',
                                                             'output_file=None',
                                                             'macros=None',
                                                             'include_dirs=None',
                                                             'extra_preargs=None',
                                                             'extra_postargs=None'],
                                                            "Preprocess a single C/C++ source file, named in 'source'.\n        Output will be written to file named 'output_file', or stdout if\n        'output_file' not supplied.  'macros' is a list of macro\n        definitions as for 'compile()', which will augment the macros set\n        with 'define_macro()' and 'undefine_macro()'.  'include_dirs' is a\n        list of directory names that will be added to the default list.\n\n        Raises PreprocessError on failure.\n        "),
                                                           ('compile',
                                                            ['sources',
                                                             'output_dir=None',
                                                             'macros=None',
                                                             'include_dirs=None',
                                                             'debug=0',
                                                             'extra_preargs=None',
                                                             'extra_postargs=None',
                                                             'depends=None'],
                                                            'Compile one or more source files.\n\n        \'sources\' must be a list of filenames, most likely C/C++\n        files, but in reality anything that can be handled by a\n        particular compiler and compiler class (eg. MSVCCompiler can\n        handle resource files in \'sources\').  Return a list of object\n        filenames, one per source filename in \'sources\'.  Depending on\n        the implementation, not all source files will necessarily be\n        compiled, but all corresponding object filenames will be\n        returned.\n\n        If \'output_dir\' is given, object files will be put under it, while\n        retaining their original path component.  That is, "foo/bar.c"\n        normally compiles to "foo/bar.o" (for a Unix implementation); if\n        \'output_dir\' is "build", then it would compile to\n        "build/foo/bar.o".\n\n        \'macros\', if given, must be a list of macro definitions.  A macro\n        definition is either a (name, value) 2-tuple or a (name,) 1-tuple.\n        The former defines a macro; if the value is None, the macro is\n        defined without an explicit value.  The 1-tuple case undefines a\n        macro.  Later definitions/redefinitions/ undefinitions take\n        precedence.\n\n        \'include_dirs\', if given, must be a list of strings, the\n        directories to add to the default include file search path for this\n        compilation only.\n\n        \'debug\' is a boolean; if true, the compiler will be instructed to\n        output debug symbols in (or alongside) the object file(s).\n\n        \'extra_preargs\' and \'extra_postargs\' are implementation- dependent.\n        On platforms that have the notion of a command-line (e.g. Unix,\n        DOS/Windows), they are most likely lists of strings: extra\n        command-line arguments to prepand/append to the compiler command\n        line.  On other platforms, consult the implementation class\n        documentation.  In any event, they are intended as an escape hatch\n        for those occasions when the abstract compiler framework doesn\'t\n        cut the mustard.\n\n        \'depends\', if given, is a list of filenames that all targets\n        depend on.  If a source file is older than any file in\n        depends, then the source file will be recompiled.  This\n        supports dependency tracking, but only at a coarse\n        granularity.\n\n        Raises CompileError on failure.\n        '),
                                                           ('_compile',
                                                            ['obj',
                                                             'src',
                                                             'ext',
                                                             'cc_args',
                                                             'extra_postargs',
                                                             'pp_opts'],
                                                            "Compile 'src' to product 'obj'."),
                                                           ('create_static_lib',
                                                            ['objects',
                                                             'output_libname',
                                                             'output_dir=None',
                                                             'debug=0',
                                                             'target_lang=None'],
                                                            'Link a bunch of stuff together to create a static library file.\n        The "bunch of stuff" consists of the list of object files supplied\n        as \'objects\', the extra object files supplied to\n        \'add_link_object()\' and/or \'set_link_objects()\', the libraries\n        supplied to \'add_library()\' and/or \'set_libraries()\', and the\n        libraries supplied as \'libraries\' (if any).\n\n        \'output_libname\' should be a library name, not a filename; the\n        filename will be inferred from the library name.  \'output_dir\' is\n        the directory where the library file will be put.\n\n        \'debug\' is a boolean; if true, debugging information will be\n        included in the library (note that on most platforms, it is the\n        compile step where this matters: the \'debug\' flag is included here\n        just for consistency).\n\n        \'target_lang\' is the target language for which the given objects\n        are being compiled. This allows specific linkage time treatment of\n        certain languages.\n\n        Raises LibError on failure.\n        '),
                                                           ('link',
                                                            ['target_desc',
                                                             'objects',
                                                             'output_filename',
                                                             'output_dir=None',
                                                             'libraries=None',
                                                             'library_dirs=None',
                                                             'runtime_library_dirs=None',
                                                             'export_symbols=None',
                                                             'debug=0',
                                                             'extra_preargs=None',
                                                             'extra_postargs=None',
                                                             'build_temp=None',
                                                             'target_lang=None'],
                                                            'Link a bunch of stuff together to create an executable or\n        shared library file.\n\n        The "bunch of stuff" consists of the list of object files supplied\n        as \'objects\'.  \'output_filename\' should be a filename.  If\n        \'output_dir\' is supplied, \'output_filename\' is relative to it\n        (i.e. \'output_filename\' can provide directory components if\n        needed).\n\n        \'libraries\' is a list of libraries to link against.  These are\n        library names, not filenames, since they\'re translated into\n        filenames in a platform-specific way (eg. "foo" becomes "libfoo.a"\n        on Unix and "foo.lib" on DOS/Windows).  However, they can include a\n        directory component, which means the linker will look in that\n        specific directory rather than searching all the normal locations.\n\n        \'library_dirs\', if supplied, should be a list of directories to\n        search for libraries that were specified as bare library names\n        (ie. no directory component).  These are on top of the system\n        default and those supplied to \'add_library_dir()\' and/or\n        \'set_library_dirs()\'.  \'runtime_library_dirs\' is a list of\n        directories that will be embedded into the shared library and used\n        to search for other shared libraries that *it* depends on at\n        run-time.  (This may only be relevant on Unix.)\n\n        \'export_symbols\' is a list of symbols that the shared library will\n        export.  (This appears to be relevant only on Windows.)\n\n        \'debug\' is as for \'compile()\' and \'create_static_lib()\', with the\n        slight distinction that it actually matters on most platforms (as\n        opposed to \'create_static_lib()\', which includes a \'debug\' flag\n        mostly for form\'s sake).\n\n        \'extra_preargs\' and \'extra_postargs\' are as for \'compile()\' (except\n        of course that they supply command-line arguments for the\n        particular linker being used).\n\n        \'target_lang\' is the target language for which the given objects\n        are being compiled. This allows specific linkage time treatment of\n        certain languages.\n\n        Raises LinkError on failure.\n        '),
                                                           ('link_shared_lib',
                                                            ['objects',
                                                             'output_libname',
                                                             'output_dir=None',
                                                             'libraries=None',
                                                             'library_dirs=None',
                                                             'runtime_library_dirs=None',
                                                             'export_symbols=None',
                                                             'debug=0',
                                                             'extra_preargs=None',
                                                             'extra_postargs=None',
                                                             'build_temp=None',
                                                             'target_lang=None'],
                                                            ''),
                                                           ('link_shared_object',
                                                            ['objects',
                                                             'output_filename',
                                                             'output_dir=None',
                                                             'libraries=None',
                                                             'library_dirs=None',
                                                             'runtime_library_dirs=None',
                                                             'export_symbols=None',
                                                             'debug=0',
                                                             'extra_preargs=None',
                                                             'extra_postargs=None',
                                                             'build_temp=None',
                                                             'target_lang=None'],
                                                            ''),
                                                           ('link_executable',
                                                            ['objects',
                                                             'output_progname',
                                                             'output_dir=None',
                                                             'libraries=None',
                                                             'library_dirs=None',
                                                             'runtime_library_dirs=None',
                                                             'debug=0',
                                                             'extra_preargs=None',
                                                             'extra_postargs=None',
                                                             'target_lang=None'],
                                                            ''),
                                                           ('library_dir_option',
                                                            ['dir'],
                                                            "Return the compiler option to add 'dir' to the list of\n        directories searched for libraries.\n        "),
                                                           ('runtime_library_dir_option',
                                                            ['dir'],
                                                            "Return the compiler option to add 'dir' to the list of\n        directories searched for runtime libraries.\n        "),
                                                           ('library_option',
                                                            ['lib'],
                                                            "Return the compiler option to add 'dir' to the list of libraries\n        linked into the shared library or executable.\n        "),
                                                           ('has_function',
                                                            ['funcname',
                                                             'includes=None',
                                                             'include_dirs=None',
                                                             'libraries=None',
                                                             'library_dirs=None'],
                                                            'Return a boolean indicating whether funcname is supported on\n        the current platform.  The optional arguments can be used to\n        augment the compilation environment.\n        '),
                                                           ('find_library_file',
                                                            ['dirs', 'lib', 'debug=0'],
                                                            "Search the specified list of directories for a static or shared\n        library file 'lib' and return the full path to that file.  If\n        'debug' true, look for a debugging version (if that makes sense on\n        the current platform).  Return None if 'lib' wasn't found in any of\n        the specified directories.\n        "),
                                                           ('object_filenames',
                                                            ['source_filenames',
                                                             'strip_dir=0',
                                                             "output_dir=''"],
                                                            ''),
                                                           ('shared_object_filename',
                                                            ['basename',
                                                             'strip_dir=0',
                                                             "output_dir=''"],
                                                            ''),
                                                           ('executable_filename',
                                                            ['basename',
                                                             'strip_dir=0',
                                                             "output_dir=''"],
                                                            ''),
                                                           ('library_filename',
                                                            ['libname',
                                                             "lib_type='static'",
                                                             'strip_dir=0',
                                                             "output_dir=''"],
                                                            ''),
                                                           ('announce', ['msg', 'level=1'], ''),
                                                           ('debug_print', ['msg'], ''),
                                                           ('warn', ['msg'], ''),
                                                           ('execute',
                                                            ['func',
                                                             'args',
                                                             'msg=None',
                                                             'level=1'],
                                                            ''),
                                                           ('spawn', ['cmd'], ''),
                                                           ('move_file', ['src', 'dst'], ''),
                                                           ('mkpath', ['name', 'mode=511'], '')],
                                               'properties': ['compiler_type',
                                                              'src_extensions',
                                                              'obj_extension',
                                                              'static_lib_extension',
                                                              'shared_lib_extension',
                                                              'static_lib_format',
                                                              'shared_lib_format',
                                                              'exe_extension',
                                                              'language_map',
                                                              'language_order',
                                                              'dry_run',
                                                              'force',
                                                              'verbose',
                                                              'output_dir',
                                                              'macros',
                                                              'include_dirs',
                                                              'libraries',
                                                              'library_dirs',
                                                              'runtime_library_dirs',
                                                              'objects',
                                                              'SHARED_OBJECT',
                                                              'SHARED_LIBRARY',
                                                              'EXECUTABLE']},
             'distutils.cmd.Command': {'bases': [],
                                       'constructor': ['dist'],
                                       'docstring': 'Abstract base class for defining command classes, the "worker bees"\n    of the Distutils.  A useful analogy for command classes is to think of\n    them as subroutines with local variables called "options".  The options\n    are "declared" in \'initialize_options()\' and "defined" (given their\n    final values, aka "finalized") in \'finalize_options()\', both of which\n    must be defined by every command class.  The distinction between the\n    two is necessary because option values might come from the outside\n    world (command line, config file, ...), and any options dependent on\n    other options must be computed *after* these outside influences have\n    been processed -- hence \'finalize_options()\'.  The "body" of the\n    subroutine, where it does all its work based on the values of its\n    options, is the \'run()\' method, which must also be implemented by every\n    command class.\n    ',
                                       'methods': [('__getattr__', ['attr'], ''),
                                                   ('ensure_finalized', [], ''),
                                                   ('initialize_options',
                                                    [],
                                                    'Set default values for all the options that this command\n        supports.  Note that these defaults may be overridden by other\n        commands, by the setup script, by config files, or by the\n        command-line.  Thus, this is not the place to code dependencies\n        between options; generally, \'initialize_options()\' implementations\n        are just a bunch of "self.foo = None" assignments.\n\n        This method must be implemented by all command classes.\n        '),
                                                   ('finalize_options',
                                                    [],
                                                    "Set final values for all the options that this command supports.\n        This is always called as late as possible, ie.  after any option\n        assignments from the command-line or from other commands have been\n        done.  Thus, this is the place to code option dependencies: if\n        'foo' depends on 'bar', then it is safe to set 'foo' from 'bar' as\n        long as 'foo' still has the same value it was assigned in\n        'initialize_options()'.\n\n        This method must be implemented by all command classes.\n        "),
                                                   ('dump_options',
                                                    ['header=None', "indent=''"],
                                                    ''),
                                                   ('run',
                                                    [],
                                                    "A command's raison d'etre: carry out the action it exists to\n        perform, controlled by the options initialized in\n        'initialize_options()', customized by other commands, the setup\n        script, the command-line, and config files, and finalized in\n        'finalize_options()'.  All terminal output and filesystem\n        interaction should be done by 'run()'.\n\n        This method must be implemented by all command classes.\n        "),
                                                   ('announce',
                                                    ['msg', 'level=1'],
                                                    "If the current verbosity level is of greater than or equal to\n        'level' print 'msg' to stdout.\n        "),
                                                   ('debug_print',
                                                    ['msg'],
                                                    "Print 'msg' to stdout if the global DEBUG (taken from the\n        DISTUTILS_DEBUG environment variable) flag is true.\n        "),
                                                   ('_ensure_stringlike',
                                                    ['option', 'what', 'default=None'],
                                                    ''),
                                                   ('ensure_string',
                                                    ['option', 'default=None'],
                                                    "Ensure that 'option' is a string; if not defined, set it to\n        'default'.\n        "),
                                                   ('ensure_string_list',
                                                    ['option'],
                                                    'Ensure that \'option\' is a list of strings.  If \'option\' is\n        currently a string, we split it either on /,\\s*/ or /\\s+/, so\n        "foo bar baz", "foo,bar,baz", and "foo,   bar baz" all become\n        ["foo", "bar", "baz"].\n        '),
                                                   ('_ensure_tested_string',
                                                    ['option',
                                                     'tester',
                                                     'what',
                                                     'error_fmt',
                                                     'default=None'],
                                                    ''),
                                                   ('ensure_filename',
                                                    ['option'],
                                                    "Ensure that 'option' is the name of an existing file."),
                                                   ('ensure_dirname', ['option'], ''),
                                                   ('get_command_name', [], ''),
                                                   ('set_undefined_options',
                                                    ['src_cmd', '*option_pairs'],
                                                    'Set the values of any "undefined" options from corresponding\n        option values in some other command object.  "Undefined" here means\n        "is None", which is the convention used to indicate that an option\n        has not been changed between \'initialize_options()\' and\n        \'finalize_options()\'.  Usually called from \'finalize_options()\' for\n        options that depend on some other command rather than another\n        option of the same command.  \'src_cmd\' is the other command from\n        which option values will be taken (a command object will be created\n        for it if necessary); the remaining arguments are\n        \'(src_option,dst_option)\' tuples which mean "take the value of\n        \'src_option\' in the \'src_cmd\' command object, and copy it to\n        \'dst_option\' in the current command object".\n        '),
                                                   ('get_finalized_command',
                                                    ['command', 'create=1'],
                                                    "Wrapper around Distribution's 'get_command_obj()' method: find\n        (create if necessary and 'create' is true) the command object for\n        'command', call its 'ensure_finalized()' method, and return the\n        finalized command object.\n        "),
                                                   ('reinitialize_command',
                                                    ['command', 'reinit_subcommands=0'],
                                                    ''),
                                                   ('run_command',
                                                    ['command'],
                                                    "Run some other command: uses the 'run_command()' method of\n        Distribution, which creates and finalizes the command object if\n        necessary and then invokes its 'run()' method.\n        "),
                                                   ('get_sub_commands',
                                                    [],
                                                    "Determine the sub-commands that are relevant in the current\n        distribution (ie., that need to be run).  This is based on the\n        'sub_commands' class attribute: each tuple in that list may include\n        a method that we call to determine if the subcommand needs to be\n        run for the current distribution.  Return a list of command names.\n        "),
                                                   ('warn', ['msg'], ''),
                                                   ('execute',
                                                    ['func', 'args', 'msg=None', 'level=1'],
                                                    ''),
                                                   ('mkpath', ['name', 'mode=511'], ''),
                                                   ('copy_file',
                                                    ['infile',
                                                     'outfile',
                                                     'preserve_mode=1',
                                                     'preserve_times=1',
                                                     'link=None',
                                                     'level=1'],
                                                    "Copy a file respecting verbose, dry-run and force flags.  (The\n        former two default to whatever is in the Distribution object, and\n        the latter defaults to false for commands that don't define it.)"),
                                                   ('copy_tree',
                                                    ['infile',
                                                     'outfile',
                                                     'preserve_mode=1',
                                                     'preserve_times=1',
                                                     'preserve_symlinks=0',
                                                     'level=1'],
                                                    'Copy an entire directory tree respecting verbose, dry-run,\n        and force flags.\n        '),
                                                   ('move_file',
                                                    ['src', 'dst', 'level=1'],
                                                    'Move a file respectin dry-run flag.'),
                                                   ('spawn',
                                                    ['cmd', 'search_path=1', 'level=1'],
                                                    'Spawn an external command respecting dry-run flag.'),
                                                   ('make_archive',
                                                    ['base_name',
                                                     'format',
                                                     'root_dir=None',
                                                     'base_dir=None'],
                                                    ''),
                                                   ('make_file',
                                                    ['infiles',
                                                     'outfile',
                                                     'func',
                                                     'args',
                                                     'exec_msg=None',
                                                     'skip_msg=None',
                                                     'level=1'],
                                                    "Special case of 'execute()' for operations that process one or\n        more input files and generate one output file.  Works just like\n        'execute()', except the operation is skipped and a different\n        message printed if 'outfile' already exists and is newer than all\n        files listed in 'infiles'.  If the command defined 'self.force',\n        and it is true, then the command is unconditionally run -- does no\n        timestamp checks.\n        ")],
                                       'properties': ['sub_commands',
                                                      'distribution',
                                                      '_dry_run',
                                                      'verbose',
                                                      'force',
                                                      'help',
                                                      'finalized']},
             'distutils.cmd.install_misc': {'bases': ['distutils.cmd.Command'],
                                            'constructor': [],
                                            'docstring': 'Common base class for installing some files in a subdirectory.\n    Currently used by install_data and install_scripts.\n    ',
                                            'methods': [('initialize_options', [], ''),
                                                        ('_install_dir_from', ['dirname'], ''),
                                                        ('_copy_files', ['filelist'], ''),
                                                        ('get_outputs', [], '')],
                                            'properties': ['user_options',
                                                           'install_dir',
                                                           'outfiles']},
             'distutils.command.bdist.bdist': {'bases': ['distutils.core.Command'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('initialize_options', [], ''),
                                                           ('finalize_options', [], ''),
                                                           ('run', [], '')],
                                               'properties': ['description',
                                                              'user_options',
                                                              'boolean_options',
                                                              'help_options',
                                                              'no_format_option',
                                                              'default_format',
                                                              'format_commands',
                                                              'format_command',
                                                              'bdist_base',
                                                              'plat_name',
                                                              'formats',
                                                              'dist_dir',
                                                              'skip_build']},
             'distutils.command.bdist_dumb.bdist_dumb': {'bases': ['distutils.core.Command'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('initialize_options',
                                                                      [],
                                                                      ''),
                                                                     ('finalize_options',
                                                                      [],
                                                                      ''),
                                                                     ('run', [], '')],
                                                         'properties': ['description',
                                                                        'user_options',
                                                                        'boolean_options',
                                                                        'default_format',
                                                                        'bdist_dir',
                                                                        'plat_name',
                                                                        'format',
                                                                        'keep_temp',
                                                                        'dist_dir',
                                                                        'skip_build',
                                                                        'relative']},
             'distutils.command.bdist_msi.PyDialog': {'bases': ['msilib.Dialog'],
                                                      'constructor': ['*args', '**kw'],
                                                      'docstring': 'Dialog class with a fixed layout: controls at the top, then a ruler,\n    then a list of buttons: back, next, cancel. Optionally a bitmap at the\n    left.',
                                                      'methods': [('title',
                                                                   ['title'],
                                                                   'Set the title text of the dialog at the top.'),
                                                                  ('back',
                                                                   ['title',
                                                                    'next',
                                                                    "name='Back'",
                                                                    'active=1'],
                                                                   'Add a back button with a given title, the tab-next button,\n        its name in the Control table, possibly initially disabled.\n\n        Return the button, so that events can be associated'),
                                                                  ('cancel',
                                                                   ['title',
                                                                    'next',
                                                                    "name='Cancel'",
                                                                    'active=1'],
                                                                   'Add a cancel button with a given title, the tab-next button,\n        its name in the Control table, possibly initially disabled.\n\n        Return the button, so that events can be associated'),
                                                                  ('next',
                                                                   ['title',
                                                                    'next',
                                                                    "name='Next'",
                                                                    'active=1'],
                                                                   'Add a Next button with a given title, the tab-next button,\n        its name in the Control table, possibly initially disabled.\n\n        Return the button, so that events can be associated'),
                                                                  ('xbutton',
                                                                   ['name',
                                                                    'title',
                                                                    'next',
                                                                    'xpos'],
                                                                   'Add a button with a given title, the tab-next button,\n        its name in the Control table, giving its x position; the\n        y-position is aligned with the other buttons.\n\n        Return the button, so that events can be associated')],
                                                      'properties': []},
             'distutils.command.bdist_msi.bdist_msi': {'bases': ['distutils.core.Command'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('initialize_options',
                                                                    [],
                                                                    ''),
                                                                   ('finalize_options', [], ''),
                                                                   ('run', [], ''),
                                                                   ('add_files', [], ''),
                                                                   ('add_find_python',
                                                                    [],
                                                                    'Adds code to the installer to compute the location of Python.\n        Properties PYTHON.MACHINE, PYTHON.USER, PYTHONDIR and PYTHON will be set\n        in both the execute and UI sequences; PYTHONDIR will be set from\n        PYTHON.USER if defined, else from PYTHON.MACHINE.\n        PYTHON is PYTHONDIR\\python.exe'),
                                                                   ('add_scripts', [], ''),
                                                                   ('add_ui', [], ''),
                                                                   ('get_installer_filename',
                                                                    ['fullname'],
                                                                    '')],
                                                       'properties': ['description',
                                                                      'user_options',
                                                                      'boolean_options',
                                                                      'bdist_dir',
                                                                      'keep_temp',
                                                                      'no_target_compile',
                                                                      'no_target_optimize',
                                                                      'target_version',
                                                                      'dist_dir',
                                                                      'skip_build',
                                                                      'install_script',
                                                                      'pre_install_script',
                                                                      'install_script_key',
                                                                      'db']},
             'distutils.command.bdist_rpm.bdist_rpm': {'bases': ['distutils.core.Command'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('initialize_options',
                                                                    [],
                                                                    ''),
                                                                   ('finalize_options', [], ''),
                                                                   ('finalize_package_data',
                                                                    [],
                                                                    ''),
                                                                   ('run', [], ''),
                                                                   ('_dist_path', ['path'], ''),
                                                                   ('_make_spec_file',
                                                                    [],
                                                                    'Generate the text of an RPM spec file and return it as a\n        list of strings (one per line).\n        '),
                                                                   ('_format_changelog',
                                                                    ['changelog'],
                                                                    'Format the changelog correctly and convert it to a list of strings\n        ')],
                                                       'properties': ['description',
                                                                      'user_options',
                                                                      'boolean_options',
                                                                      'negative_opt',
                                                                      'bdist_base',
                                                                      'rpm_base',
                                                                      'dist_dir',
                                                                      'python',
                                                                      'fix_python',
                                                                      'spec_only',
                                                                      'binary_only',
                                                                      'source_only',
                                                                      'use_bzip2',
                                                                      'distribution_name',
                                                                      'group',
                                                                      'release',
                                                                      'serial',
                                                                      'vendor',
                                                                      'packager',
                                                                      'doc_files',
                                                                      'changelog',
                                                                      'icon',
                                                                      'prep_script',
                                                                      'build_script',
                                                                      'install_script',
                                                                      'clean_script',
                                                                      'verify_script',
                                                                      'pre_install',
                                                                      'post_install',
                                                                      'pre_uninstall',
                                                                      'post_uninstall',
                                                                      'prep',
                                                                      'provides',
                                                                      'requires',
                                                                      'conflicts',
                                                                      'build_requires',
                                                                      'obsoletes',
                                                                      'keep_temp',
                                                                      'use_rpm_opt_flags',
                                                                      'rpm3_mode',
                                                                      'no_autoreq',
                                                                      'force_arch']},
             'distutils.command.bdist_wininst.bdist_wininst': {'bases': ['distutils.core.Command'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('initialize_options',
                                                                            [],
                                                                            ''),
                                                                           ('finalize_options',
                                                                            [],
                                                                            ''),
                                                                           ('run', [], ''),
                                                                           ('get_inidata',
                                                                            [],
                                                                            ''),
                                                                           ('create_exe',
                                                                            ['arcname',
                                                                             'fullname',
                                                                             'bitmap=None'],
                                                                            ''),
                                                                           ('get_installer_filename',
                                                                            ['fullname'],
                                                                            ''),
                                                                           ('get_exe_bytes',
                                                                            [],
                                                                            '')],
                                                               'properties': ['description',
                                                                              'user_options',
                                                                              'boolean_options',
                                                                              'bdist_dir',
                                                                              'keep_temp',
                                                                              'no_target_compile',
                                                                              'no_target_optimize',
                                                                              'target_version',
                                                                              'dist_dir',
                                                                              'bitmap',
                                                                              'title',
                                                                              'skip_build',
                                                                              'install_script',
                                                                              'pre_install_script']},
             'distutils.command.build.build': {'bases': ['distutils.core.Command'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('initialize_options', [], ''),
                                                           ('finalize_options', [], ''),
                                                           ('run', [], ''),
                                                           ('has_pure_modules', [], ''),
                                                           ('has_c_libraries', [], ''),
                                                           ('has_ext_modules', [], ''),
                                                           ('has_scripts', [], '')],
                                               'properties': ['description',
                                                              'user_options',
                                                              'boolean_options',
                                                              'help_options',
                                                              'build_base',
                                                              'build_purelib',
                                                              'build_platlib',
                                                              'build_lib',
                                                              'build_temp',
                                                              'build_scripts',
                                                              'compiler',
                                                              'debug',
                                                              'force',
                                                              'executable',
                                                              'sub_commands']},
             'distutils.command.build_clib.build_clib': {'bases': ['distutils.core.Command'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('initialize_options',
                                                                      [],
                                                                      ''),
                                                                     ('finalize_options',
                                                                      [],
                                                                      ''),
                                                                     ('run', [], ''),
                                                                     ('check_library_list',
                                                                      ['libraries'],
                                                                      "Ensure that the list of libraries (presumably provided as a\n           command option 'libraries') is valid, i.e. it is a list of\n           2-tuples, where the tuples are (library_name, build_info_dict).\n           Raise DistutilsSetupError if the structure is invalid anywhere;\n           just returns otherwise."),
                                                                     ('get_library_names',
                                                                      [],
                                                                      ''),
                                                                     ('get_source_files',
                                                                      [],
                                                                      ''),
                                                                     ('build_libraries',
                                                                      ['libraries'],
                                                                      '')],
                                                         'properties': ['description',
                                                                        'user_options',
                                                                        'boolean_options',
                                                                        'help_options',
                                                                        'build_clib',
                                                                        'build_temp',
                                                                        'libraries',
                                                                        'include_dirs',
                                                                        'define',
                                                                        'undef',
                                                                        'debug',
                                                                        'force',
                                                                        'compiler']},
             'distutils.command.build_ext.build_ext': {'bases': ['distutils.core.Command'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('initialize_options',
                                                                    [],
                                                                    ''),
                                                                   ('finalize_options', [], ''),
                                                                   ('run', [], ''),
                                                                   ('check_extensions_list',
                                                                    ['extensions'],
                                                                    "Ensure that the list of extensions (presumably provided as a\n        command option 'extensions') is valid, i.e. it is a list of\n        Extension objects.  We also support the old-style list of 2-tuples,\n        where the tuples are (ext_name, build_info), which are converted to\n        Extension instances here.\n\n        Raise DistutilsSetupError if the structure is invalid anywhere;\n        just returns otherwise.\n        "),
                                                                   ('get_source_files', [], ''),
                                                                   ('get_outputs', [], ''),
                                                                   ('build_extensions', [], ''),
                                                                   ('build_extension',
                                                                    ['ext'],
                                                                    ''),
                                                                   ('swig_sources',
                                                                    ['sources', 'extension'],
                                                                    "Walk the list of source files in 'sources', looking for SWIG\n        interface (.i) files.  Run SWIG on all that are found, and\n        return a modified 'sources' list with SWIG source files replaced\n        by the generated C (or C++) files.\n        "),
                                                                   ('find_swig',
                                                                    [],
                                                                    'Return the name of the SWIG executable.  On Unix, this is\n        just "swig" -- it should be in the PATH.  Tries a bit harder on\n        Windows.\n        '),
                                                                   ('get_ext_fullname',
                                                                    ['ext_name'],
                                                                    ''),
                                                                   ('get_ext_filename',
                                                                    ['ext_name'],
                                                                    'Convert the name of an extension (eg. "foo.bar") into the name\n        of the file from which it will be loaded (eg. "foo/bar.so", or\n        "foo\\bar.pyd").\n        '),
                                                                   ('get_export_symbols',
                                                                    ['ext'],
                                                                    'Return the list of symbols that a shared extension has to\n        export.  This either uses \'ext.export_symbols\' or, if it\'s not\n        provided, "init" + module_name.  Only relevant on Windows, where\n        the .pyd file (DLL) must export the module "init" function.\n        '),
                                                                   ('get_libraries',
                                                                    ['ext'],
                                                                    "Return the list of libraries to link against when building a\n        shared extension.  On most platforms, this is just 'ext.libraries';\n        on Windows and OS/2, we add the Python library (eg. python20.dll).\n        ")],
                                                       'properties': ['description',
                                                                      'sep_by',
                                                                      'user_options',
                                                                      'boolean_options',
                                                                      'help_options',
                                                                      'extensions',
                                                                      'build_lib',
                                                                      'build_temp',
                                                                      'inplace',
                                                                      'package',
                                                                      'include_dirs',
                                                                      'define',
                                                                      'undef',
                                                                      'libraries',
                                                                      'library_dirs',
                                                                      'rpath',
                                                                      'link_objects',
                                                                      'debug',
                                                                      'force',
                                                                      'compiler',
                                                                      'swig',
                                                                      'swig_cpp',
                                                                      'swig_opts',
                                                                      '_built_objects']},
             'distutils.command.build_py.build_py': {'bases': ['distutils.core.Command'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('initialize_options', [], ''),
                                                                 ('finalize_options', [], ''),
                                                                 ('run', [], ''),
                                                                 ('get_data_files',
                                                                  [],
                                                                  "Generate list of '(package,src_dir,build_dir,filenames)' tuples"),
                                                                 ('find_data_files',
                                                                  ['package', 'src_dir'],
                                                                  "Return filenames for package's data files in 'src_dir'"),
                                                                 ('build_package_data',
                                                                  [],
                                                                  'Copy data files into build directory'),
                                                                 ('get_package_dir',
                                                                  ['package'],
                                                                  "Return the directory, relative to the top of the source\n           distribution, where package 'package' should be found\n           (at least according to the 'package_dir' option, if any)."),
                                                                 ('check_package',
                                                                  ['package', 'package_dir'],
                                                                  ''),
                                                                 ('check_module',
                                                                  ['module', 'module_file'],
                                                                  ''),
                                                                 ('find_package_modules',
                                                                  ['package', 'package_dir'],
                                                                  ''),
                                                                 ('find_modules',
                                                                  [],
                                                                  'Finds individually-specified Python modules, ie. those listed by\n        module name in \'self.py_modules\'.  Returns a list of tuples (package,\n        module_base, filename): \'package\' is a tuple of the path through\n        package-space to the module; \'module_base\' is the bare (no\n        packages, no dots) module name, and \'filename\' is the path to the\n        ".py" file (relative to the distribution root) that implements the\n        module.\n        '),
                                                                 ('find_all_modules',
                                                                  [],
                                                                  "Compute the list of all modules that will be built, whether\n        they are specified one-module-at-a-time ('self.py_modules') or\n        by whole packages ('self.packages').  Return a list of tuples\n        (package, module, module_file), just like 'find_modules()' and\n        'find_package_modules()' do."),
                                                                 ('get_source_files', [], ''),
                                                                 ('get_module_outfile',
                                                                  ['build_dir',
                                                                   'package',
                                                                   'module'],
                                                                  ''),
                                                                 ('get_outputs',
                                                                  ['include_bytecode=1'],
                                                                  ''),
                                                                 ('build_module',
                                                                  ['module',
                                                                   'module_file',
                                                                   'package'],
                                                                  ''),
                                                                 ('build_modules', [], ''),
                                                                 ('build_packages', [], ''),
                                                                 ('byte_compile',
                                                                  ['files'],
                                                                  '')],
                                                     'properties': ['description',
                                                                    'user_options',
                                                                    'boolean_options',
                                                                    'negative_opt',
                                                                    'build_lib',
                                                                    'py_modules',
                                                                    'package',
                                                                    'package_data',
                                                                    'package_dir',
                                                                    'compile',
                                                                    'optimize',
                                                                    'force',
                                                                    'packages',
                                                                    'data_files']},
             'distutils.command.build_scripts.build_scripts': {'bases': ['distutils.core.Command'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('initialize_options',
                                                                            [],
                                                                            ''),
                                                                           ('finalize_options',
                                                                            [],
                                                                            ''),
                                                                           ('get_source_files',
                                                                            [],
                                                                            ''),
                                                                           ('run', [], ''),
                                                                           ('copy_scripts',
                                                                            [],
                                                                            'Copy each script listed in \'self.scripts\'; if it\'s marked as a\n        Python script in the Unix way (first line matches \'first_line_re\',\n        ie. starts with "\\#!" and contains "python"), then adjust the first\n        line to refer to the current Python interpreter as we copy.\n        ')],
                                                               'properties': ['description',
                                                                              'user_options',
                                                                              'boolean_options',
                                                                              'build_dir',
                                                                              'scripts',
                                                                              'force',
                                                                              'executable',
                                                                              'outfiles']},
             'distutils.command.clean.clean': {'bases': ['distutils.core.Command'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('initialize_options', [], ''),
                                                           ('finalize_options', [], ''),
                                                           ('run', [], '')],
                                               'properties': ['description',
                                                              'user_options',
                                                              'boolean_options',
                                                              'build_base',
                                                              'build_lib',
                                                              'build_temp',
                                                              'build_scripts',
                                                              'bdist_base',
                                                              'all']},
             'distutils.command.config.config': {'bases': ['distutils.core.Command'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('initialize_options', [], ''),
                                                             ('finalize_options', [], ''),
                                                             ('run', [], ''),
                                                             ('_check_compiler',
                                                              [],
                                                              "Check that 'self.compiler' really is a CCompiler object;\n        if not, make it one.\n        "),
                                                             ('_gen_temp_sourcefile',
                                                              ['body', 'headers', 'lang'],
                                                              ''),
                                                             ('_preprocess',
                                                              ['body',
                                                               'headers',
                                                               'include_dirs',
                                                               'lang'],
                                                              ''),
                                                             ('_compile',
                                                              ['body',
                                                               'headers',
                                                               'include_dirs',
                                                               'lang'],
                                                              ''),
                                                             ('_link',
                                                              ['body',
                                                               'headers',
                                                               'include_dirs',
                                                               'libraries',
                                                               'library_dirs',
                                                               'lang'],
                                                              ''),
                                                             ('_clean', ['*filenames'], ''),
                                                             ('try_cpp',
                                                              ['body=None',
                                                               'headers=None',
                                                               'include_dirs=None',
                                                               "lang='c'"],
                                                              "Construct a source file from 'body' (a string containing lines\n        of C/C++ code) and 'headers' (a list of header files to include)\n        and run it through the preprocessor.  Return true if the\n        preprocessor succeeded, false if there were any errors.\n        ('body' probably isn't of much use, but what the heck.)\n        "),
                                                             ('search_cpp',
                                                              ['pattern',
                                                               'body=None',
                                                               'headers=None',
                                                               'include_dirs=None',
                                                               "lang='c'"],
                                                              "Construct a source file (just like 'try_cpp()'), run it through\n        the preprocessor, and return true if any line of the output matches\n        'pattern'.  'pattern' should either be a compiled regex object or a\n        string containing a regex.  If both 'body' and 'headers' are None,\n        preprocesses an empty file -- which can be useful to determine the\n        symbols the preprocessor and compiler set by default.\n        "),
                                                             ('try_compile',
                                                              ['body',
                                                               'headers=None',
                                                               'include_dirs=None',
                                                               "lang='c'"],
                                                              "Try to compile a source file built from 'body' and 'headers'.\n        Return true on success, false otherwise.\n        "),
                                                             ('try_link',
                                                              ['body',
                                                               'headers=None',
                                                               'include_dirs=None',
                                                               'libraries=None',
                                                               'library_dirs=None',
                                                               "lang='c'"],
                                                              "Try to compile and link a source file, built from 'body' and\n        'headers', to executable form.  Return true on success, false\n        otherwise.\n        "),
                                                             ('try_run',
                                                              ['body',
                                                               'headers=None',
                                                               'include_dirs=None',
                                                               'libraries=None',
                                                               'library_dirs=None',
                                                               "lang='c'"],
                                                              "Try to compile, link to an executable, and run a program\n        built from 'body' and 'headers'.  Return true on success, false\n        otherwise.\n        "),
                                                             ('check_func',
                                                              ['func',
                                                               'headers=None',
                                                               'include_dirs=None',
                                                               'libraries=None',
                                                               'library_dirs=None',
                                                               'decl=0',
                                                               'call=0'],
                                                              'Determine if function \'func\' is available by constructing a\n        source file that refers to \'func\', and compiles and links it.\n        If everything succeeds, returns true; otherwise returns false.\n\n        The constructed source file starts out by including the header\n        files listed in \'headers\'.  If \'decl\' is true, it then declares\n        \'func\' (as "int func()"); you probably shouldn\'t supply \'headers\'\n        and set \'decl\' true in the same call, or you might get errors about\n        a conflicting declarations for \'func\'.  Finally, the constructed\n        \'main()\' function either references \'func\' or (if \'call\' is true)\n        calls it.  \'libraries\' and \'library_dirs\' are used when\n        linking.\n        '),
                                                             ('check_lib',
                                                              ['library',
                                                               'library_dirs=None',
                                                               'headers=None',
                                                               'include_dirs=None',
                                                               'other_libraries=[]'],
                                                              "Determine if 'library' is available to be linked against,\n        without actually checking that any particular symbols are provided\n        by it.  'headers' will be used in constructing the source file to\n        be compiled, but the only effect of this is to check if all the\n        header files listed are available.  Any libraries listed in\n        'other_libraries' will be included in the link, in case 'library'\n        has symbols that depend on other libraries.\n        "),
                                                             ('check_header',
                                                              ['header',
                                                               'include_dirs=None',
                                                               'library_dirs=None',
                                                               "lang='c'"],
                                                              "Determine if the system header file named by 'header_file'\n        exists and can be found by the preprocessor; return true if so,\n        false otherwise.\n        ")],
                                                 'properties': ['description',
                                                                'user_options',
                                                                'compiler',
                                                                'cc',
                                                                'include_dirs',
                                                                'libraries',
                                                                'library_dirs',
                                                                'noisy',
                                                                'dump_source',
                                                                'temp_files']},
             'distutils.command.install.install': {'bases': ['distutils.core.Command'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('initialize_options', [], ''),
                                                               ('finalize_options', [], ''),
                                                               ('dump_dirs', ['msg'], ''),
                                                               ('finalize_unix', [], ''),
                                                               ('finalize_other', [], ''),
                                                               ('select_scheme', ['name'], ''),
                                                               ('_expand_attrs', ['attrs'], ''),
                                                               ('expand_basedirs', [], ''),
                                                               ('expand_dirs', [], ''),
                                                               ('convert_paths',
                                                                ['*names'],
                                                                ''),
                                                               ('handle_extra_path', [], ''),
                                                               ('change_roots', ['*names'], ''),
                                                               ('run', [], ''),
                                                               ('create_path_file', [], ''),
                                                               ('get_outputs', [], ''),
                                                               ('get_inputs', [], ''),
                                                               ('has_lib',
                                                                [],
                                                                'Return true if the current distribution has any Python\n        modules to install.'),
                                                               ('has_headers', [], ''),
                                                               ('has_scripts', [], ''),
                                                               ('has_data', [], '')],
                                                   'properties': ['description',
                                                                  'user_options',
                                                                  'boolean_options',
                                                                  'negative_opt',
                                                                  'prefix',
                                                                  'exec_prefix',
                                                                  'home',
                                                                  'install_base',
                                                                  'install_platbase',
                                                                  'root',
                                                                  'install_purelib',
                                                                  'install_platlib',
                                                                  'install_headers',
                                                                  'install_lib',
                                                                  'install_scripts',
                                                                  'install_data',
                                                                  'compile',
                                                                  'optimize',
                                                                  'extra_path',
                                                                  'install_path_file',
                                                                  'force',
                                                                  'skip_build',
                                                                  'warn_dir',
                                                                  'build_base',
                                                                  'build_lib',
                                                                  'record',
                                                                  'config_vars',
                                                                  'install_libbase',
                                                                  'path_file',
                                                                  'extra_dirs',
                                                                  'sub_commands']},
             'distutils.command.install_data.install_data': {'bases': ['distutils.core.Command'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('initialize_options',
                                                                          [],
                                                                          ''),
                                                                         ('finalize_options',
                                                                          [],
                                                                          ''),
                                                                         ('run', [], ''),
                                                                         ('get_inputs', [], ''),
                                                                         ('get_outputs',
                                                                          [],
                                                                          '')],
                                                             'properties': ['description',
                                                                            'user_options',
                                                                            'boolean_options',
                                                                            'install_dir',
                                                                            'outfiles',
                                                                            'root',
                                                                            'force',
                                                                            'data_files',
                                                                            'warn_dir']},
             'distutils.command.install_egg_info.install_egg_info': {'bases': ['distutils.cmd.Command'],
                                                                     'constructor': [],
                                                                     'docstring': 'Install an .egg-info file for the package',
                                                                     'methods': [('initialize_options',
                                                                                  [],
                                                                                  ''),
                                                                                 ('finalize_options',
                                                                                  [],
                                                                                  ''),
                                                                                 ('run',
                                                                                  [],
                                                                                  ''),
                                                                                 ('get_outputs',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': ['description',
                                                                                    'user_options',
                                                                                    'install_dir',
                                                                                    'target',
                                                                                    'outputs']},
             'distutils.command.install_headers.install_headers': {'bases': ['distutils.core.Command'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('initialize_options',
                                                                                [],
                                                                                ''),
                                                                               ('finalize_options',
                                                                                [],
                                                                                ''),
                                                                               ('run', [], ''),
                                                                               ('get_inputs',
                                                                                [],
                                                                                ''),
                                                                               ('get_outputs',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['description',
                                                                                  'user_options',
                                                                                  'boolean_options',
                                                                                  'install_dir',
                                                                                  'force',
                                                                                  'outfiles']},
             'distutils.command.install_lib.install_lib': {'bases': ['distutils.core.Command'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('initialize_options',
                                                                        [],
                                                                        ''),
                                                                       ('finalize_options',
                                                                        [],
                                                                        ''),
                                                                       ('run', [], ''),
                                                                       ('build', [], ''),
                                                                       ('install', [], ''),
                                                                       ('byte_compile',
                                                                        ['files'],
                                                                        ''),
                                                                       ('_mutate_outputs',
                                                                        ['has_any',
                                                                         'build_cmd',
                                                                         'cmd_option',
                                                                         'output_dir'],
                                                                        ''),
                                                                       ('_bytecode_filenames',
                                                                        ['py_filenames'],
                                                                        ''),
                                                                       ('get_outputs',
                                                                        [],
                                                                        'Return the list of files that would be installed if this command\n        were actually run.  Not affected by the "dry-run" flag or whether\n        modules have actually been built yet.\n        '),
                                                                       ('get_inputs',
                                                                        [],
                                                                        "Get the list of files that are input to this command, ie. the\n        files that get installed as they are named in the build tree.\n        The files in this list correspond one-to-one to the output\n        filenames returned by 'get_outputs()'.\n        ")],
                                                           'properties': ['description',
                                                                          'user_options',
                                                                          'boolean_options',
                                                                          'negative_opt',
                                                                          'install_dir',
                                                                          'build_dir',
                                                                          'force',
                                                                          'compile',
                                                                          'optimize',
                                                                          'skip_build']},
             'distutils.command.install_scripts.install_scripts': {'bases': ['distutils.core.Command'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('initialize_options',
                                                                                [],
                                                                                ''),
                                                                               ('finalize_options',
                                                                                [],
                                                                                ''),
                                                                               ('run', [], ''),
                                                                               ('get_inputs',
                                                                                [],
                                                                                ''),
                                                                               ('get_outputs',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['description',
                                                                                  'user_options',
                                                                                  'boolean_options',
                                                                                  'install_dir',
                                                                                  'force',
                                                                                  'build_dir',
                                                                                  'skip_build',
                                                                                  'outfiles']},
             'distutils.command.register.register': {'bases': ['distutils.core.Command'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('initialize_options', [], ''),
                                                                 ('finalize_options', [], ''),
                                                                 ('run', [], ''),
                                                                 ('check_metadata',
                                                                  [],
                                                                  'Ensure that all required elements of meta-data (name, version,\n           URL, (author and author_email) or (maintainer and\n           maintainer_email)) are supplied by the Distribution object; warn if\n           any are missing.\n        '),
                                                                 ('classifiers',
                                                                  [],
                                                                  ' Fetch the list of classifiers from the server.\n        '),
                                                                 ('verify_metadata',
                                                                  [],
                                                                  ' Send the metadata to the package index server to be checked.\n        '),
                                                                 ('send_metadata',
                                                                  [],
                                                                  " Send the metadata to the package index server.\n\n            Well, do the following:\n            1. figure who the user is, and then\n            2. send the data as a Basic auth'ed POST.\n\n            First we try to read the username/password from $HOME/.pypirc,\n            which is a ConfigParser-formatted file with a section\n            [server-login] containing username and password entries (both\n            in clear text). Eg:\n\n                [server-login]\n                username: fred\n                password: sekrit\n\n            Otherwise, to figure who the user is, we offer the user three\n            choices:\n\n             1. use existing login,\n             2. register as a new user, or\n             3. set the password to a random string and email the user.\n\n        "),
                                                                 ('build_post_data',
                                                                  ['action'],
                                                                  ''),
                                                                 ('post_to_server',
                                                                  ['data', 'auth=None'],
                                                                  ' Post a query to the server, and return a string response.\n        ')],
                                                     'properties': ['description',
                                                                    'DEFAULT_REPOSITORY',
                                                                    'user_options',
                                                                    'boolean_options',
                                                                    'repository',
                                                                    'show_response',
                                                                    'list_classifiers']},
             'distutils.command.sdist.sdist': {'bases': ['distutils.core.Command'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('initialize_options', [], ''),
                                                           ('finalize_options', [], ''),
                                                           ('run', [], ''),
                                                           ('check_metadata',
                                                            [],
                                                            'Ensure that all required elements of meta-data (name, version,\n        URL, (author and author_email) or (maintainer and\n        maintainer_email)) are supplied by the Distribution object; warn if\n        any are missing.\n        '),
                                                           ('get_file_list',
                                                            [],
                                                            "Figure out the list of files to include in the source\n        distribution, and put it in 'self.filelist'.  This might involve\n        reading the manifest template (and writing the manifest), or just\n        reading the manifest, or just using the default file set -- it all\n        depends on the user's options and the state of the filesystem.\n        "),
                                                           ('add_defaults',
                                                            [],
                                                            "Add all the default files to self.filelist:\n          - README or README.txt\n          - setup.py\n          - test/test*.py\n          - all pure Python modules mentioned in setup script\n          - all C sources listed as part of extensions or C libraries\n            in the setup script (doesn't catch C headers!)\n        Warns if (README or README.txt) or setup.py are missing; everything\n        else is optional.\n        "),
                                                           ('read_template',
                                                            [],
                                                            'Read and parse manifest template file named by self.template.\n\n        (usually "MANIFEST.in") The parsing and processing is done by\n        \'self.filelist\', which updates itself accordingly.\n        '),
                                                           ('prune_file_list',
                                                            [],
                                                            'Prune off branches that might slip into the file list as created\n        by \'read_template()\', but really don\'t belong there:\n          * the build tree (typically "build")\n          * the release tree itself (only an issue if we ran "sdist"\n            previously with --keep-temp, or it aborted)\n          * any RCS, CVS, .svn, .hg, .git, .bzr, _darcs directories\n        '),
                                                           ('write_manifest',
                                                            [],
                                                            "Write the file list in 'self.filelist' (presumably as filled in\n        by 'add_defaults()' and 'read_template()') to the manifest file\n        named by 'self.manifest'.\n        "),
                                                           ('read_manifest',
                                                            [],
                                                            "Read the manifest file (named by 'self.manifest') and use it to\n        fill in 'self.filelist', the list of files to include in the source\n        distribution.\n        "),
                                                           ('make_release_tree',
                                                            ['base_dir', 'files'],
                                                            "Create the directory tree that will become the source\n        distribution archive.  All directories implied by the filenames in\n        'files' are created under 'base_dir', and then we hard link or copy\n        (if hard linking is unavailable) those files into place.\n        Essentially, this duplicates the developer's source tree, but in a\n        directory named after the distribution, containing only the files\n        to be distributed.\n        "),
                                                           ('make_distribution',
                                                            [],
                                                            "Create the source distribution(s).  First, we create the release\n        tree with 'make_release_tree()'; then, we create all required\n        archive files (according to 'self.formats') from the release tree.\n        Finally, we clean up by blowing away the release tree (unless\n        'self.keep_temp' is true).  The list of archive files created is\n        stored so it can be retrieved later by 'get_archive_files()'.\n        "),
                                                           ('get_archive_files',
                                                            [],
                                                            "Return the list of archive files created when the command\n        was run, or None if the command hasn't run yet.\n        ")],
                                               'properties': ['description',
                                                              'user_options',
                                                              'boolean_options',
                                                              'help_options',
                                                              'negative_opt',
                                                              'default_format',
                                                              'template',
                                                              'manifest',
                                                              'use_defaults',
                                                              'prune',
                                                              'manifest_only',
                                                              'force_manifest',
                                                              'formats',
                                                              'keep_temp',
                                                              'dist_dir',
                                                              'archive_files',
                                                              'filelist']},
             'distutils.command.upload.upload': {'bases': ['distutils.core.Command'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('initialize_options', [], ''),
                                                             ('finalize_options', [], ''),
                                                             ('run', [], ''),
                                                             ('upload_file',
                                                              ['command',
                                                               'pyversion',
                                                               'filename'],
                                                              '')],
                                                 'properties': ['description',
                                                                'DEFAULT_REPOSITORY',
                                                                'user_options',
                                                                'boolean_options',
                                                                'username',
                                                                'password',
                                                                'repository',
                                                                'show_response',
                                                                'sign',
                                                                'identity']},
             'distutils.cygwinccompiler.CygwinCCompiler': {'bases': ['distutils.unixccompiler.UnixCCompiler'],
                                                           'constructor': ['verbose=0',
                                                                           'dry_run=0',
                                                                           'force=0'],
                                                           'docstring': '',
                                                           'methods': [('_compile',
                                                                        ['obj',
                                                                         'src',
                                                                         'ext',
                                                                         'cc_args',
                                                                         'extra_postargs',
                                                                         'pp_opts'],
                                                                        ''),
                                                                       ('link',
                                                                        ['target_desc',
                                                                         'objects',
                                                                         'output_filename',
                                                                         'output_dir=None',
                                                                         'libraries=None',
                                                                         'library_dirs=None',
                                                                         'runtime_library_dirs=None',
                                                                         'export_symbols=None',
                                                                         'debug=0',
                                                                         'extra_preargs=None',
                                                                         'extra_postargs=None',
                                                                         'build_temp=None',
                                                                         'target_lang=None'],
                                                                        ''),
                                                                       ('object_filenames',
                                                                        ['source_filenames',
                                                                         'strip_dir=0',
                                                                         "output_dir=''"],
                                                                        '')],
                                                           'properties': ['compiler_type',
                                                                          'obj_extension',
                                                                          'static_lib_extension',
                                                                          'shared_lib_extension',
                                                                          'static_lib_format',
                                                                          'shared_lib_format',
                                                                          'exe_extension',
                                                                          'gcc_version',
                                                                          'ld_version',
                                                                          'dllwrap_version',
                                                                          'linker_dll',
                                                                          'dll_libraries']},
             'distutils.cygwinccompiler.Mingw32CCompiler': {'bases': ['distutils.cygwinccompiler.CygwinCCompiler'],
                                                            'constructor': ['verbose=0',
                                                                            'dry_run=0',
                                                                            'force=0'],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['compiler_type',
                                                                           'dll_libraries']},
             'distutils.dist.Distribution': {'bases': [],
                                             'constructor': ['attrs=None'],
                                             'docstring': "The core of the Distutils.  Most of the work hiding behind 'setup'\n    is really done within a Distribution instance, which farms the work out\n    to the Distutils commands specified on the command line.\n\n    Setup scripts will almost never instantiate Distribution directly,\n    unless the 'setup()' function is totally inadequate to their needs.\n    However, it is conceivable that a setup script might wish to subclass\n    Distribution for some specialized purpose, and then pass the subclass\n    to 'setup()' as the 'distclass' keyword argument.  If so, it is\n    necessary to respect the expectations that 'setup' has of Distribution.\n    See the code for 'setup()', in core.py, for details.\n    ",
                                             'methods': [('get_option_dict',
                                                          ['command'],
                                                          "Get the option dictionary for a given command.  If that\n        command's option dictionary hasn't been created yet, then create it\n        and return the new dictionary; otherwise, return the existing\n        option dictionary.\n        "),
                                                         ('dump_option_dicts',
                                                          ['header=None',
                                                           'commands=None',
                                                           "indent=''"],
                                                          ''),
                                                         ('find_config_files',
                                                          [],
                                                          "Find as many configuration files as should be processed for this\n        platform, and return a list of filenames in the order in which they\n        should be parsed.  The filenames returned are guaranteed to exist\n        (modulo nasty race conditions).\n\n        There are three possible config files: distutils.cfg in the\n        Distutils installation directory (ie. where the top-level\n        Distutils __inst__.py file lives), a file in the user's home\n        directory named .pydistutils.cfg on Unix and pydistutils.cfg\n        on Windows/Mac, and setup.cfg in the current directory.\n        "),
                                                         ('parse_config_files',
                                                          ['filenames=None'],
                                                          ''),
                                                         ('parse_command_line',
                                                          [],
                                                          'Parse the setup script\'s command line, taken from the\n        \'script_args\' instance attribute (which defaults to \'sys.argv[1:]\'\n        -- see \'setup()\' in core.py).  This list is first processed for\n        "global options" -- options that set attributes of the Distribution\n        instance.  Then, it is alternately scanned for Distutils commands\n        and options for that command.  Each new command terminates the\n        options for the previous command.  The allowed options for a\n        command are determined by the \'user_options\' attribute of the\n        command class -- thus, we have to be able to load command classes\n        in order to parse the command line.  Any error in that \'options\'\n        attribute raises DistutilsGetoptError; any error on the\n        command-line raises DistutilsArgError.  If no Distutils commands\n        were found on the command line, raises DistutilsArgError.  Return\n        true if command-line was successfully parsed and we should carry\n        on with executing commands; false if no errors but we shouldn\'t\n        execute commands (currently, this only happens if user asks for\n        help).\n        '),
                                                         ('_get_toplevel_options',
                                                          [],
                                                          'Return the non-display options recognized at the top level.\n\n        This includes options that are recognized *only* at the top\n        level as well as options recognized for commands.\n        '),
                                                         ('_parse_command_opts',
                                                          ['parser', 'args'],
                                                          "Parse the command-line options for a single command.\n        'parser' must be a FancyGetopt instance; 'args' must be the list\n        of arguments, starting with the current command (whose options\n        we are about to parse).  Returns a new version of 'args' with\n        the next command at the front of the list; will be the empty\n        list if there are no more commands on the command line.  Returns\n        None if the user asked for help on this command.\n        "),
                                                         ('finalize_options',
                                                          [],
                                                          'Set final values for all the options on the Distribution\n        instance, analogous to the .finalize_options() method of Command\n        objects.\n        '),
                                                         ('_show_help',
                                                          ['parser',
                                                           'global_options=1',
                                                           'display_options=1',
                                                           'commands=[]'],
                                                          'Show help for the setup script command-line in the form of\n        several lists of command-line options.  \'parser\' should be a\n        FancyGetopt instance; do not expect it to be returned in the\n        same state, as its option table will be reset to make it\n        generate the correct help text.\n\n        If \'global_options\' is true, lists the global options:\n        --verbose, --dry-run, etc.  If \'display_options\' is true, lists\n        the "display-only" options: --name, --version, etc.  Finally,\n        lists per-command help for every command name or command class\n        in \'commands\'.\n        '),
                                                         ('handle_display_options',
                                                          ['option_order'],
                                                          'If there were any non-global "display-only" options\n        (--help-commands or the metadata display options) on the command\n        line, display the requested info and return true; else return\n        false.\n        '),
                                                         ('print_command_list',
                                                          ['commands', 'header', 'max_length'],
                                                          "Print a subset of the list of all commands -- used by\n        'print_commands()'.\n        "),
                                                         ('print_commands',
                                                          [],
                                                          'Print out a help message listing all available commands with a\n        description of each.  The list is divided into "standard commands"\n        (listed in distutils.command.__all__) and "extra commands"\n        (mentioned in self.cmdclass, but not a standard command).  The\n        descriptions come from the command class attribute\n        \'description\'.\n        '),
                                                         ('get_command_list',
                                                          [],
                                                          'Get a list of (command, description) tuples.\n        The list is divided into "standard commands" (listed in\n        distutils.command.__all__) and "extra commands" (mentioned in\n        self.cmdclass, but not a standard command).  The descriptions come\n        from the command class attribute \'description\'.\n        '),
                                                         ('get_command_packages',
                                                          [],
                                                          'Return a list of packages from which commands are loaded.'),
                                                         ('get_command_class',
                                                          ['command'],
                                                          'Return the class that implements the Distutils command named by\n        \'command\'.  First we check the \'cmdclass\' dictionary; if the\n        command is mentioned there, we fetch the class object from the\n        dictionary and return it.  Otherwise we load the command module\n        ("distutils.command." + command) and fetch the command class from\n        the module.  The loaded class is also stored in \'cmdclass\'\n        to speed future calls to \'get_command_class()\'.\n\n        Raises DistutilsModuleError if the expected module could not be\n        found, or if that module does not define the expected class.\n        '),
                                                         ('get_command_obj',
                                                          ['command', 'create=1'],
                                                          "Return the command object for 'command'.  Normally this object\n        is cached on a previous call to 'get_command_obj()'; if no command\n        object for 'command' is in the cache, then we either create and\n        return it (if 'create' is true) or return None.\n        "),
                                                         ('_set_command_options',
                                                          ['command_obj', 'option_dict=None'],
                                                          "Set the options for 'command_obj' from 'option_dict'.  Basically\n        this means copying elements of a dictionary ('option_dict') to\n        attributes of an instance ('command').\n\n        'command_obj' must be a Command instance.  If 'option_dict' is not\n        supplied, uses the standard option dictionary for this command\n        (from 'self.command_options').\n        "),
                                                         ('reinitialize_command',
                                                          ['command', 'reinit_subcommands=0'],
                                                          'Reinitializes a command to the state it was in when first\n        returned by \'get_command_obj()\': ie., initialized but not yet\n        finalized.  This provides the opportunity to sneak option\n        values in programmatically, overriding or supplementing\n        user-supplied values from the config files and command line.\n        You\'ll have to re-finalize the command object (by calling\n        \'finalize_options()\' or \'ensure_finalized()\') before using it for\n        real.\n\n        \'command\' should be a command name (string) or command object.  If\n        \'reinit_subcommands\' is true, also reinitializes the command\'s\n        sub-commands, as declared by the \'sub_commands\' class attribute (if\n        it has one).  See the "install" command for an example.  Only\n        reinitializes the sub-commands that actually matter, ie. those\n        whose test predicates return true.\n\n        Returns the reinitialized command object.\n        '),
                                                         ('announce', ['msg', 'level=1'], ''),
                                                         ('run_commands',
                                                          [],
                                                          "Run each command that was seen on the setup script command line.\n        Uses the list of commands found and cache of command objects\n        created by 'get_command_obj()'.\n        "),
                                                         ('run_command',
                                                          ['command'],
                                                          "Do whatever it takes to run a command (including nothing at all,\n        if the command has already been run).  Specifically: if we have\n        already created and run the command named by 'command', return\n        silently without doing anything.  If the command named by 'command'\n        doesn't even have a command object yet, create one.  Then invoke\n        'run()' on that command object (or an existing one).\n        "),
                                                         ('has_pure_modules', [], ''),
                                                         ('has_ext_modules', [], ''),
                                                         ('has_c_libraries', [], ''),
                                                         ('has_modules', [], ''),
                                                         ('has_headers', [], ''),
                                                         ('has_scripts', [], ''),
                                                         ('has_data_files', [], ''),
                                                         ('is_pure', [], '')],
                                             'properties': ['global_options',
                                                            'common_usage',
                                                            'display_options',
                                                            'display_option_names',
                                                            'negative_opt',
                                                            'verbose',
                                                            'dry_run',
                                                            'help',
                                                            'metadata',
                                                            'cmdclass',
                                                            'command_packages',
                                                            'script_name',
                                                            'script_args',
                                                            'command_options',
                                                            'dist_files',
                                                            'packages',
                                                            'package_data',
                                                            'package_dir',
                                                            'py_modules',
                                                            'libraries',
                                                            'headers',
                                                            'ext_modules',
                                                            'ext_package',
                                                            'include_dirs',
                                                            'extra_path',
                                                            'scripts',
                                                            'data_files',
                                                            'command_obj',
                                                            'have_run',
                                                            'commands']},
             'distutils.dist.DistributionMetadata': {'bases': [],
                                                     'constructor': [],
                                                     'docstring': 'Dummy class to hold the distribution meta-data: name, version,\n    author, and so forth.\n    ',
                                                     'methods': [('write_pkg_info',
                                                                  ['base_dir'],
                                                                  'Write the PKG-INFO file into the release tree.\n        '),
                                                                 ('write_pkg_file',
                                                                  ['file'],
                                                                  'Write the PKG-INFO format data to a file object.\n        '),
                                                                 ('_write_list',
                                                                  ['file', 'name', 'values'],
                                                                  ''),
                                                                 ('get_name', [], ''),
                                                                 ('get_version', [], ''),
                                                                 ('get_fullname', [], ''),
                                                                 ('get_author', [], ''),
                                                                 ('get_author_email', [], ''),
                                                                 ('get_maintainer', [], ''),
                                                                 ('get_maintainer_email',
                                                                  [],
                                                                  ''),
                                                                 ('get_contact', [], ''),
                                                                 ('get_contact_email', [], ''),
                                                                 ('get_url', [], ''),
                                                                 ('get_license', [], ''),
                                                                 ('get_description', [], ''),
                                                                 ('get_long_description',
                                                                  [],
                                                                  ''),
                                                                 ('get_keywords', [], ''),
                                                                 ('get_platforms', [], ''),
                                                                 ('get_classifiers', [], ''),
                                                                 ('get_download_url', [], ''),
                                                                 ('get_requires', [], ''),
                                                                 ('set_requires',
                                                                  ['value'],
                                                                  ''),
                                                                 ('get_provides', [], ''),
                                                                 ('set_provides',
                                                                  ['value'],
                                                                  ''),
                                                                 ('get_obsoletes', [], ''),
                                                                 ('set_obsoletes',
                                                                  ['value'],
                                                                  '')],
                                                     'properties': ['_METHOD_BASENAMES',
                                                                    'name',
                                                                    'version',
                                                                    'author',
                                                                    'author_email',
                                                                    'maintainer',
                                                                    'maintainer_email',
                                                                    'url',
                                                                    'license',
                                                                    'description',
                                                                    'long_description',
                                                                    'keywords',
                                                                    'platforms',
                                                                    'classifiers',
                                                                    'download_url',
                                                                    'provides',
                                                                    'requires',
                                                                    'obsoletes',
                                                                    'get_licence']},
             'distutils.emxccompiler.EMXCCompiler': {'bases': ['distutils.unixccompiler.UnixCCompiler'],
                                                     'constructor': ['verbose=0',
                                                                     'dry_run=0',
                                                                     'force=0'],
                                                     'docstring': '',
                                                     'methods': [('_compile',
                                                                  ['obj',
                                                                   'src',
                                                                   'ext',
                                                                   'cc_args',
                                                                   'extra_postargs',
                                                                   'pp_opts'],
                                                                  ''),
                                                                 ('link',
                                                                  ['target_desc',
                                                                   'objects',
                                                                   'output_filename',
                                                                   'output_dir=None',
                                                                   'libraries=None',
                                                                   'library_dirs=None',
                                                                   'runtime_library_dirs=None',
                                                                   'export_symbols=None',
                                                                   'debug=0',
                                                                   'extra_preargs=None',
                                                                   'extra_postargs=None',
                                                                   'build_temp=None',
                                                                   'target_lang=None'],
                                                                  ''),
                                                                 ('object_filenames',
                                                                  ['source_filenames',
                                                                   'strip_dir=0',
                                                                   "output_dir=''"],
                                                                  ''),
                                                                 ('find_library_file',
                                                                  ['dirs', 'lib', 'debug=0'],
                                                                  '')],
                                                     'properties': ['compiler_type',
                                                                    'obj_extension',
                                                                    'static_lib_extension',
                                                                    'shared_lib_extension',
                                                                    'static_lib_format',
                                                                    'shared_lib_format',
                                                                    'res_extension',
                                                                    'exe_extension',
                                                                    'gcc_version',
                                                                    'ld_version',
                                                                    'dll_libraries']},
             'distutils.errors.CCompilerError': {'bases': ['Exception'],
                                                 'constructor': [],
                                                 'docstring': 'Some compile/link operation failed.',
                                                 'methods': [],
                                                 'properties': []},
             'distutils.errors.CompileError': {'bases': ['distutils.errors.CCompilerError'],
                                               'constructor': [],
                                               'docstring': 'Failure to compile one or more C/C++ source files.',
                                               'methods': [],
                                               'properties': []},
             'distutils.errors.DistutilsArgError': {'bases': ['distutils.errors.DistutilsError'],
                                                    'constructor': [],
                                                    'docstring': 'Raised by fancy_getopt in response to getopt.error -- ie. an\n    error in the command line usage.',
                                                    'methods': [],
                                                    'properties': []},
             'distutils.errors.DistutilsClassError': {'bases': ['distutils.errors.DistutilsError'],
                                                      'constructor': [],
                                                      'docstring': 'Some command class (or possibly distribution class, if anyone\n    feels a need to subclass Distribution) is found not to be holding\n    up its end of the bargain, ie. implementing some part of the\n    "command "interface.',
                                                      'methods': [],
                                                      'properties': []},
             'distutils.errors.DistutilsError': {'bases': ['Exception'],
                                                 'constructor': [],
                                                 'docstring': 'The root of all Distutils evil.',
                                                 'methods': [],
                                                 'properties': []},
             'distutils.errors.DistutilsExecError': {'bases': ['distutils.errors.DistutilsError'],
                                                     'constructor': [],
                                                     'docstring': 'Any problems executing an external program (such as the C\n    compiler, when compiling C files).',
                                                     'methods': [],
                                                     'properties': []},
             'distutils.errors.DistutilsFileError': {'bases': ['distutils.errors.DistutilsError'],
                                                     'constructor': [],
                                                     'docstring': 'Any problems in the filesystem: expected file not found, etc.\n    Typically this is for problems that we detect before IOError or\n    OSError could be raised.',
                                                     'methods': [],
                                                     'properties': []},
             'distutils.errors.DistutilsGetoptError': {'bases': ['distutils.errors.DistutilsError'],
                                                       'constructor': [],
                                                       'docstring': "The option table provided to 'fancy_getopt()' is bogus.",
                                                       'methods': [],
                                                       'properties': []},
             'distutils.errors.DistutilsInternalError': {'bases': ['distutils.errors.DistutilsError'],
                                                         'constructor': [],
                                                         'docstring': 'Internal inconsistencies or impossibilities (obviously, this\n    should never be seen if the code is working!).',
                                                         'methods': [],
                                                         'properties': []},
             'distutils.errors.DistutilsModuleError': {'bases': ['distutils.errors.DistutilsError'],
                                                       'constructor': [],
                                                       'docstring': 'Unable to load an expected module, or to find an expected class\n    within some module (in particular, command modules and classes).',
                                                       'methods': [],
                                                       'properties': []},
             'distutils.errors.DistutilsOptionError': {'bases': ['distutils.errors.DistutilsError'],
                                                       'constructor': [],
                                                       'docstring': "Syntactic/semantic errors in command options, such as use of\n    mutually conflicting options, or inconsistent options,\n    badly-spelled values, etc.  No distinction is made between option\n    values originating in the setup script, the command line, config\n    files, or what-have-you -- but if we *know* something originated in\n    the setup script, we'll raise DistutilsSetupError instead.",
                                                       'methods': [],
                                                       'properties': []},
             'distutils.errors.DistutilsPlatformError': {'bases': ['distutils.errors.DistutilsError'],
                                                         'constructor': [],
                                                         'docstring': "We don't know how to do something on the current platform (but\n    we do know how to do it on some platform) -- eg. trying to compile\n    C files on a platform not supported by a CCompiler subclass.",
                                                         'methods': [],
                                                         'properties': []},
             'distutils.errors.DistutilsSetupError': {'bases': ['distutils.errors.DistutilsError'],
                                                      'constructor': [],
                                                      'docstring': "For errors that can be definitely blamed on the setup script,\n    such as invalid keyword arguments to 'setup()'.",
                                                      'methods': [],
                                                      'properties': []},
             'distutils.errors.DistutilsTemplateError': {'bases': ['distutils.errors.DistutilsError'],
                                                         'constructor': [],
                                                         'docstring': 'Syntax error in a file list template.',
                                                         'methods': [],
                                                         'properties': []},
             'distutils.errors.LibError': {'bases': ['distutils.errors.CCompilerError'],
                                           'constructor': [],
                                           'docstring': 'Failure to create a static library from one or more C/C++ object\n    files.',
                                           'methods': [],
                                           'properties': []},
             'distutils.errors.LinkError': {'bases': ['distutils.errors.CCompilerError'],
                                            'constructor': [],
                                            'docstring': 'Failure to link one or more C/C++ object files into an executable\n    or shared library file.',
                                            'methods': [],
                                            'properties': []},
             'distutils.errors.PreprocessError': {'bases': ['distutils.errors.CCompilerError'],
                                                  'constructor': [],
                                                  'docstring': 'Failure to preprocess one or more C/C++ files.',
                                                  'methods': [],
                                                  'properties': []},
             'distutils.errors.UnknownFileError': {'bases': ['distutils.errors.CCompilerError'],
                                                   'constructor': [],
                                                   'docstring': 'Attempt to process an unknown file type.',
                                                   'methods': [],
                                                   'properties': []},
             'distutils.extension.Extension': {'bases': [],
                                               'constructor': ['name',
                                                               'sources',
                                                               'include_dirs=None',
                                                               'define_macros=None',
                                                               'undef_macros=None',
                                                               'library_dirs=None',
                                                               'libraries=None',
                                                               'runtime_library_dirs=None',
                                                               'extra_objects=None',
                                                               'extra_compile_args=None',
                                                               'extra_link_args=None',
                                                               'export_symbols=None',
                                                               'swig_opts=None',
                                                               'depends=None',
                                                               'language=None',
                                                               '**kw'],
                                               'docstring': 'Just a collection of attributes that describes an extension\n    module and everything needed to build it (hopefully in a portable\n    way, but there are hooks that let you be as unportable as you need).\n\n    Instance attributes:\n      name : string\n        the full name of the extension, including any packages -- ie.\n        *not* a filename or pathname, but Python dotted name\n      sources : [string]\n        list of source filenames, relative to the distribution root\n        (where the setup script lives), in Unix form (slash-separated)\n        for portability.  Source files may be C, C++, SWIG (.i),\n        platform-specific resource files, or whatever else is recognized\n        by the "build_ext" command as source for a Python extension.\n      include_dirs : [string]\n        list of directories to search for C/C++ header files (in Unix\n        form for portability)\n      define_macros : [(name : string, value : string|None)]\n        list of macros to define; each macro is defined using a 2-tuple,\n        where \'value\' is either the string to define it to or None to\n        define it without a particular value (equivalent of "#define\n        FOO" in source or -DFOO on Unix C compiler command line)\n      undef_macros : [string]\n        list of macros to undefine explicitly\n      library_dirs : [string]\n        list of directories to search for C/C++ libraries at link time\n      libraries : [string]\n        list of library names (not filenames or paths) to link against\n      runtime_library_dirs : [string]\n        list of directories to search for C/C++ libraries at run time\n        (for shared extensions, this is when the extension is loaded)\n      extra_objects : [string]\n        list of extra files to link with (eg. object files not implied\n        by \'sources\', static library that must be explicitly specified,\n        binary resource files, etc.)\n      extra_compile_args : [string]\n        any extra platform- and compiler-specific information to use\n        when compiling the source files in \'sources\'.  For platforms and\n        compilers where "command line" makes sense, this is typically a\n        list of command-line arguments, but for other platforms it could\n        be anything.\n      extra_link_args : [string]\n        any extra platform- and compiler-specific information to use\n        when linking object files together to create the extension (or\n        to create a new static Python interpreter).  Similar\n        interpretation as for \'extra_compile_args\'.\n      export_symbols : [string]\n        list of symbols to be exported from a shared extension.  Not\n        used on all platforms, and not generally necessary for Python\n        extensions, which typically export exactly one symbol: "init" +\n        extension_name.\n      swig_opts : [string]\n        any extra options to pass to SWIG if a source file has the .i\n        extension.\n      depends : [string]\n        list of files that the extension depends on\n      language : string\n        extension language (i.e. "c", "c++", "objc"). Will be detected\n        from the source extensions if not provided.\n    ',
                                               'methods': [],
                                               'properties': ['name',
                                                              'sources',
                                                              'include_dirs',
                                                              'define_macros',
                                                              'undef_macros',
                                                              'library_dirs',
                                                              'libraries',
                                                              'runtime_library_dirs',
                                                              'extra_objects',
                                                              'extra_compile_args',
                                                              'extra_link_args',
                                                              'export_symbols',
                                                              'swig_opts',
                                                              'depends',
                                                              'language']},
             'distutils.fancy_getopt.FancyGetopt': {'bases': [],
                                                    'constructor': ['option_table=None'],
                                                    'docstring': 'Wrapper around the standard \'getopt()\' module that provides some\n    handy extra functionality:\n      * short and long options are tied together\n      * options have help strings, and help text can be assembled\n        from them\n      * options set attributes of a passed-in object\n      * boolean options can have "negative aliases" -- eg. if\n        --quiet is the "negative alias" of --verbose, then "--quiet"\n        on the command line sets \'verbose\' to false\n    ',
                                                    'methods': [('_build_index', [], ''),
                                                                ('set_option_table',
                                                                 ['option_table'],
                                                                 ''),
                                                                ('add_option',
                                                                 ['long_option',
                                                                  'short_option=None',
                                                                  'help_string=None'],
                                                                 ''),
                                                                ('has_option',
                                                                 ['long_option'],
                                                                 "Return true if the option table for this parser has an\n        option with long name 'long_option'."),
                                                                ('get_attr_name',
                                                                 ['long_option'],
                                                                 "Translate long option name 'long_option' to the form it\n        has as an attribute of some object: ie., translate hyphens\n        to underscores."),
                                                                ('_check_alias_dict',
                                                                 ['aliases', 'what'],
                                                                 ''),
                                                                ('set_aliases',
                                                                 ['alias'],
                                                                 'Set the aliases for this option parser.'),
                                                                ('set_negative_aliases',
                                                                 ['negative_alias'],
                                                                 "Set the negative aliases for this option parser.\n        'negative_alias' should be a dictionary mapping option names to\n        option names, both the key and value must already be defined\n        in the option table."),
                                                                ('_grok_option_table',
                                                                 [],
                                                                 "Populate the various data structures that keep tabs on the\n        option table.  Called by 'getopt()' before it can do anything\n        worthwhile.\n        "),
                                                                ('getopt',
                                                                 ['args=None', 'object=None'],
                                                                 "Parse command-line options in args. Store as attributes on object.\n\n        If 'args' is None or not supplied, uses 'sys.argv[1:]'.  If\n        'object' is None or not supplied, creates a new OptionDummy\n        object, stores option values there, and returns a tuple (args,\n        object).  If 'object' is supplied, it is modified in place and\n        'getopt()' just returns 'args'; in both cases, the returned\n        'args' is a modified copy of the passed-in 'args' list, which\n        is left untouched.\n        "),
                                                                ('get_option_order',
                                                                 [],
                                                                 "Returns the list of (option, value) tuples processed by the\n        previous run of 'getopt()'.  Raises RuntimeError if\n        'getopt()' hasn't been called yet.\n        "),
                                                                ('generate_help',
                                                                 ['header=None'],
                                                                 'Generate help text (a list of strings, one per suggested line of\n        output) from the option table for this FancyGetopt object.\n        '),
                                                                ('print_help',
                                                                 ['header=None', 'file=None'],
                                                                 '')],
                                                    'properties': ['option_table',
                                                                   'option_index',
                                                                   'alias',
                                                                   'negative_alias',
                                                                   'short_opts',
                                                                   'long_opts',
                                                                   'short2long',
                                                                   'attr_name',
                                                                   'takes_arg',
                                                                   'option_order',
                                                                   'repeat']},
             'distutils.fancy_getopt.OptionDummy': {'bases': [],
                                                    'constructor': ['options=[]'],
                                                    'docstring': 'Dummy class just used as a place to hold command-line option\n    values as instance attributes.',
                                                    'methods': [],
                                                    'properties': []},
             'distutils.filelist.FileList': {'bases': [],
                                             'constructor': ['warn=None', 'debug_print=None'],
                                             'docstring': "A list of files built by on exploring the filesystem and filtered by\n    applying various patterns to what we find there.\n\n    Instance attributes:\n      dir\n        directory from which files will be taken -- only used if\n        'allfiles' not supplied to constructor\n      files\n        list of filenames currently being built/filtered/manipulated\n      allfiles\n        complete list of files under consideration (ie. without any\n        filtering applied)\n    ",
                                             'methods': [('set_allfiles', ['allfiles'], ''),
                                                         ('findall', ['dir=os.curdir'], ''),
                                                         ('debug_print',
                                                          ['msg'],
                                                          "Print 'msg' to stdout if the global DEBUG (taken from the\n        DISTUTILS_DEBUG environment variable) flag is true.\n        "),
                                                         ('append', ['item'], ''),
                                                         ('extend', ['items'], ''),
                                                         ('sort', [], ''),
                                                         ('remove_duplicates', [], ''),
                                                         ('_parse_template_line', ['line'], ''),
                                                         ('process_template_line',
                                                          ['line'],
                                                          ''),
                                                         ('include_pattern',
                                                          ['pattern',
                                                           'anchor=1',
                                                           'prefix=None',
                                                           'is_regex=0'],
                                                          'Select strings (presumably filenames) from \'self.files\' that\n        match \'pattern\', a Unix-style wildcard (glob) pattern.  Patterns\n        are not quite the same as implemented by the \'fnmatch\' module: \'*\'\n        and \'?\'  match non-special characters, where "special" is platform-\n        dependent: slash on Unix; colon, slash, and backslash on\n        DOS/Windows; and colon on Mac OS.\n\n        If \'anchor\' is true (the default), then the pattern match is more\n        stringent: "*.py" will match "foo.py" but not "foo/bar.py".  If\n        \'anchor\' is false, both of these will match.\n\n        If \'prefix\' is supplied, then only filenames starting with \'prefix\'\n        (itself a pattern) and ending with \'pattern\', with anything in between\n        them, will match.  \'anchor\' is ignored in this case.\n\n        If \'is_regex\' is true, \'anchor\' and \'prefix\' are ignored, and\n        \'pattern\' is assumed to be either a string containing a regex or a\n        regex object -- no translation is done, the regex is just compiled\n        and used as-is.\n\n        Selected strings will be added to self.files.\n\n        Return 1 if files are found.\n        '),
                                                         ('exclude_pattern',
                                                          ['pattern',
                                                           'anchor=1',
                                                           'prefix=None',
                                                           'is_regex=0'],
                                                          "Remove strings (presumably filenames) from 'files' that match\n        'pattern'.  Other parameters are the same as for\n        'include_pattern()', above.\n        The list 'self.files' is modified in place.\n        Return 1 if files are found.\n        ")],
                                             'properties': ['allfiles', 'files']},
             'distutils.log.Log': {'bases': [],
                                   'constructor': ['threshold=WARN'],
                                   'docstring': '',
                                   'methods': [('_log', ['level', 'msg', 'args'], ''),
                                               ('log', ['level', 'msg', '*args'], ''),
                                               ('debug', ['msg', '*args'], ''),
                                               ('info', ['msg', '*args'], ''),
                                               ('warn', ['msg', '*args'], ''),
                                               ('error', ['msg', '*args'], ''),
                                               ('fatal', ['msg', '*args'], '')],
                                   'properties': ['threshold']},
             'distutils.msvccompiler.MSVCCompiler': {'bases': ['distutils.ccompiler.CCompiler'],
                                                     'constructor': ['verbose=0',
                                                                     'dry_run=0',
                                                                     'force=0'],
                                                     'docstring': 'Concrete class that implements an interface to Microsoft Visual C++,\n       as defined by the CCompiler abstract class.',
                                                     'methods': [('initialize', [], ''),
                                                                 ('object_filenames',
                                                                  ['source_filenames',
                                                                   'strip_dir=0',
                                                                   "output_dir=''"],
                                                                  ''),
                                                                 ('compile',
                                                                  ['sources',
                                                                   'output_dir=None',
                                                                   'macros=None',
                                                                   'include_dirs=None',
                                                                   'debug=0',
                                                                   'extra_preargs=None',
                                                                   'extra_postargs=None',
                                                                   'depends=None'],
                                                                  ''),
                                                                 ('create_static_lib',
                                                                  ['objects',
                                                                   'output_libname',
                                                                   'output_dir=None',
                                                                   'debug=0',
                                                                   'target_lang=None'],
                                                                  ''),
                                                                 ('link',
                                                                  ['target_desc',
                                                                   'objects',
                                                                   'output_filename',
                                                                   'output_dir=None',
                                                                   'libraries=None',
                                                                   'library_dirs=None',
                                                                   'runtime_library_dirs=None',
                                                                   'export_symbols=None',
                                                                   'debug=0',
                                                                   'extra_preargs=None',
                                                                   'extra_postargs=None',
                                                                   'build_temp=None',
                                                                   'target_lang=None'],
                                                                  ''),
                                                                 ('library_dir_option',
                                                                  ['dir'],
                                                                  ''),
                                                                 ('runtime_library_dir_option',
                                                                  ['dir'],
                                                                  ''),
                                                                 ('library_option',
                                                                  ['lib'],
                                                                  ''),
                                                                 ('find_library_file',
                                                                  ['dirs', 'lib', 'debug=0'],
                                                                  ''),
                                                                 ('find_exe',
                                                                  ['exe'],
                                                                  "Return path to an MSVC executable program.\n\n        Tries to find the program in several places: first, one of the\n        MSVC program search paths from the registry; next, the directories\n        in the PATH environment variable.  If any of those work, return an\n        absolute path that is known to exist.  If none of them work, just\n        return the original program name, 'exe'.\n        "),
                                                                 ('get_msvc_paths',
                                                                  ['path', "platform='x86'"],
                                                                  'Get a list of devstudio directories (include, lib or path).\n\n        Return a list of strings.  The list will be empty if unable to\n        access the registry or appropriate registry keys not found.\n        '),
                                                                 ('set_path_env_var',
                                                                  ['name'],
                                                                  "Set environment variable 'name' to an MSVC path type value.\n\n        This is equivalent to a SET command prior to execution of spawned\n        commands.\n        ")],
                                                     'properties': ['compiler_type',
                                                                    'executables',
                                                                    '_c_extensions',
                                                                    '_cpp_extensions',
                                                                    '_rc_extensions',
                                                                    '_mc_extensions',
                                                                    'src_extensions',
                                                                    'res_extension',
                                                                    'obj_extension',
                                                                    'static_lib_extension',
                                                                    'shared_lib_extension',
                                                                    'static_lib_format',
                                                                    'shared_lib_format',
                                                                    'exe_extension',
                                                                    '__version',
                                                                    '__arch',
                                                                    '__root',
                                                                    '__macros',
                                                                    '__product',
                                                                    'initialized',
                                                                    '__paths',
                                                                    'cc',
                                                                    'linker',
                                                                    'lib',
                                                                    'rc',
                                                                    'mc',
                                                                    'preprocess_options',
                                                                    'compile_options',
                                                                    'compile_options_debug',
                                                                    'ldflags_shared',
                                                                    'ldflags_shared_debug',
                                                                    'ldflags_static']},
             'distutils.msvccompiler.MacroExpander': {'bases': [],
                                                      'constructor': ['version'],
                                                      'docstring': '',
                                                      'methods': [('set_macro',
                                                                   ['macro', 'path', 'key'],
                                                                   ''),
                                                                  ('load_macros',
                                                                   ['version'],
                                                                   ''),
                                                                  ('sub', ['s'], '')],
                                                      'properties': ['macros']},
             'distutils.mwerkscompiler.MWerksCompiler': {'bases': ['distutils.ccompiler.CCompiler'],
                                                         'constructor': ['verbose=0',
                                                                         'dry_run=0',
                                                                         'force=0'],
                                                         'docstring': 'Concrete class that implements an interface to MetroWerks CodeWarrior,\n       as defined by the CCompiler abstract class.',
                                                         'methods': [('compile',
                                                                      ['sources',
                                                                       'output_dir=None',
                                                                       'macros=None',
                                                                       'include_dirs=None',
                                                                       'debug=0',
                                                                       'extra_preargs=None',
                                                                       'extra_postargs=None',
                                                                       'depends=None'],
                                                                      ''),
                                                                     ('link',
                                                                      ['target_desc',
                                                                       'objects',
                                                                       'output_filename',
                                                                       'output_dir=None',
                                                                       'libraries=None',
                                                                       'library_dirs=None',
                                                                       'runtime_library_dirs=None',
                                                                       'export_symbols=None',
                                                                       'debug=0',
                                                                       'extra_preargs=None',
                                                                       'extra_postargs=None',
                                                                       'build_temp=None',
                                                                       'target_lang=None'],
                                                                      ''),
                                                                     ('_filename_to_abs',
                                                                      ['filename'],
                                                                      ''),
                                                                     ('library_dir_option',
                                                                      ['dir'],
                                                                      "Return the compiler option to add 'dir' to the list of\n        directories searched for libraries.\n        "),
                                                                     ('runtime_library_dir_option',
                                                                      ['dir'],
                                                                      "Return the compiler option to add 'dir' to the list of\n        directories searched for runtime libraries.\n        "),
                                                                     ('library_option',
                                                                      ['lib'],
                                                                      "Return the compiler option to add 'dir' to the list of libraries\n        linked into the shared library or executable.\n        "),
                                                                     ('find_library_file',
                                                                      ['dirs',
                                                                       'lib',
                                                                       'debug=0'],
                                                                      "Search the specified list of directories for a static or shared\n        library file 'lib' and return the full path to that file.  If\n        'debug' true, look for a debugging version (if that makes sense on\n        the current platform).  Return None if 'lib' wasn't found in any of\n        the specified directories.\n        ")],
                                                         'properties': ['compiler_type',
                                                                        'executables',
                                                                        '_c_extensions',
                                                                        '_cpp_extensions',
                                                                        '_rc_extensions',
                                                                        '_exp_extension',
                                                                        'src_extensions',
                                                                        'res_extension',
                                                                        'obj_extension',
                                                                        'static_lib_extension',
                                                                        'shared_lib_extension',
                                                                        'static_lib_format',
                                                                        'shared_lib_format',
                                                                        'exe_extension',
                                                                        '__sources',
                                                                        '__macros',
                                                                        '__include_dirs']},
             'distutils.tests.support.DummyCommand': {'bases': [],
                                                      'constructor': ['**kwargs'],
                                                      'docstring': 'Class to store options for retrieval via set_undefined_options().',
                                                      'methods': [('ensure_finalized', [], '')],
                                                      'properties': []},
             'distutils.tests.support.LoggingSilencer': {'bases': ['object'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('setUp', [], ''),
                                                                     ('tearDown', [], '')],
                                                         'properties': ['threshold']},
             'distutils.tests.support.TempdirManager': {'bases': ['object'],
                                                        'constructor': [],
                                                        'docstring': 'Mix-in class that handles temporary directories for test cases.\n\n    This is intended to be used with unittest.TestCase.\n    ',
                                                        'methods': [('setUp', [], ''),
                                                                    ('tearDown', [], ''),
                                                                    ('mkdtemp',
                                                                     [],
                                                                     'Create a temporary directory that will be cleaned up.\n\n        Returns the path of the directory.\n        ')],
                                                        'properties': ['tempdirs']},
             'distutils.tests.test_build_py.BuildPyTestCase': {'bases': ['distutils.tests.support.TempdirManager',
                                                                         'distutils.tests.support.LoggingSilencer',
                                                                         'unittest.TestCase'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('test_package_data',
                                                                            [],
                                                                            ''),
                                                                           ('test_empty_package_dir',
                                                                            [],
                                                                            '')],
                                                               'properties': []},
             'distutils.tests.test_build_scripts.BuildScriptsTestCase': {'bases': ['distutils.tests.support.TempdirManager',
                                                                                   'distutils.tests.support.LoggingSilencer',
                                                                                   'unittest.TestCase'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [('test_default_settings',
                                                                                      [],
                                                                                      ''),
                                                                                     ('test_build',
                                                                                      [],
                                                                                      ''),
                                                                                     ('get_build_scripts_cmd',
                                                                                      ['target',
                                                                                       'scripts'],
                                                                                      ''),
                                                                                     ('write_sample_scripts',
                                                                                      ['dir'],
                                                                                      ''),
                                                                                     ('write_script',
                                                                                      ['dir',
                                                                                       'name',
                                                                                       'text'],
                                                                                      '')],
                                                                         'properties': []},
             'distutils.tests.test_dist.DistributionTestCase': {'bases': ['unittest.TestCase'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('setUp', [], ''),
                                                                            ('tearDown',
                                                                             [],
                                                                             ''),
                                                                            ('create_distribution',
                                                                             ['configfiles=()'],
                                                                             ''),
                                                                            ('test_command_packages_unspecified',
                                                                             [],
                                                                             ''),
                                                                            ('test_command_packages_cmdline',
                                                                             [],
                                                                             ''),
                                                                            ('test_command_packages_configfile',
                                                                             [],
                                                                             '')],
                                                                'properties': ['argv']},
             'distutils.tests.test_dist.MetadataTestCase': {'bases': ['unittest.TestCase'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('test_simple_metadata',
                                                                         [],
                                                                         ''),
                                                                        ('test_provides',
                                                                         [],
                                                                         ''),
                                                                        ('test_provides_illegal',
                                                                         [],
                                                                         ''),
                                                                        ('test_requires',
                                                                         [],
                                                                         ''),
                                                                        ('test_requires_illegal',
                                                                         [],
                                                                         ''),
                                                                        ('test_obsoletes',
                                                                         [],
                                                                         ''),
                                                                        ('test_obsoletes_illegal',
                                                                         [],
                                                                         ''),
                                                                        ('format_metadata',
                                                                         ['dist'],
                                                                         '')],
                                                            'properties': []},
             'distutils.tests.test_dist.TestDistribution': {'bases': ['distutils.dist.Distribution'],
                                                            'constructor': [],
                                                            'docstring': 'Distribution subclasses that avoids the default search for\n    configuration files.\n\n    The ._config_files attribute must be set before\n    .parse_config_files() is called.\n    ',
                                                            'methods': [('find_config_files',
                                                                         [],
                                                                         '')],
                                                            'properties': []},
             'distutils.tests.test_dist.test_dist': {'bases': ['distutils.cmd.Command'],
                                                     'constructor': [],
                                                     'docstring': 'Sample distutils extension command.',
                                                     'methods': [('initialize_options', [], '')],
                                                     'properties': ['user_options',
                                                                    'sample_option']},
             'distutils.tests.test_install.InstallTestCase': {'bases': ['distutils.tests.support.TempdirManager',
                                                                        'unittest.TestCase'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('test_home_installation_scheme',
                                                                           [],
                                                                           '')],
                                                              'properties': []},
             'distutils.tests.test_install_scripts.InstallScriptsTestCase': {'bases': ['distutils.tests.support.TempdirManager',
                                                                                       'distutils.tests.support.LoggingSilencer',
                                                                                       'unittest.TestCase'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [('test_default_settings',
                                                                                          [],
                                                                                          ''),
                                                                                         ('test_installation',
                                                                                          [],
                                                                                          '')],
                                                                             'properties': []},
             'distutils.text_file.TextFile': {'bases': [],
                                              'constructor': ['filename=None',
                                                              'file=None',
                                                              '**options'],
                                              'docstring': 'Provides a file-like object that takes care of all the things you\n       commonly want to do when processing a text file that has some\n       line-by-line syntax: strip comments (as long as "#" is your\n       comment character), skip blank lines, join adjacent lines by\n       escaping the newline (ie. backslash at end of line), strip\n       leading and/or trailing whitespace.  All of these are optional\n       and independently controllable.\n\n       Provides a \'warn()\' method so you can generate warning messages that\n       report physical line number, even if the logical line in question\n       spans multiple physical lines.  Also provides \'unreadline()\' for\n       implementing line-at-a-time lookahead.\n\n       Constructor is called as:\n\n           TextFile (filename=None, file=None, **options)\n\n       It bombs (RuntimeError) if both \'filename\' and \'file\' are None;\n       \'filename\' should be a string, and \'file\' a file object (or\n       something that provides \'readline()\' and \'close()\' methods).  It is\n       recommended that you supply at least \'filename\', so that TextFile\n       can include it in warning messages.  If \'file\' is not supplied,\n       TextFile creates its own using the \'open()\' builtin.\n\n       The options are all boolean, and affect the value returned by\n       \'readline()\':\n         strip_comments [default: true]\n           strip from "#" to end-of-line, as well as any whitespace\n           leading up to the "#" -- unless it is escaped by a backslash\n         lstrip_ws [default: false]\n           strip leading whitespace from each line before returning it\n         rstrip_ws [default: true]\n           strip trailing whitespace (including line terminator!) from\n           each line before returning it\n         skip_blanks [default: true}\n           skip lines that are empty *after* stripping comments and\n           whitespace.  (If both lstrip_ws and rstrip_ws are false,\n           then some lines may consist of solely whitespace: these will\n           *not* be skipped, even if \'skip_blanks\' is true.)\n         join_lines [default: false]\n           if a backslash is the last non-newline character on a line\n           after stripping comments and whitespace, join the following line\n           to it to form one "logical line"; if N consecutive lines end\n           with a backslash, then N+1 physical lines will be joined to\n           form one logical line.\n         collapse_join [default: false]\n           strip leading whitespace from lines that are joined to their\n           predecessor; only matters if (join_lines and not lstrip_ws)\n\n       Note that since \'rstrip_ws\' can strip the trailing newline, the\n       semantics of \'readline()\' must differ from those of the builtin file\n       object\'s \'readline()\' method!  In particular, \'readline()\' returns\n       None for end-of-file: an empty string might just be a blank line (or\n       an all-whitespace line), if \'rstrip_ws\' is true but \'skip_blanks\' is\n       not.',
                                              'methods': [('open',
                                                           ['filename'],
                                                           "Open a new file named 'filename'.  This overrides both the\n           'filename' and 'file' arguments to the constructor."),
                                                          ('close',
                                                           [],
                                                           'Close the current file and forget everything we know about it\n           (filename, current line number).'),
                                                          ('gen_error',
                                                           ['msg', 'line=None'],
                                                           ''),
                                                          ('error', ['msg', 'line=None'], ''),
                                                          ('warn',
                                                           ['msg', 'line=None'],
                                                           'Print (to stderr) a warning message tied to the current logical\n           line in the current file.  If the current logical line in the\n           file spans multiple physical lines, the warning refers to the\n           whole range, eg. "lines 3-5".  If \'line\' supplied, it overrides\n           the current line number; it may be a list or tuple to indicate a\n           range of physical lines, or an integer for a single physical\n           line.'),
                                                          ('readline',
                                                           [],
                                                           'Read and return a single logical line from the current file (or\n           from an internal buffer if lines have previously been "unread"\n           with \'unreadline()\').  If the \'join_lines\' option is true, this\n           may involve reading multiple physical lines concatenated into a\n           single string.  Updates the current line number, so calling\n           \'warn()\' after \'readline()\' emits a warning about the physical\n           line(s) just read.  Returns None on end-of-file, since the empty\n           string can occur if \'rstrip_ws\' is true but \'strip_blanks\' is\n           not.'),
                                                          ('readlines',
                                                           [],
                                                           'Read and return the list of all logical lines remaining in the\n           current file.'),
                                                          ('unreadline',
                                                           ['line'],
                                                           "Push 'line' (a string) onto an internal buffer that will be\n           checked by future 'readline()' calls.  Handy for implementing\n           a parser with line-at-a-time lookahead.")],
                                              'properties': ['default_options',
                                                             'filename',
                                                             'file',
                                                             'current_line',
                                                             'linebuf']},
             'distutils.unixccompiler.UnixCCompiler': {'bases': ['distutils.ccompiler.CCompiler'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('preprocess',
                                                                    ['source',
                                                                     'output_file=None',
                                                                     'macros=None',
                                                                     'include_dirs=None',
                                                                     'extra_preargs=None',
                                                                     'extra_postargs=None'],
                                                                    ''),
                                                                   ('_compile',
                                                                    ['obj',
                                                                     'src',
                                                                     'ext',
                                                                     'cc_args',
                                                                     'extra_postargs',
                                                                     'pp_opts'],
                                                                    ''),
                                                                   ('create_static_lib',
                                                                    ['objects',
                                                                     'output_libname',
                                                                     'output_dir=None',
                                                                     'debug=0',
                                                                     'target_lang=None'],
                                                                    ''),
                                                                   ('link',
                                                                    ['target_desc',
                                                                     'objects',
                                                                     'output_filename',
                                                                     'output_dir=None',
                                                                     'libraries=None',
                                                                     'library_dirs=None',
                                                                     'runtime_library_dirs=None',
                                                                     'export_symbols=None',
                                                                     'debug=0',
                                                                     'extra_preargs=None',
                                                                     'extra_postargs=None',
                                                                     'build_temp=None',
                                                                     'target_lang=None'],
                                                                    ''),
                                                                   ('library_dir_option',
                                                                    ['dir'],
                                                                    ''),
                                                                   ('runtime_library_dir_option',
                                                                    ['dir'],
                                                                    ''),
                                                                   ('library_option',
                                                                    ['lib'],
                                                                    ''),
                                                                   ('find_library_file',
                                                                    ['dirs', 'lib', 'debug=0'],
                                                                    '')],
                                                       'properties': ['compiler_type',
                                                                      'executables',
                                                                      'src_extensions',
                                                                      'obj_extension',
                                                                      'static_lib_extension',
                                                                      'shared_lib_extension',
                                                                      'dylib_lib_extension',
                                                                      'static_lib_format',
                                                                      'shared_lib_format',
                                                                      'dylib_lib_format',
                                                                      'exe_extension']},
             'distutils.version.LooseVersion': {'bases': ['distutils.version.Version'],
                                                'constructor': ['vstring=None'],
                                                'docstring': 'Version numbering for anarchists and software realists.\n    Implements the standard interface for version number classes as\n    described above.  A version number consists of a series of numbers,\n    separated by either periods or strings of letters.  When comparing\n    version numbers, the numeric components will be compared\n    numerically, and the alphabetic components lexically.  The following\n    are all valid version numbers, in no particular order:\n\n        1.5.1\n        1.5.2b2\n        161\n        3.10a\n        8.02\n        3.4j\n        1996.07.12\n        3.2.pl0\n        3.1.1.6\n        2g6\n        11g\n        0.960923\n        2.2beta29\n        1.13++\n        5.5.kw\n        2.0b1pl0\n\n    In fact, there is no such thing as an invalid version number under\n    this scheme; the rules for comparison are simple and predictable,\n    but may not always give the results you want (for some definition\n    of "want").\n    ',
                                                'methods': [('parse', ['vstring'], ''),
                                                            ('__str__', [], ''),
                                                            ('__repr__', [], ''),
                                                            ('__cmp__', ['other'], '')],
                                                'properties': ['component_re',
                                                               'vstring',
                                                               'version']},
             'distutils.version.StrictVersion': {'bases': ['distutils.version.Version'],
                                                 'constructor': [],
                                                 'docstring': 'Version numbering for anal retentives and software idealists.\n    Implements the standard interface for version number classes as\n    described above.  A version number consists of two or three\n    dot-separated numeric components, with an optional "pre-release" tag\n    on the end.  The pre-release tag consists of the letter \'a\' or \'b\'\n    followed by a number.  If the numeric components of two version\n    numbers are equal, then one with a pre-release tag will always\n    be deemed earlier (lesser) than one without.\n\n    The following are valid version numbers (shown in the order that\n    would be obtained by sorting according to the supplied cmp function):\n\n        0.4       0.4.0  (these two are equivalent)\n        0.4.1\n        0.5a1\n        0.5b3\n        0.5\n        0.9.6\n        1.0\n        1.0.4a3\n        1.0.4b1\n        1.0.4\n\n    The following are examples of invalid version numbers:\n\n        1\n        2.7.2.2\n        1.3.a4\n        1.3pl1\n        1.3c4\n\n    The rationale for this version numbering system will be explained\n    in the distutils documentation.\n    ',
                                                 'methods': [('parse', ['vstring'], ''),
                                                             ('__str__', [], ''),
                                                             ('__cmp__', ['other'], '')],
                                                 'properties': ['version_re',
                                                                'version',
                                                                'prerelease']},
             'distutils.version.Version': {'bases': [],
                                           'constructor': ['vstring=None'],
                                           'docstring': 'Abstract base class for version numbering classes.  Just provides\n    constructor (__init__) and reproducer (__repr__), because those\n    seem to be the same for all version numbering classes.\n    ',
                                           'methods': [('__repr__', [], '')],
                                           'properties': []},
             'distutils.versionpredicate.VersionPredicate': {'bases': [],
                                                             'constructor': ['versionPredicateStr'],
                                                             'docstring': "Parse and test package version predicates.\n\n    >>> v = VersionPredicate('pyepat.abc (>1.0, <3333.3a1, !=1555.1b3)')\n\n    The `name` attribute provides the full dotted name that is given::\n\n    >>> v.name\n    'pyepat.abc'\n\n    The str() of a `VersionPredicate` provides a normalized\n    human-readable version of the expression::\n\n    >>> print v\n    pyepat.abc (> 1.0, < 3333.3a1, != 1555.1b3)\n\n    The `satisfied_by()` method can be used to determine with a given\n    version number is included in the set described by the version\n    restrictions::\n\n    >>> v.satisfied_by('1.1')\n    True\n    >>> v.satisfied_by('1.4')\n    True\n    >>> v.satisfied_by('1.0')\n    False\n    >>> v.satisfied_by('4444.4')\n    False\n    >>> v.satisfied_by('1555.1b3')\n    False\n\n    `VersionPredicate` is flexible in accepting extra whitespace::\n\n    >>> v = VersionPredicate(' pat( ==  0.1  )  ')\n    >>> v.name\n    'pat'\n    >>> v.satisfied_by('0.1')\n    True\n    >>> v.satisfied_by('0.2')\n    False\n\n    If any version numbers passed in do not conform to the\n    restrictions of `StrictVersion`, a `ValueError` is raised::\n\n    >>> v = VersionPredicate('p1.p2.p3.p4(>=1.0, <=1.3a1, !=1.2zb3)')\n    Traceback (most recent call last):\n      ...\n    ValueError: invalid version number '1.2zb3'\n\n    It the module or package name given does not conform to what's\n    allowed as a legal module or package name, `ValueError` is\n    raised::\n\n    >>> v = VersionPredicate('foo-bar')\n    Traceback (most recent call last):\n      ...\n    ValueError: expected parenthesized list: '-bar'\n\n    >>> v = VersionPredicate('foo bar (12.21)')\n    Traceback (most recent call last):\n      ...\n    ValueError: expected parenthesized list: 'bar (12.21)'\n\n    ",
                                                             'methods': [('__str__', [], ''),
                                                                         ('satisfied_by',
                                                                          ['version'],
                                                                          'True if version is compatible with all the predicates in self.\n        The parameter version must be acceptable to the StrictVersion\n        constructor.  It may be either a string or StrictVersion.\n        ')],
                                                             'properties': ['name', 'pred']},
             'doctest.DebugRunner': {'bases': ['doctest.DocTestRunner'],
                                     'constructor': [],
                                     'docstring': "Run doc tests but raise an exception as soon as there is a failure.\n\n       If an unexpected exception occurs, an UnexpectedException is raised.\n       It contains the test, the example, and the original exception:\n\n         >>> runner = DebugRunner(verbose=False)\n         >>> test = DocTestParser().get_doctest('>>> raise KeyError\\n42',\n         ...                                    {}, 'foo', 'foo.py', 0)\n         >>> try:\n         ...     runner.run(test)\n         ... except UnexpectedException, failure:\n         ...     pass\n\n         >>> failure.test is test\n         True\n\n         >>> failure.example.want\n         '42\\n'\n\n         >>> exc_info = failure.exc_info\n         >>> raise exc_info[0], exc_info[1], exc_info[2]\n         Traceback (most recent call last):\n         ...\n         KeyError\n\n       We wrap the original exception to give the calling application\n       access to the test and example information.\n\n       If the output doesn't match, then a DocTestFailure is raised:\n\n         >>> test = DocTestParser().get_doctest('''\n         ...      >>> x = 1\n         ...      >>> x\n         ...      2\n         ...      ''', {}, 'foo', 'foo.py', 0)\n\n         >>> try:\n         ...    runner.run(test)\n         ... except DocTestFailure, failure:\n         ...    pass\n\n       DocTestFailure objects provide access to the test:\n\n         >>> failure.test is test\n         True\n\n       As well as to the example:\n\n         >>> failure.example.want\n         '2\\n'\n\n       and the actual output:\n\n         >>> failure.got\n         '1\\n'\n\n       If a failure or error occurs, the globals are left intact:\n\n         >>> del test.globs['__builtins__']\n         >>> test.globs\n         {'x': 1}\n\n         >>> test = DocTestParser().get_doctest('''\n         ...      >>> x = 2\n         ...      >>> raise KeyError\n         ...      ''', {}, 'foo', 'foo.py', 0)\n\n         >>> runner.run(test)\n         Traceback (most recent call last):\n         ...\n         UnexpectedException: <DocTest foo from foo.py:0 (2 examples)>\n\n         >>> del test.globs['__builtins__']\n         >>> test.globs\n         {'x': 2}\n\n       But the globals are cleared if there is no error:\n\n         >>> test = DocTestParser().get_doctest('''\n         ...      >>> x = 2\n         ...      ''', {}, 'foo', 'foo.py', 0)\n\n         >>> runner.run(test)\n         (0, 1)\n\n         >>> test.globs\n         {}\n\n       ",
                                     'methods': [('run',
                                                  ['test',
                                                   'compileflags=None',
                                                   'out=None',
                                                   'clear_globs=True'],
                                                  ''),
                                                 ('report_unexpected_exception',
                                                  ['out', 'test', 'example', 'exc_info'],
                                                  ''),
                                                 ('report_failure',
                                                  ['out', 'test', 'example', 'got'],
                                                  '')],
                                     'properties': []},
             'doctest.DocFileCase': {'bases': ['doctest.DocTestCase'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('id', [], ''),
                                                 ('__repr__', [], ''),
                                                 ('format_failure', ['err'], '')],
                                     'properties': ['__str__']},
             'doctest.DocTest': {'bases': [],
                                 'constructor': ['examples',
                                                 'globs',
                                                 'name',
                                                 'filename',
                                                 'lineno',
                                                 'docstring'],
                                 'docstring': '\n    A collection of doctest examples that should be run in a single\n    namespace.  Each `DocTest` defines the following attributes:\n\n      - examples: the list of examples.\n\n      - globs: The namespace (aka globals) that the examples should\n        be run in.\n\n      - name: A name identifying the DocTest (typically, the name of\n        the object whose docstring this DocTest was extracted from).\n\n      - filename: The name of the file that this DocTest was extracted\n        from, or `None` if the filename is unknown.\n\n      - lineno: The line number within filename where this DocTest\n        begins, or `None` if the line number is unavailable.  This\n        line number is zero-based, with respect to the beginning of\n        the file.\n\n      - docstring: The string that the examples were extracted from,\n        or `None` if the string is unavailable.\n    ',
                                 'methods': [('__repr__', [], ''), ('__cmp__', ['other'], '')],
                                 'properties': ['examples',
                                                'docstring',
                                                'globs',
                                                'name',
                                                'filename',
                                                'lineno']},
             'doctest.DocTestCase': {'bases': ['unittest.TestCase'],
                                     'constructor': ['test',
                                                     'optionflags=0',
                                                     'setUp=None',
                                                     'tearDown=None',
                                                     'checker=None'],
                                     'docstring': '',
                                     'methods': [('setUp', [], ''),
                                                 ('tearDown', [], ''),
                                                 ('runTest', [], ''),
                                                 ('format_failure', ['err'], ''),
                                                 ('debug',
                                                  [],
                                                  "Run the test case without results and without catching exceptions\n\n           The unit test framework includes a debug method on test cases\n           and test suites to support post-mortem debugging.  The test code\n           is run in such a way that errors are not caught.  This way a\n           caller can catch the errors and initiate post-mortem debugging.\n\n           The DocTestCase provides a debug method that raises\n           UnexpectedException errors if there is an unexepcted\n           exception:\n\n             >>> test = DocTestParser().get_doctest('>>> raise KeyError\\n42',\n             ...                {}, 'foo', 'foo.py', 0)\n             >>> case = DocTestCase(test)\n             >>> try:\n             ...     case.debug()\n             ... except UnexpectedException, failure:\n             ...     pass\n\n           The UnexpectedException contains the test, the example, and\n           the original exception:\n\n             >>> failure.test is test\n             True\n\n             >>> failure.example.want\n             '42\\n'\n\n             >>> exc_info = failure.exc_info\n             >>> raise exc_info[0], exc_info[1], exc_info[2]\n             Traceback (most recent call last):\n             ...\n             KeyError\n\n           If the output doesn't match, then a DocTestFailure is raised:\n\n             >>> test = DocTestParser().get_doctest('''\n             ...      >>> x = 1\n             ...      >>> x\n             ...      2\n             ...      ''', {}, 'foo', 'foo.py', 0)\n             >>> case = DocTestCase(test)\n\n             >>> try:\n             ...    case.debug()\n             ... except DocTestFailure, failure:\n             ...    pass\n\n           DocTestFailure objects provide access to the test:\n\n             >>> failure.test is test\n             True\n\n           As well as to the example:\n\n             >>> failure.example.want\n             '2\\n'\n\n           and the actual output:\n\n             >>> failure.got\n             '1\\n'\n\n           "),
                                                 ('id', [], ''),
                                                 ('__repr__', [], ''),
                                                 ('shortDescription', [], '')],
                                     'properties': ['_dt_optionflags',
                                                    '_dt_checker',
                                                    '_dt_test',
                                                    '_dt_setUp',
                                                    '_dt_tearDown',
                                                    '__str__']},
             'doctest.DocTestFailure': {'bases': ['Exception'],
                                        'constructor': ['test', 'example', 'got'],
                                        'docstring': 'A DocTest example has failed in debugging mode.\n\n    The exception instance has variables:\n\n    - test: the DocTest object being run\n\n    - example: the Example object that failed\n\n    - got: the actual output\n    ',
                                        'methods': [('__str__', [], '')],
                                        'properties': ['test', 'example', 'got']},
             'doctest.DocTestFinder': {'bases': [],
                                       'constructor': ['verbose=False',
                                                       'parser=DocTestParser()',
                                                       'recurse=True',
                                                       'exclude_empty=True'],
                                       'docstring': '\n    A class used to extract the DocTests that are relevant to a given\n    object, from its docstring and the docstrings of its contained\n    objects.  Doctests can currently be extracted from the following\n    object types: modules, functions, classes, methods, staticmethods,\n    classmethods, and properties.\n    ',
                                       'methods': [('find',
                                                    ['obj',
                                                     'name=None',
                                                     'module=None',
                                                     'globs=None',
                                                     'extraglobs=None'],
                                                    "\n        Return a list of the DocTests that are defined by the given\n        object's docstring, or by any of its contained objects'\n        docstrings.\n\n        The optional parameter `module` is the module that contains\n        the given object.  If the module is not specified or is None, then\n        the test finder will attempt to automatically determine the\n        correct module.  The object's module is used:\n\n            - As a default namespace, if `globs` is not specified.\n            - To prevent the DocTestFinder from extracting DocTests\n              from objects that are imported from other modules.\n            - To find the name of the file containing the object.\n            - To help find the line number of the object within its\n              file.\n\n        Contained objects whose module does not match `module` are ignored.\n\n        If `module` is False, no attempt to find the module will be made.\n        This is obscure, of use mostly in tests:  if `module` is False, or\n        is None but cannot be found automatically, then all objects are\n        considered to belong to the (non-existent) module, so all contained\n        objects will (recursively) be searched for doctests.\n\n        The globals for each DocTest is formed by combining `globs`\n        and `extraglobs` (bindings in `extraglobs` override bindings\n        in `globs`).  A new copy of the globals dictionary is created\n        for each DocTest.  If `globs` is not specified, then it\n        defaults to the module's `__dict__`, if specified, or {}\n        otherwise.  If `extraglobs` is not specified, then it defaults\n        to {}.\n\n        "),
                                                   ('_from_module',
                                                    ['module', 'object'],
                                                    '\n        Return true if the given object is defined in the given\n        module.\n        '),
                                                   ('_find',
                                                    ['tests',
                                                     'obj',
                                                     'name',
                                                     'module',
                                                     'source_lines',
                                                     'globs',
                                                     'seen'],
                                                    '\n        Find tests for the given object and any contained objects, and\n        add them to `tests`.\n        '),
                                                   ('_get_test',
                                                    ['obj',
                                                     'name',
                                                     'module',
                                                     'globs',
                                                     'source_lines'],
                                                    '\n        Return a DocTest for the given object, if it defines a docstring;\n        otherwise, return None.\n        '),
                                                   ('_find_lineno',
                                                    ['obj', 'source_lines'],
                                                    "\n        Return a line number of the given object's docstring.  Note:\n        this method assumes that the object has a docstring.\n        ")],
                                       'properties': ['_parser',
                                                      '_verbose',
                                                      '_recurse',
                                                      '_exclude_empty']},
             'doctest.DocTestParser': {'bases': [],
                                       'constructor': [],
                                       'docstring': '\n    A class used to parse strings containing doctest examples.\n    ',
                                       'methods': [('parse',
                                                    ['string', "name='<string>'"],
                                                    '\n        Divide the given string into examples and intervening text,\n        and return them as a list of alternating Examples and strings.\n        Line numbers for the Examples are 0-based.  The optional\n        argument `name` is a name identifying this string, and is only\n        used for error messages.\n        '),
                                                   ('get_doctest',
                                                    ['string',
                                                     'globs',
                                                     'name',
                                                     'filename',
                                                     'lineno'],
                                                    '\n        Extract all doctest examples from the given string, and\n        collect them into a `DocTest` object.\n\n        `globs`, `name`, `filename`, and `lineno` are attributes for\n        the new `DocTest` object.  See the documentation for `DocTest`\n        for more information.\n        '),
                                                   ('get_examples',
                                                    ['string', "name='<string>'"],
                                                    '\n        Extract all doctest examples from the given string, and return\n        them as a list of `Example` objects.  Line numbers are\n        0-based, because it\'s most common in doctests that nothing\n        interesting appears on the same line as opening triple-quote,\n        and so the first interesting line is called "line 1" then.\n\n        The optional argument `name` is a name identifying this\n        string, and is only used for error messages.\n        '),
                                                   ('_parse_example',
                                                    ['m', 'name', 'lineno'],
                                                    "\n        Given a regular expression match from `_EXAMPLE_RE` (`m`),\n        return a pair `(source, want)`, where `source` is the matched\n        example's source code (with prompts and indentation stripped);\n        and `want` is the example's expected output (with indentation\n        stripped).\n\n        `name` is the string's name, and `lineno` is the line number\n        where the example starts; both are used for error messages.\n        "),
                                                   ('_find_options',
                                                    ['source', 'name', 'lineno'],
                                                    "\n        Return a dictionary containing option overrides extracted from\n        option directives in the given source string.\n\n        `name` is the string's name, and `lineno` is the line number\n        where the example starts; both are used for error messages.\n        "),
                                                   ('_min_indent',
                                                    ['s'],
                                                    'Return the minimum indentation of any non-blank line in `s`'),
                                                   ('_check_prompt_blank',
                                                    ['lines', 'indent', 'name', 'lineno'],
                                                    '\n        Given the lines of a source string (including prompts and\n        leading indentation), check to make sure that every prompt is\n        followed by a space character.  If any line is not followed by\n        a space character, then raise ValueError.\n        '),
                                                   ('_check_prefix',
                                                    ['lines', 'prefix', 'name', 'lineno'],
                                                    '\n        Check that every line in the given list starts with the given\n        prefix; if any line does not, then raise a ValueError.\n        ')],
                                       'properties': ['_EXAMPLE_RE',
                                                      '_EXCEPTION_RE',
                                                      '_IS_BLANK_OR_COMMENT',
                                                      '_OPTION_DIRECTIVE_RE',
                                                      '_INDENT_RE']},
             'doctest.DocTestRunner': {'bases': [],
                                       'constructor': ['checker=None',
                                                       'verbose=None',
                                                       'optionflags=0'],
                                       'docstring': "\n    A class used to run DocTest test cases, and accumulate statistics.\n    The `run` method is used to process a single DocTest case.  It\n    returns a tuple `(f, t)`, where `t` is the number of test cases\n    tried, and `f` is the number of test cases that failed.\n\n        >>> tests = DocTestFinder().find(_TestClass)\n        >>> runner = DocTestRunner(verbose=False)\n        >>> tests.sort(key = lambda test: test.name)\n        >>> for test in tests:\n        ...     print test.name, '->', runner.run(test)\n        _TestClass -> (0, 2)\n        _TestClass.__init__ -> (0, 2)\n        _TestClass.get -> (0, 2)\n        _TestClass.square -> (0, 1)\n\n    The `summarize` method prints a summary of all the test cases that\n    have been run by the runner, and returns an aggregated `(f, t)`\n    tuple:\n\n        >>> runner.summarize(verbose=1)\n        4 items passed all tests:\n           2 tests in _TestClass\n           2 tests in _TestClass.__init__\n           2 tests in _TestClass.get\n           1 tests in _TestClass.square\n        7 tests in 4 items.\n        7 passed and 0 failed.\n        Test passed.\n        (0, 7)\n\n    The aggregated number of tried examples and failed examples is\n    also available via the `tries` and `failures` attributes:\n\n        >>> runner.tries\n        7\n        >>> runner.failures\n        0\n\n    The comparison between expected outputs and actual outputs is done\n    by an `OutputChecker`.  This comparison may be customized with a\n    number of option flags; see the documentation for `testmod` for\n    more information.  If the option flags are insufficient, then the\n    comparison may also be customized by passing a subclass of\n    `OutputChecker` to the constructor.\n\n    The test runner's display output can be controlled in two ways.\n    First, an output function (`out) can be passed to\n    `TestRunner.run`; this function will be called with strings that\n    should be displayed.  It defaults to `sys.stdout.write`.  If\n    capturing the output is not sufficient, then the display output\n    can be also customized by subclassing DocTestRunner, and\n    overriding the methods `report_start`, `report_success`,\n    `report_unexpected_exception`, and `report_failure`.\n    ",
                                       'methods': [('report_start',
                                                    ['out', 'test', 'example'],
                                                    '\n        Report that the test runner is about to process the given\n        example.  (Only displays a message if verbose=True)\n        '),
                                                   ('report_success',
                                                    ['out', 'test', 'example', 'got'],
                                                    '\n        Report that the given example ran successfully.  (Only\n        displays a message if verbose=True)\n        '),
                                                   ('report_failure',
                                                    ['out', 'test', 'example', 'got'],
                                                    '\n        Report that the given example failed.\n        '),
                                                   ('report_unexpected_exception',
                                                    ['out', 'test', 'example', 'exc_info'],
                                                    '\n        Report that the given example raised an unexpected exception.\n        '),
                                                   ('_failure_header', ['test', 'example'], ''),
                                                   ('__run',
                                                    ['test', 'compileflags', 'out'],
                                                    '\n        Run the examples in `test`.  Write the outcome of each example\n        with one of the `DocTestRunner.report_*` methods, using the\n        writer function `out`.  `compileflags` is the set of compiler\n        flags that should be used to execute examples.  Return a tuple\n        `(f, t)`, where `t` is the number of examples tried, and `f`\n        is the number of examples that failed.  The examples are run\n        in the namespace `test.globs`.\n        '),
                                                   ('__record_outcome',
                                                    ['test', 'f', 't'],
                                                    '\n        Record the fact that the given DocTest (`test`) generated `f`\n        failures out of `t` tried examples.\n        '),
                                                   ('__patched_linecache_getlines',
                                                    ['filename', 'module_globals=None'],
                                                    ''),
                                                   ('run',
                                                    ['test',
                                                     'compileflags=None',
                                                     'out=None',
                                                     'clear_globs=True'],
                                                    '\n        Run the examples in `test`, and display the results using the\n        writer function `out`.\n\n        The examples are run in the namespace `test.globs`.  If\n        `clear_globs` is true (the default), then this namespace will\n        be cleared after the test runs, to help with garbage\n        collection.  If you would like to examine the namespace after\n        the test completes, then use `clear_globs=False`.\n\n        `compileflags` gives the set of flags that should be used by\n        the Python compiler when running the examples.  If not\n        specified, then it will default to the set of future-import\n        flags that apply to `globs`.\n\n        The output of each example is checked using\n        `DocTestRunner.check_output`, and the results are formatted by\n        the `DocTestRunner.report_*` methods.\n        '),
                                                   ('summarize',
                                                    ['verbose=None'],
                                                    "\n        Print a summary of all the test cases that have been run by\n        this DocTestRunner, and return a tuple `(f, t)`, where `f` is\n        the total number of failed examples, and `t` is the total\n        number of tried examples.\n\n        The optional `verbose` argument controls how detailed the\n        summary is.  If the verbosity is not specified, then the\n        DocTestRunner's verbosity is used.\n        "),
                                                   ('merge', ['other'], '')],
                                       'properties': ['DIVIDER',
                                                      '_checker',
                                                      '_verbose',
                                                      'optionflags',
                                                      'original_optionflags',
                                                      'tries',
                                                      'failures',
                                                      '_name2ft',
                                                      '_fakeout',
                                                      '__LINECACHE_FILENAME_RE',
                                                      'test',
                                                      'debugger',
                                                      'save_linecache_getlines']},
             'doctest.Example': {'bases': [],
                                 'constructor': ['source',
                                                 'want',
                                                 'exc_msg=None',
                                                 'lineno=0',
                                                 'indent=0',
                                                 'options=None'],
                                 'docstring': "\n    A single doctest example, consisting of source code and expected\n    output.  `Example` defines the following attributes:\n\n      - source: A single Python statement, always ending with a newline.\n        The constructor adds a newline if needed.\n\n      - want: The expected output from running the source code (either\n        from stdout, or a traceback in case of exception).  `want` ends\n        with a newline unless it's empty, in which case it's an empty\n        string.  The constructor adds a newline if needed.\n\n      - exc_msg: The exception message generated by the example, if\n        the example is expected to generate an exception; or `None` if\n        it is not expected to generate an exception.  This exception\n        message is compared against the return value of\n        `traceback.format_exception_only()`.  `exc_msg` ends with a\n        newline unless it's `None`.  The constructor adds a newline\n        if needed.\n\n      - lineno: The line number within the DocTest string containing\n        this Example where the Example begins.  This line number is\n        zero-based, with respect to the beginning of the DocTest.\n\n      - indent: The example's indentation in the DocTest string.\n        I.e., the number of space characters that preceed the\n        example's first prompt.\n\n      - options: A dictionary mapping from option flags to True or\n        False, which is used to override default options for this\n        example.  Any option flags not contained in this dictionary\n        are left at their default value (as specified by the\n        DocTestRunner's optionflags).  By default, no options are set.\n    ",
                                 'methods': [],
                                 'properties': ['source',
                                                'want',
                                                'lineno',
                                                'indent',
                                                'options',
                                                'exc_msg']},
             'doctest.OutputChecker': {'bases': [],
                                       'constructor': [],
                                       'docstring': '\n    A class used to check the whether the actual output from a doctest\n    example matches the expected output.  `OutputChecker` defines two\n    methods: `check_output`, which compares a given pair of outputs,\n    and returns true if they match; and `output_difference`, which\n    returns a string describing the differences between two outputs.\n    ',
                                       'methods': [('check_output',
                                                    ['want', 'got', 'optionflags'],
                                                    '\n        Return True iff the actual output from an example (`got`)\n        matches the expected output (`want`).  These strings are\n        always considered to match if they are identical; but\n        depending on what option flags the test runner is using,\n        several non-exact match types are also possible.  See the\n        documentation for `TestRunner` for more information about\n        option flags.\n        '),
                                                   ('_do_a_fancy_diff',
                                                    ['want', 'got', 'optionflags'],
                                                    ''),
                                                   ('output_difference',
                                                    ['example', 'got', 'optionflags'],
                                                    '\n        Return a string describing the differences between the\n        expected output for a given example (`example`) and the actual\n        output (`got`).  `optionflags` is the set of option flags used\n        to compare `want` and `got`.\n        ')],
                                       'properties': []},
             'doctest.Tester': {'bases': [],
                                'constructor': ['mod=None',
                                                'globs=None',
                                                'verbose=None',
                                                'optionflags=0'],
                                'docstring': '',
                                'methods': [('runstring', ['s', 'name'], ''),
                                            ('rundoc',
                                             ['object', 'name=None', 'module=None'],
                                             ''),
                                            ('rundict', ['d', 'name', 'module=None'], ''),
                                            ('run__test__', ['d', 'name'], ''),
                                            ('summarize', ['verbose=None'], ''),
                                            ('merge', ['other'], '')],
                                'properties': ['globs',
                                               'verbose',
                                               'optionflags',
                                               'testfinder',
                                               'testrunner']},
             'doctest.UnexpectedException': {'bases': ['Exception'],
                                             'constructor': ['test', 'example', 'exc_info'],
                                             'docstring': 'A DocTest example has encountered an unexpected exception\n\n    The exception instance has variables:\n\n    - test: the DocTest object being run\n\n    - example: the Example object that failed\n\n    - exc_info: the exception info\n    ',
                                             'methods': [('__str__', [], '')],
                                             'properties': ['test', 'example', 'exc_info']},
             'doctest._OutputRedirectingPdb': {'bases': ['pdb.Pdb'],
                                               'constructor': ['out'],
                                               'docstring': '\n    A specialized version of the python debugger that redirects stdout\n    to a given stream when interacting with the user.  Stdout is *not*\n    redirected when traced code is executed.\n    ',
                                               'methods': [('set_trace', ['frame=None'], ''),
                                                           ('set_continue', [], ''),
                                                           ('trace_dispatch', ['*args'], '')],
                                               'properties': ['__out', '__debugger_used']},
             'doctest._SpoofOut': {'bases': ['StringIO.StringIO'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [('getvalue', [], ''),
                                               ('truncate', ['size=None'], '')],
                                   'properties': ['softspace']},
             'doctest._TestClass': {'bases': [],
                                    'constructor': ['val'],
                                    'docstring': "\n    A pointless class, for sanity-checking of docstring testing.\n\n    Methods:\n        square()\n        get()\n\n    >>> _TestClass(13).get() + _TestClass(-12).get()\n    1\n    >>> hex(_TestClass(13).square().get())\n    '0xa9'\n    ",
                                    'methods': [('square',
                                                 [],
                                                 "square() -> square TestClass's associated value\n\n        >>> _TestClass(13).square().get()\n        169\n        "),
                                                ('get',
                                                 [],
                                                 "get() -> return TestClass's associated value.\n\n        >>> x = _TestClass(-42)\n        >>> print x.get()\n        -42\n        ")],
                                    'properties': ['val']},
             'dumbdbm._Database': {'bases': ['UserDict.DictMixin'],
                                   'constructor': ['filebasename', 'mode'],
                                   'docstring': '',
                                   'methods': [('_update', [], ''),
                                               ('_commit', [], ''),
                                               ('__getitem__', ['key'], ''),
                                               ('_addval', ['val'], ''),
                                               ('_setval', ['pos', 'val'], ''),
                                               ('_addkey', ['key', 'pos_and_siz_pair'], ''),
                                               ('__setitem__', ['key', 'val'], ''),
                                               ('__delitem__', ['key'], ''),
                                               ('keys', [], ''),
                                               ('has_key', ['key'], ''),
                                               ('__contains__', ['key'], ''),
                                               ('iterkeys', [], ''),
                                               ('__len__', [], ''),
                                               ('close', [], '')],
                                   'properties': ['_os',
                                                  '_open',
                                                  '_mode',
                                                  '_dirfile',
                                                  '_datfile',
                                                  '_bakfile',
                                                  '_index',
                                                  'sync',
                                                  '__iter__',
                                                  '__del__']},
             'dummy_thread.LockType': {'bases': ['object'],
                                       'constructor': [],
                                       'docstring': 'Class implementing dummy implementation of thread.LockType.\n\n    Compatibility is maintained by maintaining self.locked_status\n    which is a boolean that stores the state of the lock.  Pickling of\n    the lock, though, should not be done since if the thread module is\n    then used with an unpickled ``lock()`` from here problems could\n    occur from this class not having atomic methods.\n\n    ',
                                       'methods': [('acquire',
                                                    ['waitflag=None'],
                                                    "Dummy implementation of acquire().\n\n        For blocking calls, self.locked_status is automatically set to\n        True and returned appropriately based on value of\n        ``waitflag``.  If it is non-blocking, then the value is\n        actually checked and not set if it is already acquired.  This\n        is all done so that threading.Condition's assert statements\n        aren't triggered and throw a little fit.\n\n        "),
                                                   ('__exit__', ['typ', 'val', 'tb'], ''),
                                                   ('release', [], 'Release the dummy lock.'),
                                                   ('locked', [], '')],
                                       'properties': ['locked_status', '__enter__']},
             'dummy_thread.error': {'bases': ['Exception'],
                                    'constructor': ['*args'],
                                    'docstring': 'Dummy implementation of thread.error.',
                                    'methods': [],
                                    'properties': ['args']},
             'email.LazyImporter': {'bases': ['object'],
                                    'constructor': ['module_name'],
                                    'docstring': '',
                                    'methods': [('__getattr__', ['name'], '')],
                                    'properties': ['__name__']},
             'email._parseaddr.AddressList': {'bases': ['email._parseaddr.AddrlistClass'],
                                              'constructor': ['field'],
                                              'docstring': 'An AddressList encapsulates a list of parsed RFC 2822 addresses.',
                                              'methods': [('__len__', [], ''),
                                                          ('__add__', ['other'], ''),
                                                          ('__iadd__', ['other'], ''),
                                                          ('__sub__', ['other'], ''),
                                                          ('__isub__', ['other'], ''),
                                                          ('__getitem__', ['index'], '')],
                                              'properties': ['addresslist']},
             'email._parseaddr.AddrlistClass': {'bases': [],
                                                'constructor': ['field'],
                                                'docstring': 'Address parser class by Ben Escoto.\n\n    To understand what this class does, it helps to have a copy of RFC 2822 in\n    front of you.\n\n    Note: this class interface is deprecated and may be removed in the future.\n    Use rfc822.AddressList instead.\n    ',
                                                'methods': [('gotonext',
                                                             [],
                                                             'Parse up to the start of the next address.'),
                                                            ('getaddrlist',
                                                             [],
                                                             'Parse all addresses.\n\n        Returns a list containing all of the addresses.\n        '),
                                                            ('getaddress',
                                                             [],
                                                             'Parse the next address.'),
                                                            ('getrouteaddr',
                                                             [],
                                                             'Parse a route address (Return-path value).\n\n        This method just skips all the route stuff and returns the addrspec.\n        '),
                                                            ('getaddrspec',
                                                             [],
                                                             'Parse an RFC 2822 addr-spec.'),
                                                            ('getdomain',
                                                             [],
                                                             'Get the complete domain name from an address.'),
                                                            ('getdelimited',
                                                             ['beginchar',
                                                              'endchars',
                                                              'allowcomments=True'],
                                                             "Parse a header fragment delimited by special characters.\n\n        `beginchar' is the start character for the fragment.\n        If self is not looking at an instance of `beginchar' then\n        getdelimited returns the empty string.\n\n        `endchars' is a sequence of allowable end-delimiting characters.\n        Parsing stops when one of these is encountered.\n\n        If `allowcomments' is non-zero, embedded RFC 2822 comments are allowed\n        within the parsed fragment.\n        "),
                                                            ('getquote',
                                                             [],
                                                             "Get a quote-delimited fragment from self's field."),
                                                            ('getcomment',
                                                             [],
                                                             "Get a parenthesis-delimited fragment from self's field."),
                                                            ('getdomainliteral',
                                                             [],
                                                             'Parse an RFC 2822 domain-literal.'),
                                                            ('getatom',
                                                             ['atomends=None'],
                                                             "Parse an RFC 2822 atom.\n\n        Optional atomends specifies a different set of end token delimiters\n        (the default is to use self.atomends).  This is used e.g. in\n        getphraselist() since phrase endings must not include the `.' (which\n        is legal in phrases)."),
                                                            ('getphraselist',
                                                             [],
                                                             'Parse a sequence of RFC 2822 phrases.\n\n        A phrase is a sequence of words, which are in turn either RFC 2822\n        atoms or quoted-strings.  Phrases are canonicalized by squeezing all\n        runs of continuous whitespace into one space.\n        ')],
                                                'properties': ['specials',
                                                               'pos',
                                                               'LWS',
                                                               'CR',
                                                               'FWS',
                                                               'atomends',
                                                               'phraseends',
                                                               'field',
                                                               'commentlist']},
             'email.charset.Charset': {'bases': [],
                                       'constructor': ['input_charset=DEFAULT_CHARSET'],
                                       'docstring': "Map character sets to their email properties.\n\n    This class provides information about the requirements imposed on email\n    for a specific character set.  It also provides convenience routines for\n    converting between character sets, given the availability of the\n    applicable codecs.  Given a character set, it will do its best to provide\n    information on how to use that character set in an email in an\n    RFC-compliant way.\n\n    Certain character sets must be encoded with quoted-printable or base64\n    when used in email headers or bodies.  Certain character sets must be\n    converted outright, and are not allowed in email.  Instances of this\n    module expose the following information about a character set:\n\n    input_charset: The initial character set specified.  Common aliases\n                   are converted to their `official' email names (e.g. latin_1\n                   is converted to iso-8859-1).  Defaults to 7-bit us-ascii.\n\n    header_encoding: If the character set must be encoded before it can be\n                     used in an email header, this attribute will be set to\n                     Charset.QP (for quoted-printable), Charset.BASE64 (for\n                     base64 encoding), or Charset.SHORTEST for the shortest of\n                     QP or BASE64 encoding.  Otherwise, it will be None.\n\n    body_encoding: Same as header_encoding, but describes the encoding for the\n                   mail message's body, which indeed may be different than the\n                   header encoding.  Charset.SHORTEST is not allowed for\n                   body_encoding.\n\n    output_charset: Some character sets must be converted before the can be\n                    used in email headers or bodies.  If the input_charset is\n                    one of them, this attribute will contain the name of the\n                    charset output will be converted to.  Otherwise, it will\n                    be None.\n\n    input_codec: The name of the Python codec used to convert the\n                 input_charset to Unicode.  If no conversion codec is\n                 necessary, this attribute will be None.\n\n    output_codec: The name of the Python codec used to convert Unicode\n                  to the output_charset.  If no conversion codec is necessary,\n                  this attribute will have the same value as the input_codec.\n    ",
                                       'methods': [('__str__', [], ''),
                                                   ('__eq__', ['other'], ''),
                                                   ('__ne__', ['other'], ''),
                                                   ('get_body_encoding',
                                                    [],
                                                    'Return the content-transfer-encoding used for body encoding.\n\n        This is either the string `quoted-printable\' or `base64\' depending on\n        the encoding used, or it is a function in which case you should call\n        the function with a single argument, the Message object being\n        encoded.  The function should then set the Content-Transfer-Encoding\n        header itself to whatever is appropriate.\n\n        Returns "quoted-printable" if self.body_encoding is QP.\n        Returns "base64" if self.body_encoding is BASE64.\n        Returns "7bit" otherwise.\n        '),
                                                   ('convert',
                                                    ['s'],
                                                    'Convert a string from the input_codec to the output_codec.'),
                                                   ('to_splittable',
                                                    ['s'],
                                                    "Convert a possibly multibyte string to a safely splittable format.\n\n        Uses the input_codec to try and convert the string to Unicode, so it\n        can be safely split on character boundaries (even for multibyte\n        characters).\n\n        Returns the string as-is if it isn't known how to convert it to\n        Unicode with the input_charset.\n\n        Characters that could not be converted to Unicode will be replaced\n        with the Unicode replacement character U+FFFD.\n        "),
                                                   ('from_splittable',
                                                    ['ustr', 'to_output=True'],
                                                    "Convert a splittable string back into an encoded string.\n\n        Uses the proper codec to try and convert the string from Unicode back\n        into an encoded format.  Return the string as-is if it is not Unicode,\n        or if it could not be converted from Unicode.\n\n        Characters that could not be converted from Unicode will be replaced\n        with an appropriate character (usually '?').\n\n        If to_output is True (the default), uses output_codec to convert to an\n        encoded format.  If to_output is False, uses input_codec.\n        "),
                                                   ('get_output_charset',
                                                    [],
                                                    'Return the output character set.\n\n        This is self.output_charset if that is not None, otherwise it is\n        self.input_charset.\n        '),
                                                   ('encoded_header_len',
                                                    ['s'],
                                                    'Return the length of the encoded header string.'),
                                                   ('header_encode',
                                                    ['s', 'convert=False'],
                                                    'Header-encode a string, optionally converting it to output_charset.\n\n        If convert is True, the string will be converted from the input\n        charset to the output charset automatically.  This is not useful for\n        multibyte character sets, which have line length issues (multibyte\n        characters must be split on a character, not a byte boundary); use the\n        high-level Header class to deal with these issues.  convert defaults\n        to False.\n\n        The type of encoding (base64 or quoted-printable) will be based on\n        self.header_encoding.\n        '),
                                                   ('body_encode',
                                                    ['s', 'convert=True'],
                                                    'Body-encode a string and convert it to output_charset.\n\n        If convert is True (the default), the string will be converted from\n        the input charset to output charset automatically.  Unlike\n        header_encode(), there are no issues with byte boundaries and\n        multibyte charsets in email bodies, so this is usually pretty safe.\n\n        The type of encoding (base64 or quoted-printable) will be based on\n        self.body_encoding.\n        ')],
                                       'properties': ['input_charset',
                                                      'header_encoding',
                                                      'body_encoding',
                                                      'output_charset',
                                                      'input_codec',
                                                      'output_codec',
                                                      '__repr__']},
             'email.errors.BoundaryError': {'bases': ['email.errors.MessageParseError'],
                                            'constructor': [],
                                            'docstring': "Couldn't find terminating boundary.",
                                            'methods': [],
                                            'properties': []},
             'email.errors.CharsetError': {'bases': ['email.errors.MessageError'],
                                           'constructor': [],
                                           'docstring': 'An illegal charset was given.',
                                           'methods': [],
                                           'properties': []},
             'email.errors.FirstHeaderLineIsContinuationDefect': {'bases': ['email.errors.MessageDefect'],
                                                                  'constructor': [],
                                                                  'docstring': 'A message had a continuation line as its first header line.',
                                                                  'methods': [],
                                                                  'properties': []},
             'email.errors.HeaderParseError': {'bases': ['email.errors.MessageParseError'],
                                               'constructor': [],
                                               'docstring': 'Error while parsing headers.',
                                               'methods': [],
                                               'properties': []},
             'email.errors.MalformedHeaderDefect': {'bases': ['email.errors.MessageDefect'],
                                                    'constructor': [],
                                                    'docstring': 'Found a header that was missing a colon, or was otherwise malformed.',
                                                    'methods': [],
                                                    'properties': []},
             'email.errors.MessageDefect': {'bases': [],
                                            'constructor': ['line=None'],
                                            'docstring': 'Base class for a message defect.',
                                            'methods': [],
                                            'properties': ['line']},
             'email.errors.MessageError': {'bases': ['Exception'],
                                           'constructor': [],
                                           'docstring': 'Base class for errors in the email package.',
                                           'methods': [],
                                           'properties': []},
             'email.errors.MessageParseError': {'bases': ['email.errors.MessageError'],
                                                'constructor': [],
                                                'docstring': 'Base class for message parsing errors.',
                                                'methods': [],
                                                'properties': []},
             'email.errors.MisplacedEnvelopeHeaderDefect': {'bases': ['email.errors.MessageDefect'],
                                                            'constructor': [],
                                                            'docstring': "A 'Unix-from' header was found in the middle of a header block.",
                                                            'methods': [],
                                                            'properties': []},
             'email.errors.MultipartConversionError': {'bases': ['email.errors.MessageError',
                                                                 'TypeError'],
                                                       'constructor': [],
                                                       'docstring': 'Conversion to a multipart is prohibited.',
                                                       'methods': [],
                                                       'properties': []},
             'email.errors.MultipartInvariantViolationDefect': {'bases': ['email.errors.MessageDefect'],
                                                                'constructor': [],
                                                                'docstring': 'A message claimed to be a multipart but no subparts were found.',
                                                                'methods': [],
                                                                'properties': []},
             'email.errors.NoBoundaryInMultipartDefect': {'bases': ['email.errors.MessageDefect'],
                                                          'constructor': [],
                                                          'docstring': 'A message claimed to be a multipart but had no boundary parameter.',
                                                          'methods': [],
                                                          'properties': []},
             'email.errors.StartBoundaryNotFoundDefect': {'bases': ['email.errors.MessageDefect'],
                                                          'constructor': [],
                                                          'docstring': 'The claimed start boundary was never found.',
                                                          'methods': [],
                                                          'properties': []},
             'email.feedparser.BufferedSubFile': {'bases': ['object'],
                                                  'constructor': [],
                                                  'docstring': 'A file-ish object that can have new data loaded into it.\n\n    You can also push and pop line-matching predicates onto a stack.  When the\n    current predicate matches the current line, a false EOF response\n    (i.e. empty string) is returned instead.  This lets the parser adhere to a\n    simple abstraction -- it parses until EOF closes the current message.\n    ',
                                                  'methods': [('push_eof_matcher',
                                                               ['pred'],
                                                               ''),
                                                              ('pop_eof_matcher', [], ''),
                                                              ('close', [], ''),
                                                              ('readline', [], ''),
                                                              ('unreadline', ['line'], ''),
                                                              ('push',
                                                               ['data'],
                                                               'Push some new data into this object.'),
                                                              ('pushlines', ['lines'], ''),
                                                              ('is_closed', [], ''),
                                                              ('__iter__', [], ''),
                                                              ('next', [], '')],
                                                  'properties': ['_partial',
                                                                 '_lines',
                                                                 '_eofstack',
                                                                 '_closed']},
             'email.feedparser.FeedParser': {'bases': [],
                                             'constructor': ['_factory=message.Message'],
                                             'docstring': 'A feed-style parser of email.',
                                             'methods': [('_set_headersonly', [], ''),
                                                         ('feed',
                                                          ['data'],
                                                          'Push more data into the parser.'),
                                                         ('_call_parse', [], ''),
                                                         ('close',
                                                          [],
                                                          'Parse all remaining data and return the root message object.'),
                                                         ('_new_message', [], ''),
                                                         ('_pop_message', [], ''),
                                                         ('_parsegen', [], ''),
                                                         ('_parse_headers', ['lines'], '')],
                                             'properties': ['_factory',
                                                            '_input',
                                                            '_msgstack',
                                                            '_parse',
                                                            '_cur',
                                                            '_last',
                                                            '_headersonly']},
             'email.generator.DecodedGenerator': {'bases': ['email.generator.Generator'],
                                                  'constructor': ['outfp',
                                                                  'mangle_from_=True',
                                                                  'maxheaderlen=78',
                                                                  'fmt=None'],
                                                  'docstring': 'Generator a text representation of a message.\n\n    Like the Generator base class, except that non-text parts are substituted\n    with a format string representing the part.\n    ',
                                                  'methods': [('_dispatch', ['msg'], '')],
                                                  'properties': ['_fmt']},
             'email.generator.Generator': {'bases': [],
                                           'constructor': ['outfp',
                                                           'mangle_from_=True',
                                                           'maxheaderlen=78'],
                                           'docstring': 'Generates output from a Message object tree.\n\n    This basic generator writes the message to the given file object as plain\n    text.\n    ',
                                           'methods': [('write', ['s'], ''),
                                                       ('flatten',
                                                        ['msg', 'unixfrom=False'],
                                                        "Print the message object tree rooted at msg to the output file\n        specified when the Generator instance was created.\n\n        unixfrom is a flag that forces the printing of a Unix From_ delimiter\n        before the first object in the message tree.  If the original message\n        has no From_ delimiter, a `standard' one is crafted.  By default, this\n        is False to inhibit the printing of any From_ delimiter.\n\n        Note that for subobjects, no From_ line is printed.\n        "),
                                                       ('clone',
                                                        ['fp'],
                                                        'Clone this generator with the exact same options.'),
                                                       ('_write', ['msg'], ''),
                                                       ('_dispatch', ['msg'], ''),
                                                       ('_write_headers', ['msg'], ''),
                                                       ('_handle_text', ['msg'], ''),
                                                       ('_handle_multipart', ['msg'], ''),
                                                       ('_handle_message_delivery_status',
                                                        ['msg'],
                                                        ''),
                                                       ('_handle_message', ['msg'], '')],
                                           'properties': ['_fp',
                                                          '_mangle_from_',
                                                          '_maxheaderlen',
                                                          '_writeBody']},
             'email.header.Header': {'bases': [],
                                     'constructor': ['s=None',
                                                     'charset=None',
                                                     'maxlinelen=None',
                                                     'header_name=None',
                                                     "continuation_ws=' '",
                                                     "errors='strict'"],
                                     'docstring': '',
                                     'methods': [('__str__',
                                                  [],
                                                  'A synonym for self.encode().'),
                                                 ('__unicode__',
                                                  [],
                                                  'Helper for the built-in unicode function.'),
                                                 ('__eq__', ['other'], ''),
                                                 ('__ne__', ['other'], ''),
                                                 ('append',
                                                  ['s', 'charset=None', "errors='strict'"],
                                                  "Append a string to the MIME header.\n\n        Optional charset, if given, should be a Charset instance or the name\n        of a character set (which will be converted to a Charset instance).  A\n        value of None (the default) means that the charset given in the\n        constructor is used.\n\n        s may be a byte string or a Unicode string.  If it is a byte string\n        (i.e. isinstance(s, str) is true), then charset is the encoding of\n        that byte string, and a UnicodeError will be raised if the string\n        cannot be decoded with that charset.  If s is a Unicode string, then\n        charset is a hint specifying the character set of the characters in\n        the string.  In this case, when producing an RFC 2822 compliant header\n        using RFC 2047 rules, the Unicode string will be encoded using the\n        following charsets in order: us-ascii, the charset hint, utf-8.  The\n        first character set not to provoke a UnicodeError is used.\n\n        Optional `errors' is passed as the third argument to any unicode() or\n        ustr.encode() call.\n        "),
                                                 ('_split',
                                                  ['s', 'charset', 'maxlinelen', 'splitchars'],
                                                  ''),
                                                 ('_split_ascii',
                                                  ['s', 'charset', 'firstlen', 'splitchars'],
                                                  ''),
                                                 ('_encode_chunks',
                                                  ['newchunks', 'maxlinelen'],
                                                  ''),
                                                 ('encode',
                                                  ["splitchars=';, '"],
                                                  "Encode a message header into an RFC-compliant format.\n\n        There are many issues involved in converting a given string for use in\n        an email header.  Only certain character sets are readable in most\n        email clients, and as header strings can only contain a subset of\n        7-bit ASCII, care must be taken to properly convert and encode (with\n        Base64 or quoted-printable) header strings.  In addition, there is a\n        75-character length limit on any given encoded header field, so\n        line-wrapping must be performed, even with double-byte character sets.\n\n        This method will do its best to convert the string to the correct\n        character set used in email, and encode and line wrap it safely with\n        the appropriate scheme for that character set.\n\n        If the given charset is not known or an error occurs during\n        conversion, this function will return the header untouched.\n\n        Optional splitchars is a string containing characters to split long\n        ASCII lines on, in rough support of RFC 2822's `highest level\n        syntactic breaks'.  This doesn't affect RFC 2047 encoded lines.\n        ")],
                                     'properties': ['_charset',
                                                    '_continuation_ws',
                                                    '_chunks',
                                                    '_firstlinelen',
                                                    '_maxlinelen']},
             'email.message.Message': {'bases': [],
                                       'constructor': [],
                                       'docstring': "Basic message object.\n\n    A message object is defined as something that has a bunch of RFC 2822\n    headers and a payload.  It may optionally have an envelope header\n    (a.k.a. Unix-From or From_ header).  If the message is a container (i.e. a\n    multipart or a message/rfc822), then the payload is a list of Message\n    objects, otherwise it is a string.\n\n    Message objects implement part of the `mapping' interface, which assumes\n    there is exactly one occurrance of the header per message.  Some headers\n    do in fact appear multiple times (e.g. Received) and for those headers,\n    you must use the explicit API to set or get all the headers.  Not all of\n    the mapping methods are implemented.\n    ",
                                       'methods': [('__str__',
                                                    [],
                                                    'Return the entire formatted message as a string.\n        This includes the headers, body, and envelope header.\n        '),
                                                   ('as_string',
                                                    ['unixfrom=False'],
                                                    'Return the entire formatted message as a string.\n        Optional `unixfrom\' when True, means include the Unix From_ envelope\n        header.\n\n        This is a convenience method and may not generate the message exactly\n        as you intend because by default it mangles lines that begin with\n        "From ".  For more flexibility, use the flatten() method of a\n        Generator instance.\n        '),
                                                   ('is_multipart',
                                                    [],
                                                    'Return True if the message consists of multiple parts.'),
                                                   ('set_unixfrom', ['unixfrom'], ''),
                                                   ('get_unixfrom', [], ''),
                                                   ('attach',
                                                    ['payload'],
                                                    'Add the given payload to the current payload.\n\n        The current payload will always be a list of objects after this method\n        is called.  If you want to set the payload to a scalar object, use\n        set_payload() instead.\n        '),
                                                   ('get_payload',
                                                    ['i=None', 'decode=False'],
                                                    "Return a reference to the payload.\n\n        The payload will either be a list object or a string.  If you mutate\n        the list object, you modify the message's payload in place.  Optional\n        i returns that index into the payload.\n\n        Optional decode is a flag indicating whether the payload should be\n        decoded or not, according to the Content-Transfer-Encoding header\n        (default is False).\n\n        When True and the message is not a multipart, the payload will be\n        decoded if this header's value is `quoted-printable' or `base64'.  If\n        some other encoding is used, or the header is missing, or if the\n        payload has bogus data (i.e. bogus base64 or uuencoded data), the\n        payload is returned as-is.\n\n        If the message is a multipart and the decode flag is True, then None\n        is returned.\n        "),
                                                   ('set_payload',
                                                    ['payload', 'charset=None'],
                                                    "Set the payload to the given value.\n\n        Optional charset sets the message's default character set.  See\n        set_charset() for details.\n        "),
                                                   ('set_charset',
                                                    ['charset'],
                                                    'Set the charset of the payload to a given character set.\n\n        charset can be a Charset instance, a string naming a character set, or\n        None.  If it is a string it will be converted to a Charset instance.\n        If charset is None, the charset parameter will be removed from the\n        Content-Type field.  Anything else will generate a TypeError.\n\n        The message will be assumed to be of type text/* encoded with\n        charset.input_charset.  It will be converted to charset.output_charset\n        and encoded properly, if needed, when generating the plain text\n        representation of the message.  MIME headers (MIME-Version,\n        Content-Type, Content-Transfer-Encoding) will be added as needed.\n\n        '),
                                                   ('get_charset',
                                                    [],
                                                    "Return the Charset instance associated with the message's payload.\n        "),
                                                   ('__len__',
                                                    [],
                                                    'Return the total number of headers, including duplicates.'),
                                                   ('__getitem__',
                                                    ['name'],
                                                    'Get a header value.\n\n        Return None if the header is missing instead of raising an exception.\n\n        Note that if the header appeared multiple times, exactly which\n        occurrance gets returned is undefined.  Use get_all() to get all\n        the values matching a header field name.\n        '),
                                                   ('__setitem__',
                                                    ['name', 'val'],
                                                    'Set the value of a header.\n\n        Note: this does not overwrite an existing header with the same field\n        name.  Use __delitem__() first to delete any existing headers.\n        '),
                                                   ('__delitem__',
                                                    ['name'],
                                                    'Delete all occurrences of a header, if present.\n\n        Does not raise an exception if the header is missing.\n        '),
                                                   ('__contains__', ['name'], ''),
                                                   ('has_key',
                                                    ['name'],
                                                    'Return true if the message contains the header.'),
                                                   ('keys',
                                                    [],
                                                    "Return a list of all the message's header field names.\n\n        These will be sorted in the order they appeared in the original\n        message, or were added to the message, and may contain duplicates.\n        Any fields deleted and re-inserted are always appended to the header\n        list.\n        "),
                                                   ('values',
                                                    [],
                                                    "Return a list of all the message's header values.\n\n        These will be sorted in the order they appeared in the original\n        message, or were added to the message, and may contain duplicates.\n        Any fields deleted and re-inserted are always appended to the header\n        list.\n        "),
                                                   ('items',
                                                    [],
                                                    "Get all the message's header fields and values.\n\n        These will be sorted in the order they appeared in the original\n        message, or were added to the message, and may contain duplicates.\n        Any fields deleted and re-inserted are always appended to the header\n        list.\n        "),
                                                   ('get',
                                                    ['name', 'failobj=None'],
                                                    'Get a header value.\n\n        Like __getitem__() but return failobj instead of None when the field\n        is missing.\n        '),
                                                   ('get_all',
                                                    ['name', 'failobj=None'],
                                                    'Return a list of all the values for the named field.\n\n        These will be sorted in the order they appeared in the original\n        message, and may contain duplicates.  Any fields deleted and\n        re-inserted are always appended to the header list.\n\n        If no such fields exist, failobj is returned (defaults to None).\n        '),
                                                   ('add_header',
                                                    ['_name', '_value', '**_params'],
                                                    'Extended header setting.\n\n        name is the header field to add.  keyword arguments can be used to set\n        additional parameters for the header field, with underscores converted\n        to dashes.  Normally the parameter will be added as key="value" unless\n        value is None, in which case only the key will be added.\n\n        Example:\n\n        msg.add_header(\'content-disposition\', \'attachment\', filename=\'bud.gif\')\n        '),
                                                   ('replace_header',
                                                    ['_name', '_value'],
                                                    'Replace a header.\n\n        Replace the first matching header found in the message, retaining\n        header order and case.  If no matching header was found, a KeyError is\n        raised.\n        '),
                                                   ('get_content_type',
                                                    [],
                                                    "Return the message's content type.\n\n        The returned string is coerced to lower case of the form\n        `maintype/subtype'.  If there was no Content-Type header in the\n        message, the default type as given by get_default_type() will be\n        returned.  Since according to RFC 2045, messages always have a default\n        type this will always return a value.\n\n        RFC 2045 defines a message's default type to be text/plain unless it\n        appears inside a multipart/digest container, in which case it would be\n        message/rfc822.\n        "),
                                                   ('get_content_maintype',
                                                    [],
                                                    "Return the message's main content type.\n\n        This is the `maintype' part of the string returned by\n        get_content_type().\n        "),
                                                   ('get_content_subtype',
                                                    [],
                                                    "Returns the message's sub-content type.\n\n        This is the `subtype' part of the string returned by\n        get_content_type().\n        "),
                                                   ('get_default_type',
                                                    [],
                                                    "Return the `default' content type.\n\n        Most messages have a default content type of text/plain, except for\n        messages that are subparts of multipart/digest containers.  Such\n        subparts have a default content type of message/rfc822.\n        "),
                                                   ('set_default_type',
                                                    ['ctype'],
                                                    'Set the `default\' content type.\n\n        ctype should be either "text/plain" or "message/rfc822", although this\n        is not enforced.  The default content type is not stored in the\n        Content-Type header.\n        '),
                                                   ('_get_params_preserve',
                                                    ['failobj', 'header'],
                                                    ''),
                                                   ('get_params',
                                                    ['failobj=None',
                                                     "header='content-type'",
                                                     'unquote=True'],
                                                    "Return the message's Content-Type parameters, as a list.\n\n        The elements of the returned list are 2-tuples of key/value pairs, as\n        split on the `=' sign.  The left hand side of the `=' is the key,\n        while the right hand side is the value.  If there is no `=' sign in\n        the parameter the value is the empty string.  The value is as\n        described in the get_param() method.\n\n        Optional failobj is the object to return if there is no Content-Type\n        header.  Optional header is the header to search instead of\n        Content-Type.  If unquote is True, the value is unquoted.\n        "),
                                                   ('get_param',
                                                    ['param',
                                                     'failobj=None',
                                                     "header='content-type'",
                                                     'unquote=True'],
                                                    "Return the parameter value if found in the Content-Type header.\n\n        Optional failobj is the object to return if there is no Content-Type\n        header, or the Content-Type header has no such parameter.  Optional\n        header is the header to search instead of Content-Type.\n\n        Parameter keys are always compared case insensitively.  The return\n        value can either be a string, or a 3-tuple if the parameter was RFC\n        2231 encoded.  When it's a 3-tuple, the elements of the value are of\n        the form (CHARSET, LANGUAGE, VALUE).  Note that both CHARSET and\n        LANGUAGE can be None, in which case you should consider VALUE to be\n        encoded in the us-ascii charset.  You can usually ignore LANGUAGE.\n\n        Your application should be prepared to deal with 3-tuple return\n        values, and can convert the parameter to a Unicode string like so:\n\n            param = msg.get_param('foo')\n            if isinstance(param, tuple):\n                param = unicode(param[2], param[0] or 'us-ascii')\n\n        In any case, the parameter value (either the returned string, or the\n        VALUE item in the 3-tuple) is always unquoted, unless unquote is set\n        to False.\n        "),
                                                   ('set_param',
                                                    ['param',
                                                     'value',
                                                     "header='Content-Type'",
                                                     'requote=True',
                                                     'charset=None',
                                                     "language=''"],
                                                    'Set a parameter in the Content-Type header.\n\n        If the parameter already exists in the header, its value will be\n        replaced with the new value.\n\n        If header is Content-Type and has not yet been defined for this\n        message, it will be set to "text/plain" and the new parameter and\n        value will be appended as per RFC 2045.\n\n        An alternate header can specified in the header argument, and all\n        parameters will be quoted as necessary unless requote is False.\n\n        If charset is specified, the parameter will be encoded according to RFC\n        2231.  Optional language specifies the RFC 2231 language, defaulting\n        to the empty string.  Both charset and language should be strings.\n        '),
                                                   ('del_param',
                                                    ['param',
                                                     "header='content-type'",
                                                     'requote=True'],
                                                    'Remove the given parameter completely from the Content-Type header.\n\n        The header will be re-written in place without the parameter or its\n        value. All values will be quoted as necessary unless requote is\n        False.  Optional header specifies an alternative to the Content-Type\n        header.\n        '),
                                                   ('set_type',
                                                    ['type',
                                                     "header='Content-Type'",
                                                     'requote=True'],
                                                    'Set the main type and subtype for the Content-Type header.\n\n        type must be a string in the form "maintype/subtype", otherwise a\n        ValueError is raised.\n\n        This method replaces the Content-Type header, keeping all the\n        parameters in place.  If requote is False, this leaves the existing\n        header\'s quoting as is.  Otherwise, the parameters will be quoted (the\n        default).\n\n        An alternative header can be specified in the header argument.  When\n        the Content-Type header is set, we\'ll always also add a MIME-Version\n        header.\n        '),
                                                   ('get_filename',
                                                    ['failobj=None'],
                                                    "Return the filename associated with the payload if present.\n\n        The filename is extracted from the Content-Disposition header's\n        `filename' parameter, and it is unquoted.  If that header is missing\n        the `filename' parameter, this method falls back to looking for the\n        `name' parameter.\n        "),
                                                   ('get_boundary',
                                                    ['failobj=None'],
                                                    "Return the boundary associated with the payload if present.\n\n        The boundary is extracted from the Content-Type header's `boundary'\n        parameter, and it is unquoted.\n        "),
                                                   ('set_boundary',
                                                    ['boundary'],
                                                    "Set the boundary parameter in Content-Type to 'boundary'.\n\n        This is subtly different than deleting the Content-Type header and\n        adding a new one with a new boundary parameter via add_header().  The\n        main difference is that using the set_boundary() method preserves the\n        order of the Content-Type header in the original message.\n\n        HeaderParseError is raised if the message has no Content-Type header.\n        "),
                                                   ('get_content_charset',
                                                    ['failobj=None'],
                                                    'Return the charset parameter of the Content-Type header.\n\n        The returned string is always coerced to lower case.  If there is no\n        Content-Type header, or if that header has no charset parameter,\n        failobj is returned.\n        '),
                                                   ('get_charsets',
                                                    ['failobj=None'],
                                                    'Return a list containing the charset(s) used in this message.\n\n        The returned list of items describes the Content-Type headers\'\n        charset parameter for this message and all the subparts in its\n        payload.\n\n        Each item will either be a string (the value of the charset parameter\n        in the Content-Type header of that part) or the value of the\n        \'failobj\' parameter (defaults to None), if the part does not have a\n        main MIME type of "text", or the charset is not defined.\n\n        The list will contain one string for each part of the message, plus\n        one for the container message (i.e. self), so that a non-multipart\n        message will still return a list of length 1.\n        ')],
                                       'properties': ['_headers',
                                                      '_unixfrom',
                                                      '_payload',
                                                      '_charset',
                                                      'preamble',
                                                      'epilogue',
                                                      'defects',
                                                      '_default_type']},
             'email.mime.application.MIMEApplication': {'bases': ['email.mime.nonmultipart.MIMENonMultipart'],
                                                        'constructor': ['_data',
                                                                        "_subtype='octet-stream'",
                                                                        '_encoder=encoders.encode_base64',
                                                                        '**_params'],
                                                        'docstring': 'Class for generating application/* MIME documents.',
                                                        'methods': [],
                                                        'properties': []},
             'email.mime.audio.MIMEAudio': {'bases': ['email.mime.nonmultipart.MIMENonMultipart'],
                                            'constructor': ['_audiodata',
                                                            '_subtype=None',
                                                            '_encoder=encoders.encode_base64',
                                                            '**_params'],
                                            'docstring': 'Class for generating audio/* MIME documents.',
                                            'methods': [],
                                            'properties': []},
             'email.mime.base.MIMEBase': {'bases': ['email.message.Message'],
                                          'constructor': ['_maintype', '_subtype', '**_params'],
                                          'docstring': 'Base class for MIME specializations.',
                                          'methods': [],
                                          'properties': []},
             'email.mime.image.MIMEImage': {'bases': ['email.mime.nonmultipart.MIMENonMultipart'],
                                            'constructor': ['_imagedata',
                                                            '_subtype=None',
                                                            '_encoder=encoders.encode_base64',
                                                            '**_params'],
                                            'docstring': 'Class for generating image/* type MIME documents.',
                                            'methods': [],
                                            'properties': []},
             'email.mime.message.MIMEMessage': {'bases': ['email.mime.nonmultipart.MIMENonMultipart'],
                                                'constructor': ['_msg', "_subtype='rfc822'"],
                                                'docstring': 'Class representing message/* MIME documents.',
                                                'methods': [],
                                                'properties': []},
             'email.mime.multipart.MIMEMultipart': {'bases': ['email.mime.base.MIMEBase'],
                                                    'constructor': ["_subtype='mixed'",
                                                                    'boundary=None',
                                                                    '_subparts=None',
                                                                    '**_params'],
                                                    'docstring': 'Base class for MIME multipart/* type messages.',
                                                    'methods': [],
                                                    'properties': []},
             'email.mime.nonmultipart.MIMENonMultipart': {'bases': ['email.mime.base.MIMEBase'],
                                                          'constructor': [],
                                                          'docstring': 'Base class for MIME multipart/* type messages.',
                                                          'methods': [('attach',
                                                                       ['payload'],
                                                                       '')],
                                                          'properties': ['__pychecker__']},
             'email.mime.text.MIMEText': {'bases': ['email.mime.nonmultipart.MIMENonMultipart'],
                                          'constructor': ['_text',
                                                          "_subtype='plain'",
                                                          "_charset='us-ascii'"],
                                          'docstring': 'Class for generating text/* type MIME documents.',
                                          'methods': [],
                                          'properties': []},
             'email.parser.HeaderParser': {'bases': ['email.parser.Parser'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('parse',
                                                        ['fp', 'headersonly=True'],
                                                        ''),
                                                       ('parsestr',
                                                        ['text', 'headersonly=True'],
                                                        '')],
                                           'properties': []},
             'email.parser.Parser': {'bases': [],
                                     'constructor': ['*args', '**kws'],
                                     'docstring': '',
                                     'methods': [('parse',
                                                  ['fp', 'headersonly=False'],
                                                  'Create a message structure from the data in a file.\n\n        Reads all the data from the file and returns the root of the message\n        structure.  Optional headersonly is a flag specifying whether to stop\n        parsing after reading the headers or not.  The default is False,\n        meaning it parses the entire contents of the file.\n        '),
                                                 ('parsestr',
                                                  ['text', 'headersonly=False'],
                                                  'Create a message structure from a string.\n\n        Returns the root of the message structure.  Optional headersonly is a\n        flag specifying whether to stop parsing after reading the headers or\n        not.  The default is False, meaning it parses the entire contents of\n        the file.\n        ')],
                                     'properties': ['_class']},
             'encodings.CodecRegistryError': {'bases': ['LookupError', 'SystemError'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.ascii.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': ['encode', 'decode']},
             'encodings.ascii.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.ascii.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.ascii.StreamConverter': {'bases': ['encodings.ascii.StreamWriter',
                                                           'encodings.ascii.StreamReader'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['encode', 'decode']},
             'encodings.ascii.StreamReader': {'bases': ['encodings.ascii.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.ascii.StreamWriter': {'bases': ['encodings.ascii.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.base64_codec.Codec': {'bases': ['codecs.Codec'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('encode',
                                                           ['input', "errors='strict'"],
                                                           ''),
                                                          ('decode',
                                                           ['input', "errors='strict'"],
                                                           '')],
                                              'properties': []},
             'encodings.base64_codec.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('decode',
                                                                        ['input',
                                                                         'final=False'],
                                                                        '')],
                                                           'properties': []},
             'encodings.base64_codec.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('encode',
                                                                        ['input',
                                                                         'final=False'],
                                                                        '')],
                                                           'properties': []},
             'encodings.base64_codec.StreamReader': {'bases': ['encodings.base64_codec.Codec',
                                                               'codecs.StreamReader'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'encodings.base64_codec.StreamWriter': {'bases': ['encodings.base64_codec.Codec',
                                                               'codecs.StreamWriter'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'encodings.big5.Codec': {'bases': ['codecs.Codec'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [],
                                      'properties': ['encode', 'decode']},
             'encodings.big5.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                             'codecs.IncrementalDecoder'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['codec']},
             'encodings.big5.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                             'codecs.IncrementalEncoder'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['codec']},
             'encodings.big5.StreamReader': {'bases': ['encodings.big5.Codec',
                                                       '_multibytecodec.MultibyteStreamReader',
                                                       'codecs.StreamReader'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['codec']},
             'encodings.big5.StreamWriter': {'bases': ['encodings.big5.Codec',
                                                       '_multibytecodec.MultibyteStreamWriter',
                                                       'codecs.StreamWriter'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['codec']},
             'encodings.big5hkscs.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': ['encode', 'decode']},
             'encodings.big5hkscs.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                  'codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['codec']},
             'encodings.big5hkscs.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                  'codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['codec']},
             'encodings.big5hkscs.StreamReader': {'bases': ['encodings.big5hkscs.Codec',
                                                            '_multibytecodec.MultibyteStreamReader',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['codec']},
             'encodings.big5hkscs.StreamWriter': {'bases': ['encodings.big5hkscs.Codec',
                                                            '_multibytecodec.MultibyteStreamWriter',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['codec']},
             'encodings.bz2_codec.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.bz2_codec.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': ["errors='strict'"],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     ''),
                                                                    ('reset', [], '')],
                                                        'properties': ['errors',
                                                                       'decompressobj']},
             'encodings.bz2_codec.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': ["errors='strict'"],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     ''),
                                                                    ('reset', [], '')],
                                                        'properties': ['errors', 'compressobj']},
             'encodings.bz2_codec.StreamReader': {'bases': ['encodings.bz2_codec.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.bz2_codec.StreamWriter': {'bases': ['encodings.bz2_codec.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.charmap.Codec': {'bases': ['codecs.Codec'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['encode', 'decode']},
             'encodings.charmap.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                      'constructor': ["errors='strict'",
                                                                      'mapping=None'],
                                                      'docstring': '',
                                                      'methods': [('decode',
                                                                   ['input', 'final=False'],
                                                                   '')],
                                                      'properties': ['mapping']},
             'encodings.charmap.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                      'constructor': ["errors='strict'",
                                                                      'mapping=None'],
                                                      'docstring': '',
                                                      'methods': [('encode',
                                                                   ['input', 'final=False'],
                                                                   '')],
                                                      'properties': ['mapping']},
             'encodings.charmap.StreamReader': {'bases': ['encodings.charmap.Codec',
                                                          'codecs.StreamReader'],
                                                'constructor': ['stream',
                                                                "errors='strict'",
                                                                'mapping=None'],
                                                'docstring': '',
                                                'methods': [('decode',
                                                             ['input', "errors='strict'"],
                                                             '')],
                                                'properties': ['mapping']},
             'encodings.charmap.StreamWriter': {'bases': ['encodings.charmap.Codec',
                                                          'codecs.StreamWriter'],
                                                'constructor': ['stream',
                                                                "errors='strict'",
                                                                'mapping=None'],
                                                'docstring': '',
                                                'methods': [('encode',
                                                             ['input', "errors='strict'"],
                                                             '')],
                                                'properties': ['mapping']},
             'encodings.cp037.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp037.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp037.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp037.StreamReader': {'bases': ['encodings.cp037.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp037.StreamWriter': {'bases': ['encodings.cp037.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp1006.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.cp1006.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1006.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1006.StreamReader': {'bases': ['encodings.cp1006.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1006.StreamWriter': {'bases': ['encodings.cp1006.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1026.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.cp1026.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1026.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1026.StreamReader': {'bases': ['encodings.cp1026.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1026.StreamWriter': {'bases': ['encodings.cp1026.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1140.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.cp1140.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1140.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1140.StreamReader': {'bases': ['encodings.cp1140.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1140.StreamWriter': {'bases': ['encodings.cp1140.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1250.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.cp1250.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1250.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1250.StreamReader': {'bases': ['encodings.cp1250.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1250.StreamWriter': {'bases': ['encodings.cp1250.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1251.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.cp1251.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1251.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1251.StreamReader': {'bases': ['encodings.cp1251.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1251.StreamWriter': {'bases': ['encodings.cp1251.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1252.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.cp1252.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1252.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1252.StreamReader': {'bases': ['encodings.cp1252.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1252.StreamWriter': {'bases': ['encodings.cp1252.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1253.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.cp1253.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1253.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1253.StreamReader': {'bases': ['encodings.cp1253.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1253.StreamWriter': {'bases': ['encodings.cp1253.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1254.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.cp1254.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1254.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1254.StreamReader': {'bases': ['encodings.cp1254.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1254.StreamWriter': {'bases': ['encodings.cp1254.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1255.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.cp1255.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1255.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1255.StreamReader': {'bases': ['encodings.cp1255.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1255.StreamWriter': {'bases': ['encodings.cp1255.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1256.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.cp1256.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1256.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1256.StreamReader': {'bases': ['encodings.cp1256.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1256.StreamWriter': {'bases': ['encodings.cp1256.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1257.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.cp1257.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1257.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1257.StreamReader': {'bases': ['encodings.cp1257.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1257.StreamWriter': {'bases': ['encodings.cp1257.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1258.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.cp1258.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1258.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.cp1258.StreamReader': {'bases': ['encodings.cp1258.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp1258.StreamWriter': {'bases': ['encodings.cp1258.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.cp424.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp424.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp424.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp424.StreamReader': {'bases': ['encodings.cp424.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp424.StreamWriter': {'bases': ['encodings.cp424.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp437.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp437.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp437.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp437.StreamReader': {'bases': ['encodings.cp437.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp437.StreamWriter': {'bases': ['encodings.cp437.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp500.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp500.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp500.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp500.StreamReader': {'bases': ['encodings.cp500.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp500.StreamWriter': {'bases': ['encodings.cp500.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp737.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp737.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp737.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp737.StreamReader': {'bases': ['encodings.cp737.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp737.StreamWriter': {'bases': ['encodings.cp737.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp775.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp775.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp775.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp775.StreamReader': {'bases': ['encodings.cp775.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp775.StreamWriter': {'bases': ['encodings.cp775.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp850.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp850.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp850.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp850.StreamReader': {'bases': ['encodings.cp850.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp850.StreamWriter': {'bases': ['encodings.cp850.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp852.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp852.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp852.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp852.StreamReader': {'bases': ['encodings.cp852.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp852.StreamWriter': {'bases': ['encodings.cp852.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp855.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp855.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp855.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp855.StreamReader': {'bases': ['encodings.cp855.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp855.StreamWriter': {'bases': ['encodings.cp855.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp856.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp856.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp856.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp856.StreamReader': {'bases': ['encodings.cp856.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp856.StreamWriter': {'bases': ['encodings.cp856.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp857.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp857.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp857.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp857.StreamReader': {'bases': ['encodings.cp857.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp857.StreamWriter': {'bases': ['encodings.cp857.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp860.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp860.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp860.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp860.StreamReader': {'bases': ['encodings.cp860.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp860.StreamWriter': {'bases': ['encodings.cp860.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp861.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp861.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp861.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp861.StreamReader': {'bases': ['encodings.cp861.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp861.StreamWriter': {'bases': ['encodings.cp861.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp862.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp862.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp862.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp862.StreamReader': {'bases': ['encodings.cp862.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp862.StreamWriter': {'bases': ['encodings.cp862.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp863.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp863.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp863.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp863.StreamReader': {'bases': ['encodings.cp863.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp863.StreamWriter': {'bases': ['encodings.cp863.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp864.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp864.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp864.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp864.StreamReader': {'bases': ['encodings.cp864.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp864.StreamWriter': {'bases': ['encodings.cp864.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp865.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp865.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp865.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp865.StreamReader': {'bases': ['encodings.cp865.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp865.StreamWriter': {'bases': ['encodings.cp865.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp866.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp866.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp866.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp866.StreamReader': {'bases': ['encodings.cp866.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp866.StreamWriter': {'bases': ['encodings.cp866.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp869.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp869.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp869.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp869.StreamReader': {'bases': ['encodings.cp869.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp869.StreamWriter': {'bases': ['encodings.cp869.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp874.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp874.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp874.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp874.StreamReader': {'bases': ['encodings.cp874.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp874.StreamWriter': {'bases': ['encodings.cp874.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp875.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('encode', ['input', "errors='strict'"], ''),
                                                   ('decode', ['input', "errors='strict'"], '')],
                                       'properties': []},
             'encodings.cp875.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('decode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp875.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.cp875.StreamReader': {'bases': ['encodings.cp875.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp875.StreamWriter': {'bases': ['encodings.cp875.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.cp932.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': ['encode', 'decode']},
             'encodings.cp932.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                              'codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['codec']},
             'encodings.cp932.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                              'codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['codec']},
             'encodings.cp932.StreamReader': {'bases': ['encodings.cp932.Codec',
                                                        '_multibytecodec.MultibyteStreamReader',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['codec']},
             'encodings.cp932.StreamWriter': {'bases': ['encodings.cp932.Codec',
                                                        '_multibytecodec.MultibyteStreamWriter',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['codec']},
             'encodings.cp949.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': ['encode', 'decode']},
             'encodings.cp949.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                              'codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['codec']},
             'encodings.cp949.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                              'codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['codec']},
             'encodings.cp949.StreamReader': {'bases': ['encodings.cp949.Codec',
                                                        '_multibytecodec.MultibyteStreamReader',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['codec']},
             'encodings.cp949.StreamWriter': {'bases': ['encodings.cp949.Codec',
                                                        '_multibytecodec.MultibyteStreamWriter',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['codec']},
             'encodings.cp950.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': ['encode', 'decode']},
             'encodings.cp950.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                              'codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['codec']},
             'encodings.cp950.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                              'codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['codec']},
             'encodings.cp950.StreamReader': {'bases': ['encodings.cp950.Codec',
                                                        '_multibytecodec.MultibyteStreamReader',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['codec']},
             'encodings.cp950.StreamWriter': {'bases': ['encodings.cp950.Codec',
                                                        '_multibytecodec.MultibyteStreamWriter',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['codec']},
             'encodings.euc_jis_2004.Codec': {'bases': ['codecs.Codec'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['encode', 'decode']},
             'encodings.euc_jis_2004.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                     'codecs.IncrementalDecoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['codec']},
             'encodings.euc_jis_2004.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                     'codecs.IncrementalEncoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['codec']},
             'encodings.euc_jis_2004.StreamReader': {'bases': ['encodings.euc_jis_2004.Codec',
                                                               '_multibytecodec.MultibyteStreamReader',
                                                               'codecs.StreamReader'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.euc_jis_2004.StreamWriter': {'bases': ['encodings.euc_jis_2004.Codec',
                                                               '_multibytecodec.MultibyteStreamWriter',
                                                               'codecs.StreamWriter'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.euc_jisx0213.Codec': {'bases': ['codecs.Codec'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['encode', 'decode']},
             'encodings.euc_jisx0213.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                     'codecs.IncrementalDecoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['codec']},
             'encodings.euc_jisx0213.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                     'codecs.IncrementalEncoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['codec']},
             'encodings.euc_jisx0213.StreamReader': {'bases': ['encodings.euc_jisx0213.Codec',
                                                               '_multibytecodec.MultibyteStreamReader',
                                                               'codecs.StreamReader'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.euc_jisx0213.StreamWriter': {'bases': ['encodings.euc_jisx0213.Codec',
                                                               '_multibytecodec.MultibyteStreamWriter',
                                                               'codecs.StreamWriter'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.euc_jp.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': ['encode', 'decode']},
             'encodings.euc_jp.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                               'codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.euc_jp.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                               'codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.euc_jp.StreamReader': {'bases': ['encodings.euc_jp.Codec',
                                                         '_multibytecodec.MultibyteStreamReader',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': ['codec']},
             'encodings.euc_jp.StreamWriter': {'bases': ['encodings.euc_jp.Codec',
                                                         '_multibytecodec.MultibyteStreamWriter',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': ['codec']},
             'encodings.euc_kr.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': ['encode', 'decode']},
             'encodings.euc_kr.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                               'codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.euc_kr.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                               'codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.euc_kr.StreamReader': {'bases': ['encodings.euc_kr.Codec',
                                                         '_multibytecodec.MultibyteStreamReader',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': ['codec']},
             'encodings.euc_kr.StreamWriter': {'bases': ['encodings.euc_kr.Codec',
                                                         '_multibytecodec.MultibyteStreamWriter',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': ['codec']},
             'encodings.gb18030.Codec': {'bases': ['codecs.Codec'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['encode', 'decode']},
             'encodings.gb18030.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                'codecs.IncrementalDecoder'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['codec']},
             'encodings.gb18030.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                'codecs.IncrementalEncoder'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['codec']},
             'encodings.gb18030.StreamReader': {'bases': ['encodings.gb18030.Codec',
                                                          '_multibytecodec.MultibyteStreamReader',
                                                          'codecs.StreamReader'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': ['codec']},
             'encodings.gb18030.StreamWriter': {'bases': ['encodings.gb18030.Codec',
                                                          '_multibytecodec.MultibyteStreamWriter',
                                                          'codecs.StreamWriter'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': ['codec']},
             'encodings.gb2312.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': ['encode', 'decode']},
             'encodings.gb2312.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                               'codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.gb2312.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                               'codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.gb2312.StreamReader': {'bases': ['encodings.gb2312.Codec',
                                                         '_multibytecodec.MultibyteStreamReader',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': ['codec']},
             'encodings.gb2312.StreamWriter': {'bases': ['encodings.gb2312.Codec',
                                                         '_multibytecodec.MultibyteStreamWriter',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': ['codec']},
             'encodings.gbk.Codec': {'bases': ['codecs.Codec'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': ['encode', 'decode']},
             'encodings.gbk.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                            'codecs.IncrementalDecoder'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['codec']},
             'encodings.gbk.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                            'codecs.IncrementalEncoder'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['codec']},
             'encodings.gbk.StreamReader': {'bases': ['encodings.gbk.Codec',
                                                      '_multibytecodec.MultibyteStreamReader',
                                                      'codecs.StreamReader'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': ['codec']},
             'encodings.gbk.StreamWriter': {'bases': ['encodings.gbk.Codec',
                                                      '_multibytecodec.MultibyteStreamWriter',
                                                      'codecs.StreamWriter'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': ['codec']},
             'encodings.hex_codec.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.hex_codec.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.hex_codec.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.hex_codec.StreamReader': {'bases': ['encodings.hex_codec.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.hex_codec.StreamWriter': {'bases': ['encodings.hex_codec.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.hp_roman8.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.hp_roman8.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.hp_roman8.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.hp_roman8.StreamReader': {'bases': ['encodings.hp_roman8.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.hp_roman8.StreamWriter': {'bases': ['encodings.hp_roman8.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.hz.Codec': {'bases': ['codecs.Codec'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': ['encode', 'decode']},
             'encodings.hz.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                           'codecs.IncrementalDecoder'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['codec']},
             'encodings.hz.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                           'codecs.IncrementalEncoder'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['codec']},
             'encodings.hz.StreamReader': {'bases': ['encodings.hz.Codec',
                                                     '_multibytecodec.MultibyteStreamReader',
                                                     'codecs.StreamReader'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': ['codec']},
             'encodings.hz.StreamWriter': {'bases': ['encodings.hz.Codec',
                                                     '_multibytecodec.MultibyteStreamWriter',
                                                     'codecs.StreamWriter'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': ['codec']},
             'encodings.idna.Codec': {'bases': ['codecs.Codec'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('encode', ['input', "errors='strict'"], ''),
                                                  ('decode', ['input', "errors='strict'"], '')],
                                      'properties': []},
             'encodings.idna.IncrementalDecoder': {'bases': ['codecs.BufferedIncrementalDecoder'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('_buffer_decode',
                                                                ['input', 'errors', 'final'],
                                                                '')],
                                                   'properties': []},
             'encodings.idna.IncrementalEncoder': {'bases': ['codecs.BufferedIncrementalEncoder'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('_buffer_encode',
                                                                ['input', 'errors', 'final'],
                                                                '')],
                                                   'properties': []},
             'encodings.idna.StreamReader': {'bases': ['encodings.idna.Codec',
                                                       'codecs.StreamReader'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': []},
             'encodings.idna.StreamWriter': {'bases': ['encodings.idna.Codec',
                                                       'codecs.StreamWriter'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': []},
             'encodings.iso2022_jp.Codec': {'bases': ['codecs.Codec'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': ['encode', 'decode']},
             'encodings.iso2022_jp.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                   'codecs.IncrementalDecoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['codec']},
             'encodings.iso2022_jp.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                   'codecs.IncrementalEncoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['codec']},
             'encodings.iso2022_jp.StreamReader': {'bases': ['encodings.iso2022_jp.Codec',
                                                             '_multibytecodec.MultibyteStreamReader',
                                                             'codecs.StreamReader'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['codec']},
             'encodings.iso2022_jp.StreamWriter': {'bases': ['encodings.iso2022_jp.Codec',
                                                             '_multibytecodec.MultibyteStreamWriter',
                                                             'codecs.StreamWriter'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['codec']},
             'encodings.iso2022_jp_1.Codec': {'bases': ['codecs.Codec'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['encode', 'decode']},
             'encodings.iso2022_jp_1.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                     'codecs.IncrementalDecoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['codec']},
             'encodings.iso2022_jp_1.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                     'codecs.IncrementalEncoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['codec']},
             'encodings.iso2022_jp_1.StreamReader': {'bases': ['encodings.iso2022_jp_1.Codec',
                                                               '_multibytecodec.MultibyteStreamReader',
                                                               'codecs.StreamReader'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.iso2022_jp_1.StreamWriter': {'bases': ['encodings.iso2022_jp_1.Codec',
                                                               '_multibytecodec.MultibyteStreamWriter',
                                                               'codecs.StreamWriter'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.iso2022_jp_2.Codec': {'bases': ['codecs.Codec'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['encode', 'decode']},
             'encodings.iso2022_jp_2.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                     'codecs.IncrementalDecoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['codec']},
             'encodings.iso2022_jp_2.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                     'codecs.IncrementalEncoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['codec']},
             'encodings.iso2022_jp_2.StreamReader': {'bases': ['encodings.iso2022_jp_2.Codec',
                                                               '_multibytecodec.MultibyteStreamReader',
                                                               'codecs.StreamReader'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.iso2022_jp_2.StreamWriter': {'bases': ['encodings.iso2022_jp_2.Codec',
                                                               '_multibytecodec.MultibyteStreamWriter',
                                                               'codecs.StreamWriter'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.iso2022_jp_2004.Codec': {'bases': ['codecs.Codec'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['encode', 'decode']},
             'encodings.iso2022_jp_2004.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                        'codecs.IncrementalDecoder'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['codec']},
             'encodings.iso2022_jp_2004.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                        'codecs.IncrementalEncoder'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['codec']},
             'encodings.iso2022_jp_2004.StreamReader': {'bases': ['encodings.iso2022_jp_2004.Codec',
                                                                  '_multibytecodec.MultibyteStreamReader',
                                                                  'codecs.StreamReader'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['codec']},
             'encodings.iso2022_jp_2004.StreamWriter': {'bases': ['encodings.iso2022_jp_2004.Codec',
                                                                  '_multibytecodec.MultibyteStreamWriter',
                                                                  'codecs.StreamWriter'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['codec']},
             'encodings.iso2022_jp_3.Codec': {'bases': ['codecs.Codec'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['encode', 'decode']},
             'encodings.iso2022_jp_3.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                     'codecs.IncrementalDecoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['codec']},
             'encodings.iso2022_jp_3.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                     'codecs.IncrementalEncoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['codec']},
             'encodings.iso2022_jp_3.StreamReader': {'bases': ['encodings.iso2022_jp_3.Codec',
                                                               '_multibytecodec.MultibyteStreamReader',
                                                               'codecs.StreamReader'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.iso2022_jp_3.StreamWriter': {'bases': ['encodings.iso2022_jp_3.Codec',
                                                               '_multibytecodec.MultibyteStreamWriter',
                                                               'codecs.StreamWriter'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': ['codec']},
             'encodings.iso2022_jp_ext.Codec': {'bases': ['codecs.Codec'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': ['encode', 'decode']},
             'encodings.iso2022_jp_ext.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                       'codecs.IncrementalDecoder'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['codec']},
             'encodings.iso2022_jp_ext.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                       'codecs.IncrementalEncoder'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['codec']},
             'encodings.iso2022_jp_ext.StreamReader': {'bases': ['encodings.iso2022_jp_ext.Codec',
                                                                 '_multibytecodec.MultibyteStreamReader',
                                                                 'codecs.StreamReader'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['codec']},
             'encodings.iso2022_jp_ext.StreamWriter': {'bases': ['encodings.iso2022_jp_ext.Codec',
                                                                 '_multibytecodec.MultibyteStreamWriter',
                                                                 'codecs.StreamWriter'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['codec']},
             'encodings.iso2022_kr.Codec': {'bases': ['codecs.Codec'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': ['encode', 'decode']},
             'encodings.iso2022_kr.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                   'codecs.IncrementalDecoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['codec']},
             'encodings.iso2022_kr.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                   'codecs.IncrementalEncoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['codec']},
             'encodings.iso2022_kr.StreamReader': {'bases': ['encodings.iso2022_kr.Codec',
                                                             '_multibytecodec.MultibyteStreamReader',
                                                             'codecs.StreamReader'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['codec']},
             'encodings.iso2022_kr.StreamWriter': {'bases': ['encodings.iso2022_kr.Codec',
                                                             '_multibytecodec.MultibyteStreamWriter',
                                                             'codecs.StreamWriter'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['codec']},
             'encodings.iso8859_1.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.iso8859_1.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_1.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_1.StreamReader': {'bases': ['encodings.iso8859_1.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_1.StreamWriter': {'bases': ['encodings.iso8859_1.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_10.Codec': {'bases': ['codecs.Codec'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('encode',
                                                         ['input', "errors='strict'"],
                                                         ''),
                                                        ('decode',
                                                         ['input', "errors='strict'"],
                                                         '')],
                                            'properties': []},
             'encodings.iso8859_10.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('decode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.iso8859_10.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('encode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.iso8859_10.StreamReader': {'bases': ['encodings.iso8859_10.Codec',
                                                             'codecs.StreamReader'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.iso8859_10.StreamWriter': {'bases': ['encodings.iso8859_10.Codec',
                                                             'codecs.StreamWriter'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.iso8859_11.Codec': {'bases': ['codecs.Codec'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('encode',
                                                         ['input', "errors='strict'"],
                                                         ''),
                                                        ('decode',
                                                         ['input', "errors='strict'"],
                                                         '')],
                                            'properties': []},
             'encodings.iso8859_11.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('decode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.iso8859_11.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('encode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.iso8859_11.StreamReader': {'bases': ['encodings.iso8859_11.Codec',
                                                             'codecs.StreamReader'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.iso8859_11.StreamWriter': {'bases': ['encodings.iso8859_11.Codec',
                                                             'codecs.StreamWriter'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.iso8859_13.Codec': {'bases': ['codecs.Codec'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('encode',
                                                         ['input', "errors='strict'"],
                                                         ''),
                                                        ('decode',
                                                         ['input', "errors='strict'"],
                                                         '')],
                                            'properties': []},
             'encodings.iso8859_13.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('decode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.iso8859_13.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('encode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.iso8859_13.StreamReader': {'bases': ['encodings.iso8859_13.Codec',
                                                             'codecs.StreamReader'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.iso8859_13.StreamWriter': {'bases': ['encodings.iso8859_13.Codec',
                                                             'codecs.StreamWriter'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.iso8859_14.Codec': {'bases': ['codecs.Codec'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('encode',
                                                         ['input', "errors='strict'"],
                                                         ''),
                                                        ('decode',
                                                         ['input', "errors='strict'"],
                                                         '')],
                                            'properties': []},
             'encodings.iso8859_14.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('decode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.iso8859_14.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('encode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.iso8859_14.StreamReader': {'bases': ['encodings.iso8859_14.Codec',
                                                             'codecs.StreamReader'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.iso8859_14.StreamWriter': {'bases': ['encodings.iso8859_14.Codec',
                                                             'codecs.StreamWriter'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.iso8859_15.Codec': {'bases': ['codecs.Codec'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('encode',
                                                         ['input', "errors='strict'"],
                                                         ''),
                                                        ('decode',
                                                         ['input', "errors='strict'"],
                                                         '')],
                                            'properties': []},
             'encodings.iso8859_15.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('decode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.iso8859_15.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('encode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.iso8859_15.StreamReader': {'bases': ['encodings.iso8859_15.Codec',
                                                             'codecs.StreamReader'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.iso8859_15.StreamWriter': {'bases': ['encodings.iso8859_15.Codec',
                                                             'codecs.StreamWriter'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.iso8859_16.Codec': {'bases': ['codecs.Codec'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('encode',
                                                         ['input', "errors='strict'"],
                                                         ''),
                                                        ('decode',
                                                         ['input', "errors='strict'"],
                                                         '')],
                                            'properties': []},
             'encodings.iso8859_16.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('decode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.iso8859_16.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('encode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.iso8859_16.StreamReader': {'bases': ['encodings.iso8859_16.Codec',
                                                             'codecs.StreamReader'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.iso8859_16.StreamWriter': {'bases': ['encodings.iso8859_16.Codec',
                                                             'codecs.StreamWriter'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.iso8859_2.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.iso8859_2.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_2.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_2.StreamReader': {'bases': ['encodings.iso8859_2.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_2.StreamWriter': {'bases': ['encodings.iso8859_2.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_3.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.iso8859_3.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_3.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_3.StreamReader': {'bases': ['encodings.iso8859_3.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_3.StreamWriter': {'bases': ['encodings.iso8859_3.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_4.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.iso8859_4.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_4.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_4.StreamReader': {'bases': ['encodings.iso8859_4.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_4.StreamWriter': {'bases': ['encodings.iso8859_4.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_5.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.iso8859_5.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_5.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_5.StreamReader': {'bases': ['encodings.iso8859_5.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_5.StreamWriter': {'bases': ['encodings.iso8859_5.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_6.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.iso8859_6.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_6.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_6.StreamReader': {'bases': ['encodings.iso8859_6.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_6.StreamWriter': {'bases': ['encodings.iso8859_6.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_7.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.iso8859_7.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_7.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_7.StreamReader': {'bases': ['encodings.iso8859_7.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_7.StreamWriter': {'bases': ['encodings.iso8859_7.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_8.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.iso8859_8.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_8.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_8.StreamReader': {'bases': ['encodings.iso8859_8.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_8.StreamWriter': {'bases': ['encodings.iso8859_8.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_9.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.iso8859_9.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_9.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.iso8859_9.StreamReader': {'bases': ['encodings.iso8859_9.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.iso8859_9.StreamWriter': {'bases': ['encodings.iso8859_9.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.johab.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': ['encode', 'decode']},
             'encodings.johab.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                              'codecs.IncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['codec']},
             'encodings.johab.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                              'codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['codec']},
             'encodings.johab.StreamReader': {'bases': ['encodings.johab.Codec',
                                                        '_multibytecodec.MultibyteStreamReader',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['codec']},
             'encodings.johab.StreamWriter': {'bases': ['encodings.johab.Codec',
                                                        '_multibytecodec.MultibyteStreamWriter',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['codec']},
             'encodings.koi8_r.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.koi8_r.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.koi8_r.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.koi8_r.StreamReader': {'bases': ['encodings.koi8_r.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.koi8_r.StreamWriter': {'bases': ['encodings.koi8_r.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.koi8_u.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.koi8_u.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.koi8_u.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.koi8_u.StreamReader': {'bases': ['encodings.koi8_u.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.koi8_u.StreamWriter': {'bases': ['encodings.koi8_u.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.latin_1.Codec': {'bases': ['codecs.Codec'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['encode', 'decode']},
             'encodings.latin_1.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('decode',
                                                                   ['input', 'final=False'],
                                                                   '')],
                                                      'properties': []},
             'encodings.latin_1.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('encode',
                                                                   ['input', 'final=False'],
                                                                   '')],
                                                      'properties': []},
             'encodings.latin_1.StreamConverter': {'bases': ['encodings.latin_1.StreamWriter',
                                                             'encodings.latin_1.StreamReader'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['encode', 'decode']},
             'encodings.latin_1.StreamReader': {'bases': ['encodings.latin_1.Codec',
                                                          'codecs.StreamReader'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': []},
             'encodings.latin_1.StreamWriter': {'bases': ['encodings.latin_1.Codec',
                                                          'codecs.StreamWriter'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': []},
             'encodings.mac_arabic.Codec': {'bases': ['codecs.Codec'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('encode',
                                                         ['input', "errors='strict'"],
                                                         ''),
                                                        ('decode',
                                                         ['input', "errors='strict'"],
                                                         '')],
                                            'properties': []},
             'encodings.mac_arabic.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('decode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.mac_arabic.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('encode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.mac_arabic.StreamReader': {'bases': ['encodings.mac_arabic.Codec',
                                                             'codecs.StreamReader'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.mac_arabic.StreamWriter': {'bases': ['encodings.mac_arabic.Codec',
                                                             'codecs.StreamWriter'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.mac_centeuro.Codec': {'bases': ['codecs.Codec'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('encode',
                                                           ['input', "errors='strict'"],
                                                           ''),
                                                          ('decode',
                                                           ['input', "errors='strict'"],
                                                           '')],
                                              'properties': []},
             'encodings.mac_centeuro.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('decode',
                                                                        ['input',
                                                                         'final=False'],
                                                                        '')],
                                                           'properties': []},
             'encodings.mac_centeuro.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('encode',
                                                                        ['input',
                                                                         'final=False'],
                                                                        '')],
                                                           'properties': []},
             'encodings.mac_centeuro.StreamReader': {'bases': ['encodings.mac_centeuro.Codec',
                                                               'codecs.StreamReader'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'encodings.mac_centeuro.StreamWriter': {'bases': ['encodings.mac_centeuro.Codec',
                                                               'codecs.StreamWriter'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'encodings.mac_croatian.Codec': {'bases': ['codecs.Codec'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('encode',
                                                           ['input', "errors='strict'"],
                                                           ''),
                                                          ('decode',
                                                           ['input', "errors='strict'"],
                                                           '')],
                                              'properties': []},
             'encodings.mac_croatian.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('decode',
                                                                        ['input',
                                                                         'final=False'],
                                                                        '')],
                                                           'properties': []},
             'encodings.mac_croatian.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('encode',
                                                                        ['input',
                                                                         'final=False'],
                                                                        '')],
                                                           'properties': []},
             'encodings.mac_croatian.StreamReader': {'bases': ['encodings.mac_croatian.Codec',
                                                               'codecs.StreamReader'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'encodings.mac_croatian.StreamWriter': {'bases': ['encodings.mac_croatian.Codec',
                                                               'codecs.StreamWriter'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'encodings.mac_cyrillic.Codec': {'bases': ['codecs.Codec'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('encode',
                                                           ['input', "errors='strict'"],
                                                           ''),
                                                          ('decode',
                                                           ['input', "errors='strict'"],
                                                           '')],
                                              'properties': []},
             'encodings.mac_cyrillic.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('decode',
                                                                        ['input',
                                                                         'final=False'],
                                                                        '')],
                                                           'properties': []},
             'encodings.mac_cyrillic.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('encode',
                                                                        ['input',
                                                                         'final=False'],
                                                                        '')],
                                                           'properties': []},
             'encodings.mac_cyrillic.StreamReader': {'bases': ['encodings.mac_cyrillic.Codec',
                                                               'codecs.StreamReader'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'encodings.mac_cyrillic.StreamWriter': {'bases': ['encodings.mac_cyrillic.Codec',
                                                               'codecs.StreamWriter'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'encodings.mac_farsi.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.mac_farsi.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.mac_farsi.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.mac_farsi.StreamReader': {'bases': ['encodings.mac_farsi.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.mac_farsi.StreamWriter': {'bases': ['encodings.mac_farsi.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.mac_greek.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.mac_greek.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.mac_greek.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.mac_greek.StreamReader': {'bases': ['encodings.mac_greek.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.mac_greek.StreamWriter': {'bases': ['encodings.mac_greek.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.mac_iceland.Codec': {'bases': ['codecs.Codec'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('encode',
                                                          ['input', "errors='strict'"],
                                                          ''),
                                                         ('decode',
                                                          ['input', "errors='strict'"],
                                                          '')],
                                             'properties': []},
             'encodings.mac_iceland.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('decode',
                                                                       ['input',
                                                                        'final=False'],
                                                                       '')],
                                                          'properties': []},
             'encodings.mac_iceland.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('encode',
                                                                       ['input',
                                                                        'final=False'],
                                                                       '')],
                                                          'properties': []},
             'encodings.mac_iceland.StreamReader': {'bases': ['encodings.mac_iceland.Codec',
                                                              'codecs.StreamReader'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': []},
             'encodings.mac_iceland.StreamWriter': {'bases': ['encodings.mac_iceland.Codec',
                                                              'codecs.StreamWriter'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': []},
             'encodings.mac_latin2.Codec': {'bases': ['codecs.Codec'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('encode',
                                                         ['input', "errors='strict'"],
                                                         ''),
                                                        ('decode',
                                                         ['input', "errors='strict'"],
                                                         '')],
                                            'properties': []},
             'encodings.mac_latin2.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('decode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.mac_latin2.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('encode',
                                                                      ['input', 'final=False'],
                                                                      '')],
                                                         'properties': []},
             'encodings.mac_latin2.StreamReader': {'bases': ['encodings.mac_latin2.Codec',
                                                             'codecs.StreamReader'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.mac_latin2.StreamWriter': {'bases': ['encodings.mac_latin2.Codec',
                                                             'codecs.StreamWriter'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.mac_roman.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.mac_roman.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.mac_roman.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.mac_roman.StreamReader': {'bases': ['encodings.mac_roman.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.mac_roman.StreamWriter': {'bases': ['encodings.mac_roman.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.mac_romanian.Codec': {'bases': ['codecs.Codec'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('encode',
                                                           ['input', "errors='strict'"],
                                                           ''),
                                                          ('decode',
                                                           ['input', "errors='strict'"],
                                                           '')],
                                              'properties': []},
             'encodings.mac_romanian.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('decode',
                                                                        ['input',
                                                                         'final=False'],
                                                                        '')],
                                                           'properties': []},
             'encodings.mac_romanian.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('encode',
                                                                        ['input',
                                                                         'final=False'],
                                                                        '')],
                                                           'properties': []},
             'encodings.mac_romanian.StreamReader': {'bases': ['encodings.mac_romanian.Codec',
                                                               'codecs.StreamReader'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'encodings.mac_romanian.StreamWriter': {'bases': ['encodings.mac_romanian.Codec',
                                                               'codecs.StreamWriter'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'encodings.mac_turkish.Codec': {'bases': ['codecs.Codec'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('encode',
                                                          ['input', "errors='strict'"],
                                                          ''),
                                                         ('decode',
                                                          ['input', "errors='strict'"],
                                                          '')],
                                             'properties': []},
             'encodings.mac_turkish.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('decode',
                                                                       ['input',
                                                                        'final=False'],
                                                                       '')],
                                                          'properties': []},
             'encodings.mac_turkish.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('encode',
                                                                       ['input',
                                                                        'final=False'],
                                                                       '')],
                                                          'properties': []},
             'encodings.mac_turkish.StreamReader': {'bases': ['encodings.mac_turkish.Codec',
                                                              'codecs.StreamReader'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': []},
             'encodings.mac_turkish.StreamWriter': {'bases': ['encodings.mac_turkish.Codec',
                                                              'codecs.StreamWriter'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': []},
             'encodings.mbcs.IncrementalDecoder': {'bases': ['codecs.BufferedIncrementalDecoder'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['_buffer_decode']},
             'encodings.mbcs.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('encode',
                                                                ['input', 'final=False'],
                                                                '')],
                                                   'properties': []},
             'encodings.mbcs.StreamReader': {'bases': ['codecs.StreamReader'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['decode']},
             'encodings.mbcs.StreamWriter': {'bases': ['codecs.StreamWriter'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['encode']},
             'encodings.palmos.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.palmos.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.palmos.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.palmos.StreamReader': {'bases': ['encodings.palmos.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.palmos.StreamWriter': {'bases': ['encodings.palmos.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.ptcp154.Codec': {'bases': ['codecs.Codec'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('encode',
                                                      ['input', "errors='strict'"],
                                                      ''),
                                                     ('decode',
                                                      ['input', "errors='strict'"],
                                                      '')],
                                         'properties': []},
             'encodings.ptcp154.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('decode',
                                                                   ['input', 'final=False'],
                                                                   '')],
                                                      'properties': []},
             'encodings.ptcp154.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('encode',
                                                                   ['input', 'final=False'],
                                                                   '')],
                                                      'properties': []},
             'encodings.ptcp154.StreamReader': {'bases': ['encodings.ptcp154.Codec',
                                                          'codecs.StreamReader'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': []},
             'encodings.ptcp154.StreamWriter': {'bases': ['encodings.ptcp154.Codec',
                                                          'codecs.StreamWriter'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': []},
             'encodings.punycode.Codec': {'bases': ['codecs.Codec'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('encode',
                                                       ['input', "errors='strict'"],
                                                       ''),
                                                      ('decode',
                                                       ['input', "errors='strict'"],
                                                       '')],
                                          'properties': []},
             'encodings.punycode.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('decode',
                                                                    ['input', 'final=False'],
                                                                    '')],
                                                       'properties': []},
             'encodings.punycode.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('encode',
                                                                    ['input', 'final=False'],
                                                                    '')],
                                                       'properties': []},
             'encodings.punycode.StreamReader': {'bases': ['encodings.punycode.Codec',
                                                           'codecs.StreamReader'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'encodings.punycode.StreamWriter': {'bases': ['encodings.punycode.Codec',
                                                           'codecs.StreamWriter'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'encodings.quopri_codec.Codec': {'bases': ['codecs.Codec'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('encode',
                                                           ['input', "errors='strict'"],
                                                           ''),
                                                          ('decode',
                                                           ['input', "errors='strict'"],
                                                           '')],
                                              'properties': []},
             'encodings.quopri_codec.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('decode',
                                                                        ['input',
                                                                         'final=False'],
                                                                        '')],
                                                           'properties': []},
             'encodings.quopri_codec.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('encode',
                                                                        ['input',
                                                                         'final=False'],
                                                                        '')],
                                                           'properties': []},
             'encodings.quopri_codec.StreamReader': {'bases': ['encodings.quopri_codec.Codec',
                                                               'codecs.StreamReader'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'encodings.quopri_codec.StreamWriter': {'bases': ['encodings.quopri_codec.Codec',
                                                               'codecs.StreamWriter'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [],
                                                     'properties': []},
             'encodings.raw_unicode_escape.Codec': {'bases': ['codecs.Codec'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['encode', 'decode']},
             'encodings.raw_unicode_escape.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('decode',
                                                                              ['input',
                                                                               'final=False'],
                                                                              '')],
                                                                 'properties': []},
             'encodings.raw_unicode_escape.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('encode',
                                                                              ['input',
                                                                               'final=False'],
                                                                              '')],
                                                                 'properties': []},
             'encodings.raw_unicode_escape.StreamReader': {'bases': ['encodings.raw_unicode_escape.Codec',
                                                                     'codecs.StreamReader'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': []},
             'encodings.raw_unicode_escape.StreamWriter': {'bases': ['encodings.raw_unicode_escape.Codec',
                                                                     'codecs.StreamWriter'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': []},
             'encodings.rot_13.Codec': {'bases': ['codecs.Codec'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('encode',
                                                     ['input', "errors='strict'"],
                                                     ''),
                                                    ('decode',
                                                     ['input', "errors='strict'"],
                                                     '')],
                                        'properties': []},
             'encodings.rot_13.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('decode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.rot_13.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  '')],
                                                     'properties': []},
             'encodings.rot_13.StreamReader': {'bases': ['encodings.rot_13.Codec',
                                                         'codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.rot_13.StreamWriter': {'bases': ['encodings.rot_13.Codec',
                                                         'codecs.StreamWriter'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'encodings.shift_jis.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': ['encode', 'decode']},
             'encodings.shift_jis.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                  'codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['codec']},
             'encodings.shift_jis.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                  'codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['codec']},
             'encodings.shift_jis.StreamReader': {'bases': ['encodings.shift_jis.Codec',
                                                            '_multibytecodec.MultibyteStreamReader',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['codec']},
             'encodings.shift_jis.StreamWriter': {'bases': ['encodings.shift_jis.Codec',
                                                            '_multibytecodec.MultibyteStreamWriter',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['codec']},
             'encodings.shift_jis_2004.Codec': {'bases': ['codecs.Codec'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': ['encode', 'decode']},
             'encodings.shift_jis_2004.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                       'codecs.IncrementalDecoder'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['codec']},
             'encodings.shift_jis_2004.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                       'codecs.IncrementalEncoder'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['codec']},
             'encodings.shift_jis_2004.StreamReader': {'bases': ['encodings.shift_jis_2004.Codec',
                                                                 '_multibytecodec.MultibyteStreamReader',
                                                                 'codecs.StreamReader'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['codec']},
             'encodings.shift_jis_2004.StreamWriter': {'bases': ['encodings.shift_jis_2004.Codec',
                                                                 '_multibytecodec.MultibyteStreamWriter',
                                                                 'codecs.StreamWriter'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['codec']},
             'encodings.shift_jisx0213.Codec': {'bases': ['codecs.Codec'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': ['encode', 'decode']},
             'encodings.shift_jisx0213.IncrementalDecoder': {'bases': ['_multibytecodec.MultibyteIncrementalDecoder',
                                                                       'codecs.IncrementalDecoder'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['codec']},
             'encodings.shift_jisx0213.IncrementalEncoder': {'bases': ['_multibytecodec.MultibyteIncrementalEncoder',
                                                                       'codecs.IncrementalEncoder'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['codec']},
             'encodings.shift_jisx0213.StreamReader': {'bases': ['encodings.shift_jisx0213.Codec',
                                                                 '_multibytecodec.MultibyteStreamReader',
                                                                 'codecs.StreamReader'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['codec']},
             'encodings.shift_jisx0213.StreamWriter': {'bases': ['encodings.shift_jisx0213.Codec',
                                                                 '_multibytecodec.MultibyteStreamWriter',
                                                                 'codecs.StreamWriter'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['codec']},
             'encodings.string_escape.Codec': {'bases': ['codecs.Codec'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': ['encode', 'decode']},
             'encodings.string_escape.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('decode',
                                                                         ['input',
                                                                          'final=False'],
                                                                         '')],
                                                            'properties': []},
             'encodings.string_escape.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('encode',
                                                                         ['input',
                                                                          'final=False'],
                                                                         '')],
                                                            'properties': []},
             'encodings.string_escape.StreamReader': {'bases': ['encodings.string_escape.Codec',
                                                                'codecs.StreamReader'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': []},
             'encodings.string_escape.StreamWriter': {'bases': ['encodings.string_escape.Codec',
                                                                'codecs.StreamWriter'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': []},
             'encodings.tis_620.Codec': {'bases': ['codecs.Codec'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('encode',
                                                      ['input', "errors='strict'"],
                                                      ''),
                                                     ('decode',
                                                      ['input', "errors='strict'"],
                                                      '')],
                                         'properties': []},
             'encodings.tis_620.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('decode',
                                                                   ['input', 'final=False'],
                                                                   '')],
                                                      'properties': []},
             'encodings.tis_620.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('encode',
                                                                   ['input', 'final=False'],
                                                                   '')],
                                                      'properties': []},
             'encodings.tis_620.StreamReader': {'bases': ['encodings.tis_620.Codec',
                                                          'codecs.StreamReader'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': []},
             'encodings.tis_620.StreamWriter': {'bases': ['encodings.tis_620.Codec',
                                                          'codecs.StreamWriter'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': []},
             'encodings.undefined.Codec': {'bases': ['codecs.Codec'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('encode',
                                                        ['input', "errors='strict'"],
                                                        ''),
                                                       ('decode',
                                                        ['input', "errors='strict'"],
                                                        '')],
                                           'properties': []},
             'encodings.undefined.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('decode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.undefined.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.undefined.StreamReader': {'bases': ['encodings.undefined.Codec',
                                                            'codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.undefined.StreamWriter': {'bases': ['encodings.undefined.Codec',
                                                            'codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': []},
             'encodings.unicode_escape.Codec': {'bases': ['codecs.Codec'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': ['encode', 'decode']},
             'encodings.unicode_escape.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('decode',
                                                                          ['input',
                                                                           'final=False'],
                                                                          '')],
                                                             'properties': []},
             'encodings.unicode_escape.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('encode',
                                                                          ['input',
                                                                           'final=False'],
                                                                          '')],
                                                             'properties': []},
             'encodings.unicode_escape.StreamReader': {'bases': ['encodings.unicode_escape.Codec',
                                                                 'codecs.StreamReader'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': []},
             'encodings.unicode_escape.StreamWriter': {'bases': ['encodings.unicode_escape.Codec',
                                                                 'codecs.StreamWriter'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': []},
             'encodings.unicode_internal.Codec': {'bases': ['codecs.Codec'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['encode', 'decode']},
             'encodings.unicode_internal.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('decode',
                                                                            ['input',
                                                                             'final=False'],
                                                                            '')],
                                                               'properties': []},
             'encodings.unicode_internal.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('encode',
                                                                            ['input',
                                                                             'final=False'],
                                                                            '')],
                                                               'properties': []},
             'encodings.unicode_internal.StreamReader': {'bases': ['encodings.unicode_internal.Codec',
                                                                   'codecs.StreamReader'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'encodings.unicode_internal.StreamWriter': {'bases': ['encodings.unicode_internal.Codec',
                                                                   'codecs.StreamWriter'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'encodings.utf_16.IncrementalDecoder': {'bases': ['codecs.BufferedIncrementalDecoder'],
                                                     'constructor': ["errors='strict'"],
                                                     'docstring': '',
                                                     'methods': [('_buffer_decode',
                                                                  ['input', 'errors', 'final'],
                                                                  ''),
                                                                 ('reset', [], '')],
                                                     'properties': ['decoder']},
             'encodings.utf_16.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                     'constructor': ["errors='strict'"],
                                                     'docstring': '',
                                                     'methods': [('encode',
                                                                  ['input', 'final=False'],
                                                                  ''),
                                                                 ('reset', [], '')],
                                                     'properties': ['encoder']},
             'encodings.utf_16.StreamReader': {'bases': ['codecs.StreamReader'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('reset', [], ''),
                                                           ('decode',
                                                            ['input', "errors='strict'"],
                                                            '')],
                                               'properties': ['decode']},
             'encodings.utf_16.StreamWriter': {'bases': ['codecs.StreamWriter'],
                                               'constructor': ['stream', "errors='strict'"],
                                               'docstring': '',
                                               'methods': [('encode',
                                                            ['input', "errors='strict'"],
                                                            '')],
                                               'properties': ['bom_written', 'encode']},
             'encodings.utf_16_be.IncrementalDecoder': {'bases': ['codecs.BufferedIncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['_buffer_decode']},
             'encodings.utf_16_be.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.utf_16_be.StreamReader': {'bases': ['codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['decode']},
             'encodings.utf_16_be.StreamWriter': {'bases': ['codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['encode']},
             'encodings.utf_16_le.IncrementalDecoder': {'bases': ['codecs.BufferedIncrementalDecoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['_buffer_decode']},
             'encodings.utf_16_le.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     '')],
                                                        'properties': []},
             'encodings.utf_16_le.StreamReader': {'bases': ['codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['decode']},
             'encodings.utf_16_le.StreamWriter': {'bases': ['codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['encode']},
             'encodings.utf_7.Codec': {'bases': ['codecs.Codec'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': ['encode', 'decode']},
             'encodings.utf_7.IncrementalDecoder': {'bases': ['codecs.BufferedIncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('_buffer_decode',
                                                                 ['input', 'errors', 'final'],
                                                                 '')],
                                                    'properties': []},
             'encodings.utf_7.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.utf_7.StreamReader': {'bases': ['encodings.utf_7.Codec',
                                                        'codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.utf_7.StreamWriter': {'bases': ['encodings.utf_7.Codec',
                                                        'codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'encodings.utf_8.IncrementalDecoder': {'bases': ['codecs.BufferedIncrementalDecoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['_buffer_decode']},
             'encodings.utf_8.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('encode',
                                                                 ['input', 'final=False'],
                                                                 '')],
                                                    'properties': []},
             'encodings.utf_8.StreamReader': {'bases': ['codecs.StreamReader'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['decode']},
             'encodings.utf_8.StreamWriter': {'bases': ['codecs.StreamWriter'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': ['encode']},
             'encodings.utf_8_sig.IncrementalDecoder': {'bases': ['codecs.BufferedIncrementalDecoder'],
                                                        'constructor': ["errors='strict'"],
                                                        'docstring': '',
                                                        'methods': [('_buffer_decode',
                                                                     ['input',
                                                                      'errors',
                                                                      'final'],
                                                                     ''),
                                                                    ('reset', [], '')],
                                                        'properties': ['first']},
             'encodings.utf_8_sig.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                        'constructor': ["errors='strict'"],
                                                        'docstring': '',
                                                        'methods': [('encode',
                                                                     ['input', 'final=False'],
                                                                     ''),
                                                                    ('reset', [], '')],
                                                        'properties': ['first']},
             'encodings.utf_8_sig.StreamReader': {'bases': ['codecs.StreamReader'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('reset', [], ''),
                                                              ('decode',
                                                               ['input', "errors='strict'"],
                                                               '')],
                                                  'properties': ['decode']},
             'encodings.utf_8_sig.StreamWriter': {'bases': ['codecs.StreamWriter'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('reset', [], ''),
                                                              ('encode',
                                                               ['input', "errors='strict'"],
                                                               '')],
                                                  'properties': ['encode']},
             'encodings.uu_codec.Codec': {'bases': ['codecs.Codec'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('encode',
                                                       ['input', "errors='strict'"],
                                                       ''),
                                                      ('decode',
                                                       ['input', "errors='strict'"],
                                                       '')],
                                          'properties': []},
             'encodings.uu_codec.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('decode',
                                                                    ['input', 'final=False'],
                                                                    '')],
                                                       'properties': []},
             'encodings.uu_codec.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('encode',
                                                                    ['input', 'final=False'],
                                                                    '')],
                                                       'properties': []},
             'encodings.uu_codec.StreamReader': {'bases': ['encodings.uu_codec.Codec',
                                                           'codecs.StreamReader'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'encodings.uu_codec.StreamWriter': {'bases': ['encodings.uu_codec.Codec',
                                                           'codecs.StreamWriter'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'encodings.zlib_codec.Codec': {'bases': ['codecs.Codec'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('encode',
                                                         ['input', "errors='strict'"],
                                                         ''),
                                                        ('decode',
                                                         ['input', "errors='strict'"],
                                                         '')],
                                            'properties': []},
             'encodings.zlib_codec.IncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                         'constructor': ["errors='strict'"],
                                                         'docstring': '',
                                                         'methods': [('decode',
                                                                      ['input', 'final=False'],
                                                                      ''),
                                                                     ('reset', [], '')],
                                                         'properties': ['errors',
                                                                        'decompressobj']},
             'encodings.zlib_codec.IncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                         'constructor': ["errors='strict'"],
                                                         'docstring': '',
                                                         'methods': [('encode',
                                                                      ['input', 'final=False'],
                                                                      ''),
                                                                     ('reset', [], '')],
                                                         'properties': ['errors', 'compressobj']},
             'encodings.zlib_codec.StreamReader': {'bases': ['encodings.zlib_codec.Codec',
                                                             'codecs.StreamReader'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'encodings.zlib_codec.StreamWriter': {'bases': ['encodings.zlib_codec.Codec',
                                                             'codecs.StreamWriter'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'filecmp.dircmp': {'bases': [],
                                'constructor': ['a', 'b', 'ignore=None', 'hide=None'],
                                'docstring': "A class that manages the comparison of 2 directories.\n\n    dircmp(a,b,ignore=None,hide=None)\n      A and B are directories.\n      IGNORE is a list of names to ignore,\n        defaults to ['RCS', 'CVS', 'tags'].\n      HIDE is a list of names to hide,\n        defaults to [os.curdir, os.pardir].\n\n    High level usage:\n      x = dircmp(dir1, dir2)\n      x.report() -> prints a report on the differences between dir1 and dir2\n       or\n      x.report_partial_closure() -> prints report on differences between dir1\n            and dir2, and reports on common immediate subdirectories.\n      x.report_full_closure() -> like report_partial_closure,\n            but fully recursive.\n\n    Attributes:\n     left_list, right_list: The files in dir1 and dir2,\n        filtered by hide and ignore.\n     common: a list of names in both dir1 and dir2.\n     left_only, right_only: names only in dir1, dir2.\n     common_dirs: subdirectories in both dir1 and dir2.\n     common_files: files in both dir1 and dir2.\n     common_funny: names in both dir1 and dir2 where the type differs between\n        dir1 and dir2, or the name is not stat-able.\n     same_files: list of identical files.\n     diff_files: list of filenames which differ.\n     funny_files: list of files which could not be compared.\n     subdirs: a dictionary of dircmp objects, keyed by names in common_dirs.\n     ",
                                'methods': [('phase0', [], ''),
                                            ('phase1', [], ''),
                                            ('phase2', [], ''),
                                            ('phase3', [], ''),
                                            ('phase4', [], ''),
                                            ('phase4_closure', [], ''),
                                            ('report', [], ''),
                                            ('report_partial_closure', [], ''),
                                            ('report_full_closure', [], ''),
                                            ('__getattr__', ['attr'], '')],
                                'properties': ['left',
                                               'right',
                                               'hide',
                                               'ignore',
                                               'left_list',
                                               'right_list',
                                               'common',
                                               'left_only',
                                               'right_only',
                                               'common_dirs',
                                               'common_files',
                                               'common_funny',
                                               'same_files',
                                               'diff_files',
                                               'funny_files',
                                               'subdirs',
                                               'methodmap']},
             'fileinput.FileInput': {'bases': [],
                                     'constructor': ['files=None',
                                                     'inplace=0',
                                                     "backup=''",
                                                     'bufsize=0',
                                                     "mode='r'",
                                                     'openhook=None'],
                                     'docstring': 'class FileInput([files[, inplace[, backup[, mode[, openhook]]]]])\n\n    Class FileInput is the implementation of the module; its methods\n    filename(), lineno(), fileline(), isfirstline(), isstdin(), fileno(),\n    nextfile() and close() correspond to the functions of the same name\n    in the module.\n    In addition it has a readline() method which returns the next\n    input line, and a __getitem__() method which implements the\n    sequence behavior. The sequence must be accessed in strictly\n    sequential order; random access and readline() cannot be mixed.\n    ',
                                     'methods': [('__del__', [], ''),
                                                 ('close', [], ''),
                                                 ('__iter__', [], ''),
                                                 ('next', [], ''),
                                                 ('__getitem__', ['i'], ''),
                                                 ('nextfile', [], ''),
                                                 ('readline', [], ''),
                                                 ('filename', [], ''),
                                                 ('lineno', [], ''),
                                                 ('filelineno', [], ''),
                                                 ('fileno', [], ''),
                                                 ('isfirstline', [], ''),
                                                 ('isstdin', [], '')],
                                     'properties': ['_files',
                                                    '_inplace',
                                                    '_backup',
                                                    '_bufsize',
                                                    '_savestdout',
                                                    '_output',
                                                    '_filename',
                                                    '_lineno',
                                                    '_filelineno',
                                                    '_file',
                                                    '_isstdin',
                                                    '_backupfilename',
                                                    '_buffer',
                                                    '_bufindex',
                                                    '_mode',
                                                    '_openhook']},
             'formatter.AbstractFormatter': {'bases': [],
                                             'constructor': ['writer'],
                                             'docstring': 'The standard formatter.\n\n    This implementation has demonstrated wide applicability to many writers,\n    and may be used directly in most circumstances.  It has been used to\n    implement a full-featured World Wide Web browser.\n\n    ',
                                             'methods': [('end_paragraph', ['blankline'], ''),
                                                         ('add_line_break', [], ''),
                                                         ('add_hor_rule',
                                                          ['*args', '**kw'],
                                                          ''),
                                                         ('add_label_data',
                                                          ['format',
                                                           'counter',
                                                           'blankline=None'],
                                                          ''),
                                                         ('format_counter',
                                                          ['format', 'counter'],
                                                          ''),
                                                         ('format_letter',
                                                          ['case', 'counter'],
                                                          ''),
                                                         ('format_roman',
                                                          ['case', 'counter'],
                                                          ''),
                                                         ('add_flowing_data', ['data'], ''),
                                                         ('add_literal_data', ['data'], ''),
                                                         ('flush_softspace', [], ''),
                                                         ('push_alignment', ['align'], ''),
                                                         ('pop_alignment', [], ''),
                                                         ('push_font',
                                                          ['(size, i, b, tt)'],
                                                          ''),
                                                         ('pop_font', [], ''),
                                                         ('push_margin', ['margin'], ''),
                                                         ('pop_margin', [], ''),
                                                         ('set_spacing', ['spacing'], ''),
                                                         ('push_style', ['*styles'], ''),
                                                         ('pop_style', ['n=1'], ''),
                                                         ('assert_line_data', ['flag=1'], '')],
                                             'properties': ['writer',
                                                            'align',
                                                            'align_stack',
                                                            'font_stack',
                                                            'margin_stack',
                                                            'spacing',
                                                            'style_stack',
                                                            'nospace',
                                                            'softspace',
                                                            'para_end',
                                                            'parskip',
                                                            'hard_break',
                                                            'have_label']},
             'formatter.AbstractWriter': {'bases': ['formatter.NullWriter'],
                                          'constructor': [],
                                          'docstring': 'A writer which can be used in debugging formatters, but not much else.\n\n    Each method simply announces itself by printing its name and\n    arguments on standard output.\n\n    ',
                                          'methods': [('new_alignment', ['align'], ''),
                                                      ('new_font', ['font'], ''),
                                                      ('new_margin', ['margin', 'level'], ''),
                                                      ('new_spacing', ['spacing'], ''),
                                                      ('new_styles', ['styles'], ''),
                                                      ('send_paragraph', ['blankline'], ''),
                                                      ('send_line_break', [], ''),
                                                      ('send_hor_rule', ['*args', '**kw'], ''),
                                                      ('send_label_data', ['data'], ''),
                                                      ('send_flowing_data', ['data'], ''),
                                                      ('send_literal_data', ['data'], '')],
                                          'properties': []},
             'formatter.DumbWriter': {'bases': ['formatter.NullWriter'],
                                      'constructor': ['file=None', 'maxcol=72'],
                                      'docstring': 'Simple writer class which writes output on the file object passed in\n    as the file parameter or, if file is omitted, on standard output.  The\n    output is simply word-wrapped to the number of columns specified by\n    the maxcol parameter.  This class is suitable for reflowing a sequence\n    of paragraphs.\n\n    ',
                                      'methods': [('reset', [], ''),
                                                  ('send_paragraph', ['blankline'], ''),
                                                  ('send_line_break', [], ''),
                                                  ('send_hor_rule', ['*args', '**kw'], ''),
                                                  ('send_literal_data', ['data'], ''),
                                                  ('send_flowing_data', ['data'], '')],
                                      'properties': ['file', 'maxcol', 'col', 'atbreak']},
             'formatter.NullFormatter': {'bases': [],
                                         'constructor': ['writer=None'],
                                         'docstring': "A formatter which does nothing.\n\n    If the writer parameter is omitted, a NullWriter instance is created.\n    No methods of the writer are called by NullFormatter instances.\n\n    Implementations should inherit from this class if implementing a writer\n    interface but don't need to inherit any implementation.\n\n    ",
                                         'methods': [('end_paragraph', ['blankline'], ''),
                                                     ('add_line_break', [], ''),
                                                     ('add_hor_rule', ['*args', '**kw'], ''),
                                                     ('add_label_data',
                                                      ['format', 'counter', 'blankline=None'],
                                                      ''),
                                                     ('add_flowing_data', ['data'], ''),
                                                     ('add_literal_data', ['data'], ''),
                                                     ('flush_softspace', [], ''),
                                                     ('push_alignment', ['align'], ''),
                                                     ('pop_alignment', [], ''),
                                                     ('push_font', ['x'], ''),
                                                     ('pop_font', [], ''),
                                                     ('push_margin', ['margin'], ''),
                                                     ('pop_margin', [], ''),
                                                     ('set_spacing', ['spacing'], ''),
                                                     ('push_style', ['*styles'], ''),
                                                     ('pop_style', ['n=1'], ''),
                                                     ('assert_line_data', ['flag=1'], '')],
                                         'properties': ['writer']},
             'formatter.NullWriter': {'bases': [],
                                      'constructor': [],
                                      'docstring': 'Minimal writer interface to use in testing & inheritance.\n\n    A writer which only provides the interface definition; no actions are\n    taken on any methods.  This should be the base class for all writers\n    which do not need to inherit any implementation methods.\n\n    ',
                                      'methods': [('flush', [], ''),
                                                  ('new_alignment', ['align'], ''),
                                                  ('new_font', ['font'], ''),
                                                  ('new_margin', ['margin', 'level'], ''),
                                                  ('new_spacing', ['spacing'], ''),
                                                  ('new_styles', ['styles'], ''),
                                                  ('send_paragraph', ['blankline'], ''),
                                                  ('send_line_break', [], ''),
                                                  ('send_hor_rule', ['*args', '**kw'], ''),
                                                  ('send_label_data', ['data'], ''),
                                                  ('send_flowing_data', ['data'], ''),
                                                  ('send_literal_data', ['data'], '')],
                                      'properties': []},
             'fpformat.NotANumber': {'bases': ['ValueError'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': []},
             'ftplib.Error': {'bases': ['Exception'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'ftplib.FTP': {'bases': [],
                            'constructor': ["host=''", "user=''", "passwd=''", "acct=''"],
                            'docstring': "An FTP client class.\n\n    To create a connection, call the class using these argument:\n            host, user, passwd, acct\n    These are all strings, and have default value ''.\n    Then use self.connect() with optional host and port argument.\n\n    To download a file, use ftp.retrlines('RETR ' + filename),\n    or ftp.retrbinary() with slightly different arguments.\n    To upload a file, use ftp.storlines() or ftp.storbinary(),\n    which have an open file as argument (see their definitions\n    below for details).\n    The download/upload functions first issue appropriate TYPE\n    and PORT or PASV commands.\n",
                            'methods': [('connect',
                                         ["host=''", 'port=0'],
                                         'Connect to host.  Arguments are:\n        - host: hostname to connect to (string, default previous host)\n        - port: port to connect to (integer, default previous port)'),
                                        ('getwelcome',
                                         [],
                                         'Get the welcome message from the server.\n        (this is read and squirreled away by connect())'),
                                        ('set_debuglevel',
                                         ['level'],
                                         'Set the debugging level.\n        The required argument level means:\n        0: no debugging output (default)\n        1: print commands and responses but not body text etc.\n        2: also print raw lines read and sent before stripping CR/LF'),
                                        ('set_pasv',
                                         ['val'],
                                         'Use passive or active mode for data transfers.\n        With a false argument, use the normal PORT mode,\n        With a true argument, use the PASV command.'),
                                        ('sanitize', ['s'], ''),
                                        ('putline', ['line'], ''),
                                        ('putcmd', ['line'], ''),
                                        ('getline', [], ''),
                                        ('getmultiline', [], ''),
                                        ('getresp', [], ''),
                                        ('voidresp',
                                         [],
                                         "Expect a response beginning with '2'."),
                                        ('abort',
                                         [],
                                         "Abort a file transfer.  Uses out-of-band data.\n        This does not follow the procedure from the RFC to send Telnet\n        IP and Synch; that doesn't seem to work with the servers I've\n        tried.  Instead, just send the ABOR command as OOB data."),
                                        ('sendcmd',
                                         ['cmd'],
                                         'Send a command and return the response.'),
                                        ('voidcmd',
                                         ['cmd'],
                                         "Send a command and expect a response beginning with '2'."),
                                        ('sendport',
                                         ['host', 'port'],
                                         'Send a PORT command with the current host and the given\n        port number.\n        '),
                                        ('sendeprt',
                                         ['host', 'port'],
                                         'Send a EPRT command with the current host and the given port number.'),
                                        ('makeport',
                                         [],
                                         'Create a new socket and send a PORT command for it.'),
                                        ('makepasv', [], ''),
                                        ('ntransfercmd',
                                         ['cmd', 'rest=None'],
                                         "Initiate a transfer over the data connection.\n\n        If the transfer is active, send a port command and the\n        transfer command, and accept the connection.  If the server is\n        passive, send a pasv command, connect to it, and start the\n        transfer command.  Either way, return the socket for the\n        connection and the expected size of the transfer.  The\n        expected size may be None if it could not be determined.\n\n        Optional `rest' argument can be a string that is sent as the\n        argument to a RESTART command.  This is essentially a server\n        marker used to tell the server to skip over any data up to the\n        given marker.\n        "),
                                        ('transfercmd',
                                         ['cmd', 'rest=None'],
                                         'Like ntransfercmd() but returns only the socket.'),
                                        ('login',
                                         ["user=''", "passwd=''", "acct=''"],
                                         'Login, default anonymous.'),
                                        ('retrbinary',
                                         ['cmd', 'callback', 'blocksize=8192', 'rest=None'],
                                         "Retrieve data in binary mode.\n\n        `cmd' is a RETR command.  `callback' is a callback function is\n        called for each block.  No more than `blocksize' number of\n        bytes will be read from the socket.  Optional `rest' is passed\n        to transfercmd().\n\n        A new port is created for you.  Return the response code.\n        "),
                                        ('retrlines',
                                         ['cmd', 'callback=None'],
                                         'Retrieve data in line mode.\n        The argument is a RETR or LIST command.\n        The callback function (2nd argument) is called for each line,\n        with trailing CRLF stripped.  This creates a new port for you.\n        print_line() is the default callback.'),
                                        ('storbinary',
                                         ['cmd', 'fp', 'blocksize=8192'],
                                         'Store a file in binary mode.'),
                                        ('storlines',
                                         ['cmd', 'fp'],
                                         'Store a file in line mode.'),
                                        ('acct', ['password'], 'Send new account name.'),
                                        ('nlst',
                                         ['*args'],
                                         'Return a list of files in a given directory (default the current).'),
                                        ('dir',
                                         ['*args'],
                                         'List a directory in long form.\n        By default list current directory to stdout.\n        Optional last argument is callback function; all\n        non-empty arguments before it are concatenated to the\n        LIST command.  (This *should* only be used for a pathname.)'),
                                        ('rename', ['fromname', 'toname'], 'Rename a file.'),
                                        ('delete', ['filename'], 'Delete a file.'),
                                        ('cwd', ['dirname'], 'Change to a directory.'),
                                        ('size', ['filename'], 'Retrieve the size of a file.'),
                                        ('mkd',
                                         ['dirname'],
                                         'Make a directory, return its full pathname.'),
                                        ('rmd', ['dirname'], 'Remove a directory.'),
                                        ('pwd', [], 'Return current working directory.'),
                                        ('quit', [], 'Quit, and close the connection.'),
                                        ('close',
                                         [],
                                         'Close the connection without assuming anything about it.')],
                            'properties': ['debugging',
                                           'host',
                                           'port',
                                           'sock',
                                           'file',
                                           'welcome',
                                           'passiveserver',
                                           'af',
                                           'debug',
                                           'lastresp']},
             'ftplib.Netrc': {'bases': [],
                              'constructor': ['filename=None'],
                              'docstring': "Class to parse & provide access to 'netrc' format files.\n\n    See the netrc(4) man page for information on the file format.\n\n    WARNING: This class is obsolete -- use module netrc instead.\n\n    ",
                              'methods': [('get_hosts',
                                           [],
                                           'Return a list of hosts mentioned in the .netrc file.'),
                                          ('get_account',
                                           ['host'],
                                           'Returns login information for the named host.\n\n        The return value is a triple containing userid,\n        password, and the accounting field.\n\n        '),
                                          ('get_macros',
                                           [],
                                           'Return a list of all defined macro names.'),
                                          ('get_macro',
                                           ['macro'],
                                           'Return a sequence of lines which define a named macro.')],
                              'properties': ['__defuser',
                                             '__defpasswd',
                                             '__defacct',
                                             '__hosts',
                                             '__macros']},
             'ftplib.error_perm': {'bases': ['ftplib.Error'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': []},
             'ftplib.error_proto': {'bases': ['ftplib.Error'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'ftplib.error_reply': {'bases': ['ftplib.Error'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'ftplib.error_temp': {'bases': ['ftplib.Error'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': []},
             'getopt.GetoptError': {'bases': ['Exception'],
                                    'constructor': ['msg', "opt=''"],
                                    'docstring': '',
                                    'methods': [('__str__', [], '')],
                                    'properties': ['opt', 'msg']},
             'gettext.GNUTranslations': {'bases': ['gettext.NullTranslations'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('_parse',
                                                      ['fp'],
                                                      'Override this method to support alternative .mo formats.'),
                                                     ('gettext', ['message'], ''),
                                                     ('lgettext', ['message'], ''),
                                                     ('ngettext',
                                                      ['msgid1', 'msgid2', 'n'],
                                                      ''),
                                                     ('lngettext',
                                                      ['msgid1', 'msgid2', 'n'],
                                                      ''),
                                                     ('ugettext', ['message'], ''),
                                                     ('ungettext',
                                                      ['msgid1', 'msgid2', 'n'],
                                                      '')],
                                         'properties': ['LE_MAGIC',
                                                        'BE_MAGIC',
                                                        '_catalog',
                                                        'plural',
                                                        '_charset']},
             'gettext.NullTranslations': {'bases': [],
                                          'constructor': ['fp=None'],
                                          'docstring': '',
                                          'methods': [('_parse', ['fp'], ''),
                                                      ('add_fallback', ['fallback'], ''),
                                                      ('gettext', ['message'], ''),
                                                      ('lgettext', ['message'], ''),
                                                      ('ngettext',
                                                       ['msgid1', 'msgid2', 'n'],
                                                       ''),
                                                      ('lngettext',
                                                       ['msgid1', 'msgid2', 'n'],
                                                       ''),
                                                      ('ugettext', ['message'], ''),
                                                      ('ungettext',
                                                       ['msgid1', 'msgid2', 'n'],
                                                       ''),
                                                      ('info', [], ''),
                                                      ('charset', [], ''),
                                                      ('output_charset', [], ''),
                                                      ('set_output_charset', ['charset'], ''),
                                                      ('install',
                                                       ['unicode=False', 'names=None'],
                                                       '')],
                                          'properties': ['_info',
                                                         '_charset',
                                                         '_output_charset',
                                                         '_fallback']},
             'gzip.GzipFile': {'bases': [],
                               'constructor': ['filename=None',
                                               'mode=None',
                                               'compresslevel=9',
                                               'fileobj=None'],
                               'docstring': 'The GzipFile class simulates most of the methods of a file object with\n    the exception of the readinto() and truncate() methods.\n\n    ',
                               'methods': [('__repr__', [], ''),
                                           ('_init_write', ['filename'], ''),
                                           ('_write_gzip_header', [], ''),
                                           ('_init_read', [], ''),
                                           ('_read_gzip_header', [], ''),
                                           ('write', ['data'], ''),
                                           ('read', ['size=-1'], ''),
                                           ('_unread', ['buf'], ''),
                                           ('_read', ['size=1024'], ''),
                                           ('_add_read_data', ['data'], ''),
                                           ('_read_eof', [], ''),
                                           ('close', [], ''),
                                           ('__del__', [], ''),
                                           ('flush', ['zlib_mode=zlib.Z_SYNC_FLUSH'], ''),
                                           ('fileno',
                                            [],
                                            "Invoke the underlying file object's fileno() method.\n\n        This will raise AttributeError if the underlying file object\n        doesn't support fileno().\n        "),
                                           ('isatty', [], ''),
                                           ('tell', [], ''),
                                           ('rewind',
                                            [],
                                            'Return the uncompressed stream file position indicator to the\n        beginning of the file'),
                                           ('seek', ['offset'], ''),
                                           ('readline', ['size=-1'], ''),
                                           ('readlines', ['sizehint=0'], ''),
                                           ('writelines', ['L'], ''),
                                           ('__iter__', [], ''),
                                           ('next', [], '')],
                               'properties': ['myfileobj',
                                              'max_read_chunk',
                                              'mode',
                                              '_new_member',
                                              'extrabuf',
                                              'extrasize',
                                              'filename',
                                              'min_readsize',
                                              'compress',
                                              'fileobj',
                                              'offset',
                                              'crc',
                                              'size',
                                              'writebuf',
                                              'bufsize',
                                              'decompress']},
             'hmac.HMAC': {'bases': [],
                           'constructor': ['key', 'msg=None', 'digestmod=None'],
                           'docstring': 'RFC2104 HMAC class.\n\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    ',
                           'methods': [('update',
                                        ['msg'],
                                        'Update this hashing object with the string msg.\n        '),
                                       ('copy',
                                        [],
                                        "Return a separate copy of this hashing object.\n\n        An update to this copy won't affect the original object.\n        "),
                                       ('digest',
                                        [],
                                        'Return the hash value of this hashing object.\n\n        This returns a string containing 8-bit data.  The object is\n        not altered in any way by this function; you can continue\n        updating the object after calling this function.\n        '),
                                       ('hexdigest',
                                        [],
                                        'Like digest(), but returns a string of hexadecimal digits instead.\n        ')],
                           'properties': ['digest_cons', 'outer', 'inner', 'digest_size']},
             'hotshot.Profile': {'bases': [],
                                 'constructor': ['logfn', 'lineevents=0', 'linetimings=1'],
                                 'docstring': '',
                                 'methods': [('close',
                                              [],
                                              'Close the logfile and terminate the profiler.'),
                                             ('fileno',
                                              [],
                                              "Return the file descriptor of the profiler's log file."),
                                             ('start', [], 'Start the profiler.'),
                                             ('stop', [], 'Stop the profiler.'),
                                             ('addinfo',
                                              ['key', 'value'],
                                              'Add an arbitrary labelled value to the profile log.'),
                                             ('run',
                                              ['cmd'],
                                              'Profile an exec-compatible string in the script\n        environment.\n\n        The globals from the __main__ module are used as both the\n        globals and locals for the script.\n        '),
                                             ('runctx',
                                              ['cmd', 'globals', 'locals'],
                                              'Evaluate an exec-compatible string in a specific\n        environment.\n\n        The string is compiled before profiling begins.\n        '),
                                             ('runcall',
                                              ['func', '*args', '**kw'],
                                              'Profile a single call of a callable.\n\n        Additional positional and keyword arguments may be passed\n        along; the result of the call is returned, and exceptions are\n        allowed to propogate cleanly, while ensuring that profiling is\n        disabled on the way out.\n        ')],
                                 'properties': ['lineevents',
                                                'linetimings',
                                                '_prof',
                                                'close',
                                                'start',
                                                'stop',
                                                'addinfo']},
             'hotshot.log.LogReader': {'bases': [],
                                       'constructor': ['logfn'],
                                       'docstring': '',
                                       'methods': [('close', [], ''),
                                                   ('fileno',
                                                    [],
                                                    "Return the file descriptor of the log reader's log file."),
                                                   ('addinfo',
                                                    ['key', 'value'],
                                                    'This method is called for each additional ADD_INFO record.\n\n        This can be overridden by applications that want to receive\n        these events.  The default implementation does not need to be\n        called by alternate implementations.\n\n        The initial set of ADD_INFO records do not pass through this\n        mechanism; this is only needed to receive notification when\n        new values are added.  Subclasses can inspect self._info after\n        calling LogReader.__init__().\n        '),
                                                   ('get_filename', ['fileno'], ''),
                                                   ('get_filenames', [], ''),
                                                   ('get_fileno', ['filename'], ''),
                                                   ('get_funcname', ['fileno', 'lineno'], ''),
                                                   ('next', ['index=0'], ''),
                                                   ('__iter__', [], ''),
                                                   ('_decode_location',
                                                    ['fileno', 'lineno'],
                                                    ''),
                                                   ('_loadfile', ['fileno'], '')],
                                       'properties': ['_filemap',
                                                      '_funcmap',
                                                      '_reader',
                                                      '_nextitem',
                                                      '_info',
                                                      'cwd',
                                                      '_stack',
                                                      '_append',
                                                      '_pop']},
             'hotshot.stats.FakeCode': {'bases': [],
                                        'constructor': ['filename', 'firstlineno', 'funcname'],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': ['co_filename',
                                                       'co_firstlineno',
                                                       'co_name',
                                                       '__name__']},
             'hotshot.stats.FakeFrame': {'bases': [],
                                         'constructor': ['code', 'back'],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['f_back', 'f_code']},
             'hotshot.stats.Profile': {'bases': ['profile.Profile'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('simulate_cmd_complete', [], '')],
                                       'properties': []},
             'hotshot.stats.StatsLoader': {'bases': [],
                                           'constructor': ['logfn'],
                                           'docstring': '',
                                           'methods': [('load', [], ''),
                                                       ('new_frame', ['*args'], '')],
                                           'properties': ['_logfn',
                                                          '_code',
                                                          '_stack',
                                                          'pop_frame']},
             'htmllib.HTMLParseError': {'bases': ['sgmllib.SGMLParseError'],
                                        'constructor': [],
                                        'docstring': "Error raised when an HTML document can't be parsed.",
                                        'methods': [],
                                        'properties': []},
             'htmllib.HTMLParser': {'bases': ['sgmllib.SGMLParser'],
                                    'constructor': ['formatter', 'verbose=0'],
                                    'docstring': 'This is the basic HTML parser class.\n\n    It supports all entity names required by the XHTML 1.0 Recommendation.\n    It also defines handlers for all HTML 2.0 and many HTML 3.0 and 3.2\n    elements.\n\n    ',
                                    'methods': [('error', ['message'], ''),
                                                ('reset', [], ''),
                                                ('handle_data', ['data'], ''),
                                                ('save_bgn',
                                                 [],
                                                 'Begins saving character data in a buffer instead of sending it\n        to the formatter object.\n\n        Retrieve the stored data via the save_end() method.  Use of the\n        save_bgn() / save_end() pair may not be nested.\n\n        '),
                                                ('save_end',
                                                 [],
                                                 'Ends buffering character data and returns all data saved since\n        the preceding call to the save_bgn() method.\n\n        If the nofill flag is false, whitespace is collapsed to single\n        spaces.  A call to this method without a preceding call to the\n        save_bgn() method will raise a TypeError exception.\n\n        '),
                                                ('anchor_bgn',
                                                 ['href', 'name', 'type'],
                                                 'This method is called at the start of an anchor region.\n\n        The arguments correspond to the attributes of the <A> tag with\n        the same names.  The default implementation maintains a list of\n        hyperlinks (defined by the HREF attribute for <A> tags) within\n        the document.  The list of hyperlinks is available as the data\n        attribute anchorlist.\n\n        '),
                                                ('anchor_end',
                                                 [],
                                                 'This method is called at the end of an anchor region.\n\n        The default implementation adds a textual footnote marker using an\n        index into the list of hyperlinks created by the anchor_bgn()method.\n\n        '),
                                                ('handle_image',
                                                 ['src', 'alt', '*args'],
                                                 'This method is called to handle images.\n\n        The default implementation simply passes the alt value to the\n        handle_data() method.\n\n        '),
                                                ('start_html', ['attrs'], ''),
                                                ('end_html', [], ''),
                                                ('start_head', ['attrs'], ''),
                                                ('end_head', [], ''),
                                                ('start_body', ['attrs'], ''),
                                                ('end_body', [], ''),
                                                ('start_title', ['attrs'], ''),
                                                ('end_title', [], ''),
                                                ('do_base', ['attrs'], ''),
                                                ('do_isindex', ['attrs'], ''),
                                                ('do_link', ['attrs'], ''),
                                                ('do_meta', ['attrs'], ''),
                                                ('do_nextid', ['attrs'], ''),
                                                ('start_h1', ['attrs'], ''),
                                                ('end_h1', [], ''),
                                                ('start_h2', ['attrs'], ''),
                                                ('end_h2', [], ''),
                                                ('start_h3', ['attrs'], ''),
                                                ('end_h3', [], ''),
                                                ('start_h4', ['attrs'], ''),
                                                ('end_h4', [], ''),
                                                ('start_h5', ['attrs'], ''),
                                                ('end_h5', [], ''),
                                                ('start_h6', ['attrs'], ''),
                                                ('end_h6', [], ''),
                                                ('do_p', ['attrs'], ''),
                                                ('start_pre', ['attrs'], ''),
                                                ('end_pre', [], ''),
                                                ('start_xmp', ['attrs'], ''),
                                                ('end_xmp', [], ''),
                                                ('start_listing', ['attrs'], ''),
                                                ('end_listing', [], ''),
                                                ('start_address', ['attrs'], ''),
                                                ('end_address', [], ''),
                                                ('start_blockquote', ['attrs'], ''),
                                                ('end_blockquote', [], ''),
                                                ('start_ul', ['attrs'], ''),
                                                ('end_ul', [], ''),
                                                ('do_li', ['attrs'], ''),
                                                ('start_ol', ['attrs'], ''),
                                                ('end_ol', [], ''),
                                                ('start_menu', ['attrs'], ''),
                                                ('end_menu', [], ''),
                                                ('start_dir', ['attrs'], ''),
                                                ('end_dir', [], ''),
                                                ('start_dl', ['attrs'], ''),
                                                ('end_dl', [], ''),
                                                ('do_dt', ['attrs'], ''),
                                                ('do_dd', ['attrs'], ''),
                                                ('ddpop', ['bl=0'], ''),
                                                ('start_cite', ['attrs'], ''),
                                                ('end_cite', [], ''),
                                                ('start_code', ['attrs'], ''),
                                                ('end_code', [], ''),
                                                ('start_em', ['attrs'], ''),
                                                ('end_em', [], ''),
                                                ('start_kbd', ['attrs'], ''),
                                                ('end_kbd', [], ''),
                                                ('start_samp', ['attrs'], ''),
                                                ('end_samp', [], ''),
                                                ('start_strong', ['attrs'], ''),
                                                ('end_strong', [], ''),
                                                ('start_var', ['attrs'], ''),
                                                ('end_var', [], ''),
                                                ('start_i', ['attrs'], ''),
                                                ('end_i', [], ''),
                                                ('start_b', ['attrs'], ''),
                                                ('end_b', [], ''),
                                                ('start_tt', ['attrs'], ''),
                                                ('end_tt', [], ''),
                                                ('start_a', ['attrs'], ''),
                                                ('end_a', [], ''),
                                                ('do_br', ['attrs'], ''),
                                                ('do_hr', ['attrs'], ''),
                                                ('do_img', ['attrs'], ''),
                                                ('do_plaintext', ['attrs'], ''),
                                                ('unknown_starttag', ['tag', 'attrs'], ''),
                                                ('unknown_endtag', ['tag'], '')],
                                    'properties': ['formatter',
                                                   'savedata',
                                                   'isindex',
                                                   'title',
                                                   'base',
                                                   'anchor',
                                                   'anchorlist',
                                                   'nofill',
                                                   'list_stack']},
             'httplib.BadStatusLine': {'bases': ['httplib.HTTPException'],
                                       'constructor': ['line'],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': ['args', 'line']},
             'httplib.CannotSendHeader': {'bases': ['httplib.ImproperConnectionState'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': []},
             'httplib.CannotSendRequest': {'bases': ['httplib.ImproperConnectionState'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': []},
             'httplib.FakeSocket': {'bases': ['httplib.SharedSocketClient'],
                                    'constructor': ['sock', 'ssl'],
                                    'docstring': '',
                                    'methods': [('close', [], ''),
                                                ('makefile', ['mode', 'bufsize=None'], ''),
                                                ('send', ['stuff', 'flags=0'], ''),
                                                ('recv', ['len=1024', 'flags=0'], ''),
                                                ('__getattr__', ['attr'], '')],
                                    'properties': ['_ssl', '_sock', 'sendall']},
             'httplib.HTTP': {'bases': [],
                              'constructor': ["host=''", 'port=None', 'strict=None'],
                              'docstring': 'Compatibility class with httplib.py from 1.5.',
                              'methods': [('_setup', ['conn'], ''),
                                          ('connect',
                                           ['host=None', 'port=None'],
                                           "Accept arguments to set the host/port, since the superclass doesn't."),
                                          ('getfile',
                                           [],
                                           "Provide a getfile, since the superclass' does not use this concept."),
                                          ('putheader',
                                           ['header', '*values'],
                                           'The superclass allows only one value argument.'),
                                          ('getreply',
                                           [],
                                           'Compat definition since superclass does not define it.\n\n        Returns a tuple consisting of:\n        - server status code (e.g. \'200\' if all goes well)\n        - server "reason" corresponding to status code\n        - any RFC822 headers in the response from the server\n        '),
                                          ('close', [], '')],
                              'properties': ['_http_vsn',
                                             '_http_vsn_str',
                                             'debuglevel',
                                             '_connection_class',
                                             '_conn',
                                             'send',
                                             'putrequest',
                                             'endheaders',
                                             'set_debuglevel',
                                             'file',
                                             'headers']},
             'httplib.HTTPConnection': {'bases': [],
                                        'constructor': ['host', 'port=None', 'strict=None'],
                                        'docstring': '',
                                        'methods': [('_set_hostport', ['host', 'port'], ''),
                                                    ('set_debuglevel', ['level'], ''),
                                                    ('connect',
                                                     [],
                                                     'Connect to the host and port specified in __init__.'),
                                                    ('close',
                                                     [],
                                                     'Close the connection to the HTTP server.'),
                                                    ('send',
                                                     ['str'],
                                                     "Send `str' to the server."),
                                                    ('_output',
                                                     ['s'],
                                                     'Add a line of output to the current request buffer.\n\n        Assumes that the line does *not* end with \\r\\n.\n        '),
                                                    ('_send_output',
                                                     [],
                                                     'Send the currently buffered request and clear the buffer.\n\n        Appends an extra \\r\\n to the buffer.\n        '),
                                                    ('putrequest',
                                                     ['method',
                                                      'url',
                                                      'skip_host=0',
                                                      'skip_accept_encoding=0'],
                                                     "Send a request to the server.\n\n        `method' specifies an HTTP request method, e.g. 'GET'.\n        `url' specifies the object being requested, e.g. '/index.html'.\n        `skip_host' if True does not add automatically a 'Host:' header\n        `skip_accept_encoding' if True does not add automatically an\n           'Accept-Encoding:' header\n        "),
                                                    ('putheader',
                                                     ['header', 'value'],
                                                     "Send a request header line to the server.\n\n        For example: h.putheader('Accept', 'text/html')\n        "),
                                                    ('endheaders',
                                                     [],
                                                     'Indicate that the last header line has been sent to the server.'),
                                                    ('request',
                                                     ['method',
                                                      'url',
                                                      'body=None',
                                                      'headers={}'],
                                                     'Send a complete request to the server.'),
                                                    ('_send_request',
                                                     ['method', 'url', 'body', 'headers'],
                                                     ''),
                                                    ('getresponse',
                                                     [],
                                                     'Get the response from the server.')],
                                        'properties': ['_http_vsn',
                                                       '_http_vsn_str',
                                                       'response_class',
                                                       'default_port',
                                                       'auto_open',
                                                       'debuglevel',
                                                       'strict',
                                                       'sock',
                                                       '_buffer',
                                                       '__response',
                                                       '__state',
                                                       '_method',
                                                       'host',
                                                       'port']},
             'httplib.HTTPException': {'bases': ['Exception'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': []},
             'httplib.HTTPMessage': {'bases': ['mimetools.Message'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('addheader',
                                                  ['key', 'value'],
                                                  'Add header for field key handling repeats.'),
                                                 ('addcontinue',
                                                  ['key', 'more'],
                                                  'Add more field data from a continuation line.'),
                                                 ('readheaders',
                                                  [],
                                                  'Read header lines.\n\n        Read header lines up to the entirely blank line that terminates them.\n        The (normally blank) line that ends the headers is skipped, but not\n        included in the returned list.  If a non-header line ends the headers,\n        (which is an error), an attempt is made to backspace over it; it is\n        never included in the returned list.\n\n        The variable self.status is set to the empty string if all went well,\n        otherwise it is an error message.  The variable self.headers is a\n        completely uninterpreted list of lines contained in the header (so\n        printing them will reproduce the header exactly as it appears in the\n        file).\n\n        If multiple header fields with the same name occur, they are combined\n        according to the rules in RFC 2616 sec 4.2:\n\n        Appending each subsequent field-value to the first, each separated\n        by a comma. The order in which header fields with the same field-name\n        are received is significant to the interpretation of the combined\n        field value.\n        ')],
                                     'properties': ['dict',
                                                    'unixfrom',
                                                    'headers',
                                                    'status',
                                                    'seekable']},
             'httplib.HTTPResponse': {'bases': [],
                                      'constructor': ['sock',
                                                      'debuglevel=0',
                                                      'strict=0',
                                                      'method=None'],
                                      'docstring': '',
                                      'methods': [('_read_status', [], ''),
                                                  ('begin', [], ''),
                                                  ('_check_close', [], ''),
                                                  ('close', [], ''),
                                                  ('isclosed', [], ''),
                                                  ('read', ['amt=None'], ''),
                                                  ('_read_chunked', ['amt'], ''),
                                                  ('_safe_read',
                                                   ['amt'],
                                                   'Read the number of bytes requested, compensating for partial reads.\n\n        Normally, we have a blocking socket, but a read() can be interrupted\n        by a signal (resulting in a partial read).\n\n        Note that we cannot distinguish between EOF and an interrupt when zero\n        bytes have been read. IncompleteRead() will be raised in this\n        situation.\n\n        This function should be used when <amt> bytes "should" be present for\n        reading. If the bytes are truly not available (due to EOF), then the\n        IncompleteRead exception can be used to detect the problem.\n        '),
                                                  ('getheader', ['name', 'default=None'], ''),
                                                  ('getheaders',
                                                   [],
                                                   'Return list of (header, value) tuples.')],
                                      'properties': ['fp',
                                                     'debuglevel',
                                                     'strict',
                                                     '_method',
                                                     'msg',
                                                     'version',
                                                     'status',
                                                     'reason',
                                                     'chunked',
                                                     'chunk_left',
                                                     'length',
                                                     'will_close']},
             'httplib.HTTPS': {'bases': ['httplib.HTTP'],
                               'constructor': ["host=''",
                                               'port=None',
                                               'key_file=None',
                                               'cert_file=None',
                                               'strict=None'],
                               'docstring': 'Compatibility with 1.5 httplib interface\n\n        Python 1.5.2 did not have an HTTPS class, but it defined an\n        interface for sending http requests that is also useful for\n        https.\n        ',
                               'methods': [],
                               'properties': ['_connection_class', 'key_file', 'cert_file']},
             'httplib.HTTPSConnection': {'bases': ['httplib.HTTPConnection'],
                                         'constructor': ['host',
                                                         'port=None',
                                                         'key_file=None',
                                                         'cert_file=None',
                                                         'strict=None'],
                                         'docstring': 'This class allows communication via SSL.',
                                         'methods': [('connect',
                                                      [],
                                                      'Connect to a host on a given (SSL) port.')],
                                         'properties': ['default_port',
                                                        'key_file',
                                                        'cert_file',
                                                        'sock']},
             'httplib.ImproperConnectionState': {'bases': ['httplib.HTTPException'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'httplib.IncompleteRead': {'bases': ['httplib.HTTPException'],
                                        'constructor': ['partial'],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': ['args', 'partial']},
             'httplib.InvalidURL': {'bases': ['httplib.HTTPException'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'httplib.LineAndFileWrapper': {'bases': [],
                                            'constructor': ['line', 'file'],
                                            'docstring': 'A limited file-like object for HTTP/0.9 responses.',
                                            'methods': [('__getattr__', ['attr'], ''),
                                                        ('_done', [], ''),
                                                        ('read', ['amt=None'], ''),
                                                        ('readline', [], ''),
                                                        ('readlines', ['size=None'], '')],
                                            'properties': ['_line',
                                                           '_file',
                                                           '_line_consumed',
                                                           '_line_offset',
                                                           '_line_left',
                                                           'read',
                                                           'readline',
                                                           'readlines']},
             'httplib.NotConnected': {'bases': ['httplib.HTTPException'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [],
                                      'properties': []},
             'httplib.ResponseNotReady': {'bases': ['httplib.ImproperConnectionState'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': []},
             'httplib.SSLFile': {'bases': ['httplib.SharedSocketClient'],
                                 'constructor': ['sock', 'ssl', 'bufsize=None'],
                                 'docstring': 'File-like object wrapping an SSL socket.',
                                 'methods': [('_read', [], ''),
                                             ('read', ['size=None'], ''),
                                             ('readline', [], ''),
                                             ('readlines', ['sizehint=0'], ''),
                                             ('fileno', [], ''),
                                             ('__iter__', [], ''),
                                             ('next', [], '')],
                                 'properties': ['BUFSIZE', '_ssl', '_buf', '_bufsize']},
             'httplib.SharedSocket': {'bases': [],
                                      'constructor': ['sock'],
                                      'docstring': '',
                                      'methods': [('incref', [], ''),
                                                  ('decref', [], ''),
                                                  ('__del__', [], '')],
                                      'properties': ['sock', '_refcnt']},
             'httplib.SharedSocketClient': {'bases': [],
                                            'constructor': ['shared'],
                                            'docstring': '',
                                            'methods': [('close', [], '')],
                                            'properties': ['_closed', '_shared', '_sock']},
             'httplib.UnimplementedFileMode': {'bases': ['httplib.HTTPException'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'httplib.UnknownProtocol': {'bases': ['httplib.HTTPException'],
                                         'constructor': ['version'],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['args', 'version']},
             'httplib.UnknownTransferEncoding': {'bases': ['httplib.HTTPException'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'idlelib.AutoComplete.AutoComplete': {'bases': [],
                                                   'constructor': ['editwin=None'],
                                                   'docstring': '',
                                                   'methods': [('_make_autocomplete_window',
                                                                [],
                                                                ''),
                                                               ('_remove_autocomplete_window',
                                                                ['event=None'],
                                                                ''),
                                                               ('force_open_completions_event',
                                                                ['event'],
                                                                'Happens when the user really wants to open a completion list, even\n        if a function call is needed.\n        '),
                                                               ('try_open_completions_event',
                                                                ['event'],
                                                                "Happens when it would be nice to open a completion list, but not\n        really neccesary, for example after an dot, so function\n        calls won't be made.\n        "),
                                                               ('autocomplete_event',
                                                                ['event'],
                                                                'Happens when the user wants to complete his word, and if neccesary,\n        open a completion list after that (if there is more than one\n        completion)\n        '),
                                                               ('_open_completions_later',
                                                                ['*args'],
                                                                ''),
                                                               ('_delayed_open_completions',
                                                                ['*args'],
                                                                ''),
                                                               ('open_completions',
                                                                ['evalfuncs',
                                                                 'complete',
                                                                 'userWantsWin',
                                                                 'mode=None'],
                                                                "Find the completions and create the AutoCompleteWindow.\n        Return True if successful (no syntax error or so found).\n        if complete is True, then if there's nothing to complete and no\n        start of completion, won't open completions and return False.\n        If mode is given, will open a completion list only in this mode.\n        "),
                                                               ('fetch_completions',
                                                                ['what', 'mode'],
                                                                'Return a pair of lists of completions for something. The first list\n        is a sublist of the second. Both are sorted.\n\n        If there is a Python subprocess, get the comp. list there.  Otherwise,\n        either fetch_completions() is running in the subprocess itself or it\n        was called in an IDLE EditorWindow before any script had been run.\n\n        The subprocess environment is that of the most recently run script.  If\n        two unrelated modules are being edited some calltips in the current\n        module may be inoperative if the module was not the last to run.\n        '),
                                                               ('get_entity',
                                                                ['name'],
                                                                'Lookup name in a namespace spanning sys.modules and __main.dict__')],
                                                   'properties': ['menudefs',
                                                                  'popupwait',
                                                                  'editwin',
                                                                  'text',
                                                                  'autocompletewindow',
                                                                  '_delayed_completion_id',
                                                                  '_delayed_completion_index']},
             'idlelib.AutoCompleteWindow.AutoCompleteWindow': {'bases': [],
                                                               'constructor': ['widget'],
                                                               'docstring': '',
                                                               'methods': [('_change_start',
                                                                            ['newstart'],
                                                                            ''),
                                                                           ('_binary_search',
                                                                            ['s'],
                                                                            'Find the first index in self.completions where completions[i] is\n        greater or equal to s, or the last index if there is no such\n        one.'),
                                                                           ('_complete_string',
                                                                            ['s'],
                                                                            'Assuming that s is the prefix of a string in self.completions,\n        return the longest string which is a prefix of all the strings which\n        s is a prefix of them. If s is not a prefix of a string, return s.'),
                                                                           ('_selection_changed',
                                                                            [],
                                                                            'Should be called when the selection of the Listbox has changed.\n        Updates the Listbox display and calls _change_start.'),
                                                                           ('show_window',
                                                                            ['comp_lists',
                                                                             'index',
                                                                             'complete',
                                                                             'mode',
                                                                             'userWantsWin'],
                                                                            "Show the autocomplete list, bind events.\n        If complete is True, complete the text, and if there is exactly one\n        matching completion, don't open a list."),
                                                                           ('winconfig_event',
                                                                            ['event'],
                                                                            ''),
                                                                           ('hide_event',
                                                                            ['event'],
                                                                            ''),
                                                                           ('listselect_event',
                                                                            ['event'],
                                                                            ''),
                                                                           ('doubleclick_event',
                                                                            ['event'],
                                                                            ''),
                                                                           ('keypress_event',
                                                                            ['event'],
                                                                            ''),
                                                                           ('keyrelease_event',
                                                                            ['event'],
                                                                            ''),
                                                                           ('is_active',
                                                                            [],
                                                                            ''),
                                                                           ('complete', [], ''),
                                                                           ('hide_window',
                                                                            [],
                                                                            '')],
                                                               'properties': ['widget',
                                                                              'autocompletewindow',
                                                                              'listbox',
                                                                              'scrollbar',
                                                                              'origselforeground',
                                                                              'origselbackground',
                                                                              'completions',
                                                                              'morecompletions',
                                                                              'mode',
                                                                              'start',
                                                                              'startindex',
                                                                              'lasttypedstart',
                                                                              'userwantswindow',
                                                                              'hideid',
                                                                              'keypressid',
                                                                              'listupdateid',
                                                                              'winconfigid',
                                                                              'keyreleaseid',
                                                                              'doubleclickid',
                                                                              'lastkey_was_tab']},
             'idlelib.AutoExpand.AutoExpand': {'bases': [],
                                               'constructor': ['editwin'],
                                               'docstring': '',
                                               'methods': [('expand_word_event', ['event'], ''),
                                                           ('getwords', [], ''),
                                                           ('getprevword', [], '')],
                                               'properties': ['menudefs',
                                                              'wordchars',
                                                              'text',
                                                              'state']},
             'idlelib.CallTipWindow.CallTip': {'bases': [],
                                               'constructor': ['widget'],
                                               'docstring': '',
                                               'methods': [('position_window',
                                                            [],
                                                            'Check if needs to reposition the window, and if so - do it.'),
                                                           ('showtip',
                                                            ['text',
                                                             'parenleft',
                                                             'parenright'],
                                                            'Show the calltip, bind events which will close it and reposition it.\n        '),
                                                           ('checkhide_event',
                                                            ['event=None'],
                                                            ''),
                                                           ('hide_event', ['event'], ''),
                                                           ('hidetip', [], ''),
                                                           ('is_active', [], '')],
                                               'properties': ['widget',
                                                              'tipwindow',
                                                              'label',
                                                              'parenline',
                                                              'parencol',
                                                              'lastline',
                                                              'hideid',
                                                              'checkhideid',
                                                              'text']},
             'idlelib.CallTipWindow.container': {'bases': [],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('calltip_show', ['event'], ''),
                                                             ('calltip_hide', ['event'], '')],
                                                 'properties': ['text', 'calltip']},
             'idlelib.CallTips.CallTips': {'bases': [],
                                           'constructor': ['editwin=None'],
                                           'docstring': '',
                                           'methods': [('close', [], ''),
                                                       ('_make_tk_calltip_window', [], ''),
                                                       ('_remove_calltip_window',
                                                        ['event=None'],
                                                        ''),
                                                       ('force_open_calltip_event',
                                                        ['event'],
                                                        'Happens when the user really wants to open a CallTip, even if a\n        function call is needed.\n        '),
                                                       ('try_open_calltip_event',
                                                        ['event'],
                                                        "Happens when it would be nice to open a CallTip, but not really\n        neccesary, for example after an opening bracket, so function calls\n        won't be made.\n        "),
                                                       ('refresh_calltip_event',
                                                        ['event'],
                                                        'If there is already a calltip window, check if it is still needed,\n        and if so, reload it.\n        '),
                                                       ('open_calltip', ['evalfuncs'], ''),
                                                       ('fetch_tip',
                                                        ['name'],
                                                        'Return the argument list and docstring of a function or class\n\n        If there is a Python subprocess, get the calltip there.  Otherwise,\n        either fetch_tip() is running in the subprocess itself or it was called\n        in an IDLE EditorWindow before any script had been run.\n\n        The subprocess environment is that of the most recently run script.  If\n        two unrelated modules are being edited some calltips in the current\n        module may be inoperative if the module was not the last to run.\n\n        '),
                                                       ('get_entity',
                                                        ['name'],
                                                        'Lookup name in a namespace spanning sys.modules and __main.dict__')],
                                           'properties': ['menudefs',
                                                          'editwin',
                                                          'text',
                                                          'calltip',
                                                          '_make_calltip_window']},
             'idlelib.CallTips.TC': {'bases': [],
                                     'constructor': ['a=None', '*b'],
                                     'docstring': '(a=None, ...)',
                                     'methods': [('t1', [], '()'),
                                                 ('t2', ['a', 'b=None'], '(a, b=None)'),
                                                 ('t3', ['a', '*args'], '(a, ...)'),
                                                 ('t4', ['*args'], '(...)'),
                                                 ('t5', ['a', '*args'], '(a, ...)'),
                                                 ('t6',
                                                  ['a', 'b=None', '*args', '**kw'],
                                                  '(a, b=None, ..., ***)')],
                                     'properties': []},
             'idlelib.ClassBrowser.ClassBrowser': {'bases': [],
                                                   'constructor': ['flist', 'name', 'path'],
                                                   'docstring': '',
                                                   'methods': [('close', ['event=None'], ''),
                                                               ('init', ['flist'], ''),
                                                               ('settitle', [], ''),
                                                               ('rootnode', [], '')],
                                                   'properties': ['name',
                                                                  'file',
                                                                  'flist',
                                                                  'top',
                                                                  'node']},
             'idlelib.ClassBrowser.ClassBrowserTreeItem': {'bases': ['TreeWidget.TreeItem'],
                                                           'constructor': ['name',
                                                                           'classes',
                                                                           'file'],
                                                           'docstring': '',
                                                           'methods': [('GetText', [], ''),
                                                                       ('GetIconName', [], ''),
                                                                       ('IsExpandable', [], ''),
                                                                       ('GetSubList', [], ''),
                                                                       ('OnDoubleClick',
                                                                        [],
                                                                        ''),
                                                                       ('listmethods', [], '')],
                                                           'properties': ['name',
                                                                          'classes',
                                                                          'file',
                                                                          'cl',
                                                                          'isfunction']},
             'idlelib.ClassBrowser.MethodBrowserTreeItem': {'bases': ['TreeWidget.TreeItem'],
                                                            'constructor': ['name',
                                                                            'cl',
                                                                            'file'],
                                                            'docstring': '',
                                                            'methods': [('GetText', [], ''),
                                                                        ('GetIconName', [], ''),
                                                                        ('IsExpandable',
                                                                         [],
                                                                         ''),
                                                                        ('OnDoubleClick',
                                                                         [],
                                                                         '')],
                                                            'properties': ['name', 'cl', 'file']},
             'idlelib.ClassBrowser.ModuleBrowserTreeItem': {'bases': ['TreeWidget.TreeItem'],
                                                            'constructor': ['file'],
                                                            'docstring': '',
                                                            'methods': [('GetText', [], ''),
                                                                        ('GetIconName', [], ''),
                                                                        ('GetSubList', [], ''),
                                                                        ('OnDoubleClick',
                                                                         [],
                                                                         ''),
                                                                        ('IsExpandable',
                                                                         [],
                                                                         ''),
                                                                        ('listclasses', [], '')],
                                                            'properties': ['file', 'classes']},
             'idlelib.CodeContext.CodeContext': {'bases': [],
                                                 'constructor': ['editwin'],
                                                 'docstring': '',
                                                 'methods': [('toggle_code_context_event',
                                                              ['event=None'],
                                                              ''),
                                                             ('get_line_info',
                                                              ['linenum'],
                                                              'Get the line indent value, text, and any block start keyword\n\n        If the line does not start a block, the keyword value is False.\n        The indentation of empty lines (or comment lines) is INFINITY.\n\n        '),
                                                             ('get_context',
                                                              ['new_topvisible',
                                                               'stopline=1',
                                                               'stopindent=0'],
                                                              'Get context lines, starting at new_topvisible and working backwards.\n\n        Stop when stopline or stopindent is reached. Return a tuple of context\n        data and the indent level at the top of the region inspected.\n\n        '),
                                                             ('update_code_context',
                                                              [],
                                                              'Update context information and lines visible in the context pane.\n\n        '),
                                                             ('timer_event', [], ''),
                                                             ('font_timer_event', [], '')],
                                                 'properties': ['menudefs',
                                                                'context_depth',
                                                                'bgcolor',
                                                                'fgcolor',
                                                                'editwin',
                                                                'text',
                                                                'textfont',
                                                                'label',
                                                                'info',
                                                                'topvisible',
                                                                'pad_frame']},
             'idlelib.ColorDelegator.ColorDelegator': {'bases': ['Delegator.Delegator'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('setdelegate',
                                                                    ['delegate'],
                                                                    ''),
                                                                   ('config_colors', [], ''),
                                                                   ('LoadTagDefs', [], ''),
                                                                   ('insert',
                                                                    ['index',
                                                                     'chars',
                                                                     'tags=None'],
                                                                    ''),
                                                                   ('delete',
                                                                    ['index1', 'index2=None'],
                                                                    ''),
                                                                   ('notify_range',
                                                                    ['index1', 'index2=None'],
                                                                    ''),
                                                                   ('close',
                                                                    ['close_when_done=None'],
                                                                    ''),
                                                                   ('toggle_colorize_event',
                                                                    ['event'],
                                                                    ''),
                                                                   ('recolorize', [], ''),
                                                                   ('recolorize_main', [], ''),
                                                                   ('removecolors', [], '')],
                                                       'properties': ['prog',
                                                                      'idprog',
                                                                      'asprog',
                                                                      'tagdefs',
                                                                      'after_id',
                                                                      'allow_colorizing',
                                                                      'colorizing',
                                                                      'stop_colorizing',
                                                                      'close_when_done']},
             'idlelib.Debugger.Debugger': {'bases': [],
                                           'constructor': ['pyshell', 'idb=None'],
                                           'docstring': '',
                                           'methods': [('run', ['*args'], ''),
                                                       ('close', ['event=None'], ''),
                                                       ('make_gui', [], ''),
                                                       ('interaction',
                                                        ['message', 'frame', 'info=None'],
                                                        ''),
                                                       ('sync_source_line', [], ''),
                                                       ('__frame2fileline', ['frame'], ''),
                                                       ('cont', [], ''),
                                                       ('step', [], ''),
                                                       ('next', [], ''),
                                                       ('ret', [], ''),
                                                       ('quit', [], ''),
                                                       ('show_stack', [], ''),
                                                       ('show_source', [], ''),
                                                       ('show_frame', ['(frame, lineno)'], ''),
                                                       ('show_locals', [], ''),
                                                       ('show_globals', [], ''),
                                                       ('show_variables', ['force=0'], ''),
                                                       ('set_breakpoint_here',
                                                        ['filename', 'lineno'],
                                                        ''),
                                                       ('clear_breakpoint_here',
                                                        ['filename', 'lineno'],
                                                        ''),
                                                       ('clear_file_breaks', ['filename'], ''),
                                                       ('load_breakpoints',
                                                        [],
                                                        'Load PyShellEditorWindow breakpoints into subprocess debugger')],
                                           'properties': ['vstack',
                                                          'vsource',
                                                          'vlocals',
                                                          'vglobals',
                                                          'pyshell',
                                                          'idb',
                                                          'frame',
                                                          'interacting',
                                                          'stackviewer',
                                                          'flist',
                                                          'root',
                                                          'top',
                                                          'bframe',
                                                          'buttons',
                                                          'bcont',
                                                          'bstep',
                                                          'bnext',
                                                          'bret',
                                                          'cframe',
                                                          'bstack',
                                                          'bsource',
                                                          'blocals',
                                                          'bglobals',
                                                          'status',
                                                          'error',
                                                          'errorbg',
                                                          'fstack',
                                                          'flocals',
                                                          'fglobals',
                                                          'localsviewer',
                                                          'globalsviewer']},
             'idlelib.Debugger.Idb': {'bases': ['bdb.Bdb'],
                                      'constructor': ['gui'],
                                      'docstring': '',
                                      'methods': [('user_line', ['frame'], ''),
                                                  ('user_exception', ['frame', 'info'], ''),
                                                  ('in_rpc_code', ['frame'], ''),
                                                  ('__frame2message', ['frame'], '')],
                                      'properties': ['gui']},
             'idlelib.Debugger.NamespaceViewer': {'bases': [],
                                                  'constructor': ['master',
                                                                  'title',
                                                                  'dict=None'],
                                                  'docstring': '',
                                                  'methods': [('load_dict',
                                                               ['dict',
                                                                'force=0',
                                                                'rpc_client=None'],
                                                               ''),
                                                              ('close', [], '')],
                                                  'properties': ['master',
                                                                 'title',
                                                                 'repr',
                                                                 'frame',
                                                                 'label',
                                                                 'vbar',
                                                                 'canvas',
                                                                 'subframe',
                                                                 'sfid',
                                                                 'dict']},
             'idlelib.Debugger.StackViewer': {'bases': ['ScrolledList.ScrolledList'],
                                              'constructor': ['master', 'flist', 'gui'],
                                              'docstring': '',
                                              'methods': [('load_stack',
                                                           ['stack', 'index=None'],
                                                           ''),
                                                          ('popup_event',
                                                           ['event'],
                                                           'override base method'),
                                                          ('fill_menu',
                                                           [],
                                                           'override base method'),
                                                          ('on_select',
                                                           ['index'],
                                                           'override base method'),
                                                          ('on_double',
                                                           ['index'],
                                                           'override base method'),
                                                          ('goto_source_line', [], ''),
                                                          ('show_stack_frame', [], ''),
                                                          ('show_source', ['index'], '')],
                                              'properties': ['flist', 'gui', 'stack']},
             'idlelib.Delegator.Delegator': {'bases': [],
                                             'constructor': ['delegate=None'],
                                             'docstring': '',
                                             'methods': [('__getattr__', ['name'], ''),
                                                         ('resetcache', [], ''),
                                                         ('cachereport', [], ''),
                                                         ('setdelegate', ['delegate'], ''),
                                                         ('getdelegate', [], '')],
                                             'properties': ['delegate', '__cache']},
             'idlelib.EditorWindow.EditorWindow': {'bases': ['object'],
                                                   'constructor': ['flist=None',
                                                                   'filename=None',
                                                                   'key=None',
                                                                   'root=None'],
                                                   'docstring': '',
                                                   'methods': [('_filename_to_unicode',
                                                                ['filename'],
                                                                'convert filename to unicode in order to display it in Tk'),
                                                               ('new_callback', ['event'], ''),
                                                               ('set_status_bar', [], ''),
                                                               ('set_line_and_column',
                                                                ['event=None'],
                                                                ''),
                                                               ('createmenubar', [], ''),
                                                               ('postwindowsmenu', [], ''),
                                                               ('right_menu_event',
                                                                ['event'],
                                                                ''),
                                                               ('make_rmenu', [], ''),
                                                               ('about_dialog',
                                                                ['event=None'],
                                                                ''),
                                                               ('config_dialog',
                                                                ['event=None'],
                                                                ''),
                                                               ('help_dialog',
                                                                ['event=None'],
                                                                ''),
                                                               ('python_docs',
                                                                ['event=None'],
                                                                ''),
                                                               ('cut', ['event'], ''),
                                                               ('copy', ['event'], ''),
                                                               ('paste', ['event'], ''),
                                                               ('select_all',
                                                                ['event=None'],
                                                                ''),
                                                               ('remove_selection',
                                                                ['event=None'],
                                                                ''),
                                                               ('move_at_edge_if_selection',
                                                                ['edge_index'],
                                                                'Cursor move begins at start or end of selection\n\n        When a left/right cursor key is pressed create and return to Tkinter a\n        function which causes a cursor move from the associated edge of the\n        selection.\n\n        '),
                                                               ('del_word_left', ['event'], ''),
                                                               ('del_word_right',
                                                                ['event'],
                                                                ''),
                                                               ('find_event', ['event'], ''),
                                                               ('find_again_event',
                                                                ['event'],
                                                                ''),
                                                               ('find_selection_event',
                                                                ['event'],
                                                                ''),
                                                               ('find_in_files_event',
                                                                ['event'],
                                                                ''),
                                                               ('replace_event', ['event'], ''),
                                                               ('goto_line_event',
                                                                ['event'],
                                                                ''),
                                                               ('open_module',
                                                                ['event=None'],
                                                                ''),
                                                               ('open_class_browser',
                                                                ['event=None'],
                                                                ''),
                                                               ('open_path_browser',
                                                                ['event=None'],
                                                                ''),
                                                               ('gotoline', ['lineno'], ''),
                                                               ('ispythonsource',
                                                                ['filename'],
                                                                ''),
                                                               ('close_hook', [], ''),
                                                               ('set_close_hook',
                                                                ['close_hook'],
                                                                ''),
                                                               ('filename_change_hook', [], ''),
                                                               ('addcolorizer', [], ''),
                                                               ('rmcolorizer', [], ''),
                                                               ('ResetColorizer',
                                                                [],
                                                                'Update the colour theme if it is changed'),
                                                               ('ResetFont',
                                                                [],
                                                                "Update the text widgets' font if it is changed"),
                                                               ('RemoveKeybindings',
                                                                [],
                                                                'Remove the keybindings before they are changed.'),
                                                               ('ApplyKeybindings',
                                                                [],
                                                                'Update the keybindings after they are changed'),
                                                               ('set_notabs_indentwidth',
                                                                [],
                                                                'Update the indentwidth if changed and not using tabs in this window'),
                                                               ('reset_help_menu_entries',
                                                                [],
                                                                'Update the additional help entries on the Help menu'),
                                                               ('__extra_help_callback',
                                                                ['helpfile'],
                                                                'Create a callback with the helpfile value frozen at definition time'),
                                                               ('update_recent_files_list',
                                                                ['new_file=None'],
                                                                'Load and update the recent files list and menus'),
                                                               ('__recent_file_callback',
                                                                ['file_name'],
                                                                ''),
                                                               ('saved_change_hook', [], ''),
                                                               ('get_saved', [], ''),
                                                               ('set_saved', ['flag'], ''),
                                                               ('reset_undo', [], ''),
                                                               ('short_title', [], ''),
                                                               ('long_title', [], ''),
                                                               ('center_insert_event',
                                                                ['event'],
                                                                ''),
                                                               ('center',
                                                                ["mark='insert'"],
                                                                ''),
                                                               ('getwindowlines', [], ''),
                                                               ('getlineno',
                                                                ["mark='insert'"],
                                                                ''),
                                                               ('get_geometry',
                                                                [],
                                                                'Return (width, height, x, y)'),
                                                               ('close_event', ['event'], ''),
                                                               ('maybesave', [], ''),
                                                               ('close', [], ''),
                                                               ('_close', [], ''),
                                                               ('load_extensions', [], ''),
                                                               ('unload_extensions', [], ''),
                                                               ('load_standard_extensions',
                                                                [],
                                                                ''),
                                                               ('get_standard_extension_names',
                                                                [],
                                                                ''),
                                                               ('load_extension', ['name'], ''),
                                                               ('apply_bindings',
                                                                ['keydefs=None'],
                                                                ''),
                                                               ('fill_menus',
                                                                ['menudefs=None',
                                                                 'keydefs=None'],
                                                                'Add appropriate entries to the menus and submenus\n\n        Menus that are absent or None in self.menudict are ignored.\n        '),
                                                               ('getvar', ['name'], ''),
                                                               ('setvar',
                                                                ['name',
                                                                 'value',
                                                                 'vartype=None'],
                                                                ''),
                                                               ('get_var_obj',
                                                                ['name', 'vartype=None'],
                                                                ''),
                                                               ('is_char_in_string',
                                                                ['text_index'],
                                                                ''),
                                                               ('get_selection_indices',
                                                                [],
                                                                ''),
                                                               ('get_tabwidth', [], ''),
                                                               ('set_tabwidth',
                                                                ['newtabwidth'],
                                                                ''),
                                                               ('set_indentation_params',
                                                                ['ispythonsource',
                                                                 'guess=True'],
                                                                ''),
                                                               ('smart_backspace_event',
                                                                ['event'],
                                                                ''),
                                                               ('smart_indent_event',
                                                                ['event'],
                                                                ''),
                                                               ('newline_and_indent_event',
                                                                ['event'],
                                                                ''),
                                                               ('_build_char_in_string_func',
                                                                ['startindex'],
                                                                ''),
                                                               ('indent_region_event',
                                                                ['event'],
                                                                ''),
                                                               ('dedent_region_event',
                                                                ['event'],
                                                                ''),
                                                               ('comment_region_event',
                                                                ['event'],
                                                                ''),
                                                               ('uncomment_region_event',
                                                                ['event'],
                                                                ''),
                                                               ('tabify_region_event',
                                                                ['event'],
                                                                ''),
                                                               ('untabify_region_event',
                                                                ['event'],
                                                                ''),
                                                               ('toggle_tabs_event',
                                                                ['event'],
                                                                ''),
                                                               ('change_indentwidth_event',
                                                                ['event'],
                                                                ''),
                                                               ('get_region', [], ''),
                                                               ('set_region',
                                                                ['head',
                                                                 'tail',
                                                                 'chars',
                                                                 'lines'],
                                                                ''),
                                                               ('_make_blanks', ['n'], ''),
                                                               ('reindent_to', ['column'], ''),
                                                               ('_asktabwidth', [], ''),
                                                               ('guess_indent', [], '')],
                                                   'properties': ['help_url',
                                                                  'flist',
                                                                  'root',
                                                                  'menubar',
                                                                  'top',
                                                                  'tkinter_vars',
                                                                  'recent_files_path',
                                                                  'vbar',
                                                                  'text_frame',
                                                                  'width',
                                                                  'text',
                                                                  'usetabs',
                                                                  'tabwidth',
                                                                  'indentwidth',
                                                                  'context_use_ps1',
                                                                  'num_context_lines',
                                                                  'per',
                                                                  'color',
                                                                  'undo',
                                                                  'io',
                                                                  'recent_files_menu',
                                                                  'wmenu_end',
                                                                  'askyesno',
                                                                  'askinteger',
                                                                  'showerror',
                                                                  'status_bar',
                                                                  'menu_specs',
                                                                  'menudict',
                                                                  'base_helpmenu_length',
                                                                  'rmenu',
                                                                  'event',
                                                                  'rmenu_specs',
                                                                  'close_hook',
                                                                  'extensions']},
             'idlelib.EditorWindow.IndentSearcher': {'bases': ['object'],
                                                     'constructor': ['text', 'tabwidth'],
                                                     'docstring': '',
                                                     'methods': [('readline', [], ''),
                                                                 ('tokeneater',
                                                                  ['type',
                                                                   'token',
                                                                   'start',
                                                                   'end',
                                                                   'line',
                                                                   'INDENT=_tokenize.INDENT',
                                                                   'NAME=_tokenize.NAME',
                                                                   "OPENERS=('class', 'def', 'for', 'if', 'try', 'while')"],
                                                                  ''),
                                                                 ('run', [], '')],
                                                     'properties': ['text',
                                                                    'tabwidth',
                                                                    'i',
                                                                    'finished',
                                                                    'blkopenline',
                                                                    'indentedline']},
             'idlelib.FileList.FileList': {'bases': [],
                                           'constructor': ['root'],
                                           'docstring': '',
                                           'methods': [('open',
                                                        ['filename', 'action=None'],
                                                        ''),
                                                       ('gotofileline',
                                                        ['filename', 'lineno=None'],
                                                        ''),
                                                       ('new', ['filename=None'], ''),
                                                       ('close_all_callback', ['event'], ''),
                                                       ('close_edit', ['edit'], ''),
                                                       ('filename_changed_edit', ['edit'], ''),
                                                       ('canonize', ['filename'], '')],
                                           'properties': ['root', 'dict', 'inversedict', 'vars']},
             'idlelib.FormatParagraph.FormatParagraph': {'bases': [],
                                                         'constructor': ['editwin'],
                                                         'docstring': '',
                                                         'methods': [('close', [], ''),
                                                                     ('format_paragraph_event',
                                                                      ['event'],
                                                                      '')],
                                                         'properties': ['menudefs', 'editwin']},
             'idlelib.GrepDialog.GrepDialog': {'bases': ['SearchDialogBase.SearchDialogBase'],
                                               'constructor': ['root', 'engine', 'flist'],
                                               'docstring': '',
                                               'methods': [('open',
                                                            ['text',
                                                             'searchphrase',
                                                             'io=None'],
                                                            ''),
                                                           ('create_entries', [], ''),
                                                           ('create_other_buttons', [], ''),
                                                           ('create_command_buttons', [], ''),
                                                           ('default_command',
                                                            ['event=None'],
                                                            ''),
                                                           ('grep_it', ['prog', 'path'], ''),
                                                           ('findfiles',
                                                            ['dir', 'base', 'rec'],
                                                            ''),
                                                           ('close', ['event=None'], '')],
                                               'properties': ['title',
                                                              'icon',
                                                              'needwrapbutton',
                                                              'flist',
                                                              'globvar',
                                                              'recvar',
                                                              'globent']},
             'idlelib.HyperParser.HyperParser': {'bases': [],
                                                 'constructor': ['editwin', 'index'],
                                                 'docstring': '',
                                                 'methods': [('set_index',
                                                              ['index'],
                                                              'Set the index to which the functions relate. Note that it must be\n        in the same statement.\n        '),
                                                             ('is_in_string',
                                                              [],
                                                              'Is the index given to the HyperParser is in a string?'),
                                                             ('is_in_code',
                                                              [],
                                                              'Is the index given to the HyperParser is in a normal code?'),
                                                             ('get_surrounding_brackets',
                                                              ["openers='([{'",
                                                               'mustclose=False'],
                                                              'If the index given to the HyperParser is surrounded by a bracket\n        defined in openers (or at least has one before it), return the\n        indices of the opening bracket and the closing bracket (or the\n        end of line, whichever comes first).\n        If it is not surrounded by brackets, or the end of line comes before\n        the closing bracket and mustclose is True, returns None.\n        '),
                                                             ('_eat_identifier',
                                                              ['str', 'limit', 'pos'],
                                                              ''),
                                                             ('get_expression',
                                                              [],
                                                              'Return a string with the Python expression which ends at the given\n        index, which is empty if there is no real one.\n        ')],
                                                 'properties': ['editwin',
                                                                'text',
                                                                'rawtext',
                                                                'stopatindex',
                                                                'bracketing',
                                                                'isopener',
                                                                'indexinrawtext',
                                                                'indexbracket',
                                                                '_whitespace_chars',
                                                                '_id_chars',
                                                                '_id_first_chars']},
             'idlelib.IOBinding.EncodingMessage': {'bases': ['SimpleDialog.SimpleDialog'],
                                                   'constructor': ['master', 'enc'],
                                                   'docstring': 'Inform user that an encoding declaration is needed.',
                                                   'methods': [('do_ok', [], ''),
                                                               ('do_edit', [], '')],
                                                   'properties': ['should_edit',
                                                                  'root',
                                                                  'top',
                                                                  'default',
                                                                  'cancel']},
             'idlelib.IOBinding.IOBinding': {'bases': [],
                                             'constructor': ['editwin'],
                                             'docstring': '',
                                             'methods': [('close', [], ''),
                                                         ('get_saved', [], ''),
                                                         ('set_saved', ['flag'], ''),
                                                         ('reset_undo', [], ''),
                                                         ('set_filename_change_hook',
                                                          ['hook'],
                                                          ''),
                                                         ('set_filename', ['filename'], ''),
                                                         ('open',
                                                          ['event=None', 'editFile=None'],
                                                          ''),
                                                         ('loadfile', ['filename'], ''),
                                                         ('decode',
                                                          ['chars'],
                                                          'Create a Unicode string\n\n        If that fails, let Tcl try its best\n        '),
                                                         ('maybesave', [], ''),
                                                         ('save', ['event'], ''),
                                                         ('save_as', ['event'], ''),
                                                         ('save_a_copy', ['event'], ''),
                                                         ('writefile', ['filename'], ''),
                                                         ('encode', ['chars'], ''),
                                                         ('fixlastline', [], ''),
                                                         ('print_window', ['event'], ''),
                                                         ('askopenfile', [], ''),
                                                         ('defaultfilename',
                                                          ["mode='open'"],
                                                          ''),
                                                         ('asksavefile', [], ''),
                                                         ('updaterecentfileslist',
                                                          ['filename'],
                                                          'Update recent file list on all editor windows')],
                                             'properties': ['editwin',
                                                            'text',
                                                            '__id_open',
                                                            '__id_save',
                                                            '__id_saveas',
                                                            '__id_savecopy',
                                                            'fileencoding',
                                                            '__id_print',
                                                            'filename_change_hook',
                                                            'filename',
                                                            'dirname',
                                                            'eol',
                                                            'eol_re',
                                                            'eol_convention',
                                                            'opendialog',
                                                            'savedialog',
                                                            'filetypes']},
             'idlelib.IdleHistory.History': {'bases': [],
                                             'constructor': ['text', "output_sep='\\n'"],
                                             'docstring': '',
                                             'methods': [('history_next', ['event'], ''),
                                                         ('history_prev', ['event'], ''),
                                                         ('_get_source', ['start', 'end'], ''),
                                                         ('_put_source',
                                                          ['where', 'source'],
                                                          ''),
                                                         ('history_do', ['reverse'], ''),
                                                         ('history_store', ['source'], '')],
                                             'properties': ['text',
                                                            'history',
                                                            'history_prefix',
                                                            'history_pointer',
                                                            'output_sep',
                                                            'cyclic']},
             'idlelib.MultiCall._ComplexBinder': {'bases': [],
                                                  'constructor': ['type',
                                                                  'widget',
                                                                  'widgetinst'],
                                                  'docstring': '',
                                                  'methods': [('__create_handler',
                                                               ['lists',
                                                                'mc_type',
                                                                'mc_state'],
                                                               ''),
                                                              ('bind', ['triplet', 'func'], ''),
                                                              ('unbind',
                                                               ['triplet', 'func'],
                                                               ''),
                                                              ('__del__', [], '')],
                                                  'properties': ['type',
                                                                 'typename',
                                                                 'widget',
                                                                 'widgetinst',
                                                                 'bindedfuncs',
                                                                 'handlerids',
                                                                 'ishandlerrunning',
                                                                 'doafterhandler']},
             'idlelib.MultiCall._SimpleBinder': {'bases': [],
                                                 'constructor': ['type', 'widget', 'widgetinst'],
                                                 'docstring': '',
                                                 'methods': [('bind', ['triplet', 'func'], ''),
                                                             ('unbind',
                                                              ['triplet', 'func'],
                                                              ''),
                                                             ('__del__', [], '')],
                                                 'properties': ['type',
                                                                'sequence',
                                                                'widget',
                                                                'widgetinst',
                                                                'bindedfuncs',
                                                                'handlerid']},
             'idlelib.MultiStatusBar.MultiStatusBar': {'bases': ['idlelib.MultiStatusBar.Frame'],
                                                       'constructor': ['master=None', '**kw'],
                                                       'docstring': '',
                                                       'methods': [('set_label',
                                                                    ['name',
                                                                     "text=''",
                                                                     'side=LEFT'],
                                                                    '')],
                                                       'properties': ['labels']},
             'idlelib.ObjectBrowser.AtomicObjectTreeItem': {'bases': ['idlelib.ObjectBrowser.ObjectTreeItem'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('IsExpandable',
                                                                         [],
                                                                         '')],
                                                            'properties': []},
             'idlelib.ObjectBrowser.ClassTreeItem': {'bases': ['idlelib.ObjectBrowser.ObjectTreeItem'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('IsExpandable', [], ''),
                                                                 ('GetSubList', [], '')],
                                                     'properties': []},
             'idlelib.ObjectBrowser.DictTreeItem': {'bases': ['idlelib.ObjectBrowser.SequenceTreeItem'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('keys', [], '')],
                                                    'properties': []},
             'idlelib.ObjectBrowser.InstanceTreeItem': {'bases': ['idlelib.ObjectBrowser.ObjectTreeItem'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('IsExpandable', [], ''),
                                                                    ('GetSubList', [], '')],
                                                        'properties': []},
             'idlelib.ObjectBrowser.ObjectTreeItem': {'bases': ['TreeWidget.TreeItem'],
                                                      'constructor': ['labeltext',
                                                                      'object',
                                                                      'setfunction=None'],
                                                      'docstring': '',
                                                      'methods': [('GetLabelText', [], ''),
                                                                  ('GetText', [], ''),
                                                                  ('GetIconName', [], ''),
                                                                  ('IsEditable', [], ''),
                                                                  ('SetText', ['text'], ''),
                                                                  ('IsExpandable', [], ''),
                                                                  ('GetSubList', [], '')],
                                                      'properties': ['labeltext',
                                                                     'object',
                                                                     'setfunction']},
             'idlelib.ObjectBrowser.SequenceTreeItem': {'bases': ['idlelib.ObjectBrowser.ObjectTreeItem'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('IsExpandable', [], ''),
                                                                    ('keys', [], ''),
                                                                    ('GetSubList', [], '')],
                                                        'properties': []},
             'idlelib.OutputWindow.OnDemandOutputWindow': {'bases': [],
                                                           'constructor': ['flist'],
                                                           'docstring': '',
                                                           'methods': [('write',
                                                                        ['s', 'tags', 'mark'],
                                                                        ''),
                                                                       ('setup', [], '')],
                                                           'properties': ['tagdefs',
                                                                          'flist',
                                                                          'owin',
                                                                          'write']},
             'idlelib.OutputWindow.OutputWindow': {'bases': ['EditorWindow.EditorWindow'],
                                                   'constructor': ['*args'],
                                                   'docstring': 'An editor window that can serve as an output file.\n\n    Also the future base class for the Python shell window.\n    This class has no input facilities.\n    ',
                                                   'methods': [('ispythonsource',
                                                                ['filename'],
                                                                ''),
                                                               ('short_title', [], ''),
                                                               ('maybesave', [], ''),
                                                               ('write',
                                                                ['s',
                                                                 'tags=()',
                                                                 "mark='insert'"],
                                                                ''),
                                                               ('writelines', ['l'], ''),
                                                               ('flush', [], ''),
                                                               ('goto_file_line',
                                                                ['event=None'],
                                                                ''),
                                                               ('_file_line_helper',
                                                                ['line'],
                                                                '')],
                                                   'properties': ['rmenu_specs',
                                                                  'file_line_pats',
                                                                  'file_line_progs']},
             'idlelib.ParenMatch.ParenMatch': {'bases': [],
                                               'constructor': ['editwin'],
                                               'docstring': "Highlight matching parentheses\n\n    There are three supported style of paren matching, based loosely\n    on the Emacs options.  The style is select based on the\n    HILITE_STYLE attribute; it can be changed used the set_style\n    method.\n\n    The supported styles are:\n\n    default -- When a right paren is typed, highlight the matching\n        left paren for 1/2 sec.\n\n    expression -- When a right paren is typed, highlight the entire\n        expression from the left paren to the right paren.\n\n    TODO:\n        - extend IDLE with configuration dialog to change options\n        - implement rest of Emacs highlight styles (see below)\n        - print mismatch warning in IDLE status window\n\n    Note: In Emacs, there are several styles of highlight where the\n    matching paren is highlighted whenever the cursor is immediately\n    to the right of a right paren.  I don't know how to do that in Tk,\n    so I haven't bothered.\n    ",
                                               'methods': [('activate_restore', [], ''),
                                                           ('deactivate_restore', [], ''),
                                                           ('set_style', ['style'], ''),
                                                           ('flash_paren_event', ['event'], ''),
                                                           ('paren_closed_event',
                                                            ['event'],
                                                            ''),
                                                           ('restore_event',
                                                            ['event=None'],
                                                            ''),
                                                           ('handle_restore_timer',
                                                            ['timer_count'],
                                                            ''),
                                                           ('warn_mismatched', [], ''),
                                                           ('create_tag_default',
                                                            ['indices'],
                                                            'Highlight the single paren that matches'),
                                                           ('create_tag_expression',
                                                            ['indices'],
                                                            'Highlight the entire expression'),
                                                           ('set_timeout_none',
                                                            [],
                                                            'Highlight will remain until user input turns it off\n        or the insert has moved'),
                                                           ('set_timeout_last',
                                                            [],
                                                            'The last highlight created will be removed after .5 sec')],
                                               'properties': ['menudefs',
                                                              'STYLE',
                                                              'FLASH_DELAY',
                                                              'HILITE_CONFIG',
                                                              'BELL',
                                                              'RESTORE_VIRTUAL_EVENT_NAME',
                                                              'RESTORE_SEQUENCES',
                                                              'editwin',
                                                              'text',
                                                              'counter',
                                                              'is_restore_active',
                                                              'create_tag',
                                                              'set_timeout']},
             'idlelib.PathBrowser.DirBrowserTreeItem': {'bases': ['TreeWidget.TreeItem'],
                                                        'constructor': ['dir', 'packages=[]'],
                                                        'docstring': '',
                                                        'methods': [('GetText', [], ''),
                                                                    ('GetSubList', [], ''),
                                                                    ('ispackagedir',
                                                                     ['file'],
                                                                     ''),
                                                                    ('listmodules',
                                                                     ['allnames'],
                                                                     '')],
                                                        'properties': ['dir', 'packages']},
             'idlelib.PathBrowser.PathBrowser': {'bases': ['ClassBrowser.ClassBrowser'],
                                                 'constructor': ['flist'],
                                                 'docstring': '',
                                                 'methods': [('settitle', [], ''),
                                                             ('rootnode', [], '')],
                                                 'properties': []},
             'idlelib.PathBrowser.PathBrowserTreeItem': {'bases': ['TreeWidget.TreeItem'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('GetText', [], ''),
                                                                     ('GetSubList', [], '')],
                                                         'properties': []},
             'idlelib.Percolator.Percolator': {'bases': [],
                                               'constructor': ['text'],
                                               'docstring': '',
                                               'methods': [('close', [], ''),
                                                           ('insert',
                                                            ['index', 'chars', 'tags=None'],
                                                            ''),
                                                           ('delete',
                                                            ['index1', 'index2=None'],
                                                            ''),
                                                           ('insertfilter', ['filter'], ''),
                                                           ('removefilter', ['filter'], '')],
                                               'properties': ['text',
                                                              'redir',
                                                              'top',
                                                              'bottom',
                                                              'filters']},
             'idlelib.PyParse.Parser': {'bases': [],
                                        'constructor': ['indentwidth', 'tabwidth'],
                                        'docstring': '',
                                        'methods': [('set_str', ['str'], ''),
                                                    ('find_good_parse_start',
                                                     ['is_char_in_string=None',
                                                      '_synchre=_synchre'],
                                                     ''),
                                                    ('set_lo', ['lo'], ''),
                                                    ('_study1', [], ''),
                                                    ('get_continuation_type', [], ''),
                                                    ('_study2', [], ''),
                                                    ('compute_bracket_indent', [], ''),
                                                    ('get_num_lines_in_stmt', [], ''),
                                                    ('compute_backslash_indent', [], ''),
                                                    ('get_base_indent_string', [], ''),
                                                    ('is_block_opener', [], ''),
                                                    ('is_block_closer', [], ''),
                                                    ('get_last_open_bracket_pos', [], ''),
                                                    ('get_last_stmt_bracketing', [], '')],
                                        'properties': ['indentwidth',
                                                       'tabwidth',
                                                       'str',
                                                       'study_level',
                                                       'goodlines',
                                                       'continuation',
                                                       'stmt_start',
                                                       'stmt_end',
                                                       'lastch',
                                                       'lastopenbracketpos',
                                                       'stmt_bracketing']},
             'idlelib.PyShell.ModifiedColorDelegator': {'bases': ['ColorDelegator.ColorDelegator'],
                                                        'constructor': [],
                                                        'docstring': 'Extend base class: colorizer for the shell window itself',
                                                        'methods': [('recolorize_main', [], ''),
                                                                    ('LoadTagDefs', [], '')],
                                                        'properties': []},
             'idlelib.PyShell.ModifiedInterpreter': {'bases': ['code.InteractiveInterpreter'],
                                                     'constructor': ['tkconsole'],
                                                     'docstring': '',
                                                     'methods': [('spawn_subprocess', [], ''),
                                                                 ('build_subprocess_arglist',
                                                                  [],
                                                                  ''),
                                                                 ('start_subprocess', [], ''),
                                                                 ('restart_subprocess', [], ''),
                                                                 ('__request_interrupt',
                                                                  [],
                                                                  ''),
                                                                 ('interrupt_subprocess',
                                                                  [],
                                                                  ''),
                                                                 ('kill_subprocess', [], ''),
                                                                 ('unix_terminate',
                                                                  [],
                                                                  'UNIX: make sure subprocess is terminated and collect status'),
                                                                 ('transfer_path', [], ''),
                                                                 ('poll_subprocess', [], ''),
                                                                 ('setdebugger',
                                                                  ['debugger'],
                                                                  ''),
                                                                 ('getdebugger', [], ''),
                                                                 ('open_remote_stack_viewer',
                                                                  [],
                                                                  'Initiate the remote stack viewer from a separate thread.\n\n        This method is called from the subprocess, and by returning from this\n        method we allow the subprocess to unblock.  After a bit the shell\n        requests the subprocess to open the remote stack viewer which returns a\n        static object looking at the last exceptiopn.  It is queried through\n        the RPC mechanism.\n\n        '),
                                                                 ('remote_stack_viewer',
                                                                  [],
                                                                  ''),
                                                                 ('execsource',
                                                                  ['source'],
                                                                  'Like runsource() but assumes complete exec source'),
                                                                 ('execfile',
                                                                  ['filename', 'source=None'],
                                                                  'Execute an existing file'),
                                                                 ('runsource',
                                                                  ['source'],
                                                                  'Extend base class method: Stuff the source in the line cache first'),
                                                                 ('stuffsource',
                                                                  ['source'],
                                                                  'Stuff source in the filename cache'),
                                                                 ('prepend_syspath',
                                                                  ['filename'],
                                                                  "Prepend sys.path with file's directory if not already included"),
                                                                 ('showsyntaxerror',
                                                                  ['filename=None'],
                                                                  'Extend base class method: Add Colorizing\n\n        Color the offending position instead of printing it and pointing at it\n        with a caret.\n\n        '),
                                                                 ('unpackerror', [], ''),
                                                                 ('showtraceback',
                                                                  [],
                                                                  'Extend base class method to reset output properly'),
                                                                 ('checklinecache', [], ''),
                                                                 ('runcommand',
                                                                  ['code'],
                                                                  'Run the code without invoking the debugger'),
                                                                 ('runcode',
                                                                  ['code'],
                                                                  'Override base class method'),
                                                                 ('write',
                                                                  ['s'],
                                                                  'Override base class method'),
                                                                 ('display_port_binding_error',
                                                                  [],
                                                                  ''),
                                                                 ('display_no_subprocess_error',
                                                                  [],
                                                                  ''),
                                                                 ('display_executing_dialog',
                                                                  [],
                                                                  '')],
                                                     'properties': ['tkconsole',
                                                                    'save_warnings_filters',
                                                                    'restarting',
                                                                    'subprocess_arglist',
                                                                    'port',
                                                                    'rpcclt',
                                                                    'rpcpid',
                                                                    'active_seq',
                                                                    'debugger',
                                                                    'gid',
                                                                    'more']},
             'idlelib.PyShell.ModifiedUndoDelegator': {'bases': ['UndoDelegator.UndoDelegator'],
                                                       'constructor': [],
                                                       'docstring': 'Extend base class: forbid insert/delete before the I/O mark',
                                                       'methods': [('insert',
                                                                    ['index',
                                                                     'chars',
                                                                     'tags=None'],
                                                                    ''),
                                                                   ('delete',
                                                                    ['index1', 'index2=None'],
                                                                    '')],
                                                       'properties': []},
             'idlelib.PyShell.MyRPCClient': {'bases': ['rpc.RPCClient'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('handle_EOF',
                                                          [],
                                                          'Override the base class - just re-raise EOFError')],
                                             'properties': []},
             'idlelib.PyShell.PseudoFile': {'bases': ['object'],
                                            'constructor': ['shell', 'tags', 'encoding=None'],
                                            'docstring': '',
                                            'methods': [('write', ['s'], ''),
                                                        ('writelines', ['l'], ''),
                                                        ('flush', [], ''),
                                                        ('isatty', [], '')],
                                            'properties': ['shell',
                                                           'tags',
                                                           'softspace',
                                                           'encoding']},
             'idlelib.PyShell.PyShell': {'bases': ['OutputWindow.OutputWindow'],
                                         'constructor': ['flist=None'],
                                         'docstring': '',
                                         'methods': [('get_standard_extension_names', [], ''),
                                                     ('set_warning_stream', ['stream'], ''),
                                                     ('get_warning_stream', [], ''),
                                                     ('toggle_debugger', ['event=None'], ''),
                                                     ('set_debugger_indicator', [], ''),
                                                     ('toggle_jit_stack_viewer',
                                                      ['event=None'],
                                                      ''),
                                                     ('close_debugger', [], ''),
                                                     ('open_debugger', [], ''),
                                                     ('beginexecuting',
                                                      [],
                                                      'Helper for ModifiedInterpreter'),
                                                     ('endexecuting',
                                                      [],
                                                      'Helper for ModifiedInterpreter'),
                                                     ('close',
                                                      [],
                                                      'Extend EditorWindow.close()'),
                                                     ('close2', [], ''),
                                                     ('_close',
                                                      [],
                                                      'Extend EditorWindow._close(), shut down debugger and execution server'),
                                                     ('ispythonsource',
                                                      ['filename'],
                                                      'Override EditorWindow method: never remove the colorizer'),
                                                     ('short_title', [], ''),
                                                     ('begin', [], ''),
                                                     ('readline', [], ''),
                                                     ('isatty', [], ''),
                                                     ('cancel_callback', ['event=None'], ''),
                                                     ('eof_callback', ['event'], ''),
                                                     ('home_callback', ['event'], ''),
                                                     ('linefeed_callback', ['event'], ''),
                                                     ('enter_callback', ['event'], ''),
                                                     ('recall', ['s', 'event'], ''),
                                                     ('runit', [], ''),
                                                     ('open_stack_viewer', ['event=None'], ''),
                                                     ('view_restart_mark', ['event=None'], ''),
                                                     ('restart_shell', ['event=None'], ''),
                                                     ('showprompt', [], ''),
                                                     ('resetoutput', [], ''),
                                                     ('write', ['s', 'tags=()'], '')],
                                         'properties': ['shell_title',
                                                        'ColorDelegator',
                                                        'UndoDelegator',
                                                        'menu_specs',
                                                        'interp',
                                                        'usetabs',
                                                        'indentwidth',
                                                        'context_use_ps1',
                                                        'save_stdout',
                                                        'save_stderr',
                                                        'save_stdin',
                                                        'stdout',
                                                        'stderr',
                                                        'console',
                                                        'history',
                                                        'pollinterval',
                                                        'reading',
                                                        'executing',
                                                        'canceled',
                                                        'endoffile',
                                                        'closing',
                                                        'COPYRIGHT',
                                                        'firewallmessage']},
             'idlelib.PyShell.PyShellEditorWindow': {'bases': ['EditorWindow.EditorWindow'],
                                                     'constructor': ['*args'],
                                                     'docstring': 'Regular text edit window in IDLE, supports breakpoints',
                                                     'methods': [('set_breakpoint',
                                                                  ['lineno'],
                                                                  ''),
                                                                 ('set_breakpoint_here',
                                                                  ['event=None'],
                                                                  ''),
                                                                 ('clear_breakpoint_here',
                                                                  ['event=None'],
                                                                  ''),
                                                                 ('clear_file_breaks', [], ''),
                                                                 ('store_file_breaks',
                                                                  [],
                                                                  'Save breakpoints when file is saved'),
                                                                 ('restore_file_breaks',
                                                                  [],
                                                                  ''),
                                                                 ('update_breakpoints',
                                                                  [],
                                                                  'Retrieves all the breakpoints in the current window'),
                                                                 ('ranges_to_linenumbers',
                                                                  ['ranges'],
                                                                  ''),
                                                                 ('_close',
                                                                  [],
                                                                  'Extend base method - clear breaks when module is closed')],
                                                     'properties': ['breakpoints',
                                                                    'breakpointPath',
                                                                    'rmenu_specs']},
             'idlelib.PyShell.PyShellFileList': {'bases': ['FileList.FileList'],
                                                 'constructor': [],
                                                 'docstring': 'Extend base class: IDLE supports a shell and breakpoints',
                                                 'methods': [('open_shell', ['event=None'], '')],
                                                 'properties': ['EditorWindow', 'pyshell']},
             'idlelib.RemoteDebugger.CodeProxy': {'bases': [],
                                                  'constructor': ['conn', 'oid', 'cid'],
                                                  'docstring': '',
                                                  'methods': [('__getattr__', ['name'], '')],
                                                  'properties': ['_conn', '_oid', '_cid']},
             'idlelib.RemoteDebugger.DictProxy': {'bases': [],
                                                  'constructor': ['conn', 'oid', 'did'],
                                                  'docstring': '',
                                                  'methods': [('keys', [], ''),
                                                              ('__getitem__', ['key'], ''),
                                                              ('__getattr__', ['name'], '')],
                                                  'properties': ['_conn', '_oid', '_did']},
             'idlelib.RemoteDebugger.FrameProxy': {'bases': [],
                                                   'constructor': ['conn', 'fid'],
                                                   'docstring': '',
                                                   'methods': [('__getattr__', ['name'], ''),
                                                               ('_get_f_code', [], ''),
                                                               ('_get_f_globals', [], ''),
                                                               ('_get_f_locals', [], ''),
                                                               ('_get_dict_proxy', ['did'], '')],
                                                   'properties': ['_conn',
                                                                  '_fid',
                                                                  '_oid',
                                                                  '_dictcache']},
             'idlelib.RemoteDebugger.GUIAdapter': {'bases': [],
                                                   'constructor': ['conn', 'gui'],
                                                   'docstring': '',
                                                   'methods': [('interaction',
                                                                ['message',
                                                                 'fid',
                                                                 'modified_info'],
                                                                '')],
                                                   'properties': ['conn', 'gui']},
             'idlelib.RemoteDebugger.GUIProxy': {'bases': [],
                                                 'constructor': ['conn', 'gui_adap_oid'],
                                                 'docstring': '',
                                                 'methods': [('interaction',
                                                              ['message',
                                                               'frame',
                                                               'info=None'],
                                                              '')],
                                                 'properties': ['conn', 'oid']},
             'idlelib.RemoteDebugger.IdbAdapter': {'bases': [],
                                                   'constructor': ['idb'],
                                                   'docstring': '',
                                                   'methods': [('set_step', [], ''),
                                                               ('set_quit', [], ''),
                                                               ('set_continue', [], ''),
                                                               ('set_next', ['fid'], ''),
                                                               ('set_return', ['fid'], ''),
                                                               ('get_stack',
                                                                ['fid', 'tbid'],
                                                                ''),
                                                               ('run', ['cmd'], ''),
                                                               ('set_break',
                                                                ['filename', 'lineno'],
                                                                ''),
                                                               ('clear_break',
                                                                ['filename', 'lineno'],
                                                                ''),
                                                               ('clear_all_file_breaks',
                                                                ['filename'],
                                                                ''),
                                                               ('frame_attr',
                                                                ['fid', 'name'],
                                                                ''),
                                                               ('frame_globals', ['fid'], ''),
                                                               ('frame_locals', ['fid'], ''),
                                                               ('frame_code', ['fid'], ''),
                                                               ('code_name', ['cid'], ''),
                                                               ('code_filename', ['cid'], ''),
                                                               ('dict_keys', ['did'], ''),
                                                               ('dict_item',
                                                                ['did', 'key'],
                                                                '')],
                                                   'properties': ['idb']},
             'idlelib.RemoteDebugger.IdbProxy': {'bases': [],
                                                 'constructor': ['conn', 'shell', 'oid'],
                                                 'docstring': '',
                                                 'methods': [('call',
                                                              ['methodname',
                                                               '*args',
                                                               '**kwargs'],
                                                              ''),
                                                             ('run', ['cmd', 'locals'], ''),
                                                             ('get_stack',
                                                              ['frame', 'tbid'],
                                                              ''),
                                                             ('set_continue', [], ''),
                                                             ('set_step', [], ''),
                                                             ('set_next', ['frame'], ''),
                                                             ('set_return', ['frame'], ''),
                                                             ('set_quit', [], ''),
                                                             ('set_break',
                                                              ['filename', 'lineno'],
                                                              ''),
                                                             ('clear_break',
                                                              ['filename', 'lineno'],
                                                              ''),
                                                             ('clear_all_file_breaks',
                                                              ['filename'],
                                                              '')],
                                                 'properties': ['oid', 'conn', 'shell']},
             'idlelib.RemoteObjectBrowser.StubObjectTreeItem': {'bases': [],
                                                                'constructor': ['sockio', 'oid'],
                                                                'docstring': '',
                                                                'methods': [('__getattr__',
                                                                             ['name'],
                                                                             ''),
                                                                            ('_GetSubList',
                                                                             [],
                                                                             '')],
                                                                'properties': ['sockio', 'oid']},
             'idlelib.RemoteObjectBrowser.WrappedObjectTreeItem': {'bases': [],
                                                                   'constructor': ['item'],
                                                                   'docstring': '',
                                                                   'methods': [('__getattr__',
                                                                                ['name'],
                                                                                ''),
                                                                               ('_GetSubList',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['__item']},
             'idlelib.ReplaceDialog.ReplaceDialog': {'bases': ['SearchDialogBase.SearchDialogBase'],
                                                     'constructor': ['root', 'engine'],
                                                     'docstring': '',
                                                     'methods': [('open', ['text'], ''),
                                                                 ('create_entries', [], ''),
                                                                 ('create_command_buttons',
                                                                  [],
                                                                  ''),
                                                                 ('find_it',
                                                                  ['event=None'],
                                                                  ''),
                                                                 ('replace_it',
                                                                  ['event=None'],
                                                                  ''),
                                                                 ('default_command',
                                                                  ['event=None'],
                                                                  ''),
                                                                 ('replace_all',
                                                                  ['event=None'],
                                                                  ''),
                                                                 ('do_find', ['ok=0'], ''),
                                                                 ('do_replace', [], ''),
                                                                 ('show_hit',
                                                                  ['first', 'last'],
                                                                  ''),
                                                                 ('close', ['event=None'], '')],
                                                     'properties': ['title',
                                                                    'icon',
                                                                    'replvar',
                                                                    'ok',
                                                                    'replent']},
             'idlelib.ScriptBinding.ScriptBinding': {'bases': [],
                                                     'constructor': ['editwin'],
                                                     'docstring': '',
                                                     'methods': [('check_module_event',
                                                                  ['event'],
                                                                  ''),
                                                                 ('tabnanny', ['filename'], ''),
                                                                 ('checksyntax',
                                                                  ['filename'],
                                                                  ''),
                                                                 ('colorize_syntax_error',
                                                                  ['msg', 'lineno', 'offset'],
                                                                  ''),
                                                                 ('run_module_event',
                                                                  ['event'],
                                                                  "Run the module after setting up the environment.\n\n        First check the syntax.  If OK, make sure the shell is active and\n        then transfer the arguments, set the run environment's working\n        directory to the directory of the module being executed and also\n        add that directory to its sys.path if not already included.\n\n        "),
                                                                 ('getfilename',
                                                                  [],
                                                                  'Get source filename.  If not saved, offer to save (or create) file\n\n        The debugger requires a source file.  Make sure there is one, and that\n        the current version of the source buffer has been saved.  If the user\n        declines to save or cancels the Save As dialog, return None.\n\n        If the user has configured IDLE for Autosave, the file will be\n        silently saved if it already exists and is dirty.\n\n        '),
                                                                 ('ask_save_dialog', [], ''),
                                                                 ('errorbox',
                                                                  ['title', 'message'],
                                                                  '')],
                                                     'properties': ['menudefs',
                                                                    'editwin',
                                                                    'flist',
                                                                    'root',
                                                                    'shell']},
             'idlelib.ScrolledList.ScrolledList': {'bases': [],
                                                   'constructor': ['master', '**options'],
                                                   'docstring': '',
                                                   'methods': [('close', [], ''),
                                                               ('clear', [], ''),
                                                               ('append', ['item'], ''),
                                                               ('get', ['index'], ''),
                                                               ('click_event', ['event'], ''),
                                                               ('double_click_event',
                                                                ['event'],
                                                                ''),
                                                               ('popup_event', ['event'], ''),
                                                               ('make_menu', [], ''),
                                                               ('up_event', ['event'], ''),
                                                               ('down_event', ['event'], ''),
                                                               ('select', ['index'], ''),
                                                               ('fill_menu', [], ''),
                                                               ('on_select', ['index'], ''),
                                                               ('on_double', ['index'], '')],
                                                   'properties': ['default',
                                                                  'master',
                                                                  'frame',
                                                                  'vbar',
                                                                  'listbox',
                                                                  'empty',
                                                                  'menu']},
             'idlelib.SearchDialog.SearchDialog': {'bases': ['SearchDialogBase.SearchDialogBase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('create_widgets', [], ''),
                                                               ('default_command',
                                                                ['event=None'],
                                                                ''),
                                                               ('find_again', ['text'], ''),
                                                               ('find_selection', ['text'], '')],
                                                   'properties': []},
             'idlelib.SearchDialogBase.SearchDialogBase': {'bases': [],
                                                           'constructor': ['root', 'engine'],
                                                           'docstring': '',
                                                           'methods': [('open',
                                                                        ['text',
                                                                         'searchphrase=None'],
                                                                        ''),
                                                                       ('close',
                                                                        ['event=None'],
                                                                        ''),
                                                                       ('create_widgets',
                                                                        [],
                                                                        ''),
                                                                       ('make_entry',
                                                                        ['label', 'var'],
                                                                        ''),
                                                                       ('make_frame',
                                                                        ['labeltext=None'],
                                                                        ''),
                                                                       ('make_button',
                                                                        ['label',
                                                                         'command',
                                                                         'isdef=0'],
                                                                        ''),
                                                                       ('create_entries',
                                                                        [],
                                                                        ''),
                                                                       ('create_option_buttons',
                                                                        [],
                                                                        ''),
                                                                       ('create_other_buttons',
                                                                        [],
                                                                        ''),
                                                                       ('create_command_buttons',
                                                                        [],
                                                                        '')],
                                                           'properties': ['title',
                                                                          'icon',
                                                                          'needwrapbutton',
                                                                          'root',
                                                                          'engine',
                                                                          'top',
                                                                          'text',
                                                                          'row',
                                                                          'ent',
                                                                          'buttonframe']},
             'idlelib.SearchEngine.SearchEngine': {'bases': [],
                                                   'constructor': ['root'],
                                                   'docstring': '',
                                                   'methods': [('getpat', [], ''),
                                                               ('setpat', ['pat'], ''),
                                                               ('isre', [], ''),
                                                               ('iscase', [], ''),
                                                               ('isword', [], ''),
                                                               ('iswrap', [], ''),
                                                               ('isback', [], ''),
                                                               ('getcookedpat', [], ''),
                                                               ('getprog', [], ''),
                                                               ('report_error',
                                                                ['pat', 'msg', 'col=-1'],
                                                                ''),
                                                               ('setcookedpat', ['pat'], ''),
                                                               ('search_text',
                                                                ['text', 'prog=None', 'ok=0'],
                                                                'Search a text widget for the pattern.\n\n        If prog is given, it should be the precompiled pattern.\n        Return a tuple (lineno, matchobj); None if not found.\n\n        This obeys the wrap and direction (back) settings.\n\n        The search starts at the selection (if there is one) or\n        at the insert mark (otherwise).  If the search is forward,\n        it starts at the right of the selection; for a backward\n        search, it starts at the left end.  An empty match exactly\n        at either end of the selection (or at the insert mark if\n        there is no selection) is ignored  unless the ok flag is true\n        -- this is done to guarantee progress.\n\n        If the search is allowed to wrap around, it will return the\n        original selection if (and only if) it is the only match.\n\n        '),
                                                               ('search_forward',
                                                                ['text',
                                                                 'prog',
                                                                 'line',
                                                                 'col',
                                                                 'wrap',
                                                                 'ok=0'],
                                                                ''),
                                                               ('search_backward',
                                                                ['text',
                                                                 'prog',
                                                                 'line',
                                                                 'col',
                                                                 'wrap',
                                                                 'ok=0'],
                                                                '')],
                                                   'properties': ['root',
                                                                  'patvar',
                                                                  'revar',
                                                                  'casevar',
                                                                  'wordvar',
                                                                  'wrapvar',
                                                                  'backvar']},
             'idlelib.StackViewer.FrameTreeItem': {'bases': ['TreeWidget.TreeItem'],
                                                   'constructor': ['info', 'flist'],
                                                   'docstring': '',
                                                   'methods': [('GetText', [], ''),
                                                               ('GetSubList', [], ''),
                                                               ('OnDoubleClick', [], '')],
                                                   'properties': ['info', 'flist']},
             'idlelib.StackViewer.StackTreeItem': {'bases': ['TreeWidget.TreeItem'],
                                                   'constructor': ['flist=None', 'tb=None'],
                                                   'docstring': '',
                                                   'methods': [('get_stack', ['tb'], ''),
                                                               ('get_exception', [], ''),
                                                               ('GetText', [], ''),
                                                               ('GetSubList', [], '')],
                                                   'properties': ['flist', 'stack', 'text']},
             'idlelib.StackViewer.VariablesTreeItem': {'bases': ['ObjectBrowser.ObjectTreeItem'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('GetText', [], ''),
                                                                   ('GetLabelText', [], ''),
                                                                   ('IsExpandable', [], ''),
                                                                   ('keys', [], ''),
                                                                   ('GetSubList', [], '')],
                                                       'properties': []},
             'idlelib.ToolTip.ListboxToolTip': {'bases': ['idlelib.ToolTip.ToolTipBase'],
                                                'constructor': ['button', 'items'],
                                                'docstring': '',
                                                'methods': [('showcontents', [], '')],
                                                'properties': ['items']},
             'idlelib.ToolTip.ToolTip': {'bases': ['idlelib.ToolTip.ToolTipBase'],
                                         'constructor': ['button', 'text'],
                                         'docstring': '',
                                         'methods': [('showcontents', [], '')],
                                         'properties': ['text']},
             'idlelib.ToolTip.ToolTipBase': {'bases': [],
                                             'constructor': ['button'],
                                             'docstring': '',
                                             'methods': [('enter', ['event=None'], ''),
                                                         ('leave', ['event=None'], ''),
                                                         ('schedule', [], ''),
                                                         ('unschedule', [], ''),
                                                         ('showtip', [], ''),
                                                         ('showcontents',
                                                          ["text='Your text here'"],
                                                          ''),
                                                         ('hidetip', [], '')],
                                             'properties': ['button',
                                                            'tipwindow',
                                                            'id',
                                                            'x',
                                                            'y',
                                                            '_id1',
                                                            '_id2',
                                                            '_id3']},
             'idlelib.TreeWidget.FileTreeItem': {'bases': ['idlelib.TreeWidget.TreeItem'],
                                                 'constructor': ['path'],
                                                 'docstring': 'Example TreeItem subclass -- browse the file system.',
                                                 'methods': [('GetText', [], ''),
                                                             ('IsEditable', [], ''),
                                                             ('SetText', ['text'], ''),
                                                             ('GetIconName', [], ''),
                                                             ('IsExpandable', [], ''),
                                                             ('GetSubList', [], '')],
                                                 'properties': ['path']},
             'idlelib.TreeWidget.ScrolledCanvas': {'bases': [],
                                                   'constructor': ['master', '**opts'],
                                                   'docstring': '',
                                                   'methods': [('page_up', ['event'], ''),
                                                               ('page_down', ['event'], ''),
                                                               ('unit_up', ['event'], ''),
                                                               ('unit_down', ['event'], ''),
                                                               ('zoom_height', ['event'], '')],
                                                   'properties': ['master',
                                                                  'frame',
                                                                  'canvas',
                                                                  'vbar',
                                                                  'hbar']},
             'idlelib.TreeWidget.TreeItem': {'bases': [],
                                             'constructor': [],
                                             'docstring': 'Abstract class representing tree items.\n\n    Methods should typically be overridden, otherwise a default action\n    is used.\n\n    ',
                                             'methods': [('GetText',
                                                          [],
                                                          'Return text string to display.'),
                                                         ('GetLabelText',
                                                          [],
                                                          'Return label text string to display in front of text (if any).'),
                                                         ('_IsExpandable',
                                                          [],
                                                          'Do not override!  Called by TreeNode.'),
                                                         ('IsExpandable',
                                                          [],
                                                          'Return whether there are subitems.'),
                                                         ('_GetSubList',
                                                          [],
                                                          'Do not override!  Called by TreeNode.'),
                                                         ('IsEditable',
                                                          [],
                                                          "Return whether the item's text may be edited."),
                                                         ('SetText',
                                                          ['text'],
                                                          "Change the item's text (if it is editable)."),
                                                         ('GetIconName',
                                                          [],
                                                          'Return name of icon to be displayed normally.'),
                                                         ('GetSelectedIconName',
                                                          [],
                                                          'Return name of icon to be displayed when selected.'),
                                                         ('GetSubList',
                                                          [],
                                                          'Return list of items forming sublist.'),
                                                         ('OnDoubleClick',
                                                          [],
                                                          'Called on a double-click on the item.')],
                                             'properties': ['expandable']},
             'idlelib.TreeWidget.TreeNode': {'bases': [],
                                             'constructor': ['canvas', 'parent', 'item'],
                                             'docstring': '',
                                             'methods': [('destroy', [], ''),
                                                         ('geticonimage', ['name'], ''),
                                                         ('select', ['event=None'], ''),
                                                         ('deselect', ['event=None'], ''),
                                                         ('deselectall', [], ''),
                                                         ('deselecttree', [], ''),
                                                         ('flip', ['event=None'], ''),
                                                         ('expand', ['event=None'], ''),
                                                         ('collapse', ['event=None'], ''),
                                                         ('view', [], ''),
                                                         ('lastvisiblechild', [], ''),
                                                         ('update', [], ''),
                                                         ('draw', ['x', 'y'], ''),
                                                         ('drawicon', [], ''),
                                                         ('drawtext', [], ''),
                                                         ('select_or_edit', ['event=None'], ''),
                                                         ('edit', ['event=None'], ''),
                                                         ('edit_finish', ['event=None'], ''),
                                                         ('edit_cancel', ['event=None'], '')],
                                             'properties': ['canvas',
                                                            'parent',
                                                            'item',
                                                            'state',
                                                            'selected',
                                                            'children',
                                                            'x',
                                                            'y',
                                                            'iconimages',
                                                            'image_id',
                                                            'label',
                                                            'text_id',
                                                            'entry']},
             'idlelib.UndoDelegator.Command': {'bases': [],
                                               'constructor': ['index1',
                                                               'index2',
                                                               'chars',
                                                               'tags=None'],
                                               'docstring': '',
                                               'methods': [('__repr__', [], ''),
                                                           ('do', ['text'], ''),
                                                           ('redo', ['text'], ''),
                                                           ('undo', ['text'], ''),
                                                           ('merge', ['cmd'], ''),
                                                           ('save_marks', ['text'], ''),
                                                           ('set_marks', ['text', 'marks'], '')],
                                               'properties': ['tags',
                                                              'marks_before',
                                                              'marks_after',
                                                              'index1',
                                                              'index2',
                                                              'chars']},
             'idlelib.UndoDelegator.CommandSequence': {'bases': ['idlelib.UndoDelegator.Command'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('__repr__', [], ''),
                                                                   ('__len__', [], ''),
                                                                   ('append', ['cmd'], ''),
                                                                   ('getcmd', ['i'], ''),
                                                                   ('redo', ['text'], ''),
                                                                   ('undo', ['text'], ''),
                                                                   ('bump_depth',
                                                                    ['incr=1'],
                                                                    '')],
                                                       'properties': ['cmds', 'depth']},
             'idlelib.UndoDelegator.DeleteCommand': {'bases': ['idlelib.UndoDelegator.Command'],
                                                     'constructor': ['index1', 'index2=None'],
                                                     'docstring': '',
                                                     'methods': [('do', ['text'], ''),
                                                                 ('redo', ['text'], ''),
                                                                 ('undo', ['text'], '')],
                                                     'properties': ['marks_before',
                                                                    'index1',
                                                                    'index2',
                                                                    'chars',
                                                                    'marks_after']},
             'idlelib.UndoDelegator.InsertCommand': {'bases': ['idlelib.UndoDelegator.Command'],
                                                     'constructor': ['index1',
                                                                     'chars',
                                                                     'tags=None'],
                                                     'docstring': '',
                                                     'methods': [('do', ['text'], ''),
                                                                 ('redo', ['text'], ''),
                                                                 ('undo', ['text'], ''),
                                                                 ('merge', ['cmd'], ''),
                                                                 ('classify', ['c'], '')],
                                                     'properties': ['marks_before',
                                                                    'index1',
                                                                    'index2',
                                                                    'marks_after',
                                                                    'chars',
                                                                    'alphanumeric']},
             'idlelib.UndoDelegator.UndoDelegator': {'bases': ['Delegator.Delegator'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('setdelegate',
                                                                  ['delegate'],
                                                                  ''),
                                                                 ('dump_event', ['event'], ''),
                                                                 ('reset_undo', [], ''),
                                                                 ('set_saved', ['flag'], ''),
                                                                 ('get_saved', [], ''),
                                                                 ('set_saved_change_hook',
                                                                  ['hook'],
                                                                  ''),
                                                                 ('check_saved', [], ''),
                                                                 ('insert',
                                                                  ['index',
                                                                   'chars',
                                                                   'tags=None'],
                                                                  ''),
                                                                 ('delete',
                                                                  ['index1', 'index2=None'],
                                                                  ''),
                                                                 ('undo_block_start', [], ''),
                                                                 ('undo_block_stop', [], ''),
                                                                 ('addcmd',
                                                                  ['cmd', 'execute=True'],
                                                                  ''),
                                                                 ('undo_event', ['event'], ''),
                                                                 ('redo_event', ['event'], '')],
                                                     'properties': ['max_undo',
                                                                    'was_saved',
                                                                    'pointer',
                                                                    'undolist',
                                                                    'undoblock',
                                                                    'saved',
                                                                    'can_merge',
                                                                    'saved_change_hook']},
             'idlelib.WidgetRedirector.OriginalCommand': {'bases': [],
                                                          'constructor': ['redir', 'name'],
                                                          'docstring': '',
                                                          'methods': [('__repr__', [], ''),
                                                                      ('__call__',
                                                                       ['*args'],
                                                                       '')],
                                                          'properties': ['redir',
                                                                         'name',
                                                                         'tk',
                                                                         'orig',
                                                                         'tk_call',
                                                                         'orig_and_name']},
             'idlelib.WidgetRedirector.WidgetRedirector': {'bases': [],
                                                           'constructor': ['widget'],
                                                           'docstring': 'Support for redirecting arbitrary widget subcommands.',
                                                           'methods': [('__repr__', [], ''),
                                                                       ('close', [], ''),
                                                                       ('register',
                                                                        ['name', 'function'],
                                                                        ''),
                                                                       ('unregister',
                                                                        ['name'],
                                                                        ''),
                                                                       ('dispatch',
                                                                        ['cmd', '*args'],
                                                                        '')],
                                                           'properties': ['dict',
                                                                          'widget',
                                                                          'tk',
                                                                          'orig']},
             'idlelib.WindowList.ListedToplevel': {'bases': ['idlelib.WindowList.Toplevel'],
                                                   'constructor': ['master', '**kw'],
                                                   'docstring': '',
                                                   'methods': [('destroy', [], ''),
                                                               ('update_windowlist_registry',
                                                                ['window'],
                                                                ''),
                                                               ('get_title', [], ''),
                                                               ('wakeup', [], '')],
                                                   'properties': ['focused_widget']},
             'idlelib.WindowList.WindowList': {'bases': [],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('add', ['window'], ''),
                                                           ('delete', ['window'], ''),
                                                           ('add_windows_to_menu',
                                                            ['menu'],
                                                            ''),
                                                           ('register_callback',
                                                            ['callback'],
                                                            ''),
                                                           ('unregister_callback',
                                                            ['callback'],
                                                            ''),
                                                           ('call_callbacks', [], '')],
                                               'properties': ['dict', 'callbacks']},
             'idlelib.ZoomHeight.ZoomHeight': {'bases': [],
                                               'constructor': ['editwin'],
                                               'docstring': '',
                                               'methods': [('zoom_height_event', ['event'], '')],
                                               'properties': ['menudefs', 'editwin']},
             'idlelib.aboutDialog.AboutDialog': {'bases': ['idlelib.aboutDialog.Toplevel'],
                                                 'constructor': ['parent', 'title'],
                                                 'docstring': 'Modal about dialog for idle\n\n    ',
                                                 'methods': [('CreateWidgets', [], ''),
                                                             ('ShowLicense', [], ''),
                                                             ('ShowCopyright', [], ''),
                                                             ('ShowPythonCredits', [], ''),
                                                             ('ShowIDLECredits', [], ''),
                                                             ('ShowIDLEAbout', [], ''),
                                                             ('ShowIDLENEWS', [], ''),
                                                             ('display_printer_text',
                                                              ['printer', 'title'],
                                                              ''),
                                                             ('ViewFile',
                                                              ['viewTitle',
                                                               'viewFile',
                                                               'encoding=None'],
                                                              ''),
                                                             ('Ok', ['event=None'], '')],
                                                 'properties': ['bg',
                                                                'fg',
                                                                'parent',
                                                                'buttonOk']},
             'idlelib.configDialog.ConfigDialog': {'bases': ['idlelib.configDialog.Toplevel'],
                                                   'constructor': ['parent', 'title'],
                                                   'docstring': '',
                                                   'methods': [('CreateWidgets', [], ''),
                                                               ('CreatePageFontTab', [], ''),
                                                               ('CreatePageHighlight', [], ''),
                                                               ('CreatePageKeys', [], ''),
                                                               ('CreatePageGeneral', [], ''),
                                                               ('AttachVarCallbacks', [], ''),
                                                               ('VarChanged_fontSize',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_fontName',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_fontBold',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_spaceNum',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_colour',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_builtinTheme',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_customTheme',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_themeIsBuiltin',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_highlightTarget',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_keyBinding',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_builtinKeys',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_customKeys',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_keysAreBuiltin',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_winWidth',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_winHeight',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_paraWidth',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_startupEdit',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_autoSave',
                                                                ['*params'],
                                                                ''),
                                                               ('VarChanged_encoding',
                                                                ['*params'],
                                                                ''),
                                                               ('ResetChangedItems', [], ''),
                                                               ('AddChangedItem',
                                                                ['type',
                                                                 'section',
                                                                 'item',
                                                                 'value'],
                                                                ''),
                                                               ('GetDefaultItems', [], ''),
                                                               ('SetThemeType', [], ''),
                                                               ('SetKeysType', [], ''),
                                                               ('GetNewKeys', [], ''),
                                                               ('GetNewKeysName',
                                                                ['message'],
                                                                ''),
                                                               ('SaveAsNewKeySet', [], ''),
                                                               ('KeyBindingSelected',
                                                                ['event'],
                                                                ''),
                                                               ('CreateNewKeySet',
                                                                ['newKeySetName'],
                                                                ''),
                                                               ('LoadKeysList',
                                                                ['keySetName'],
                                                                ''),
                                                               ('DeleteCustomKeys', [], ''),
                                                               ('DeleteCustomTheme', [], ''),
                                                               ('GetColour', [], ''),
                                                               ('OnNewColourSet', [], ''),
                                                               ('GetNewThemeName',
                                                                ['message'],
                                                                ''),
                                                               ('SaveAsNewTheme', [], ''),
                                                               ('CreateNewTheme',
                                                                ['newThemeName'],
                                                                ''),
                                                               ('OnListFontButtonRelease',
                                                                ['event'],
                                                                ''),
                                                               ('SetFontSample',
                                                                ['event=None'],
                                                                ''),
                                                               ('SetHighlightTarget', [], ''),
                                                               ('SetColourSampleBinding',
                                                                ['*args'],
                                                                ''),
                                                               ('SetColourSample', [], ''),
                                                               ('PaintThemeSample', [], ''),
                                                               ('HelpSourceSelected',
                                                                ['event'],
                                                                ''),
                                                               ('SetHelpListButtonStates',
                                                                [],
                                                                ''),
                                                               ('HelpListItemAdd', [], ''),
                                                               ('HelpListItemEdit', [], ''),
                                                               ('HelpListItemRemove', [], ''),
                                                               ('UpdateUserHelpChangedItems',
                                                                [],
                                                                'Clear and rebuild the HelpFiles section in self.changedItems'),
                                                               ('LoadFontCfg', [], ''),
                                                               ('LoadTabCfg', [], ''),
                                                               ('LoadThemeCfg', [], ''),
                                                               ('__ThemeNameIndexCompare',
                                                                ['a', 'b'],
                                                                ''),
                                                               ('LoadKeyCfg', [], ''),
                                                               ('LoadGeneralCfg', [], ''),
                                                               ('LoadConfigs',
                                                                [],
                                                                '\n        load configuration from default and user config files and populate\n        the widgets on the config dialog pages.\n        '),
                                                               ('SaveNewKeySet',
                                                                ['keySetName', 'keySet'],
                                                                '\n        save a newly created core key set.\n        keySetName - string, the name of the new key set\n        keySet - dictionary containing the new key set\n        '),
                                                               ('SaveNewTheme',
                                                                ['themeName', 'theme'],
                                                                '\n        save a newly created theme.\n        themeName - string, the name of the new theme\n        theme - dictionary containing the new theme\n        '),
                                                               ('SetUserValue',
                                                                ['configType',
                                                                 'section',
                                                                 'item',
                                                                 'value'],
                                                                ''),
                                                               ('SaveAllChangedConfigs',
                                                                [],
                                                                'Save configuration changes to the user config file.'),
                                                               ('DeactivateCurrentConfig',
                                                                [],
                                                                ''),
                                                               ('ActivateConfigChanges',
                                                                [],
                                                                'Dynamically apply configuration changes'),
                                                               ('Cancel', [], ''),
                                                               ('Ok', [], ''),
                                                               ('Apply', [], ''),
                                                               ('Help', [], '')],
                                                   'properties': ['themeElements',
                                                                  'parent',
                                                                  'tabPages',
                                                                  'buttonHelp',
                                                                  'buttonOk',
                                                                  'buttonApply',
                                                                  'buttonCancel',
                                                                  'fontSize',
                                                                  'fontBold',
                                                                  'fontName',
                                                                  'spaceNum',
                                                                  'editFont',
                                                                  'listFontName',
                                                                  'optMenuFontSize',
                                                                  'labelFontSample',
                                                                  'scaleSpaceNum',
                                                                  'builtinTheme',
                                                                  'customTheme',
                                                                  'fgHilite',
                                                                  'colour',
                                                                  'themeIsBuiltin',
                                                                  'highlightTarget',
                                                                  'textHighlightSample',
                                                                  'frameColourSet',
                                                                  'optMenuHighlightTarget',
                                                                  'radioFg',
                                                                  'radioBg',
                                                                  'radioThemeBuiltin',
                                                                  'radioThemeCustom',
                                                                  'optMenuThemeBuiltin',
                                                                  'optMenuThemeCustom',
                                                                  'buttonDeleteCustomTheme',
                                                                  'bindingTarget',
                                                                  'builtinKeys',
                                                                  'customKeys',
                                                                  'keysAreBuiltin',
                                                                  'keyBinding',
                                                                  'listBindings',
                                                                  'buttonNewKeys',
                                                                  'radioKeysBuiltin',
                                                                  'radioKeysCustom',
                                                                  'optMenuKeysBuiltin',
                                                                  'optMenuKeysCustom',
                                                                  'buttonDeleteCustomKeys',
                                                                  'winWidth',
                                                                  'winHeight',
                                                                  'paraWidth',
                                                                  'startupEdit',
                                                                  'autoSave',
                                                                  'encoding',
                                                                  'userHelpBrowser',
                                                                  'helpBrowser',
                                                                  'listHelp',
                                                                  'buttonHelpListEdit',
                                                                  'buttonHelpListAdd',
                                                                  'buttonHelpListRemove',
                                                                  'changedItems',
                                                                  'userHelpList']},
             'idlelib.configHandler.IdleConf': {'bases': [],
                                                'constructor': [],
                                                'docstring': '\n    holds config parsers for all idle config files:\n    default config files\n        (idle install dir)/config-main.def\n        (idle install dir)/config-extensions.def\n        (idle install dir)/config-highlight.def\n        (idle install dir)/config-keys.def\n    user config  files\n        (user home dir)/.idlerc/config-main.cfg\n        (user home dir)/.idlerc/config-extensions.cfg\n        (user home dir)/.idlerc/config-highlight.cfg\n        (user home dir)/.idlerc/config-keys.cfg\n    ',
                                                'methods': [('CreateConfigHandlers',
                                                             [],
                                                             '\n        set up a dictionary of config parsers for default and user\n        configurations respectively\n        '),
                                                            ('GetUserCfgDir',
                                                             [],
                                                             '\n        Creates (if required) and returns a filesystem directory for storing\n        user config files.\n\n        '),
                                                            ('GetOption',
                                                             ['configType',
                                                              'section',
                                                              'option',
                                                              'default=None',
                                                              'type=None',
                                                              'warn_on_default=True'],
                                                             "\n        Get an option value for given config type and given general\n        configuration section/option or return a default. If type is specified,\n        return as type. Firstly the user configuration is checked, with a\n        fallback to the default configuration, and a final 'catch all'\n        fallback to a useable passed-in default if the option isn't present in\n        either the user or the default configuration.\n        configType must be one of ('main','extensions','highlight','keys')\n        If a default is returned, and warn_on_default is True, a warning is\n        printed to stderr.\n\n        "),
                                                            ('SetOption',
                                                             ['configType',
                                                              'section',
                                                              'option',
                                                              'value'],
                                                             "In user's config file, set section's option to value.\n\n        "),
                                                            ('GetSectionList',
                                                             ['configSet', 'configType'],
                                                             "\n        Get a list of sections from either the user or default config for\n        the given config type.\n        configSet must be either 'user' or 'default'\n        configType must be one of ('main','extensions','highlight','keys')\n        "),
                                                            ('GetHighlight',
                                                             ['theme', 'element', 'fgBg=None'],
                                                             "\n        return individual highlighting theme elements.\n        fgBg - string ('fg'or'bg') or None, if None return a dictionary\n        containing fg and bg colours (appropriate for passing to Tkinter in,\n        e.g., a tag_config call), otherwise fg or bg colour only as specified.\n        "),
                                                            ('GetThemeDict',
                                                             ['type', 'themeName'],
                                                             "\n        type - string, 'default' or 'user' theme type\n        themeName - string, theme name\n        Returns a dictionary which holds {option:value} for each element\n        in the specified theme. Values are loaded over a set of ultimate last\n        fallback defaults to guarantee that all theme elements are present in\n        a newly created theme.\n        "),
                                                            ('CurrentTheme',
                                                             [],
                                                             '\n        Returns the name of the currently active theme\n        '),
                                                            ('CurrentKeys',
                                                             [],
                                                             '\n        Returns the name of the currently active key set\n        '),
                                                            ('GetExtensions',
                                                             ['active_only=True',
                                                              'editor_only=False',
                                                              'shell_only=False'],
                                                             '\n        Gets a list of all idle extensions declared in the config files.\n        active_only - boolean, if true only return active (enabled) extensions\n        '),
                                                            ('RemoveKeyBindNames',
                                                             ['extnNameList'],
                                                             ''),
                                                            ('GetExtnNameForEvent',
                                                             ['virtualEvent'],
                                                             "\n        Returns the name of the extension that virtualEvent is bound in, or\n        None if not bound in any extension.\n        virtualEvent - string, name of the virtual event to test for, without\n                       the enclosing '<< >>'\n        "),
                                                            ('GetExtensionKeys',
                                                             ['extensionName'],
                                                             '\n        returns a dictionary of the configurable keybindings for a particular\n        extension,as they exist in the dictionary returned by GetCurrentKeySet;\n        that is, where previously used bindings are disabled.\n        '),
                                                            ('__GetRawExtensionKeys',
                                                             ['extensionName'],
                                                             '\n        returns a dictionary of the configurable keybindings for a particular\n        extension, as defined in the configuration files, or an empty dictionary\n        if no bindings are found\n        '),
                                                            ('GetExtensionBindings',
                                                             ['extensionName'],
                                                             '\n        Returns a dictionary of all the event bindings for a particular\n        extension. The configurable keybindings are returned as they exist in\n        the dictionary returned by GetCurrentKeySet; that is, where re-used\n        keybindings are disabled.\n        '),
                                                            ('GetKeyBinding',
                                                             ['keySetName', 'eventStr'],
                                                             "\n        returns the keybinding for a specific event.\n        keySetName - string, name of key binding set\n        eventStr - string, the virtual event we want the binding for,\n                   represented as a string, eg. '<<event>>'\n        "),
                                                            ('GetCurrentKeySet', [], ''),
                                                            ('GetKeySet',
                                                             ['keySetName'],
                                                             '\n        Returns a dictionary of: all requested core keybindings, plus the\n        keybindings for all currently active extensions. If a binding defined\n        in an extension is already in use, that binding is disabled.\n        '),
                                                            ('IsCoreBinding',
                                                             ['virtualEvent'],
                                                             "\n        returns true if the virtual event is bound in the core idle keybindings.\n        virtualEvent - string, name of the virtual event to test for, without\n                       the enclosing '<< >>'\n        "),
                                                            ('GetCoreKeys',
                                                             ['keySetName=None'],
                                                             "\n        returns the requested set of core keybindings, with fallbacks if\n        required.\n        Keybindings loaded from the config file(s) are loaded _over_ these\n        defaults, so if there is a problem getting any core binding there will\n        be an 'ultimate last resort fallback' to the CUA-ish bindings\n        defined here.\n        "),
                                                            ('GetExtraHelpSourceList',
                                                             ['configSet'],
                                                             "Fetch list of extra help sources from a given configSet.\n\n        Valid configSets are 'user' or 'default'.  Return a list of tuples of\n        the form (menu_item , path_to_help_file , option), or return the empty\n        list.  'option' is the sequence number of the help resource.  'option'\n        values determine the position of the menu items on the Help menu,\n        therefore the returned list must be sorted by 'option'.\n\n        "),
                                                            ('__helpsort', ['h1', 'h2'], ''),
                                                            ('GetAllExtraHelpSourcesList',
                                                             [],
                                                             '\n        Returns a list of tuples containing the details of all additional help\n        sources configured, or an empty list if there are none. Tuples are of\n        the format returned by GetExtraHelpSourceList.\n        '),
                                                            ('LoadCfgFiles',
                                                             [],
                                                             '\n        load all configuration files.\n        '),
                                                            ('SaveUserCfgFiles',
                                                             [],
                                                             '\n        write all loaded user configuration files back to disk\n        ')],
                                                'properties': ['defaultCfg', 'userCfg', 'cfg']},
             'idlelib.configHandler.IdleConfParser': {'bases': ['ConfigParser.ConfigParser'],
                                                      'constructor': ['cfgFile',
                                                                      'cfgDefaults=None'],
                                                      'docstring': '\n    A ConfigParser specialised for idle configuration file handling\n    ',
                                                      'methods': [('Get',
                                                                   ['section',
                                                                    'option',
                                                                    'type=None',
                                                                    'default=None'],
                                                                   '\n        Get an option value for given section/option or return default.\n        If type is specified, return as type.\n        '),
                                                                  ('GetOptionList',
                                                                   ['section'],
                                                                   '\n        Get an option list for given section\n        '),
                                                                  ('Load',
                                                                   [],
                                                                   '\n        Load the configuration file from disk\n        ')],
                                                      'properties': ['file']},
             'idlelib.configHandler.IdleUserConfParser': {'bases': ['idlelib.configHandler.IdleConfParser'],
                                                          'constructor': [],
                                                          'docstring': '\n    IdleConfigParser specialised for user configuration handling.\n    ',
                                                          'methods': [('AddSection',
                                                                       ['section'],
                                                                       "\n        if section doesn't exist, add it\n        "),
                                                                      ('RemoveEmptySections',
                                                                       [],
                                                                       '\n        remove any sections that have no options\n        '),
                                                                      ('IsEmpty',
                                                                       [],
                                                                       '\n        Remove empty sections and then return 1 if parser has no sections\n        left, else return 0.\n        '),
                                                                      ('RemoveOption',
                                                                       ['section', 'option'],
                                                                       '\n        If section/option exists, remove it.\n        Returns 1 if option was removed, 0 otherwise.\n        '),
                                                                      ('SetOption',
                                                                       ['section',
                                                                        'option',
                                                                        'value'],
                                                                       '\n        Sets option to value, adding section if required.\n        Returns 1 if option was added or changed, otherwise 0.\n        '),
                                                                      ('RemoveFile',
                                                                       [],
                                                                       '\n        Removes the user config file from disk if it exists.\n        '),
                                                                      ('Save',
                                                                       [],
                                                                       "Update user configuration file.\n\n        Remove empty sections. If resulting config isn't empty, write the file\n        to disk. If config is empty, remove the file from disk if it exists.\n\n        ")],
                                                          'properties': []},
             'idlelib.configHandler.InvalidConfigSet': {'bases': ['Exception'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': []},
             'idlelib.configHandler.InvalidConfigType': {'bases': ['Exception'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'idlelib.configHandler.InvalidFgBg': {'bases': ['Exception'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': []},
             'idlelib.configHandler.InvalidTheme': {'bases': ['Exception'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': []},
             'idlelib.configHelpSourceEdit.GetHelpSourceDialog': {'bases': ['idlelib.configHelpSourceEdit.Toplevel'],
                                                                  'constructor': ['parent',
                                                                                  'title',
                                                                                  "menuItem=''",
                                                                                  "filePath=''"],
                                                                  'docstring': '',
                                                                  'methods': [('CreateWidgets',
                                                                               [],
                                                                               ''),
                                                                              ('browseFile',
                                                                               [],
                                                                               ''),
                                                                              ('MenuOk',
                                                                               [],
                                                                               'Simple validity check for a sensible menu item name'),
                                                                              ('PathOk',
                                                                               [],
                                                                               'Simple validity check for menu file path'),
                                                                              ('Ok',
                                                                               ['event=None'],
                                                                               ''),
                                                                              ('Cancel',
                                                                               ['event=None'],
                                                                               '')],
                                                                  'properties': ['parent',
                                                                                 'result',
                                                                                 'menu',
                                                                                 'path',
                                                                                 'fontSize',
                                                                                 'frameMain',
                                                                                 'entryMenu',
                                                                                 'entryPath',
                                                                                 'buttonOk',
                                                                                 'buttonCancel']},
             'idlelib.configSectionNameDialog.GetCfgSectionNameDialog': {'bases': ['idlelib.configSectionNameDialog.Toplevel'],
                                                                         'constructor': ['parent',
                                                                                         'title',
                                                                                         'message',
                                                                                         'usedNames'],
                                                                         'docstring': '',
                                                                         'methods': [('CreateWidgets',
                                                                                      [],
                                                                                      ''),
                                                                                     ('NameOk',
                                                                                      [],
                                                                                      ''),
                                                                                     ('Ok',
                                                                                      ['event=None'],
                                                                                      ''),
                                                                                     ('Cancel',
                                                                                      ['event=None'],
                                                                                      '')],
                                                                         'properties': ['parent',
                                                                                        'message',
                                                                                        'usedNames',
                                                                                        'result',
                                                                                        'name',
                                                                                        'fontSize',
                                                                                        'frameMain',
                                                                                        'messageInfo',
                                                                                        'buttonOk',
                                                                                        'buttonCancel']},
             'idlelib.dynOptionMenuWidget.DynOptionMenu': {'bases': ['Tkinter.OptionMenu'],
                                                           'constructor': ['master',
                                                                           'variable',
                                                                           'value',
                                                                           '*values',
                                                                           '**kwargs'],
                                                           'docstring': '\n    unlike OptionMenu, our kwargs can include highlightthickness\n    ',
                                                           'methods': [('SetMenu',
                                                                        ['valueList',
                                                                         'value=None'],
                                                                        "\n        clear and reload the menu with a new set of options.\n        valueList - list of new options\n        value - initial value to set the optionmenu's menubutton to\n        ")],
                                                           'properties': ['variable', 'command']},
             'idlelib.keybindingDialog.GetKeysDialog': {'bases': ['idlelib.keybindingDialog.Toplevel'],
                                                        'constructor': ['parent',
                                                                        'title',
                                                                        'action',
                                                                        'currentKeySequences'],
                                                        'docstring': '',
                                                        'methods': [('CreateWidgets', [], ''),
                                                                    ('SetModifiersForPlatform',
                                                                     [],
                                                                     "Determine list of names of key modifiers for this platform.\n\n        The names are used to build Tk bindings -- it doesn't matter if the\n        keyboard has these keys, it matters if Tk understands them. The\n        order is also important: key binding equality depends on it, so\n        config-keys.def must use the same ordering.\n        "),
                                                                    ('ToggleLevel', [], ''),
                                                                    ('FinalKeySelected',
                                                                     ['event'],
                                                                     ''),
                                                                    ('BuildKeyString', [], ''),
                                                                    ('GetModifiers', [], ''),
                                                                    ('ClearKeySeq', [], ''),
                                                                    ('LoadFinalKeyList',
                                                                     [],
                                                                     ''),
                                                                    ('TranslateKey',
                                                                     ['key', 'modifiers'],
                                                                     'Translate from keycap symbol to the Tkinter keysym'),
                                                                    ('OK', ['event=None'], ''),
                                                                    ('Cancel',
                                                                     ['event=None'],
                                                                     ''),
                                                                    ('KeysOK',
                                                                     [],
                                                                     "Validity check on user's 'basic' keybinding selection.\n\n        Doesn't check the string produced by the advanced dialog because\n        'modifiers' isn't set.\n\n        ")],
                                                        'properties': ['parent',
                                                                       'action',
                                                                       'currentKeySequences',
                                                                       'result',
                                                                       'keyString',
                                                                       'modifier_vars',
                                                                       'advanced',
                                                                       'buttonOK',
                                                                       'buttonCancel',
                                                                       'frameKeySeqBasic',
                                                                       'frameKeySeqAdvanced',
                                                                       'frameControlsBasic',
                                                                       'frameHelpAdvanced',
                                                                       'buttonLevel',
                                                                       'modifier_checkbuttons',
                                                                       'listKeysFinal',
                                                                       'buttonClear',
                                                                       'entryKeysAdvanced',
                                                                       'modifiers',
                                                                       'modifier_label',
                                                                       'functionKeys',
                                                                       'alphanumKeys',
                                                                       'punctuationKeys',
                                                                       'whitespaceKeys',
                                                                       'editKeys',
                                                                       'moveKeys']},
             'idlelib.rpc.MethodProxy': {'bases': ['object'],
                                         'constructor': ['sockio', 'oid', 'name'],
                                         'docstring': '',
                                         'methods': [('__call__', ['*args', '**kwargs'], '')],
                                         'properties': ['sockio', 'oid', 'name']},
             'idlelib.rpc.RPCClient': {'bases': ['idlelib.rpc.SocketIO'],
                                       'constructor': ['address',
                                                       'family=socket.AF_INET',
                                                       'type=socket.SOCK_STREAM'],
                                       'docstring': '',
                                       'methods': [('accept', [], ''),
                                                   ('get_remote_proxy', ['oid'], '')],
                                       'properties': ['debugging',
                                                      'location',
                                                      'nextseq',
                                                      'listening_sock']},
             'idlelib.rpc.RPCHandler': {'bases': ['SocketServer.BaseRequestHandler',
                                                  'idlelib.rpc.SocketIO'],
                                        'constructor': ['sock', 'addr', 'svr'],
                                        'docstring': '',
                                        'methods': [('handle',
                                                     [],
                                                     'handle() method required by SocketServer'),
                                                    ('get_remote_proxy', ['oid'], '')],
                                        'properties': ['debugging', 'location']},
             'idlelib.rpc.RPCProxy': {'bases': ['object'],
                                      'constructor': ['sockio', 'oid'],
                                      'docstring': '',
                                      'methods': [('__getattr__', ['name'], ''),
                                                  ('__getattributes', [], ''),
                                                  ('__getmethods', [], '')],
                                      'properties': ['__methods',
                                                     '__attributes',
                                                     'sockio',
                                                     'oid']},
             'idlelib.rpc.RPCServer': {'bases': ['SocketServer.TCPServer'],
                                       'constructor': ['addr', 'handlerclass=None'],
                                       'docstring': '',
                                       'methods': [('server_bind',
                                                    [],
                                                    'Override TCPServer method, no bind() phase for connecting entity'),
                                                   ('server_activate',
                                                    [],
                                                    'Override TCPServer method, connect() instead of listen()\n\n        Due to the reversed connection, self.server_address is actually the\n        address of the Idle Client to which we are connecting.\n\n        '),
                                                   ('get_request',
                                                    [],
                                                    'Override TCPServer method, return already connected socket'),
                                                   ('handle_error',
                                                    ['request', 'client_address'],
                                                    'Override TCPServer method\n\n        Error message goes to __stderr__.  No error message if exiting\n        normally or socket raised EOF.  Other exceptions not handled in\n        server code will cause os._exit.\n\n        ')],
                                       'properties': []},
             'idlelib.rpc.RemoteObject': {'bases': ['object'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': []},
             'idlelib.rpc.RemoteProxy': {'bases': ['object'],
                                         'constructor': ['oid'],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['oid']},
             'idlelib.rpc.SocketIO': {'bases': ['object'],
                                      'constructor': ['sock', 'objtable=None', 'debugging=None'],
                                      'docstring': '',
                                      'methods': [('close', [], ''),
                                                  ('exithook',
                                                   [],
                                                   'override for specific exit action'),
                                                  ('debug', ['*args'], ''),
                                                  ('register', ['oid', 'object'], ''),
                                                  ('unregister', ['oid'], ''),
                                                  ('localcall', ['seq', 'request'], ''),
                                                  ('remotecall',
                                                   ['oid', 'methodname', 'args', 'kwargs'],
                                                   ''),
                                                  ('remotequeue',
                                                   ['oid', 'methodname', 'args', 'kwargs'],
                                                   ''),
                                                  ('asynccall',
                                                   ['oid', 'methodname', 'args', 'kwargs'],
                                                   ''),
                                                  ('asyncqueue',
                                                   ['oid', 'methodname', 'args', 'kwargs'],
                                                   ''),
                                                  ('asyncreturn', ['seq'], ''),
                                                  ('decoderesponse', ['response'], ''),
                                                  ('decode_interrupthook', [], ''),
                                                  ('mainloop',
                                                   [],
                                                   'Listen on socket until I/O not ready or EOF\n\n        pollresponse() will loop looking for seq number None, which\n        never comes, and exit on EOFError.\n\n        '),
                                                  ('getresponse', ['myseq', 'wait'], ''),
                                                  ('_proxify', ['obj'], ''),
                                                  ('_getresponse', ['myseq', 'wait'], ''),
                                                  ('newseq', [], ''),
                                                  ('putmessage', ['message'], ''),
                                                  ('pollpacket', ['wait'], ''),
                                                  ('_stage0', [], ''),
                                                  ('_stage1', [], ''),
                                                  ('pollmessage', ['wait'], ''),
                                                  ('pollresponse',
                                                   ['myseq', 'wait'],
                                                   "Handle messages received on the socket.\n\n        Some messages received may be asynchronous 'call' or 'queue' requests,\n        and some may be responses for other threads.\n\n        'call' requests are passed to self.localcall() with the expectation of\n        immediate execution, during which time the socket is not serviced.\n\n        'queue' requests are used for tasks (which may block or hang) to be\n        processed in a different thread.  These requests are fed into\n        request_queue by self.localcall().  Responses to queued requests are\n        taken from response_queue and sent across the link with the associated\n        sequence numbers.  Messages in the queues are (sequence_number,\n        request/response) tuples and code using this module removing messages\n        from the request_queue is responsible for returning the correct\n        sequence number in the response_queue.\n\n        pollresponse() will loop until a response message with the myseq\n        sequence number is received, and will save other responses in\n        self.responses and notify the owning thread.\n\n        "),
                                                  ('handle_EOF',
                                                   [],
                                                   'action taken upon link being closed by peer'),
                                                  ('EOFhook',
                                                   [],
                                                   'Classes using rpc client/server can override to augment EOF action')],
                                      'properties': ['nextseq',
                                                     'sockthread',
                                                     'debugging',
                                                     'sock',
                                                     'objtable',
                                                     'responses',
                                                     'cvars',
                                                     'buffer',
                                                     'bufneed',
                                                     'bufstate']},
             'idlelib.run.Executive': {'bases': ['object'],
                                       'constructor': ['rpchandler'],
                                       'docstring': '',
                                       'methods': [('runcode', ['code'], ''),
                                                   ('interrupt_the_server', [], ''),
                                                   ('start_the_debugger', ['gui_adap_oid'], ''),
                                                   ('stop_the_debugger',
                                                    ['idb_adap_oid'],
                                                    'Unregister the Idb Adapter.  Link objects and Idb then subject to GC'),
                                                   ('get_the_calltip', ['name'], ''),
                                                   ('get_the_completion_list',
                                                    ['what', 'mode'],
                                                    ''),
                                                   ('stackviewer', ['flist_oid=None'], '')],
                                       'properties': ['rpchandler',
                                                      'locals',
                                                      'calltip',
                                                      'autocomplete',
                                                      'usr_exc_info']},
             'idlelib.run.MyHandler': {'bases': ['rpc.RPCHandler'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('handle', [], 'Override base method'),
                                                   ('exithook',
                                                    [],
                                                    'override SocketIO method - wait for MainThread to shut us down'),
                                                   ('EOFhook',
                                                    [],
                                                    'Override SocketIO method - terminate wait on callback and exit thread'),
                                                   ('decode_interrupthook',
                                                    [],
                                                    'interrupt awakened thread')],
                                       'properties': ['console', 'interp']},
             'idlelib.run.MyRPCServer': {'bases': ['rpc.RPCServer'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('handle_error',
                                                      ['request', 'client_address'],
                                                      'Override RPCServer method for IDLE\n\n        Interrupt the MainThread and exit server if link is dropped.\n\n        ')],
                                         'properties': []},
             'idlelib.tabpage.AlreadyExists': {'bases': ['Exception'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'idlelib.tabpage.InvalidTabPage': {'bases': ['Exception'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': []},
             'idlelib.tabpage.PageTab': {'bases': ['idlelib.tabpage.Frame'],
                                         'constructor': ['parent'],
                                         'docstring': "\n    a 'page tab' like framed button\n    ",
                                         'methods': [],
                                         'properties': ['button']},
             'idlelib.tabpage.TabPageSet': {'bases': ['idlelib.tabpage.Frame'],
                                            'constructor': ['parent', 'pageNames=[]', '**kw'],
                                            'docstring': "\n    a set of 'pages' with TabButtons for controlling their display\n    ",
                                            'methods': [('ChangePage', ['pageName=None'], ''),
                                                        ('GetActivePage', [], ''),
                                                        ('AddPage', ['pageName'], ''),
                                                        ('RemovePage', ['pageName'], '')],
                                            'properties': ['tabBar',
                                                           'activePage',
                                                           'defaultPage',
                                                           'pages']},
             'idlelib.textView.TextViewer': {'bases': ['idlelib.textView.Toplevel'],
                                             'constructor': ['parent',
                                                             'title',
                                                             'fileName',
                                                             'data=None'],
                                             'docstring': '\n    simple text viewer dialog for idle\n    ',
                                             'methods': [('LoadTextFile', ['fileName'], ''),
                                                         ('CreateWidgets', [], ''),
                                                         ('Ok', ['event=None'], '')],
                                             'properties': ['bg',
                                                            'fg',
                                                            'parent',
                                                            'buttonOk',
                                                            'scrollbarView',
                                                            'textView']},
             'ihooks.BasicModuleImporter': {'bases': ['ihooks._Verbose'],
                                            'constructor': ['loader=None', 'verbose=VERBOSE'],
                                            'docstring': 'Basic module importer; uses module loader.\n\n    This provides basic import facilities but no package imports.\n\n    ',
                                            'methods': [('get_loader', [], ''),
                                                        ('set_loader', ['loader'], ''),
                                                        ('get_hooks', [], ''),
                                                        ('set_hooks', ['hooks'], ''),
                                                        ('import_module',
                                                         ['name',
                                                          'globals={}',
                                                          'locals={}',
                                                          'fromlist=[]'],
                                                         ''),
                                                        ('reload', ['module', 'path=None'], ''),
                                                        ('unload', ['module'], ''),
                                                        ('install', [], ''),
                                                        ('uninstall', [], '')],
                                            'properties': ['loader',
                                                           'modules',
                                                           'save_import_module',
                                                           'save_reload',
                                                           'save_unload']},
             'ihooks.BasicModuleLoader': {'bases': ['ihooks._Verbose'],
                                          'constructor': [],
                                          'docstring': "Basic module loader.\n\n    This provides the same functionality as built-in import.  It\n    doesn't deal with checking sys.modules -- all it provides is\n    find_module() and a load_module(), as well as find_module_in_dir()\n    which searches just one directory, and can be overridden by a\n    derived class to change the module search algorithm when the basic\n    dependency on sys.path is unchanged.\n\n    The interface is a little more convenient than imp's:\n    find_module(name, [path]) returns None or 'stuff', and\n    load_module(name, stuff) loads the module.\n\n    ",
                                          'methods': [('find_module',
                                                       ['name', 'path=None'],
                                                       ''),
                                                      ('default_path', [], ''),
                                                      ('find_module_in_dir',
                                                       ['name', 'dir'],
                                                       ''),
                                                      ('find_builtin_module', ['name'], ''),
                                                      ('load_module', ['name', 'stuff'], '')],
                                          'properties': []},
             'ihooks.FancyModuleLoader': {'bases': ['ihooks.ModuleLoader'],
                                          'constructor': [],
                                          'docstring': 'Fancy module loader -- parses and execs the code itself.',
                                          'methods': [('load_module', ['name', 'stuff'], '')],
                                          'properties': []},
             'ihooks.Hooks': {'bases': ['ihooks._Verbose'],
                              'constructor': [],
                              'docstring': 'Hooks into the filesystem and interpreter.\n\n    By deriving a subclass you can redefine your filesystem interface,\n    e.g. to merge it with the URL space.\n\n    This base class behaves just like the native filesystem.\n\n    ',
                              'methods': [('get_suffixes', [], ''),
                                          ('new_module', ['name'], ''),
                                          ('is_builtin', ['name'], ''),
                                          ('init_builtin', ['name'], ''),
                                          ('is_frozen', ['name'], ''),
                                          ('init_frozen', ['name'], ''),
                                          ('get_frozen_object', ['name'], ''),
                                          ('load_source',
                                           ['name', 'filename', 'file=None'],
                                           ''),
                                          ('load_compiled',
                                           ['name', 'filename', 'file=None'],
                                           ''),
                                          ('load_dynamic',
                                           ['name', 'filename', 'file=None'],
                                           ''),
                                          ('load_package',
                                           ['name', 'filename', 'file=None'],
                                           ''),
                                          ('add_module', ['name'], ''),
                                          ('modules_dict', [], ''),
                                          ('default_path', [], ''),
                                          ('path_split', ['x'], ''),
                                          ('path_join', ['x', 'y'], ''),
                                          ('path_isabs', ['x'], ''),
                                          ('path_exists', ['x'], ''),
                                          ('path_isdir', ['x'], ''),
                                          ('path_isfile', ['x'], ''),
                                          ('path_islink', ['x'], ''),
                                          ('openfile', ['*x'], ''),
                                          ('listdir', ['x'], '')],
                              'properties': ['openfile_error', 'listdir_error']},
             'ihooks.ModuleImporter': {'bases': ['ihooks.BasicModuleImporter'],
                                       'constructor': [],
                                       'docstring': 'A module importer that supports packages.',
                                       'methods': [('import_module',
                                                    ['name',
                                                     'globals=None',
                                                     'locals=None',
                                                     'fromlist=None'],
                                                    ''),
                                                   ('determine_parent', ['globals'], ''),
                                                   ('find_head_package',
                                                    ['parent', 'name'],
                                                    ''),
                                                   ('load_tail', ['q', 'tail'], ''),
                                                   ('ensure_fromlist',
                                                    ['m', 'fromlist', 'recursive=0'],
                                                    ''),
                                                   ('import_it',
                                                    ['partname',
                                                     'fqname',
                                                     'parent',
                                                     'force_load=0'],
                                                    ''),
                                                   ('reload', ['module'], '')],
                                       'properties': []},
             'ihooks.ModuleLoader': {'bases': ['ihooks.BasicModuleLoader'],
                                     'constructor': ['hooks=None', 'verbose=VERBOSE'],
                                     'docstring': "Default module loader; uses file system hooks.\n\n    By defining suitable hooks, you might be able to load modules from\n    other sources than the file system, e.g. from compressed or\n    encrypted files, tar files or (if you're brave!) URLs.\n\n    ",
                                     'methods': [('default_path', [], ''),
                                                 ('modules_dict', [], ''),
                                                 ('get_hooks', [], ''),
                                                 ('set_hooks', ['hooks'], ''),
                                                 ('find_builtin_module', ['name'], ''),
                                                 ('find_module_in_dir',
                                                  ['name', 'dir', 'allow_packages=1'],
                                                  ''),
                                                 ('load_module', ['name', 'stuff'], '')],
                                     'properties': ['hooks']},
             'ihooks._Verbose': {'bases': [],
                                 'constructor': ['verbose=VERBOSE'],
                                 'docstring': '',
                                 'methods': [('get_verbose', [], ''),
                                             ('set_verbose', ['verbose'], ''),
                                             ('note', ['*args'], ''),
                                             ('message', ['format', '*args'], '')],
                                 'properties': ['verbose']},
             'imaplib.IMAP4': {'bases': [],
                               'constructor': ["host=''", 'port=IMAP4_PORT'],
                               'docstring': 'IMAP4 client class.\n\n    Instantiate with: IMAP4([host[, port]])\n\n            host - host\'s name (default: localhost);\n            port - port number (default: standard IMAP4 port).\n\n    All IMAP4rev1 commands are supported by methods of the same\n    name (in lower-case).\n\n    All arguments to commands are converted to strings, except for\n    AUTHENTICATE, and the last argument to APPEND which is passed as\n    an IMAP4 literal.  If necessary (the string contains any\n    non-printing characters or white-space and isn\'t enclosed with\n    either parentheses or double quotes) each string is quoted.\n    However, the \'password\' argument to the LOGIN command is always\n    quoted.  If you want to avoid having an argument string quoted\n    (eg: the \'flags\' argument to STORE) then enclose the string in\n    parentheses (eg: "(\\Deleted)").\n\n    Each command returns a tuple: (type, [data, ...]) where \'type\'\n    is usually \'OK\' or \'NO\', and \'data\' is either the text from the\n    tagged response, or untagged results from command. Each \'data\'\n    is either a string, or a tuple. If a tuple, then the first part\n    is the header of the response, and the second part contains\n    the data (ie: \'literal\' value).\n\n    Errors raise the exception class <instance>.error("<reason>").\n    IMAP4 server errors raise <instance>.abort("<reason>"),\n    which is a sub-class of \'error\'. Mailbox status changes\n    from READ-WRITE to READ-ONLY raise the exception class\n    <instance>.readonly("<reason>"), which is a sub-class of \'abort\'.\n\n    "error" exceptions imply a program error.\n    "abort" exceptions imply the connection should be reset, and\n            the command re-tried.\n    "readonly" exceptions imply the command should be re-tried.\n\n    Note: to use this module, you must read the RFCs pertaining to the\n    IMAP4 protocol, as the semantics of the arguments to each IMAP4\n    command are left to the invoker, not to mention the results. Also,\n    most IMAP servers implement a sub-set of the commands available here.\n    ',
                               'methods': [('__getattr__', ['attr'], ''),
                                           ('open',
                                            ["host=''", 'port=IMAP4_PORT'],
                                            'Setup connection to remote server on "host:port"\n            (default: localhost:standard IMAP4 port).\n        This connection will be used by the routines:\n            read, readline, send, shutdown.\n        '),
                                           ('read', ['size'], "Read 'size' bytes from remote."),
                                           ('readline', [], 'Read line from remote.'),
                                           ('send', ['data'], 'Send data to remote.'),
                                           ('shutdown', [], 'Close I/O established in "open".'),
                                           ('socket',
                                            [],
                                            'Return socket instance used to connect to IMAP4 server.\n\n        socket = <instance>.socket()\n        '),
                                           ('recent',
                                            [],
                                            "Return most recent 'RECENT' responses if any exist,\n        else prompt server for an update using the 'NOOP' command.\n\n        (typ, [data]) = <instance>.recent()\n\n        'data' is None if no new messages,\n        else list of RECENT responses, most recent last.\n        "),
                                           ('response',
                                            ['code'],
                                            "Return data for response 'code' if received, or None.\n\n        Old value for response 'code' is cleared.\n\n        (code, [data]) = <instance>.response(code)\n        "),
                                           ('append',
                                            ['mailbox', 'flags', 'date_time', 'message'],
                                            "Append message to named mailbox.\n\n        (typ, [data]) = <instance>.append(mailbox, flags, date_time, message)\n\n                All args except `message' can be None.\n        "),
                                           ('authenticate',
                                            ['mechanism', 'authobject'],
                                            "Authenticate command - requires response processing.\n\n        'mechanism' specifies which authentication mechanism is to\n        be used - it must appear in <instance>.capabilities in the\n        form AUTH=<mechanism>.\n\n        'authobject' must be a callable object:\n\n                data = authobject(response)\n\n        It will be called to process server continuation responses.\n        It should return data that will be encoded and sent to server.\n        It should return None if the client abort response '*' should\n        be sent instead.\n        "),
                                           ('capability',
                                            [],
                                            '(typ, [data]) = <instance>.capability()\n        Fetch capabilities list from server.'),
                                           ('check',
                                            [],
                                            'Checkpoint mailbox on server.\n\n        (typ, [data]) = <instance>.check()\n        '),
                                           ('close',
                                            [],
                                            "Close currently selected mailbox.\n\n        Deleted messages are removed from writable mailbox.\n        This is the recommended command before 'LOGOUT'.\n\n        (typ, [data]) = <instance>.close()\n        "),
                                           ('copy',
                                            ['message_set', 'new_mailbox'],
                                            "Copy 'message_set' messages onto end of 'new_mailbox'.\n\n        (typ, [data]) = <instance>.copy(message_set, new_mailbox)\n        "),
                                           ('create',
                                            ['mailbox'],
                                            'Create new mailbox.\n\n        (typ, [data]) = <instance>.create(mailbox)\n        '),
                                           ('delete',
                                            ['mailbox'],
                                            'Delete old mailbox.\n\n        (typ, [data]) = <instance>.delete(mailbox)\n        '),
                                           ('deleteacl',
                                            ['mailbox', 'who'],
                                            'Delete the ACLs (remove any rights) set for who on mailbox.\n\n        (typ, [data]) = <instance>.deleteacl(mailbox, who)\n        '),
                                           ('expunge',
                                            [],
                                            "Permanently remove deleted items from selected mailbox.\n\n        Generates 'EXPUNGE' response for each deleted message.\n\n        (typ, [data]) = <instance>.expunge()\n\n        'data' is list of 'EXPUNGE'd message numbers in order received.\n        "),
                                           ('fetch',
                                            ['message_set', 'message_parts'],
                                            'Fetch (parts of) messages.\n\n        (typ, [data, ...]) = <instance>.fetch(message_set, message_parts)\n\n        \'message_parts\' should be a string of selected parts\n        enclosed in parentheses, eg: "(UID BODY[TEXT])".\n\n        \'data\' are tuples of message part envelope and data.\n        '),
                                           ('getacl',
                                            ['mailbox'],
                                            'Get the ACLs for a mailbox.\n\n        (typ, [data]) = <instance>.getacl(mailbox)\n        '),
                                           ('getannotation',
                                            ['mailbox', 'entry', 'attribute'],
                                            '(typ, [data]) = <instance>.getannotation(mailbox, entry, attribute)\n        Retrieve ANNOTATIONs.'),
                                           ('getquota',
                                            ['root'],
                                            "Get the quota root's resource usage and limits.\n\n        Part of the IMAP4 QUOTA extension defined in rfc2087.\n\n        (typ, [data]) = <instance>.getquota(root)\n        "),
                                           ('getquotaroot',
                                            ['mailbox'],
                                            'Get the list of quota roots for the named mailbox.\n\n        (typ, [[QUOTAROOT responses...], [QUOTA responses]]) = <instance>.getquotaroot(mailbox)\n        '),
                                           ('list',
                                            ['directory=\'""\'', "pattern='*'"],
                                            'List mailbox names in directory matching pattern.\n\n        (typ, [data]) = <instance>.list(directory=\'""\', pattern=\'*\')\n\n        \'data\' is list of LIST responses.\n        '),
                                           ('login',
                                            ['user', 'password'],
                                            "Identify client using plaintext password.\n\n        (typ, [data]) = <instance>.login(user, password)\n\n        NB: 'password' will be quoted.\n        "),
                                           ('login_cram_md5',
                                            ['user', 'password'],
                                            ' Force use of CRAM-MD5 authentication.\n\n        (typ, [data]) = <instance>.login_cram_md5(user, password)\n        '),
                                           ('_CRAM_MD5_AUTH',
                                            ['challenge'],
                                            ' Authobject to use with CRAM-MD5 authentication. '),
                                           ('logout',
                                            [],
                                            "Shutdown connection to server.\n\n        (typ, [data]) = <instance>.logout()\n\n        Returns server 'BYE' response.\n        "),
                                           ('lsub',
                                            ['directory=\'""\'', "pattern='*'"],
                                            'List \'subscribed\' mailbox names in directory matching pattern.\n\n        (typ, [data, ...]) = <instance>.lsub(directory=\'""\', pattern=\'*\')\n\n        \'data\' are tuples of message part envelope and data.\n        '),
                                           ('myrights',
                                            ['mailbox'],
                                            'Show my ACLs for a mailbox (i.e. the rights that I have on mailbox).\n\n        (typ, [data]) = <instance>.myrights(mailbox)\n        '),
                                           ('namespace',
                                            [],
                                            ' Returns IMAP namespaces ala rfc2342\n\n        (typ, [data, ...]) = <instance>.namespace()\n        '),
                                           ('noop',
                                            [],
                                            'Send NOOP command.\n\n        (typ, [data]) = <instance>.noop()\n        '),
                                           ('partial',
                                            ['message_num', 'message_part', 'start', 'length'],
                                            "Fetch truncated part of a message.\n\n        (typ, [data, ...]) = <instance>.partial(message_num, message_part, start, length)\n\n        'data' is tuple of message part envelope and data.\n        "),
                                           ('proxyauth',
                                            ['user'],
                                            'Assume authentication as "user".\n\n        Allows an authorised administrator to proxy into any user\'s\n        mailbox.\n\n        (typ, [data]) = <instance>.proxyauth(user)\n        '),
                                           ('rename',
                                            ['oldmailbox', 'newmailbox'],
                                            'Rename old mailbox name to new.\n\n        (typ, [data]) = <instance>.rename(oldmailbox, newmailbox)\n        '),
                                           ('search',
                                            ['charset', '*criteria'],
                                            "Search mailbox for matching messages.\n\n        (typ, [data]) = <instance>.search(charset, criterion, ...)\n\n        'data' is space separated list of matching message numbers.\n        "),
                                           ('select',
                                            ["mailbox='INBOX'", 'readonly=False'],
                                            "Select a mailbox.\n\n        Flush all untagged responses.\n\n        (typ, [data]) = <instance>.select(mailbox='INBOX', readonly=False)\n\n        'data' is count of messages in mailbox ('EXISTS' response).\n\n        Mandated responses are ('FLAGS', 'EXISTS', 'RECENT', 'UIDVALIDITY'), so\n        other responses should be obtained via <instance>.response('FLAGS') etc.\n        "),
                                           ('setacl',
                                            ['mailbox', 'who', 'what'],
                                            'Set a mailbox acl.\n\n        (typ, [data]) = <instance>.setacl(mailbox, who, what)\n        '),
                                           ('setannotation',
                                            ['*args'],
                                            '(typ, [data]) = <instance>.setannotation(mailbox[, entry, attribute]+)\n        Set ANNOTATIONs.'),
                                           ('setquota',
                                            ['root', 'limits'],
                                            "Set the quota root's resource limits.\n\n        (typ, [data]) = <instance>.setquota(root, limits)\n        "),
                                           ('sort',
                                            ['sort_criteria', 'charset', '*search_criteria'],
                                            'IMAP4rev1 extension SORT command.\n\n        (typ, [data]) = <instance>.sort(sort_criteria, charset, search_criteria, ...)\n        '),
                                           ('status',
                                            ['mailbox', 'names'],
                                            'Request named status conditions for mailbox.\n\n        (typ, [data]) = <instance>.status(mailbox, names)\n        '),
                                           ('store',
                                            ['message_set', 'command', 'flags'],
                                            'Alters flag dispositions for messages in mailbox.\n\n        (typ, [data]) = <instance>.store(message_set, command, flags)\n        '),
                                           ('subscribe',
                                            ['mailbox'],
                                            'Subscribe to new mailbox.\n\n        (typ, [data]) = <instance>.subscribe(mailbox)\n        '),
                                           ('thread',
                                            ['threading_algorithm',
                                             'charset',
                                             '*search_criteria'],
                                            'IMAPrev1 extension THREAD command.\n\n        (type, [data]) = <instance>.thread(threading_alogrithm, charset, search_criteria, ...)\n        '),
                                           ('uid',
                                            ['command', '*args'],
                                            'Execute "command arg ..." with messages identified by UID,\n                rather than message number.\n\n        (typ, [data]) = <instance>.uid(command, arg1, arg2, ...)\n\n        Returns response appropriate to \'command\'.\n        '),
                                           ('unsubscribe',
                                            ['mailbox'],
                                            'Unsubscribe from old mailbox.\n\n        (typ, [data]) = <instance>.unsubscribe(mailbox)\n        '),
                                           ('xatom',
                                            ['name', '*args'],
                                            "Allow simple extension commands\n                notified by server in CAPABILITY response.\n\n        Assumes command is legal in current state.\n\n        (typ, [data]) = <instance>.xatom(name, arg, ...)\n\n        Returns response appropriate to extension command `name'.\n        "),
                                           ('_append_untagged', ['typ', 'dat'], ''),
                                           ('_check_bye', [], ''),
                                           ('_command', ['name', '*args'], ''),
                                           ('_command_complete', ['name', 'tag'], ''),
                                           ('_get_response', [], ''),
                                           ('_get_tagged_response', ['tag'], ''),
                                           ('_get_line', [], ''),
                                           ('_match', ['cre', 's'], ''),
                                           ('_new_tag', [], ''),
                                           ('_checkquote', ['arg'], ''),
                                           ('_quote', ['arg'], ''),
                                           ('_simple_command', ['name', '*args'], ''),
                                           ('_untagged_response', ['typ', 'dat', 'name'], ''),
                                           ('_mesg', ['s', 'secs=None'], ''),
                                           ('_dump_ur', ['dict'], ''),
                                           ('_log', ['line'], ''),
                                           ('print_log', [], '')],
                               'properties': ['mustquote',
                                              'debug',
                                              'state',
                                              'literal',
                                              'tagged_commands',
                                              'untagged_responses',
                                              'continuation_response',
                                              'is_readonly',
                                              'tagnum',
                                              'tagpre',
                                              'tagre',
                                              '_cmd_log_len',
                                              '_cmd_log_idx',
                                              '_cmd_log',
                                              'welcome',
                                              'capabilities',
                                              'PROTOCOL_VERSION',
                                              'host',
                                              'port',
                                              'sock',
                                              'file',
                                              'user',
                                              'password',
                                              'mo']},
             'imaplib.IMAP4_SSL': {'bases': ['imaplib.IMAP4'],
                                   'constructor': ["host=''",
                                                   'port=IMAP4_SSL_PORT',
                                                   'keyfile=None',
                                                   'certfile=None'],
                                   'docstring': "IMAP4 client class over SSL connection\n\n    Instantiate with: IMAP4_SSL([host[, port[, keyfile[, certfile]]]])\n\n            host - host's name (default: localhost);\n            port - port number (default: standard IMAP4 SSL port).\n            keyfile - PEM formatted file that contains your private key (default: None);\n            certfile - PEM formatted certificate chain file (default: None);\n\n    for more documentation see the docstring of the parent class IMAP4.\n    ",
                                   'methods': [('open',
                                                ["host=''", 'port=IMAP4_SSL_PORT'],
                                                'Setup connection to remote server on "host:port".\n            (default: localhost:standard IMAP4 SSL port).\n        This connection will be used by the routines:\n            read, readline, send, shutdown.\n        '),
                                               ('read',
                                                ['size'],
                                                "Read 'size' bytes from remote."),
                                               ('readline', [], 'Read line from remote.'),
                                               ('send', ['data'], 'Send data to remote.'),
                                               ('shutdown',
                                                [],
                                                'Close I/O established in "open".'),
                                               ('socket',
                                                [],
                                                'Return socket instance used to connect to IMAP4 server.\n\n        socket = <instance>.socket()\n        '),
                                               ('ssl',
                                                [],
                                                'Return SSLObject instance used to communicate with the IMAP4 server.\n\n        ssl = <instance>.socket.ssl()\n        ')],
                                   'properties': ['keyfile',
                                                  'certfile',
                                                  'host',
                                                  'port',
                                                  'sock',
                                                  'sslobj']},
             'imaplib.IMAP4_stream': {'bases': ['imaplib.IMAP4'],
                                      'constructor': ['command'],
                                      'docstring': 'IMAP4 client class over a stream\n\n    Instantiate with: IMAP4_stream(command)\n\n            where "command" is a string that can be passed to os.popen2()\n\n    for more documentation see the docstring of the parent class IMAP4.\n    ',
                                      'methods': [('open',
                                                   ['host=None', 'port=None'],
                                                   'Setup a stream connection.\n        This connection will be used by the routines:\n            read, readline, send, shutdown.\n        '),
                                                  ('read',
                                                   ['size'],
                                                   "Read 'size' bytes from remote."),
                                                  ('readline', [], 'Read line from remote.'),
                                                  ('send', ['data'], 'Send data to remote.'),
                                                  ('shutdown',
                                                   [],
                                                   'Close I/O established in "open".')],
                                      'properties': ['command',
                                                     'host',
                                                     'port',
                                                     'sock',
                                                     'file',
                                                     'writefile',
                                                     'readfile']},
             'imaplib._Authenticator': {'bases': [],
                                        'constructor': ['mechinst'],
                                        'docstring': 'Private class to provide en/decoding\n            for base64-based authentication conversation.\n    ',
                                        'methods': [('process', ['data'], ''),
                                                    ('encode', ['inp'], ''),
                                                    ('decode', ['inp'], '')],
                                        'properties': ['mech']},
             'imputil.BuiltinImporter': {'bases': ['imputil.Importer'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('get_code',
                                                      ['parent', 'modname', 'fqname'],
                                                      '')],
                                         'properties': []},
             'imputil.DynLoadSuffixImporter': {'bases': [],
                                               'constructor': ['desc'],
                                               'docstring': '',
                                               'methods': [('import_file',
                                                            ['filename', 'finfo', 'fqname'],
                                                            '')],
                                               'properties': ['desc']},
             'imputil.ImportManager': {'bases': [],
                                       'constructor': ['fs_imp=None'],
                                       'docstring': 'Manage the import process.',
                                       'methods': [('install',
                                                    ['namespace=vars(__builtin__)'],
                                                    'Install this ImportManager into the specified namespace.'),
                                                   ('uninstall',
                                                    [],
                                                    'Restore the previous import mechanism.'),
                                                   ('add_suffix', ['suffix', 'importFunc'], ''),
                                                   ('_import_hook',
                                                    ['fqname',
                                                     'globals=None',
                                                     'locals=None',
                                                     'fromlist=None'],
                                                    'Python calls this hook to locate and import a module.'),
                                                   ('_determine_import_context',
                                                    ['globals'],
                                                    'Returns the context in which a module should be imported.\n\n        The context could be a loaded (package) module and the imported module\n        will be looked for within that package. The context could also be None,\n        meaning there is no context -- the module should be looked for as a\n        "top-level" module.\n        '),
                                                   ('_import_top_module', ['name'], ''),
                                                   ('_reload_hook',
                                                    ['module'],
                                                    'Python calls this hook to reload a module.')],
                                       'properties': ['previous_importer',
                                                      'namespace',
                                                      'clsFilesystemImporter',
                                                      'fs_imp']},
             'imputil.Importer': {'bases': [],
                                  'constructor': [],
                                  'docstring': 'Base class for replacing standard import functions.',
                                  'methods': [('import_top',
                                               ['name'],
                                               'Import a top-level module.'),
                                              ('_finish_import',
                                               ['top', 'parts', 'fromlist'],
                                               ''),
                                              ('_import_one',
                                               ['parent', 'modname', 'fqname'],
                                               'Import a single module.'),
                                              ('_process_result',
                                               ['(ispkg, code, values)', 'fqname'],
                                               ''),
                                              ('_load_tail',
                                               ['m', 'parts'],
                                               'Import the rest of the modules, down from the top-level module.\n\n        Returns the last module in the dotted list of modules.\n        '),
                                              ('_import_fromlist',
                                               ['package', 'fromlist'],
                                               'Import any sub-modules in the "from" list.'),
                                              ('_do_import',
                                               ['parent', 'parts', 'fromlist'],
                                               'Attempt to import the module relative to parent.\n\n        This method is used when the import context specifies that <self>\n        imported the parent module.\n        '),
                                              ('get_code',
                                               ['parent', 'modname', 'fqname'],
                                               'Find and retrieve the code for the given module.\n\n        parent specifies a parent module to define a context for importing. It\n        may be None, indicating no particular context for the search.\n\n        modname specifies a single module (not dotted) within the parent.\n\n        fqname specifies the fully-qualified module name. This is a\n        (potentially) dotted name from the "root" of the module namespace\n        down to the modname.\n        If there is no parent, then modname==fqname.\n\n        This method should return None, or a 3-tuple.\n\n        * If the module was not found, then None should be returned.\n\n        * The first item of the 2- or 3-tuple should be the integer 0 or 1,\n            specifying whether the module that was found is a package or not.\n\n        * The second item is the code object for the module (it will be\n            executed within the new module\'s namespace). This item can also\n            be a fully-loaded module object (e.g. loaded from a shared lib).\n\n        * The third item is a dictionary of name/value pairs that will be\n            inserted into new module before the code object is executed. This\n            is provided in case the module\'s code expects certain values (such\n            as where the module was found). When the second item is a module\n            object, then these names/values will be inserted *after* the module\n            has been loaded/initialized.\n        ')],
                                  'properties': []},
             'imputil._FilesystemImporter': {'bases': ['imputil.Importer'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('add_suffix',
                                                          ['suffix', 'importFunc'],
                                                          ''),
                                                         ('import_from_dir',
                                                          ['dir', 'fqname'],
                                                          ''),
                                                         ('get_code',
                                                          ['parent', 'modname', 'fqname'],
                                                          ''),
                                                         ('_import_pathname',
                                                          ['pathname', 'fqname'],
                                                          '')],
                                             'properties': ['suffixes']},
             'inspect.BlockFinder': {'bases': [],
                                     'constructor': [],
                                     'docstring': 'Provide a tokeneater() method to detect the end of a code block.',
                                     'methods': [('tokeneater',
                                                  ['type',
                                                   'token',
                                                   '(srow, scol)',
                                                   '(erow, ecol)',
                                                   'line'],
                                                  '')],
                                     'properties': ['indent',
                                                    'islambda',
                                                    'started',
                                                    'passline',
                                                    'last']},
             'inspect.EndOfBlock': {'bases': ['Exception'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'logging.BufferingFormatter': {'bases': [],
                                            'constructor': ['linefmt=None'],
                                            'docstring': '\n    A formatter suitable for formatting a number of records.\n    ',
                                            'methods': [('formatHeader',
                                                         ['records'],
                                                         '\n        Return the header string for the specified records.\n        '),
                                                        ('formatFooter',
                                                         ['records'],
                                                         '\n        Return the footer string for the specified records.\n        '),
                                                        ('format',
                                                         ['records'],
                                                         '\n        Format the specified records and return the result as a string.\n        ')],
                                            'properties': ['linefmt']},
             'logging.FileHandler': {'bases': ['logging.StreamHandler'],
                                     'constructor': ['filename', "mode='a'", 'encoding=None'],
                                     'docstring': '\n    A handler class which writes formatted logging records to disk files.\n    ',
                                     'methods': [('close',
                                                  [],
                                                  '\n        Closes the stream.\n        ')],
                                     'properties': ['baseFilename', 'mode']},
             'logging.Filter': {'bases': [],
                                'constructor': ["name=''"],
                                'docstring': '\n    Filter instances are used to perform arbitrary filtering of LogRecords.\n\n    Loggers and Handlers can optionally use Filter instances to filter\n    records as desired. The base filter class only allows events which are\n    below a certain point in the logger hierarchy. For example, a filter\n    initialized with "A.B" will allow events logged by loggers "A.B",\n    "A.B.C", "A.B.C.D", "A.B.D" etc. but not "A.BB", "B.A.B" etc. If\n    initialized with the empty string, all events are passed.\n    ',
                                'methods': [('filter',
                                             ['record'],
                                             '\n        Determine if the specified record is to be logged.\n\n        Is the specified record to be logged? Returns 0 for no, nonzero for\n        yes. If deemed appropriate, the record may be modified in-place.\n        ')],
                                'properties': ['name', 'nlen']},
             'logging.Filterer': {'bases': [],
                                  'constructor': [],
                                  'docstring': '\n    A base class for loggers and handlers which allows them to share\n    common code.\n    ',
                                  'methods': [('addFilter',
                                               ['filter'],
                                               '\n        Add the specified filter to this handler.\n        '),
                                              ('removeFilter',
                                               ['filter'],
                                               '\n        Remove the specified filter from this handler.\n        '),
                                              ('filter',
                                               ['record'],
                                               '\n        Determine if a record is loggable by consulting all the filters.\n\n        The default is to allow the record to be logged; any filter can veto\n        this and the record is then dropped. Returns a zero value if a record\n        is to be dropped, else non-zero.\n        ')],
                                  'properties': ['filters']},
             'logging.Formatter': {'bases': [],
                                   'constructor': ['fmt=None', 'datefmt=None'],
                                   'docstring': '\n    Formatter instances are used to convert a LogRecord to text.\n\n    Formatters need to know how a LogRecord is constructed. They are\n    responsible for converting a LogRecord to (usually) a string which can\n    be interpreted by either a human or an external system. The base Formatter\n    allows a formatting string to be specified. If none is supplied, the\n    default value of "%s(message)\\n" is used.\n\n    The Formatter can be initialized with a format string which makes use of\n    knowledge of the LogRecord attributes - e.g. the default value mentioned\n    above makes use of the fact that the user\'s message and arguments are pre-\n    formatted into a LogRecord\'s message attribute. Currently, the useful\n    attributes in a LogRecord are described by:\n\n    %(name)s            Name of the logger (logging channel)\n    %(levelno)s         Numeric logging level for the message (DEBUG, INFO,\n                        WARNING, ERROR, CRITICAL)\n    %(levelname)s       Text logging level for the message ("DEBUG", "INFO",\n                        "WARNING", "ERROR", "CRITICAL")\n    %(pathname)s        Full pathname of the source file where the logging\n                        call was issued (if available)\n    %(filename)s        Filename portion of pathname\n    %(module)s          Module (name portion of filename)\n    %(lineno)d          Source line number where the logging call was issued\n                        (if available)\n    %(funcName)s        Function name\n    %(created)f         Time when the LogRecord was created (time.time()\n                        return value)\n    %(asctime)s         Textual time when the LogRecord was created\n    %(msecs)d           Millisecond portion of the creation time\n    %(relativeCreated)d Time in milliseconds when the LogRecord was created,\n                        relative to the time the logging module was loaded\n                        (typically at application startup time)\n    %(thread)d          Thread ID (if available)\n    %(threadName)s      Thread name (if available)\n    %(process)d         Process ID (if available)\n    %(message)s         The result of record.getMessage(), computed just as\n                        the record is emitted\n    ',
                                   'methods': [('formatTime',
                                                ['record', 'datefmt=None'],
                                                "\n        Return the creation time of the specified LogRecord as formatted text.\n\n        This method should be called from format() by a formatter which\n        wants to make use of a formatted time. This method can be overridden\n        in formatters to provide for any specific requirement, but the\n        basic behaviour is as follows: if datefmt (a string) is specified,\n        it is used with time.strftime() to format the creation time of the\n        record. Otherwise, the ISO8601 format is used. The resulting\n        string is returned. This function uses a user-configurable function\n        to convert the creation time to a tuple. By default, time.localtime()\n        is used; to change this for a particular formatter instance, set the\n        'converter' attribute to a function with the same signature as\n        time.localtime() or time.gmtime(). To change it for all formatters,\n        for example if you want all logging times to be shown in GMT,\n        set the 'converter' attribute in the Formatter class.\n        "),
                                               ('formatException',
                                                ['ei'],
                                                '\n        Format and return the specified exception information as a string.\n\n        This default implementation just uses\n        traceback.print_exception()\n        '),
                                               ('format',
                                                ['record'],
                                                '\n        Format the specified record as text.\n\n        The record\'s attribute dictionary is used as the operand to a\n        string formatting operation which yields the returned string.\n        Before formatting the dictionary, a couple of preparatory steps\n        are carried out. The message attribute of the record is computed\n        using LogRecord.getMessage(). If the formatting string contains\n        "%(asctime)", formatTime() is called to format the event time.\n        If there is exception information, it is formatted using\n        formatException() and appended to the message.\n        ')],
                                   'properties': ['converter', '_fmt', 'datefmt']},
             'logging.Handler': {'bases': ['logging.Filterer'],
                                 'constructor': ['level=NOTSET'],
                                 'docstring': "\n    Handler instances dispatch logging events to specific destinations.\n\n    The base handler class. Acts as a placeholder which defines the Handler\n    interface. Handlers can optionally use Formatter instances to format\n    records as desired. By default, no formatter is specified; in this case,\n    the 'raw' message as determined by record.message is logged.\n    ",
                                 'methods': [('createLock',
                                              [],
                                              '\n        Acquire a thread lock for serializing access to the underlying I/O.\n        '),
                                             ('acquire',
                                              [],
                                              '\n        Acquire the I/O thread lock.\n        '),
                                             ('release',
                                              [],
                                              '\n        Release the I/O thread lock.\n        '),
                                             ('setLevel',
                                              ['level'],
                                              '\n        Set the logging level of this handler.\n        '),
                                             ('format',
                                              ['record'],
                                              '\n        Format the specified record.\n\n        If a formatter is set, use it. Otherwise, use the default formatter\n        for the module.\n        '),
                                             ('emit',
                                              ['record'],
                                              '\n        Do whatever it takes to actually log the specified logging record.\n\n        This version is intended to be implemented by subclasses and so\n        raises a NotImplementedError.\n        '),
                                             ('handle',
                                              ['record'],
                                              '\n        Conditionally emit the specified logging record.\n\n        Emission depends on filters which may have been added to the handler.\n        Wrap the actual emission of the record with acquisition/release of\n        the I/O thread lock. Returns whether the filter passed the record for\n        emission.\n        '),
                                             ('setFormatter',
                                              ['fmt'],
                                              '\n        Set the formatter for this handler.\n        '),
                                             ('flush',
                                              [],
                                              '\n        Ensure all logging output has been flushed.\n\n        This version does nothing and is intended to be implemented by\n        subclasses.\n        '),
                                             ('close',
                                              [],
                                              '\n        Tidy up any resources used by the handler.\n\n        This version does removes the handler from an internal list\n        of handlers which is closed when shutdown() is called. Subclasses\n        should ensure that this gets called from overridden close()\n        methods.\n        '),
                                             ('handleError',
                                              ['record'],
                                              '\n        Handle errors which occur during an emit() call.\n\n        This method should be called from handlers when an exception is\n        encountered during an emit() call. If raiseExceptions is false,\n        exceptions get silently ignored. This is what is mostly wanted\n        for a logging system - most users will not care about errors in\n        the logging system, they are more interested in application errors.\n        You could, however, replace this with a custom handler if you wish.\n        The record which was being processed is passed in to this method.\n        ')],
                                 'properties': ['level', 'formatter', 'lock']},
             'logging.LogRecord': {'bases': [],
                                   'constructor': ['name',
                                                   'level',
                                                   'pathname',
                                                   'lineno',
                                                   'msg',
                                                   'args',
                                                   'exc_info',
                                                   'func=None'],
                                   'docstring': '\n    A LogRecord instance represents an event being logged.\n\n    LogRecord instances are created every time something is logged. They\n    contain all the information pertinent to the event being logged. The\n    main information passed in is in msg and args, which are combined\n    using str(msg) % args to create the message field of the record. The\n    record also includes information such as when the record was created,\n    the source line where the logging call was made, and any exception\n    information to be logged.\n    ',
                                   'methods': [('__str__', [], ''),
                                               ('getMessage',
                                                [],
                                                '\n        Return the message for this LogRecord.\n\n        Return the message for this LogRecord after merging any user-supplied\n        arguments with the message.\n        ')],
                                   'properties': ['name',
                                                  'msg',
                                                  'args',
                                                  'levelname',
                                                  'levelno',
                                                  'pathname',
                                                  'filename',
                                                  'module',
                                                  'exc_info',
                                                  'exc_text',
                                                  'lineno',
                                                  'funcName',
                                                  'created',
                                                  'msecs',
                                                  'relativeCreated',
                                                  'thread',
                                                  'threadName',
                                                  'process']},
             'logging.Logger': {'bases': ['logging.Filterer'],
                                'constructor': ['name', 'level=NOTSET'],
                                'docstring': '\n    Instances of the Logger class represent a single logging channel. A\n    "logging channel" indicates an area of an application. Exactly how an\n    "area" is defined is up to the application developer. Since an\n    application can have any number of areas, logging channels are identified\n    by a unique string. Application areas can be nested (e.g. an area\n    of "input processing" might include sub-areas "read CSV files", "read\n    XLS files" and "read Gnumeric files"). To cater for this natural nesting,\n    channel names are organized into a namespace hierarchy where levels are\n    separated by periods, much like the Java or Python package namespace. So\n    in the instance given above, channel names might be "input" for the upper\n    level, and "input.csv", "input.xls" and "input.gnu" for the sub-levels.\n    There is no arbitrary limit to the depth of nesting.\n    ',
                                'methods': [('setLevel',
                                             ['level'],
                                             '\n        Set the logging level of this logger.\n        '),
                                            ('debug',
                                             ['msg', '*args', '**kwargs'],
                                             '\n        Log \'msg % args\' with severity \'DEBUG\'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.debug("Houston, we have a %s", "thorny problem", exc_info=1)\n        '),
                                            ('info',
                                             ['msg', '*args', '**kwargs'],
                                             '\n        Log \'msg % args\' with severity \'INFO\'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.info("Houston, we have a %s", "interesting problem", exc_info=1)\n        '),
                                            ('warning',
                                             ['msg', '*args', '**kwargs'],
                                             '\n        Log \'msg % args\' with severity \'WARNING\'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.warning("Houston, we have a %s", "bit of a problem", exc_info=1)\n        '),
                                            ('error',
                                             ['msg', '*args', '**kwargs'],
                                             '\n        Log \'msg % args\' with severity \'ERROR\'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.error("Houston, we have a %s", "major problem", exc_info=1)\n        '),
                                            ('exception',
                                             ['msg', '*args'],
                                             '\n        Convenience method for logging an ERROR with exception information.\n        '),
                                            ('critical',
                                             ['msg', '*args', '**kwargs'],
                                             '\n        Log \'msg % args\' with severity \'CRITICAL\'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.critical("Houston, we have a %s", "major disaster", exc_info=1)\n        '),
                                            ('log',
                                             ['level', 'msg', '*args', '**kwargs'],
                                             '\n        Log \'msg % args\' with the integer severity \'level\'.\n\n        To pass exception information, use the keyword argument exc_info with\n        a true value, e.g.\n\n        logger.log(level, "We have a %s", "mysterious problem", exc_info=1)\n        '),
                                            ('findCaller',
                                             [],
                                             '\n        Find the stack frame of the caller so that we can note the source\n        file name, line number and function name.\n        '),
                                            ('makeRecord',
                                             ['name',
                                              'level',
                                              'fn',
                                              'lno',
                                              'msg',
                                              'args',
                                              'exc_info',
                                              'func=None',
                                              'extra=None'],
                                             '\n        A factory method which can be overridden in subclasses to create\n        specialized LogRecords.\n        '),
                                            ('_log',
                                             ['level',
                                              'msg',
                                              'args',
                                              'exc_info=None',
                                              'extra=None'],
                                             '\n        Low-level logging routine which creates a LogRecord and then calls\n        all the handlers of this logger to handle the record.\n        '),
                                            ('handle',
                                             ['record'],
                                             '\n        Call the handlers for the specified record.\n\n        This method is used for unpickled records received from a socket, as\n        well as those created locally. Logger-level filtering is applied.\n        '),
                                            ('addHandler',
                                             ['hdlr'],
                                             '\n        Add the specified handler to this logger.\n        '),
                                            ('removeHandler',
                                             ['hdlr'],
                                             '\n        Remove the specified handler from this logger.\n        '),
                                            ('callHandlers',
                                             ['record'],
                                             '\n        Pass a record to all relevant handlers.\n\n        Loop through all handlers for this logger and its parents in the\n        logger hierarchy. If no handler was found, output a one-off error\n        message to sys.stderr. Stop searching up the hierarchy whenever a\n        logger with the "propagate" attribute set to zero is found - that\n        will be the last logger whose handlers are called.\n        '),
                                            ('getEffectiveLevel',
                                             [],
                                             '\n        Get the effective level for this logger.\n\n        Loop through this logger and its parents in the logger hierarchy,\n        looking for a non-zero logging level. Return the first one found.\n        '),
                                            ('isEnabledFor',
                                             ['level'],
                                             "\n        Is this logger enabled for level 'level'?\n        ")],
                                'properties': ['name',
                                               'level',
                                               'parent',
                                               'propagate',
                                               'handlers',
                                               'disabled',
                                               'warn',
                                               'fatal']},
             'logging.Manager': {'bases': [],
                                 'constructor': ['rootnode'],
                                 'docstring': '\n    There is [under normal circumstances] just one Manager instance, which\n    holds the hierarchy of loggers.\n    ',
                                 'methods': [('getLogger',
                                              ['name'],
                                              '\n        Get a logger with the specified name (channel name), creating it\n        if it doesn\'t yet exist. This name is a dot-separated hierarchical\n        name, such as "a", "a.b", "a.b.c" or similar.\n\n        If a PlaceHolder existed for the specified name [i.e. the logger\n        didn\'t exist but a child of it did], replace it with the created\n        logger and fix up the parent/child references which pointed to the\n        placeholder to now point to the logger.\n        '),
                                             ('_fixupParents',
                                              ['alogger'],
                                              '\n        Ensure that there are either loggers or placeholders all the way\n        from the specified logger to the root of the logger hierarchy.\n        '),
                                             ('_fixupChildren',
                                              ['ph', 'alogger'],
                                              '\n        Ensure that children of the placeholder ph are connected to the\n        specified logger.\n        ')],
                                 'properties': ['root',
                                                'disable',
                                                'emittedNoHandlerWarning',
                                                'loggerDict']},
             'logging.PlaceHolder': {'bases': [],
                                     'constructor': ['alogger'],
                                     'docstring': '\n    PlaceHolder instances are used in the Manager logger hierarchy to take\n    the place of nodes for which no loggers have been defined. This class is\n    intended for internal use only and not as part of the public API.\n    ',
                                     'methods': [('append',
                                                  ['alogger'],
                                                  '\n        Add the specified logger as a child of this placeholder.\n        ')],
                                     'properties': ['loggerMap']},
             'logging.RootLogger': {'bases': ['logging.Logger'],
                                    'constructor': ['level'],
                                    'docstring': '\n    A root logger is not that different to any other logger, except that\n    it must have a logging level and there is only one instance of it in\n    the hierarchy.\n    ',
                                    'methods': [],
                                    'properties': []},
             'logging.StreamHandler': {'bases': ['logging.Handler'],
                                       'constructor': ['strm=None'],
                                       'docstring': '\n    A handler class which writes logging records, appropriately formatted,\n    to a stream. Note that this class does not close the stream, as\n    sys.stdout or sys.stderr may be used.\n    ',
                                       'methods': [('flush',
                                                    [],
                                                    '\n        Flushes the stream.\n        '),
                                                   ('emit',
                                                    ['record'],
                                                    '\n        Emit a record.\n\n        If a formatter is specified, it is used to format the record.\n        The record is then written to the stream with a trailing newline\n        [N.B. this may be removed depending on feedback]. If exception\n        information is present, it is formatted using\n        traceback.print_exception and appended to the stream.\n        ')],
                                       'properties': ['stream', 'formatter']},
             'logging.handlers.BaseRotatingHandler': {'bases': ['logging.FileHandler'],
                                                      'constructor': ['filename',
                                                                      'mode',
                                                                      'encoding=None'],
                                                      'docstring': '\n    Base class for handlers that rotate log files at a certain point.\n    Not meant to be instantiated directly.  Instead, use RotatingFileHandler\n    or TimedRotatingFileHandler.\n    ',
                                                      'methods': [('emit',
                                                                   ['record'],
                                                                   '\n        Emit a record.\n\n        Output the record to the file, catering for rollover as described\n        in doRollover().\n        ')],
                                                      'properties': ['mode', 'encoding']},
             'logging.handlers.BufferingHandler': {'bases': ['logging.Handler'],
                                                   'constructor': ['capacity'],
                                                   'docstring': "\n  A handler class which buffers logging records in memory. Whenever each\n  record is added to the buffer, a check is made to see if the buffer should\n  be flushed. If it should, then flush() is expected to do what's needed.\n    ",
                                                   'methods': [('shouldFlush',
                                                                ['record'],
                                                                '\n        Should the handler flush its buffer?\n\n        Returns true if the buffer is up to capacity. This method can be\n        overridden to implement custom flushing strategies.\n        '),
                                                               ('emit',
                                                                ['record'],
                                                                '\n        Emit a record.\n\n        Append the record. If shouldFlush() tells us to, call flush() to process\n        the buffer.\n        '),
                                                               ('flush',
                                                                [],
                                                                '\n        Override to implement custom flushing behaviour.\n\n        This version just zaps the buffer to empty.\n        '),
                                                               ('close',
                                                                [],
                                                                "\n        Close the handler.\n\n        This version just flushes and chains to the parent class' close().\n        ")],
                                                   'properties': ['capacity', 'buffer']},
             'logging.handlers.DatagramHandler': {'bases': ['logging.handlers.SocketHandler'],
                                                  'constructor': ['host', 'port'],
                                                  'docstring': "\n    A handler class which writes logging records, in pickle format, to\n    a datagram socket.  The pickle which is sent is that of the LogRecord's\n    attribute dictionary (__dict__), so that the receiver does not need to\n    have the logging module installed in order to process the logging event.\n\n    To unpickle the record at the receiving end into a LogRecord, use the\n    makeLogRecord function.\n\n    ",
                                                  'methods': [('makeSocket',
                                                               [],
                                                               '\n        The factory method of SocketHandler is here overridden to create\n        a UDP socket (SOCK_DGRAM).\n        '),
                                                              ('send',
                                                               ['s'],
                                                               '\n        Send a pickled string to a socket.\n\n        This function no longer allows for partial sends which can happen\n        when the network is busy - UDP does not guarantee delivery and\n        can deliver packets out of sequence.\n        ')],
                                                  'properties': ['closeOnError']},
             'logging.handlers.HTTPHandler': {'bases': ['logging.Handler'],
                                              'constructor': ['host', 'url', "method='GET'"],
                                              'docstring': '\n    A class which sends records to a Web server, using either GET or\n    POST semantics.\n    ',
                                              'methods': [('mapLogRecord',
                                                           ['record'],
                                                           '\n        Default implementation of mapping the log record into a dict\n        that is sent as the CGI data. Overwrite in your class.\n        Contributed by Franz  Glasner.\n        '),
                                                          ('emit',
                                                           ['record'],
                                                           '\n        Emit a record.\n\n        Send the record to the Web server as an URL-encoded dictionary\n        ')],
                                              'properties': ['host', 'url', 'method']},
             'logging.handlers.MemoryHandler': {'bases': ['logging.handlers.BufferingHandler'],
                                                'constructor': ['capacity',
                                                                'flushLevel=logging.ERROR',
                                                                'target=None'],
                                                'docstring': '\n    A handler class which buffers logging records in memory, periodically\n    flushing them to a target handler. Flushing occurs whenever the buffer\n    is full, or when an event of a certain severity or greater is seen.\n    ',
                                                'methods': [('shouldFlush',
                                                             ['record'],
                                                             '\n        Check for buffer full or a record at the flushLevel or higher.\n        '),
                                                            ('setTarget',
                                                             ['target'],
                                                             '\n        Set the target handler for this handler.\n        '),
                                                            ('flush',
                                                             [],
                                                             '\n        For a MemoryHandler, flushing means just sending the buffered\n        records to the target, if there is one. Override if you want\n        different behaviour.\n        '),
                                                            ('close',
                                                             [],
                                                             '\n        Flush, set the target to None and lose the buffer.\n        ')],
                                                'properties': ['flushLevel', 'target', 'buffer']},
             'logging.handlers.NTEventLogHandler': {'bases': ['logging.Handler'],
                                                    'constructor': ['appname',
                                                                    'dllname=None',
                                                                    "logtype='Application'"],
                                                    'docstring': '\n    A handler class which sends events to the NT Event Log. Adds a\n    registry entry for the specified application name. If no dllname is\n    provided, win32service.pyd (which contains some basic message\n    placeholders) is used. Note that use of these placeholders will make\n    your event logs big, as the entire message source is held in the log.\n    If you want slimmer logs, you have to pass in the name of your own DLL\n    which contains the message definitions you want to use in the event log.\n    ',
                                                    'methods': [('getMessageID',
                                                                 ['record'],
                                                                 '\n        Return the message ID for the event record. If you are using your\n        own messages, you could do this by having the msg passed to the\n        logger being an ID rather than a formatting string. Then, in here,\n        you could use a dictionary lookup to get the message ID. This\n        version returns 1, which is the base message ID in win32service.pyd.\n        '),
                                                                ('getEventCategory',
                                                                 ['record'],
                                                                 '\n        Return the event category for the record.\n\n        Override this if you want to specify your own categories. This version\n        returns 0.\n        '),
                                                                ('getEventType',
                                                                 ['record'],
                                                                 "\n        Return the event type for the record.\n\n        Override this if you want to specify your own types. This version does\n        a mapping using the handler's typemap attribute, which is set up in\n        __init__() to a dictionary which contains mappings for DEBUG, INFO,\n        WARNING, ERROR and CRITICAL. If you are using your own levels you will\n        either need to override this method or place a suitable dictionary in\n        the handler's typemap attribute.\n        "),
                                                                ('emit',
                                                                 ['record'],
                                                                 '\n        Emit a record.\n\n        Determine the message ID, event category and event type. Then\n        log the message in the NT event log.\n        '),
                                                                ('close',
                                                                 [],
                                                                 '\n        Clean up this handler.\n\n        You can remove the application name from the registry as a\n        source of event log entries. However, if you do this, you will\n        not be able to see the events as you intended in the Event Log\n        Viewer - it needs to be able to access the registry to get the\n        DLL name.\n        ')],
                                                    'properties': ['appname',
                                                                   '_welu',
                                                                   'dllname',
                                                                   'logtype',
                                                                   'deftype',
                                                                   'typemap']},
             'logging.handlers.RotatingFileHandler': {'bases': ['logging.handlers.BaseRotatingHandler'],
                                                      'constructor': ['filename',
                                                                      "mode='a'",
                                                                      'maxBytes=0',
                                                                      'backupCount=0',
                                                                      'encoding=None'],
                                                      'docstring': '\n    Handler for logging to a set of files, which switches from one file\n    to the next when the current file reaches a certain size.\n    ',
                                                      'methods': [('doRollover',
                                                                   [],
                                                                   '\n        Do a rollover, as described in __init__().\n        '),
                                                                  ('shouldRollover',
                                                                   ['record'],
                                                                   '\n        Determine if rollover should occur.\n\n        Basically, see if the supplied record would cause the file to exceed\n        the size limit we have.\n        ')],
                                                      'properties': ['maxBytes',
                                                                     'backupCount',
                                                                     'stream']},
             'logging.handlers.SMTPHandler': {'bases': ['logging.Handler'],
                                              'constructor': ['mailhost',
                                                              'fromaddr',
                                                              'toaddrs',
                                                              'subject'],
                                              'docstring': '\n    A handler class which sends an SMTP email for each logging event.\n    ',
                                              'methods': [('getSubject',
                                                           ['record'],
                                                           '\n        Determine the subject for the email.\n\n        If you want to specify a subject line which is record-dependent,\n        override this method.\n        '),
                                                          ('date_time',
                                                           [],
                                                           '\n        Return the current date and time formatted for a MIME header.\n        Needed for Python 1.5.2 (no email package available)\n        '),
                                                          ('emit',
                                                           ['record'],
                                                           '\n        Emit a record.\n\n        Format the record and send it to the specified addressees.\n        ')],
                                              'properties': ['mailhost',
                                                             'mailport',
                                                             'fromaddr',
                                                             'toaddrs',
                                                             'subject',
                                                             'weekdayname',
                                                             'monthname']},
             'logging.handlers.SocketHandler': {'bases': ['logging.Handler'],
                                                'constructor': ['host', 'port'],
                                                'docstring': "\n    A handler class which writes logging records, in pickle format, to\n    a streaming socket. The socket is kept open across logging calls.\n    If the peer resets it, an attempt is made to reconnect on the next call.\n    The pickle which is sent is that of the LogRecord's attribute dictionary\n    (__dict__), so that the receiver does not need to have the logging module\n    installed in order to process the logging event.\n\n    To unpickle the record at the receiving end into a LogRecord, use the\n    makeLogRecord function.\n    ",
                                                'methods': [('makeSocket',
                                                             [],
                                                             '\n        A factory method which allows subclasses to define the precise\n        type of socket they want.\n        '),
                                                            ('createSocket',
                                                             [],
                                                             '\n        Try to create a socket, using an exponential backoff with\n        a max retry time. Thanks to Robert Olson for the original patch\n        (SF #815911) which has been slightly refactored.\n        '),
                                                            ('send',
                                                             ['s'],
                                                             '\n        Send a pickled string to the socket.\n\n        This function allows for partial sends which can happen when the\n        network is busy.\n        '),
                                                            ('makePickle',
                                                             ['record'],
                                                             '\n        Pickles the record in binary format with a length prefix, and\n        returns it ready for transmission across the socket.\n        '),
                                                            ('handleError',
                                                             ['record'],
                                                             '\n        Handle an error during logging.\n\n        An error has occurred during logging. Most likely cause -\n        connection lost. Close the socket so that we can retry on the\n        next event.\n        '),
                                                            ('emit',
                                                             ['record'],
                                                             '\n        Emit a record.\n\n        Pickles the record and writes it to the socket in binary format.\n        If there is an error with the socket, silently drop the packet.\n        If there was a problem with the socket, re-establishes the\n        socket.\n        '),
                                                            ('close',
                                                             [],
                                                             '\n        Closes the socket.\n        ')],
                                                'properties': ['host',
                                                               'port',
                                                               'sock',
                                                               'closeOnError',
                                                               'retryTime',
                                                               'retryStart',
                                                               'retryMax',
                                                               'retryFactor',
                                                               'retryPeriod']},
             'logging.handlers.SysLogHandler': {'bases': ['logging.Handler'],
                                                'constructor': ["address=('localhost', SYSLOG_UDP_PORT)",
                                                                'facility=LOG_USER'],
                                                'docstring': "\n    A handler class which sends formatted logging records to a syslog\n    server. Based on Sam Rushing's syslog module:\n    http://www.nightmare.com/squirl/python-ext/misc/syslog.py\n    Contributed by Nicolas Untz (after which minor refactoring changes\n    have been made).\n    ",
                                                'methods': [('_connect_unixsocket',
                                                             ['address'],
                                                             ''),
                                                            ('encodePriority',
                                                             ['facility', 'priority'],
                                                             '\n        Encode the facility and priority. You can pass in strings or\n        integers - if strings are passed, the facility_names and\n        priority_names mapping dictionaries are used to convert them to\n        integers.\n        '),
                                                            ('close',
                                                             [],
                                                             '\n        Closes the socket.\n        '),
                                                            ('mapPriority',
                                                             ['levelName'],
                                                             "\n        Map a logging level name to a key in the priority_names map.\n        This is useful in two scenarios: when custom levels are being\n        used, and in the case where you can't do a straightforward\n        mapping by lowercasing the logging level name because of locale-\n        specific issues (see SF #1524081).\n        "),
                                                            ('emit',
                                                             ['record'],
                                                             '\n        Emit a record.\n\n        The record is formatted, and then sent to the syslog server. If\n        exception information is present, it is NOT sent to the server.\n        ')],
                                                'properties': ['LOG_EMERG',
                                                               'LOG_ALERT',
                                                               'LOG_CRIT',
                                                               'LOG_ERR',
                                                               'LOG_WARNING',
                                                               'LOG_NOTICE',
                                                               'LOG_INFO',
                                                               'LOG_DEBUG',
                                                               'LOG_KERN',
                                                               'LOG_USER',
                                                               'LOG_MAIL',
                                                               'LOG_DAEMON',
                                                               'LOG_AUTH',
                                                               'LOG_SYSLOG',
                                                               'LOG_LPR',
                                                               'LOG_NEWS',
                                                               'LOG_UUCP',
                                                               'LOG_CRON',
                                                               'LOG_AUTHPRIV',
                                                               'LOG_LOCAL0',
                                                               'LOG_LOCAL1',
                                                               'LOG_LOCAL2',
                                                               'LOG_LOCAL3',
                                                               'LOG_LOCAL4',
                                                               'LOG_LOCAL5',
                                                               'LOG_LOCAL6',
                                                               'LOG_LOCAL7',
                                                               'priority_names',
                                                               'facility_names',
                                                               'priority_map',
                                                               'address',
                                                               'facility',
                                                               'unixsocket',
                                                               'socket',
                                                               'formatter',
                                                               'log_format_string']},
             'logging.handlers.TimedRotatingFileHandler': {'bases': ['logging.handlers.BaseRotatingHandler'],
                                                           'constructor': ['filename',
                                                                           "when='h'",
                                                                           'interval=1',
                                                                           'backupCount=0',
                                                                           'encoding=None'],
                                                           'docstring': '\n    Handler for logging to a file, rotating the log file at certain timed\n    intervals.\n\n    If backupCount is > 0, when rollover is done, no more than backupCount\n    files are kept - the oldest ones are deleted.\n    ',
                                                           'methods': [('shouldRollover',
                                                                        ['record'],
                                                                        '\n        Determine if rollover should occur\n\n        record is not used, as we are just comparing times, but it is needed so\n        the method siguratures are the same\n        '),
                                                                       ('doRollover',
                                                                        [],
                                                                        '\n        do a rollover; in this case, a date/time stamp is appended to the filename\n        when the rollover happens.  However, you want the file to be named for the\n        start of the interval, not the current time.  If there is a backup count,\n        then we have to get a list of matching filenames, sort them and remove\n        the one with the oldest suffix.\n        ')],
                                                           'properties': ['when',
                                                                          'backupCount',
                                                                          'interval',
                                                                          'suffix',
                                                                          'dayOfWeek',
                                                                          'rolloverAt',
                                                                          'stream']},
             'macpath.norm_error': {'bases': ['Exception'],
                                    'constructor': [],
                                    'docstring': 'Path cannot be normalized',
                                    'methods': [],
                                    'properties': []},
             'mailbox.Babyl': {'bases': ['mailbox._singlefileMailbox'],
                               'constructor': ['path', 'factory=None', 'create=True'],
                               'docstring': 'An Rmail-style Babyl mailbox.',
                               'methods': [('add',
                                            ['message'],
                                            'Add message and return assigned key.'),
                                           ('remove',
                                            ['key'],
                                            "Remove the keyed message; raise KeyError if it doesn't exist."),
                                           ('__setitem__',
                                            ['key', 'message'],
                                            "Replace the keyed message; raise KeyError if it doesn't exist."),
                                           ('get_message',
                                            ['key'],
                                            'Return a Message representation or raise a KeyError.'),
                                           ('get_string',
                                            ['key'],
                                            'Return a string representation or raise a KeyError.'),
                                           ('get_file',
                                            ['key'],
                                            'Return a file-like representation or raise a KeyError.'),
                                           ('get_labels',
                                            [],
                                            'Return a list of user-defined labels in the mailbox.'),
                                           ('_generate_toc',
                                            [],
                                            'Generate key-to-(start, stop) table of contents.'),
                                           ('_pre_mailbox_hook',
                                            ['f'],
                                            'Called before writing the mailbox to file f.'),
                                           ('_pre_message_hook',
                                            ['f'],
                                            'Called before writing each message to file f.'),
                                           ('_post_message_hook',
                                            ['f'],
                                            'Called after writing each message to file f.'),
                                           ('_install_message',
                                            ['message'],
                                            'Write message contents and return (start, stop).')],
                               'properties': ['_special_labels', '_labels', '_toc', '_next_key']},
             'mailbox.BabylMailbox': {'bases': ['mailbox._Mailbox'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('_search_start', [], ''),
                                                  ('_search_end', [], '')],
                                      'properties': []},
             'mailbox.BabylMessage': {'bases': ['mailbox.Message'],
                                      'constructor': ['message=None'],
                                      'docstring': 'Message with Babyl-specific properties.',
                                      'methods': [('get_labels',
                                                   [],
                                                   'Return a list of labels on the message.'),
                                                  ('set_labels',
                                                   ['labels'],
                                                   'Set the list of labels on the message.'),
                                                  ('add_label',
                                                   ['label'],
                                                   'Add label to list of labels on the message.'),
                                                  ('remove_label',
                                                   ['label'],
                                                   'Remove label from the list of labels on the message.'),
                                                  ('get_visible',
                                                   [],
                                                   'Return a Message representation of visible headers.'),
                                                  ('set_visible',
                                                   ['visible'],
                                                   'Set the Message representation of visible headers.'),
                                                  ('update_visible',
                                                   [],
                                                   'Update and/or sensibly generate a set of visible headers.'),
                                                  ('_explain_to',
                                                   ['message'],
                                                   'Copy Babyl-specific state to message insofar as possible.')],
                                      'properties': ['_labels', '_visible']},
             'mailbox.Error': {'bases': ['Exception'],
                               'constructor': [],
                               'docstring': 'Raised for module-specific errors.',
                               'methods': [],
                               'properties': []},
             'mailbox.ExternalClashError': {'bases': ['mailbox.Error'],
                                            'constructor': [],
                                            'docstring': 'Another process caused an action to fail.',
                                            'methods': [],
                                            'properties': []},
             'mailbox.FormatError': {'bases': ['mailbox.Error'],
                                     'constructor': [],
                                     'docstring': 'A file appears to have an invalid format.',
                                     'methods': [],
                                     'properties': []},
             'mailbox.MH': {'bases': ['mailbox.Mailbox'],
                            'constructor': ['path', 'factory=None', 'create=True'],
                            'docstring': 'An MH mailbox.',
                            'methods': [('add',
                                         ['message'],
                                         'Add message and return assigned key.'),
                                        ('remove',
                                         ['key'],
                                         "Remove the keyed message; raise KeyError if it doesn't exist."),
                                        ('__setitem__',
                                         ['key', 'message'],
                                         "Replace the keyed message; raise KeyError if it doesn't exist."),
                                        ('get_message',
                                         ['key'],
                                         'Return a Message representation or raise a KeyError.'),
                                        ('get_string',
                                         ['key'],
                                         'Return a string representation or raise a KeyError.'),
                                        ('get_file',
                                         ['key'],
                                         'Return a file-like representation or raise a KeyError.'),
                                        ('iterkeys', [], 'Return an iterator over keys.'),
                                        ('has_key',
                                         ['key'],
                                         'Return True if the keyed message exists, False otherwise.'),
                                        ('__len__',
                                         [],
                                         'Return a count of messages in the mailbox.'),
                                        ('lock', [], 'Lock the mailbox.'),
                                        ('unlock', [], 'Unlock the mailbox if it is locked.'),
                                        ('flush', [], 'Write any pending changes to the disk.'),
                                        ('close', [], 'Flush and close the mailbox.'),
                                        ('list_folders', [], 'Return a list of folder names.'),
                                        ('get_folder',
                                         ['folder'],
                                         'Return an MH instance for the named folder.'),
                                        ('add_folder',
                                         ['folder'],
                                         'Create a folder and return an MH instance representing it.'),
                                        ('remove_folder',
                                         ['folder'],
                                         'Delete the named folder, which must be empty.'),
                                        ('get_sequences',
                                         [],
                                         'Return a name-to-key-list dictionary to define each sequence.'),
                                        ('set_sequences',
                                         ['sequences'],
                                         'Set sequences using the given name-to-key-list dictionary.'),
                                        ('pack',
                                         [],
                                         'Re-name messages to eliminate numbering gaps. Invalidates keys.'),
                                        ('_dump_sequences',
                                         ['message', 'key'],
                                         'Inspect a new MHMessage and update sequences appropriately.')],
                            'properties': ['_locked', '_file', '_next_key']},
             'mailbox.MHMailbox': {'bases': [],
                                   'constructor': ['dirname', 'factory=rfc822.Message'],
                                   'docstring': '',
                                   'methods': [('__iter__', [], ''), ('next', [], '')],
                                   'properties': ['dirname', 'boxes', 'factory']},
             'mailbox.MHMessage': {'bases': ['mailbox.Message'],
                                   'constructor': ['message=None'],
                                   'docstring': 'Message with MH-specific properties.',
                                   'methods': [('get_sequences',
                                                [],
                                                'Return a list of sequences that include the message.'),
                                               ('set_sequences',
                                                ['sequences'],
                                                'Set the list of sequences that include the message.'),
                                               ('add_sequence',
                                                ['sequence'],
                                                'Add sequence to list of sequences including the message.'),
                                               ('remove_sequence',
                                                ['sequence'],
                                                'Remove sequence from the list of sequences including the message.'),
                                               ('_explain_to',
                                                ['message'],
                                                'Copy MH-specific state to message insofar as possible.')],
                                   'properties': ['_sequences']},
             'mailbox.MMDF': {'bases': ['mailbox._mboxMMDF'],
                              'constructor': ['path', 'factory=None', 'create=True'],
                              'docstring': 'An MMDF mailbox.',
                              'methods': [('_pre_message_hook',
                                           ['f'],
                                           'Called before writing each message to file f.'),
                                          ('_post_message_hook',
                                           ['f'],
                                           'Called after writing each message to file f.'),
                                          ('_generate_toc',
                                           [],
                                           'Generate key-to-(start, stop) table of contents.')],
                              'properties': ['_message_factory', '_toc', '_next_key']},
             'mailbox.MMDFMessage': {'bases': ['mailbox._mboxMMDFMessage'],
                                     'constructor': [],
                                     'docstring': 'Message with MMDF-specific properties.',
                                     'methods': [],
                                     'properties': []},
             'mailbox.Mailbox': {'bases': [],
                                 'constructor': ['path', 'factory=None', 'create=True'],
                                 'docstring': 'A group of messages in a particular place.',
                                 'methods': [('add',
                                              ['message'],
                                              'Add message and return assigned key.'),
                                             ('remove',
                                              ['key'],
                                              "Remove the keyed message; raise KeyError if it doesn't exist."),
                                             ('__delitem__', ['key'], ''),
                                             ('discard',
                                              ['key'],
                                              'If the keyed message exists, remove it.'),
                                             ('__setitem__',
                                              ['key', 'message'],
                                              "Replace the keyed message; raise KeyError if it doesn't exist."),
                                             ('get',
                                              ['key', 'default=None'],
                                              "Return the keyed message, or default if it doesn't exist."),
                                             ('__getitem__',
                                              ['key'],
                                              "Return the keyed message; raise KeyError if it doesn't exist."),
                                             ('get_message',
                                              ['key'],
                                              'Return a Message representation or raise a KeyError.'),
                                             ('get_string',
                                              ['key'],
                                              'Return a string representation or raise a KeyError.'),
                                             ('get_file',
                                              ['key'],
                                              'Return a file-like representation or raise a KeyError.'),
                                             ('iterkeys', [], 'Return an iterator over keys.'),
                                             ('keys', [], 'Return a list of keys.'),
                                             ('itervalues',
                                              [],
                                              'Return an iterator over all messages.'),
                                             ('__iter__', [], ''),
                                             ('values',
                                              [],
                                              'Return a list of messages. Memory intensive.'),
                                             ('iteritems',
                                              [],
                                              'Return an iterator over (key, message) tuples.'),
                                             ('items',
                                              [],
                                              'Return a list of (key, message) tuples. Memory intensive.'),
                                             ('has_key',
                                              ['key'],
                                              'Return True if the keyed message exists, False otherwise.'),
                                             ('__contains__', ['key'], ''),
                                             ('__len__',
                                              [],
                                              'Return a count of messages in the mailbox.'),
                                             ('clear', [], 'Delete all messages.'),
                                             ('pop',
                                              ['key', 'default=None'],
                                              'Delete the keyed message and return it, or default.'),
                                             ('popitem',
                                              [],
                                              'Delete an arbitrary (key, message) pair and return it.'),
                                             ('update',
                                              ['arg=None'],
                                              'Change the messages that correspond to certain keys.'),
                                             ('flush',
                                              [],
                                              'Write any pending changes to the disk.'),
                                             ('lock', [], 'Lock the mailbox.'),
                                             ('unlock',
                                              [],
                                              'Unlock the mailbox if it is locked.'),
                                             ('close', [], 'Flush and close the mailbox.'),
                                             ('_dump_message',
                                              ['message', 'target', 'mangle_from_=False'],
                                              'Dump message contents to target file.')],
                                 'properties': ['_path', '_factory']},
             'mailbox.Maildir': {'bases': ['mailbox.Mailbox'],
                                 'constructor': ['dirname',
                                                 'factory=rfc822.Message',
                                                 'create=True'],
                                 'docstring': 'A qmail-style Maildir mailbox.',
                                 'methods': [('add',
                                              ['message'],
                                              'Add message and return assigned key.'),
                                             ('remove',
                                              ['key'],
                                              "Remove the keyed message; raise KeyError if it doesn't exist."),
                                             ('discard',
                                              ['key'],
                                              'If the keyed message exists, remove it.'),
                                             ('__setitem__',
                                              ['key', 'message'],
                                              "Replace the keyed message; raise KeyError if it doesn't exist."),
                                             ('get_message',
                                              ['key'],
                                              'Return a Message representation or raise a KeyError.'),
                                             ('get_string',
                                              ['key'],
                                              'Return a string representation or raise a KeyError.'),
                                             ('get_file',
                                              ['key'],
                                              'Return a file-like representation or raise a KeyError.'),
                                             ('iterkeys', [], 'Return an iterator over keys.'),
                                             ('has_key',
                                              ['key'],
                                              'Return True if the keyed message exists, False otherwise.'),
                                             ('__len__',
                                              [],
                                              'Return a count of messages in the mailbox.'),
                                             ('flush',
                                              [],
                                              'Write any pending changes to disk.'),
                                             ('lock', [], 'Lock the mailbox.'),
                                             ('unlock',
                                              [],
                                              'Unlock the mailbox if it is locked.'),
                                             ('close', [], 'Flush and close the mailbox.'),
                                             ('list_folders',
                                              [],
                                              'Return a list of folder names.'),
                                             ('get_folder',
                                              ['folder'],
                                              'Return a Maildir instance for the named folder.'),
                                             ('add_folder',
                                              ['folder'],
                                              'Create a folder and return a Maildir instance representing it.'),
                                             ('remove_folder',
                                              ['folder'],
                                              'Delete the named folder, which must be empty.'),
                                             ('clean', [], 'Delete old files in "tmp".'),
                                             ('_create_tmp',
                                              [],
                                              'Create a file in the tmp subdirectory and open and return it.'),
                                             ('_refresh',
                                              [],
                                              'Update table of contents mapping.'),
                                             ('_lookup',
                                              ['key'],
                                              'Use TOC to return subpath for given key, or raise a KeyError.'),
                                             ('next',
                                              [],
                                              'Return the next message in a one-time iteration.')],
                                 'properties': ['colon', '_toc', '_count', '_onetime_keys']},
             'mailbox.MaildirMessage': {'bases': ['mailbox.Message'],
                                        'constructor': ['message=None'],
                                        'docstring': 'Message with Maildir-specific properties.',
                                        'methods': [('get_subdir',
                                                     [],
                                                     "Return 'new' or 'cur'."),
                                                    ('set_subdir',
                                                     ['subdir'],
                                                     "Set subdir to 'new' or 'cur'."),
                                                    ('get_flags',
                                                     [],
                                                     'Return as a string the flags that are set.'),
                                                    ('set_flags',
                                                     ['flags'],
                                                     'Set the given flags and unset all others.'),
                                                    ('add_flag',
                                                     ['flag'],
                                                     'Set the given flag(s) without changing others.'),
                                                    ('remove_flag',
                                                     ['flag'],
                                                     'Unset the given string flag(s) without changing others.'),
                                                    ('get_date',
                                                     [],
                                                     'Return delivery date of message, in seconds since the epoch.'),
                                                    ('set_date',
                                                     ['date'],
                                                     'Set delivery date of message, in seconds since the epoch.'),
                                                    ('get_info',
                                                     [],
                                                     'Get the message\'s "info" as a string.'),
                                                    ('set_info',
                                                     ['info'],
                                                     'Set the message\'s "info" string.'),
                                                    ('_explain_to',
                                                     ['message'],
                                                     'Copy Maildir-specific state to message insofar as possible.')],
                                        'properties': ['_subdir', '_info', '_date']},
             'mailbox.Message': {'bases': ['email.Message.Message'],
                                 'constructor': ['message=None'],
                                 'docstring': 'Message with mailbox-format-specific properties.',
                                 'methods': [('_become_message',
                                              ['message'],
                                              'Assume the non-format-specific state of message.'),
                                             ('_explain_to',
                                              ['message'],
                                              'Copy format-specific state to message insofar as possible.')],
                                 'properties': []},
             'mailbox.MmdfMailbox': {'bases': ['mailbox._Mailbox'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('_search_start', [], ''),
                                                 ('_search_end', [], '')],
                                     'properties': []},
             'mailbox.NoSuchMailboxError': {'bases': ['mailbox.Error'],
                                            'constructor': [],
                                            'docstring': "The specified mailbox does not exist and won't be created.",
                                            'methods': [],
                                            'properties': []},
             'mailbox.NotEmptyError': {'bases': ['mailbox.Error'],
                                       'constructor': [],
                                       'docstring': 'The specified mailbox is not empty and deletion was requested.',
                                       'methods': [],
                                       'properties': []},
             'mailbox.PortableUnixMailbox': {'bases': ['mailbox.UnixMailbox'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['_isrealfromline']},
             'mailbox.UnixMailbox': {'bases': ['mailbox._Mailbox'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('_search_start', [], ''),
                                                 ('_search_end', [], ''),
                                                 ('_strict_isrealfromline', ['line'], ''),
                                                 ('_portable_isrealfromline', ['line'], '')],
                                     'properties': ['_fromlinepattern',
                                                    '_regexp',
                                                    '_isrealfromline']},
             'mailbox._Mailbox': {'bases': [],
                                  'constructor': ['fp', 'factory=rfc822.Message'],
                                  'docstring': '',
                                  'methods': [('__iter__', [], ''), ('next', [], '')],
                                  'properties': ['fp', 'seekp', 'factory']},
             'mailbox._PartialFile': {'bases': ['mailbox._ProxyFile'],
                                      'constructor': ['f', 'start=None', 'stop=None'],
                                      'docstring': 'A read-only wrapper of part of a file.',
                                      'methods': [('tell',
                                                   [],
                                                   'Return the position with respect to start.'),
                                                  ('seek',
                                                   ['offset', 'whence=0'],
                                                   'Change position, possibly with respect to start or stop.'),
                                                  ('_read',
                                                   ['size', 'read_method'],
                                                   'Read size bytes using read_method, honoring start and stop.')],
                                      'properties': ['_start', '_stop', '_pos']},
             'mailbox._ProxyFile': {'bases': [],
                                    'constructor': ['f', 'pos=None'],
                                    'docstring': 'A read-only wrapper of a file.',
                                    'methods': [('read', ['size=None'], 'Read bytes.'),
                                                ('readline', ['size=None'], 'Read a line.'),
                                                ('readlines',
                                                 ['sizehint=None'],
                                                 'Read multiple lines.'),
                                                ('__iter__', [], 'Iterate over lines.'),
                                                ('tell', [], 'Return the position.'),
                                                ('seek',
                                                 ['offset', 'whence=0'],
                                                 'Change position.'),
                                                ('close', [], 'Close the file.'),
                                                ('_read',
                                                 ['size', 'read_method'],
                                                 'Read size bytes using read_method.')],
                                    'properties': ['_file', '_pos']},
             'mailbox._mboxMMDF': {'bases': ['mailbox._singlefileMailbox'],
                                   'constructor': [],
                                   'docstring': 'An mbox or MMDF mailbox.',
                                   'methods': [('get_message',
                                                ['key'],
                                                'Return a Message representation or raise a KeyError.'),
                                               ('get_string',
                                                ['key', 'from_=False'],
                                                'Return a string representation or raise a KeyError.'),
                                               ('get_file',
                                                ['key', 'from_=False'],
                                                'Return a file-like representation or raise a KeyError.'),
                                               ('_install_message',
                                                ['message'],
                                                'Format a message and blindly write to self._file.')],
                                   'properties': ['_mangle_from_']},
             'mailbox._mboxMMDFMessage': {'bases': ['mailbox.Message'],
                                          'constructor': ['message=None'],
                                          'docstring': 'Message with mbox- or MMDF-specific properties.',
                                          'methods': [('get_from',
                                                       [],
                                                       'Return contents of "From " line.'),
                                                      ('set_from',
                                                       ['from_', 'time_=None'],
                                                       'Set "From " line, formatting and appending time_ if specified.'),
                                                      ('get_flags',
                                                       [],
                                                       'Return as a string the flags that are set.'),
                                                      ('set_flags',
                                                       ['flags'],
                                                       'Set the given flags and unset all others.'),
                                                      ('add_flag',
                                                       ['flag'],
                                                       'Set the given flag(s) without changing others.'),
                                                      ('remove_flag',
                                                       ['flag'],
                                                       'Unset the given string flag(s) without changing others.'),
                                                      ('_explain_to',
                                                       ['message'],
                                                       'Copy mbox- or MMDF-specific state to message insofar as possible.')],
                                          'properties': ['_from']},
             'mailbox._singlefileMailbox': {'bases': ['mailbox.Mailbox'],
                                            'constructor': ['path',
                                                            'factory=None',
                                                            'create=True'],
                                            'docstring': 'A single-file mailbox.',
                                            'methods': [('add',
                                                         ['message'],
                                                         'Add message and return assigned key.'),
                                                        ('remove',
                                                         ['key'],
                                                         "Remove the keyed message; raise KeyError if it doesn't exist."),
                                                        ('__setitem__',
                                                         ['key', 'message'],
                                                         "Replace the keyed message; raise KeyError if it doesn't exist."),
                                                        ('iterkeys',
                                                         [],
                                                         'Return an iterator over keys.'),
                                                        ('has_key',
                                                         ['key'],
                                                         'Return True if the keyed message exists, False otherwise.'),
                                                        ('__len__',
                                                         [],
                                                         'Return a count of messages in the mailbox.'),
                                                        ('lock', [], 'Lock the mailbox.'),
                                                        ('unlock',
                                                         [],
                                                         'Unlock the mailbox if it is locked.'),
                                                        ('flush',
                                                         [],
                                                         'Write any pending changes to disk.'),
                                                        ('_pre_mailbox_hook',
                                                         ['f'],
                                                         'Called before writing the mailbox to file f.'),
                                                        ('_pre_message_hook',
                                                         ['f'],
                                                         'Called before writing each message to file f.'),
                                                        ('_post_message_hook',
                                                         ['f'],
                                                         'Called after writing each message to file f.'),
                                                        ('close',
                                                         [],
                                                         'Flush and close the mailbox.'),
                                                        ('_lookup',
                                                         ['key=None'],
                                                         'Return (start, stop) or raise KeyError.'),
                                                        ('_append_message',
                                                         ['message'],
                                                         'Append message to mailbox and return (start, stop) offsets.')],
                                            'properties': ['_file',
                                                           '_toc',
                                                           '_next_key',
                                                           '_pending',
                                                           '_locked']},
             'mailbox.mbox': {'bases': ['mailbox._mboxMMDF'],
                              'constructor': ['path', 'factory=None', 'create=True'],
                              'docstring': 'A classic mbox mailbox.',
                              'methods': [('_pre_message_hook',
                                           ['f'],
                                           'Called before writing each message to file f.'),
                                          ('_generate_toc',
                                           [],
                                           'Generate key-to-(start, stop) table of contents.')],
                              'properties': ['_mangle_from_',
                                             '_message_factory',
                                             '_toc',
                                             '_next_key']},
             'mailbox.mboxMessage': {'bases': ['mailbox._mboxMMDFMessage'],
                                     'constructor': [],
                                     'docstring': 'Message with mbox-specific properties.',
                                     'methods': [],
                                     'properties': []},
             'markupbase.ParserBase': {'bases': [],
                                       'constructor': [],
                                       'docstring': 'Parser base class which provides some common support methods used\n    by the SGML/HTML and XHTML parsers.',
                                       'methods': [('error', ['message'], ''),
                                                   ('reset', [], ''),
                                                   ('getpos',
                                                    [],
                                                    'Return current line number and offset.'),
                                                   ('updatepos', ['i', 'j'], ''),
                                                   ('parse_declaration', ['i'], ''),
                                                   ('parse_marked_section',
                                                    ['i', 'report=1'],
                                                    ''),
                                                   ('parse_comment', ['i', 'report=1'], ''),
                                                   ('_parse_doctype_subset',
                                                    ['i', 'declstartpos'],
                                                    ''),
                                                   ('_parse_doctype_element',
                                                    ['i', 'declstartpos'],
                                                    ''),
                                                   ('_parse_doctype_attlist',
                                                    ['i', 'declstartpos'],
                                                    ''),
                                                   ('_parse_doctype_notation',
                                                    ['i', 'declstartpos'],
                                                    ''),
                                                   ('_parse_doctype_entity',
                                                    ['i', 'declstartpos'],
                                                    ''),
                                                   ('_scan_name', ['i', 'declstartpos'], ''),
                                                   ('unknown_decl', ['data'], '')],
                                       'properties': ['lineno', 'offset', '_decl_otherchars']},
             'mhlib.Error': {'bases': ['Exception'],
                             'constructor': [],
                             'docstring': '',
                             'methods': [],
                             'properties': []},
             'mhlib.Folder': {'bases': [],
                              'constructor': ['mh', 'name'],
                              'docstring': 'Class representing a particular folder.',
                              'methods': [('__repr__', [], 'String representation.'),
                                          ('error', ['*args'], 'Error message handler.'),
                                          ('getfullname',
                                           [],
                                           'Return the full pathname of the folder.'),
                                          ('getsequencesfilename',
                                           [],
                                           "Return the full pathname of the folder's sequences file."),
                                          ('getmessagefilename',
                                           ['n'],
                                           'Return the full pathname of a message in the folder.'),
                                          ('listsubfolders',
                                           [],
                                           'Return list of direct subfolders.'),
                                          ('listallsubfolders',
                                           [],
                                           'Return list of all subfolders.'),
                                          ('listmessages',
                                           [],
                                           'Return the list of messages currently present in the folder.\n        As a side effect, set self.last to the last message (or 0).'),
                                          ('getsequences',
                                           [],
                                           'Return the set of sequences for the folder.'),
                                          ('putsequences',
                                           ['sequences'],
                                           'Write the set of sequences back to the folder.'),
                                          ('getcurrent',
                                           [],
                                           'Return the current message.  Raise Error when there is none.'),
                                          ('setcurrent', ['n'], 'Set the current message.'),
                                          ('parsesequence',
                                           ['seq'],
                                           'Parse an MH sequence specification into a message list.\n        Attempt to mimic mh-sequence(5) as close as possible.\n        Also attempt to mimic observed behavior regarding which\n        conditions cause which error messages.'),
                                          ('_parseindex',
                                           ['seq', 'all'],
                                           'Internal: parse a message number (or cur, first, etc.).'),
                                          ('openmessage',
                                           ['n'],
                                           'Open a message -- returns a Message object.'),
                                          ('removemessages',
                                           ['list'],
                                           'Remove one or more messages -- may raise os.error.'),
                                          ('refilemessages',
                                           ['list', 'tofolder', 'keepsequences=0'],
                                           "Refile one or more messages -- may raise os.error.\n        'tofolder' is an open folder object."),
                                          ('_copysequences',
                                           ['fromfolder', 'refileditems'],
                                           'Helper for refilemessages() to copy sequences.'),
                                          ('movemessage',
                                           ['n', 'tofolder', 'ton'],
                                           'Move one message over a specific destination message,\n        which may or may not already exist.'),
                                          ('copymessage',
                                           ['n', 'tofolder', 'ton'],
                                           'Copy one message over a specific destination message,\n        which may or may not already exist.'),
                                          ('createmessage',
                                           ['n', 'txt'],
                                           'Create a message, with text from the open file txt.'),
                                          ('removefromallsequences',
                                           ['list'],
                                           "Remove one or more messages from all sequences (including last)\n        -- but not from 'cur'!!!"),
                                          ('getlast', [], 'Return the last message number.'),
                                          ('setlast', ['last'], 'Set the last message number.')],
                              'properties': ['mh', 'name', 'last']},
             'mhlib.IntSet': {'bases': [],
                              'constructor': ['data=None', "sep=','", "rng='-'"],
                              'docstring': "Class implementing sets of integers.\n\n    This is an efficient representation for sets consisting of several\n    continuous ranges, e.g. 1-100,200-400,402-1000 is represented\n    internally as a list of three pairs: [(1,100), (200,400),\n    (402,1000)].  The internal representation is always kept normalized.\n\n    The constructor has up to three arguments:\n    - the string used to initialize the set (default ''),\n    - the separator between ranges (default ',')\n    - the separator between begin and end of a range (default '-')\n    The separators must be strings (not regexprs) and should be different.\n\n    The tostring() function yields a string that can be passed to another\n    IntSet constructor; __repr__() is a valid IntSet constructor itself.\n    ",
                              'methods': [('reset', [], ''),
                                          ('__cmp__', ['other'], ''),
                                          ('__hash__', [], ''),
                                          ('__repr__', [], ''),
                                          ('normalize', [], ''),
                                          ('tostring', [], ''),
                                          ('tolist', [], ''),
                                          ('fromlist', ['list'], ''),
                                          ('clone', [], ''),
                                          ('min', [], ''),
                                          ('max', [], ''),
                                          ('contains', ['x'], ''),
                                          ('append', ['x'], ''),
                                          ('addpair', ['xlo', 'xhi'], ''),
                                          ('fromstring', ['data'], '')],
                              'properties': ['pairs', 'sep', 'rng']},
             'mhlib.MH': {'bases': [],
                          'constructor': ['path=None', 'profile=None'],
                          'docstring': 'Class representing a particular collection of folders.\n    Optional constructor arguments are the pathname for the directory\n    containing the collection, and the MH profile to use.\n    If either is omitted or empty a default is used; the default\n    directory is taken from the MH profile if it is specified there.',
                          'methods': [('__repr__', [], 'String representation.'),
                                      ('error',
                                       ['msg', '*args'],
                                       'Routine to print an error.  May be overridden by a derived class.'),
                                      ('getprofile',
                                       ['key'],
                                       'Return a profile entry, None if not found.'),
                                      ('getpath',
                                       [],
                                       "Return the path (the name of the collection's directory)."),
                                      ('getcontext',
                                       [],
                                       'Return the name of the current folder.'),
                                      ('setcontext',
                                       ['context'],
                                       'Set the name of the current folder.'),
                                      ('listfolders',
                                       [],
                                       'Return the names of the top-level folders.'),
                                      ('listsubfolders',
                                       ['name'],
                                       'Return the names of the subfolders in a given folder\n        (prefixed with the given folder name).'),
                                      ('listallfolders',
                                       [],
                                       'Return the names of all folders and subfolders, recursively.'),
                                      ('listallsubfolders',
                                       ['name'],
                                       'Return the names of subfolders in a given folder, recursively.'),
                                      ('openfolder',
                                       ['name'],
                                       'Return a new Folder object for the named folder.'),
                                      ('makefolder',
                                       ['name'],
                                       'Create a new folder (or raise os.error if it cannot be created).'),
                                      ('deletefolder',
                                       ['name'],
                                       'Delete a folder.  This removes files in the folder but not\n        subdirectories.  Raise os.error if deleting the folder itself fails.')],
                          'properties': ['profile', 'path']},
             'mhlib.Message': {'bases': ['mimetools.Message'],
                               'constructor': ['f', 'n', 'fp=None'],
                               'docstring': '',
                               'methods': [('__repr__', [], 'String representation.'),
                                           ('getheadertext',
                                            ['pred=None'],
                                            "Return the message's header text as a string.  If an\n        argument is specified, it is used as a filter predicate to\n        decide which headers to return (its argument is the header\n        name converted to lower case)."),
                                           ('getbodytext',
                                            ['decode=1'],
                                            "Return the message's body text as string.  This undoes a\n        Content-Transfer-Encoding, but does not interpret other MIME\n        features (e.g. multipart messages).  To suppress decoding,\n        pass 0 as an argument."),
                                           ('getbodyparts',
                                            [],
                                            "Only for multipart messages: return the message's body as a\n        list of SubMessage objects.  Each submessage object behaves\n        (almost) as a Message object."),
                                           ('getbody',
                                            [],
                                            'Return body, either a string or a list of messages.')],
                               'properties': ['folder', 'number']},
             'mhlib.SubMessage': {'bases': ['mhlib.Message'],
                                  'constructor': ['f', 'n', 'fp'],
                                  'docstring': '',
                                  'methods': [('__repr__', [], 'String representation.'),
                                              ('getbodytext', ['decode=1'], ''),
                                              ('getbodyparts', [], ''),
                                              ('getbody', [], '')],
                                  'properties': ['body', 'bodyencoded']},
             'mimetools.Message': {'bases': ['rfc822.Message'],
                                   'constructor': ['fp', 'seekable=1'],
                                   'docstring': 'A derived class of rfc822.Message that knows about MIME headers and\n    contains some hooks for decoding encoded and multipart messages.',
                                   'methods': [('parsetype', [], ''),
                                               ('parseplist', [], ''),
                                               ('getplist', [], ''),
                                               ('getparam', ['name'], ''),
                                               ('getparamnames', [], ''),
                                               ('getencoding', [], ''),
                                               ('gettype', [], ''),
                                               ('getmaintype', [], ''),
                                               ('getsubtype', [], '')],
                                   'properties': ['encodingheader',
                                                  'typeheader',
                                                  'plisttext',
                                                  'type',
                                                  'maintype',
                                                  'subtype',
                                                  'plist']},
             'mimetypes.MimeTypes': {'bases': [],
                                     'constructor': ['filenames=()', 'strict=True'],
                                     'docstring': 'MIME-types datastore.\n\n    This datastore can handle information from mime.types-style files\n    and supports basic determination of MIME type from a filename or\n    URL, and can guess a reasonable extension given a MIME type.\n    ',
                                     'methods': [('add_type',
                                                  ['type', 'ext', 'strict=True'],
                                                  'Add a mapping between a type and an extension.\n\n        When the extension is already known, the new\n        type will replace the old one. When the type\n        is already known the extension will be added\n        to the list of known extensions.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        '),
                                                 ('guess_type',
                                                  ['url', 'strict=True'],
                                                  "Guess the type of a file based on its URL.\n\n        Return value is a tuple (type, encoding) where type is None if\n        the type can't be guessed (no or unknown suffix) or a string\n        of the form type/subtype, usable for a MIME Content-type\n        header; and encoding is None for no encoding or the name of\n        the program used to encode (e.g. compress or gzip).  The\n        mappings are table driven.  Encoding suffixes are case\n        sensitive; type suffixes are first tried case sensitive, then\n        case insensitive.\n\n        The suffixes .tgz, .taz and .tz (case sensitive!) are all\n        mapped to '.tar.gz'.  (This is table-driven too, using the\n        dictionary suffix_map.)\n\n        Optional `strict' argument when False adds a bunch of commonly found,\n        but non-standard types.\n        "),
                                                 ('guess_all_extensions',
                                                  ['type', 'strict=True'],
                                                  "Guess the extensions for a file based on its MIME type.\n\n        Return value is a list of strings giving the possible filename\n        extensions, including the leading dot ('.').  The extension is not\n        guaranteed to have been associated with any particular data stream,\n        but would be mapped to the MIME type `type' by guess_type().\n\n        Optional `strict' argument when false adds a bunch of commonly found,\n        but non-standard types.\n        "),
                                                 ('guess_extension',
                                                  ['type', 'strict=True'],
                                                  "Guess the extension for a file based on its MIME type.\n\n        Return value is a string giving a filename extension,\n        including the leading dot ('.').  The extension is not\n        guaranteed to have been associated with any particular data\n        stream, but would be mapped to the MIME type `type' by\n        guess_type().  If no extension can be guessed for `type', None\n        is returned.\n\n        Optional `strict' argument when false adds a bunch of commonly found,\n        but non-standard types.\n        "),
                                                 ('read',
                                                  ['filename', 'strict=True'],
                                                  '\n        Read a single mime.types-format file, specified by pathname.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        '),
                                                 ('readfp',
                                                  ['fp', 'strict=True'],
                                                  '\n        Read a single mime.types-format file.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ')],
                                     'properties': ['encodings_map',
                                                    'suffix_map',
                                                    'types_map',
                                                    'types_map_inv']},
             'mimify.File': {'bases': [],
                             'constructor': ['file', 'boundary'],
                             'docstring': 'A simple fake file object that knows about limited read-ahead and\n    boundaries.  The only supported method is readline().',
                             'methods': [('readline', [], '')],
                             'properties': ['file', 'boundary', 'peek']},
             'mimify.HeaderFile': {'bases': [],
                                   'constructor': ['file'],
                                   'docstring': '',
                                   'methods': [('readline', [], '')],
                                   'properties': ['file', 'peek']},
             'modulefinder.Module': {'bases': [],
                                     'constructor': ['name', 'file=None', 'path=None'],
                                     'docstring': '',
                                     'methods': [('__repr__', [], '')],
                                     'properties': ['__name__',
                                                    '__file__',
                                                    '__path__',
                                                    '__code__',
                                                    'globalnames',
                                                    'starimports']},
             'modulefinder.ModuleFinder': {'bases': [],
                                           'constructor': ['path=None',
                                                           'debug=0',
                                                           'excludes=[]',
                                                           'replace_paths=[]'],
                                           'docstring': '',
                                           'methods': [('msg', ['level', 'str', '*args'], ''),
                                                       ('msgin', ['*args'], ''),
                                                       ('msgout', ['*args'], ''),
                                                       ('run_script', ['pathname'], ''),
                                                       ('load_file', ['pathname'], ''),
                                                       ('import_hook',
                                                        ['name',
                                                         'caller=None',
                                                         'fromlist=None'],
                                                        ''),
                                                       ('determine_parent', ['caller'], ''),
                                                       ('find_head_package',
                                                        ['parent', 'name'],
                                                        ''),
                                                       ('load_tail', ['q', 'tail'], ''),
                                                       ('ensure_fromlist',
                                                        ['m', 'fromlist', 'recursive=0'],
                                                        ''),
                                                       ('find_all_submodules', ['m'], ''),
                                                       ('import_module',
                                                        ['partname', 'fqname', 'parent'],
                                                        ''),
                                                       ('load_module',
                                                        ['fqname',
                                                         'fp',
                                                         'pathname',
                                                         '(suffix, mode, type)'],
                                                        ''),
                                                       ('_add_badmodule',
                                                        ['name', 'caller'],
                                                        ''),
                                                       ('_safe_import_hook',
                                                        ['name', 'caller', 'fromlist'],
                                                        ''),
                                                       ('scan_code', ['co', 'm'], ''),
                                                       ('load_package',
                                                        ['fqname', 'pathname'],
                                                        ''),
                                                       ('add_module', ['fqname'], ''),
                                                       ('find_module',
                                                        ['name', 'path', 'parent=None'],
                                                        ''),
                                                       ('report',
                                                        [],
                                                        'Print a report to stdout, listing the found modules with their\n        paths, as well as modules that are missing, or seem to be missing.\n        '),
                                                       ('any_missing',
                                                        [],
                                                        'Return a list of modules that appear to be missing. Use\n        any_missing_maybe() if you want to know which modules are\n        certain to be missing, and which *may* be missing.\n        '),
                                                       ('any_missing_maybe',
                                                        [],
                                                        'Return two lists, one with modules that are certainly missing\n        and one with modules that *may* be missing. The latter names could\n        either be submodules *or* just global names in the package.\n\n        The reason it can\'t always be determined is that it\'s impossible to\n        tell which names are imported when "from module import *" is done\n        with an extension module, short of actually importing it.\n        '),
                                                       ('replace_paths_in_code', ['co'], '')],
                                           'properties': ['path',
                                                          'modules',
                                                          'badmodules',
                                                          'debug',
                                                          'indent',
                                                          'excludes',
                                                          'replace_paths',
                                                          'processed_paths']},
             'multifile.Error': {'bases': ['Exception'],
                                 'constructor': [],
                                 'docstring': '',
                                 'methods': [],
                                 'properties': []},
             'multifile.MultiFile': {'bases': [],
                                     'constructor': ['fp', 'seekable=1'],
                                     'docstring': '',
                                     'methods': [('tell', [], ''),
                                                 ('seek', ['pos', 'whence=0'], ''),
                                                 ('readline', [], ''),
                                                 ('readlines', [], ''),
                                                 ('read', [], ''),
                                                 ('next', [], ''),
                                                 ('push', ['sep'], ''),
                                                 ('pop', [], ''),
                                                 ('is_data', ['line'], ''),
                                                 ('section_divider', ['str'], ''),
                                                 ('end_marker', ['str'], '')],
                                     'properties': ['seekable',
                                                    'fp',
                                                    'stack',
                                                    'level',
                                                    'last',
                                                    'start',
                                                    'posstack',
                                                    'lastpos']},
             'mutex.mutex': {'bases': [],
                             'constructor': [],
                             'docstring': '',
                             'methods': [('test', [], 'Test the locked bit of the mutex.'),
                                         ('testandset',
                                          [],
                                          'Atomic test-and-set -- grab the lock if it is not set,\n        return True if it succeeded.'),
                                         ('lock',
                                          ['function', 'argument'],
                                          'Lock a mutex, call the function with supplied argument\n        when it is acquired.  If the mutex is already locked, place\n        function and argument in the queue.'),
                                         ('unlock',
                                          [],
                                          'Unlock a mutex.  If the queue is not empty, call the next\n        function with its argument.')],
                             'properties': ['locked', 'queue']},
             'netrc.NetrcParseError': {'bases': ['Exception'],
                                       'constructor': ['msg', 'filename=None', 'lineno=None'],
                                       'docstring': 'Exception raised on syntax errors in the .netrc file.',
                                       'methods': [('__str__', [], '')],
                                       'properties': ['filename', 'lineno', 'msg']},
             'netrc.netrc': {'bases': [],
                             'constructor': ['file=None'],
                             'docstring': '',
                             'methods': [('authenticators',
                                          ['host'],
                                          'Return a (user, account, password) tuple for given host.'),
                                         ('__repr__',
                                          [],
                                          'Dump the class data in the format of a .netrc file.')],
                             'properties': ['hosts', 'macros']},
             'nntplib.NNTP': {'bases': [],
                              'constructor': ['host',
                                              'port=NNTP_PORT',
                                              'user=None',
                                              'password=None',
                                              'readermode=None',
                                              'usenetrc=True'],
                              'docstring': '',
                              'methods': [('getwelcome',
                                           [],
                                           'Get the welcome message from the server\n        (this is read and squirreled away by __init__()).\n        If the response code is 200, posting is allowed;\n        if it 201, posting is not allowed.'),
                                          ('set_debuglevel',
                                           ['level'],
                                           "Set the debugging level.  Argument 'level' means:\n        0: no debugging output (default)\n        1: print commands and responses but not body text etc.\n        2: also print raw lines read and sent before stripping CR/LF"),
                                          ('putline',
                                           ['line'],
                                           'Internal: send one line to the server, appending CRLF.'),
                                          ('putcmd',
                                           ['line'],
                                           'Internal: send one command to the server (through putline()).'),
                                          ('getline',
                                           [],
                                           'Internal: return one line from the server, stripping CRLF.\n        Raise EOFError if the connection is closed.'),
                                          ('getresp',
                                           [],
                                           'Internal: get a response from the server.\n        Raise various errors if the response indicates an error.'),
                                          ('getlongresp',
                                           ['file=None'],
                                           'Internal: get a response plus following text from the server.\n        Raise various errors if the response indicates an error.'),
                                          ('shortcmd',
                                           ['line'],
                                           'Internal: send a command and get the response.'),
                                          ('longcmd',
                                           ['line', 'file=None'],
                                           'Internal: send a command and get the response plus following text.'),
                                          ('newgroups',
                                           ['date', 'time', 'file=None'],
                                           "Process a NEWGROUPS command.  Arguments:\n        - date: string 'yymmdd' indicating the date\n        - time: string 'hhmmss' indicating the time\n        Return:\n        - resp: server response if successful\n        - list: list of newsgroup names"),
                                          ('newnews',
                                           ['group', 'date', 'time', 'file=None'],
                                           "Process a NEWNEWS command.  Arguments:\n        - group: group name or '*'\n        - date: string 'yymmdd' indicating the date\n        - time: string 'hhmmss' indicating the time\n        Return:\n        - resp: server response if successful\n        - list: list of message ids"),
                                          ('list',
                                           ['file=None'],
                                           'Process a LIST command.  Return:\n        - resp: server response if successful\n        - list: list of (group, last, first, flag) (strings)'),
                                          ('description',
                                           ['group'],
                                           "Get a description for a single group.  If more than one\n        group matches ('group' is a pattern), return the first.  If no\n        group matches, return an empty string.\n\n        This elides the response code from the server, since it can\n        only be '215' or '285' (for xgtitle) anyway.  If the response\n        code is needed, use the 'descriptions' method.\n\n        NOTE: This neither checks for a wildcard in 'group' nor does\n        it check whether the group actually exists."),
                                          ('descriptions',
                                           ['group_pattern'],
                                           'Get descriptions for a range of groups.'),
                                          ('group',
                                           ['name'],
                                           'Process a GROUP command.  Argument:\n        - group: the group name\n        Returns:\n        - resp: server response if successful\n        - count: number of articles (string)\n        - first: first article number (string)\n        - last: last article number (string)\n        - name: the group name'),
                                          ('help',
                                           ['file=None'],
                                           'Process a HELP command.  Returns:\n        - resp: server response if successful\n        - list: list of strings'),
                                          ('statparse',
                                           ['resp'],
                                           'Internal: parse the response of a STAT, NEXT or LAST command.'),
                                          ('statcmd',
                                           ['line'],
                                           'Internal: process a STAT, NEXT or LAST command.'),
                                          ('stat',
                                           ['id'],
                                           'Process a STAT command.  Argument:\n        - id: article number or message id\n        Returns:\n        - resp: server response if successful\n        - nr:   the article number\n        - id:   the message id'),
                                          ('next',
                                           [],
                                           'Process a NEXT command.  No arguments.  Return as for STAT.'),
                                          ('last',
                                           [],
                                           'Process a LAST command.  No arguments.  Return as for STAT.'),
                                          ('artcmd',
                                           ['line', 'file=None'],
                                           'Internal: process a HEAD, BODY or ARTICLE command.'),
                                          ('head',
                                           ['id'],
                                           "Process a HEAD command.  Argument:\n        - id: article number or message id\n        Returns:\n        - resp: server response if successful\n        - nr: article number\n        - id: message id\n        - list: the lines of the article's header"),
                                          ('body',
                                           ['id', 'file=None'],
                                           "Process a BODY command.  Argument:\n        - id: article number or message id\n        - file: Filename string or file object to store the article in\n        Returns:\n        - resp: server response if successful\n        - nr: article number\n        - id: message id\n        - list: the lines of the article's body or an empty list\n                if file was used"),
                                          ('article',
                                           ['id'],
                                           'Process an ARTICLE command.  Argument:\n        - id: article number or message id\n        Returns:\n        - resp: server response if successful\n        - nr: article number\n        - id: message id\n        - list: the lines of the article'),
                                          ('slave',
                                           [],
                                           'Process a SLAVE command.  Returns:\n        - resp: server response if successful'),
                                          ('xhdr',
                                           ['hdr', 'str', 'file=None'],
                                           "Process an XHDR command (optional server extension).  Arguments:\n        - hdr: the header type (e.g. 'subject')\n        - str: an article nr, a message id, or a range nr1-nr2\n        Returns:\n        - resp: server response if successful\n        - list: list of (nr, value) strings"),
                                          ('xover',
                                           ['start', 'end', 'file=None'],
                                           'Process an XOVER command (optional server extension) Arguments:\n        - start: start of range\n        - end: end of range\n        Returns:\n        - resp: server response if successful\n        - list: list of (art-nr, subject, poster, date,\n                         id, references, size, lines)'),
                                          ('xgtitle',
                                           ['group', 'file=None'],
                                           'Process an XGTITLE command (optional server extension) Arguments:\n        - group: group name wildcard (i.e. news.*)\n        Returns:\n        - resp: server response if successful\n        - list: list of (name,title) strings'),
                                          ('xpath',
                                           ['id'],
                                           'Process an XPATH command (optional server extension) Arguments:\n        - id: Message id of article\n        Returns:\n        resp: server response if successful\n        path: directory path to article'),
                                          ('date',
                                           [],
                                           'Process the DATE command. Arguments:\n        None\n        Returns:\n        resp: server response if successful\n        date: Date suitable for newnews/newgroups commands etc.\n        time: Time suitable for newnews/newgroups commands etc.'),
                                          ('post',
                                           ['f'],
                                           'Process a POST command.  Arguments:\n        - f: file containing the article\n        Returns:\n        - resp: server response if successful'),
                                          ('ihave',
                                           ['id', 'f'],
                                           'Process an IHAVE command.  Arguments:\n        - id: message-id of the article\n        - f:  file containing the article\n        Returns:\n        - resp: server response if successful\n        Note that if the server refuses the article an exception is raised.'),
                                          ('quit',
                                           [],
                                           'Process a QUIT command and close the socket.  Returns:\n        - resp: server response if successful')],
                              'properties': ['host',
                                             'port',
                                             'sock',
                                             'file',
                                             'debugging',
                                             'welcome',
                                             'debug']},
             'nntplib.NNTPDataError': {'bases': ['nntplib.NNTPError'],
                                       'constructor': [],
                                       'docstring': 'Error in response data',
                                       'methods': [],
                                       'properties': []},
             'nntplib.NNTPError': {'bases': ['Exception'],
                                   'constructor': ['*args'],
                                   'docstring': 'Base class for all nntplib exceptions',
                                   'methods': [],
                                   'properties': ['response']},
             'nntplib.NNTPPermanentError': {'bases': ['nntplib.NNTPError'],
                                            'constructor': [],
                                            'docstring': '5xx errors',
                                            'methods': [],
                                            'properties': []},
             'nntplib.NNTPProtocolError': {'bases': ['nntplib.NNTPError'],
                                           'constructor': [],
                                           'docstring': 'Response does not begin with [1-5]',
                                           'methods': [],
                                           'properties': []},
             'nntplib.NNTPReplyError': {'bases': ['nntplib.NNTPError'],
                                        'constructor': [],
                                        'docstring': 'Unexpected [123]xx reply',
                                        'methods': [],
                                        'properties': []},
             'nntplib.NNTPTemporaryError': {'bases': ['nntplib.NNTPError'],
                                            'constructor': [],
                                            'docstring': '4xx errors',
                                            'methods': [],
                                            'properties': []},
             'optparse.AmbiguousOptionError': {'bases': ['optparse.BadOptionError'],
                                               'constructor': ['opt_str', 'possibilities'],
                                               'docstring': '\n    Raised if an ambiguous option is seen on the command line.\n    ',
                                               'methods': [('__str__', [], '')],
                                               'properties': ['possibilities']},
             'optparse.BadOptionError': {'bases': ['optparse.OptParseError'],
                                         'constructor': ['opt_str'],
                                         'docstring': '\n    Raised if an invalid option is seen on the command line.\n    ',
                                         'methods': [('__str__', [], '')],
                                         'properties': ['opt_str']},
             'optparse.HelpFormatter': {'bases': [],
                                        'constructor': ['indent_increment',
                                                        'max_help_position',
                                                        'width',
                                                        'short_first'],
                                        'docstring': '\n    Abstract base class for formatting option help.  OptionParser\n    instances should use one of the HelpFormatter subclasses for\n    formatting help; by default IndentedHelpFormatter is used.\n\n    Instance attributes:\n      parser : OptionParser\n        the controlling OptionParser instance\n      indent_increment : int\n        the number of columns to indent per nesting level\n      max_help_position : int\n        the maximum starting column for option help text\n      help_position : int\n        the calculated starting column for option help text;\n        initially the same as the maximum\n      width : int\n        total number of columns for output (pass None to constructor for\n        this value to be taken from the $COLUMNS environment variable)\n      level : int\n        current indentation level\n      current_indent : int\n        current indentation level (in columns)\n      help_width : int\n        number of columns available for option help text (calculated)\n      default_tag : str\n        text to replace with each option\'s default value, "%default"\n        by default.  Set to false value to disable default value expansion.\n      option_strings : { Option : str }\n        maps Option instances to the snippet of help text explaining\n        the syntax of that option, e.g. "-h, --help" or\n        "-fFILE, --file=FILE"\n      _short_opt_fmt : str\n        format string controlling how short options with values are\n        printed in help text.  Must be either "%s%s" ("-fFILE") or\n        "%s %s" ("-f FILE"), because those are the two syntaxes that\n        Optik supports.\n      _long_opt_fmt : str\n        similar but for long options; must be either "%s %s" ("--file FILE")\n        or "%s=%s" ("--file=FILE").\n    ',
                                        'methods': [('set_parser', ['parser'], ''),
                                                    ('set_short_opt_delimiter', ['delim'], ''),
                                                    ('set_long_opt_delimiter', ['delim'], ''),
                                                    ('indent', [], ''),
                                                    ('dedent', [], ''),
                                                    ('format_usage', ['usage'], ''),
                                                    ('format_heading', ['heading'], ''),
                                                    ('_format_text',
                                                     ['text'],
                                                     '\n        Format a paragraph of free-form text for inclusion in the\n        help output at the current indentation level.\n        '),
                                                    ('format_description', ['description'], ''),
                                                    ('format_epilog', ['epilog'], ''),
                                                    ('expand_default', ['option'], ''),
                                                    ('format_option', ['option'], ''),
                                                    ('store_option_strings', ['parser'], ''),
                                                    ('format_option_strings',
                                                     ['option'],
                                                     'Return a comma-separated list of option strings & metavariables.')],
                                        'properties': ['NO_DEFAULT_VALUE',
                                                       'parser',
                                                       'indent_increment',
                                                       'help_position',
                                                       'max_help_position',
                                                       'width',
                                                       'current_indent',
                                                       'level',
                                                       'help_width',
                                                       'short_first',
                                                       'default_tag',
                                                       'option_strings',
                                                       '_short_opt_fmt',
                                                       '_long_opt_fmt']},
             'optparse.IndentedHelpFormatter': {'bases': ['optparse.HelpFormatter'],
                                                'constructor': ['indent_increment=2',
                                                                'max_help_position=24',
                                                                'width=None',
                                                                'short_first=1'],
                                                'docstring': 'Format help with indented section bodies.\n    ',
                                                'methods': [('format_usage', ['usage'], ''),
                                                            ('format_heading', ['heading'], '')],
                                                'properties': []},
             'optparse.OptParseError': {'bases': ['Exception'],
                                        'constructor': ['msg'],
                                        'docstring': '',
                                        'methods': [('__str__', [], '')],
                                        'properties': ['msg']},
             'optparse.Option': {'bases': [],
                                 'constructor': ['*opts', '**attrs'],
                                 'docstring': '\n    Instance attributes:\n      _short_opts : [string]\n      _long_opts : [string]\n\n      action : string\n      type : string\n      dest : string\n      default : any\n      nargs : int\n      const : any\n      choices : [string]\n      callback : function\n      callback_args : (any*)\n      callback_kwargs : { string : any }\n      help : string\n      metavar : string\n    ',
                                 'methods': [('_check_opt_strings', ['opts'], ''),
                                             ('_set_opt_strings', ['opts'], ''),
                                             ('_set_attrs', ['attrs'], ''),
                                             ('_check_action', [], ''),
                                             ('_check_type', [], ''),
                                             ('_check_choice', [], ''),
                                             ('_check_dest', [], ''),
                                             ('_check_const', [], ''),
                                             ('_check_nargs', [], ''),
                                             ('_check_callback', [], ''),
                                             ('__str__', [], ''),
                                             ('takes_value', [], ''),
                                             ('get_opt_string', [], ''),
                                             ('check_value', ['opt', 'value'], ''),
                                             ('convert_value', ['opt', 'value'], ''),
                                             ('process',
                                              ['opt', 'value', 'values', 'parser'],
                                              ''),
                                             ('take_action',
                                              ['action',
                                               'dest',
                                               'opt',
                                               'value',
                                               'values',
                                               'parser'],
                                              '')],
                                 'properties': ['ATTRS',
                                                'ACTIONS',
                                                'STORE_ACTIONS',
                                                'TYPED_ACTIONS',
                                                'ALWAYS_TYPED_ACTIONS',
                                                'CONST_ACTIONS',
                                                'TYPES',
                                                'TYPE_CHECKER',
                                                'CHECK_METHODS',
                                                '_short_opts',
                                                '_long_opts',
                                                'action',
                                                'type',
                                                'dest',
                                                'nargs',
                                                '__repr__']},
             'optparse.OptionConflictError': {'bases': ['optparse.OptionError'],
                                              'constructor': [],
                                              'docstring': '\n    Raised if conflicting options are added to an OptionParser.\n    ',
                                              'methods': [],
                                              'properties': []},
             'optparse.OptionContainer': {'bases': [],
                                          'constructor': ['option_class',
                                                          'conflict_handler',
                                                          'description'],
                                          'docstring': '\n    Abstract base class.\n\n    Class attributes:\n      standard_option_list : [Option]\n        list of standard options that will be accepted by all instances\n        of this parser class (intended to be overridden by subclasses).\n\n    Instance attributes:\n      option_list : [Option]\n        the list of Option objects contained by this OptionContainer\n      _short_opt : { string : Option }\n        dictionary mapping short option strings, eg. "-f" or "-X",\n        to the Option instances that implement them.  If an Option\n        has multiple short option strings, it will appears in this\n        dictionary multiple times. [1]\n      _long_opt : { string : Option }\n        dictionary mapping long option strings, eg. "--file" or\n        "--exclude", to the Option instances that implement them.\n        Again, a given Option can occur multiple times in this\n        dictionary. [1]\n      defaults : { string : any }\n        dictionary mapping option destination names to default\n        values for each destination [1]\n\n    [1] These mappings are common to (shared by) all components of the\n        controlling OptionParser, where they are initially created.\n\n    ',
                                          'methods': [('_create_option_mappings', [], ''),
                                                      ('_share_option_mappings',
                                                       ['parser'],
                                                       ''),
                                                      ('set_conflict_handler', ['handler'], ''),
                                                      ('set_description', ['description'], ''),
                                                      ('get_description', [], ''),
                                                      ('destroy',
                                                       [],
                                                       'see OptionParser.destroy().'),
                                                      ('_check_conflict', ['option'], ''),
                                                      ('add_option',
                                                       ['*args', '**kwargs'],
                                                       'add_option(Option)\n           add_option(opt_str, ..., kwarg=val, ...)\n        '),
                                                      ('add_options', ['option_list'], ''),
                                                      ('get_option', ['opt_str'], ''),
                                                      ('has_option', ['opt_str'], ''),
                                                      ('remove_option', ['opt_str'], ''),
                                                      ('format_option_help', ['formatter'], ''),
                                                      ('format_description', ['formatter'], ''),
                                                      ('format_help', ['formatter'], '')],
                                          'properties': ['option_class',
                                                         '_short_opt',
                                                         '_long_opt',
                                                         'defaults',
                                                         'conflict_handler',
                                                         'description']},
             'optparse.OptionError': {'bases': ['optparse.OptParseError'],
                                      'constructor': ['msg', 'option'],
                                      'docstring': '\n    Raised if an Option instance is created with invalid or\n    inconsistent arguments.\n    ',
                                      'methods': [('__str__', [], '')],
                                      'properties': ['msg', 'option_id']},
             'optparse.OptionGroup': {'bases': ['optparse.OptionContainer'],
                                      'constructor': ['parser', 'title', 'description=None'],
                                      'docstring': '',
                                      'methods': [('_create_option_list', [], ''),
                                                  ('set_title', ['title'], ''),
                                                  ('destroy',
                                                   [],
                                                   'see OptionParser.destroy().'),
                                                  ('format_help', ['formatter'], '')],
                                      'properties': ['parser', 'title', 'option_list']},
             'optparse.OptionParser': {'bases': ['optparse.OptionContainer'],
                                       'constructor': ['usage=None',
                                                       'option_list=None',
                                                       'option_class=Option',
                                                       'version=None',
                                                       "conflict_handler='error'",
                                                       'description=None',
                                                       'formatter=None',
                                                       'add_help_option=True',
                                                       'prog=None',
                                                       'epilog=None'],
                                       'docstring': '\n    Class attributes:\n      standard_option_list : [Option]\n        list of standard options that will be accepted by all instances\n        of this parser class (intended to be overridden by subclasses).\n\n    Instance attributes:\n      usage : string\n        a usage string for your program.  Before it is displayed\n        to the user, "%prog" will be expanded to the name of\n        your program (self.prog or os.path.basename(sys.argv[0])).\n      prog : string\n        the name of the current program (to override\n        os.path.basename(sys.argv[0])).\n      epilog : string\n        paragraph of help text to print after option help\n\n      option_groups : [OptionGroup]\n        list of option groups in this parser (option groups are\n        irrelevant for parsing the command-line, but very useful\n        for generating help)\n\n      allow_interspersed_args : bool = true\n        if true, positional arguments may be interspersed with options.\n        Assuming -a and -b each take a single argument, the command-line\n          -ablah foo bar -bboo baz\n        will be interpreted the same as\n          -ablah -bboo -- foo bar baz\n        If this flag were false, that command line would be interpreted as\n          -ablah -- foo bar -bboo baz\n        -- ie. we stop processing options as soon as we see the first\n        non-option argument.  (This is the tradition followed by\n        Python\'s getopt module, Perl\'s Getopt::Std, and other argument-\n        parsing libraries, but it is generally annoying to users.)\n\n      process_default_values : bool = true\n        if true, option default values are processed similarly to option\n        values from the command line: that is, they are passed to the\n        type-checking function for the option\'s type (as long as the\n        default value is a string).  (This really only matters if you\n        have defined custom types; see SF bug #955889.)  Set it to false\n        to restore the behaviour of Optik 1.4.1 and earlier.\n\n      rargs : [string]\n        the argument list currently being parsed.  Only set when\n        parse_args() is active, and continually trimmed down as\n        we consume arguments.  Mainly there for the benefit of\n        callback options.\n      largs : [string]\n        the list of leftover arguments that we have skipped while\n        parsing options.  If allow_interspersed_args is false, this\n        list is always empty.\n      values : Values\n        the set of option values currently being accumulated.  Only\n        set when parse_args() is active.  Also mainly for callbacks.\n\n    Because of the \'rargs\', \'largs\', and \'values\' attributes,\n    OptionParser is not thread-safe.  If, for some perverse reason, you\n    need to parse command-line arguments simultaneously in different\n    threads, use different OptionParser instances.\n\n    ',
                                       'methods': [('destroy',
                                                    [],
                                                    '\n        Declare that you are done with this OptionParser.  This cleans up\n        reference cycles so the OptionParser (and all objects referenced by\n        it) can be garbage-collected promptly.  After calling destroy(), the\n        OptionParser is unusable.\n        '),
                                                   ('_create_option_list', [], ''),
                                                   ('_add_help_option', [], ''),
                                                   ('_add_version_option', [], ''),
                                                   ('_populate_option_list',
                                                    ['option_list', 'add_help=True'],
                                                    ''),
                                                   ('_init_parsing_state', [], ''),
                                                   ('set_usage', ['usage'], ''),
                                                   ('enable_interspersed_args', [], ''),
                                                   ('disable_interspersed_args', [], ''),
                                                   ('set_process_default_values',
                                                    ['process'],
                                                    ''),
                                                   ('set_default', ['dest', 'value'], ''),
                                                   ('set_defaults', ['**kwargs'], ''),
                                                   ('_get_all_options', [], ''),
                                                   ('get_default_values', [], ''),
                                                   ('add_option_group',
                                                    ['*args', '**kwargs'],
                                                    ''),
                                                   ('get_option_group', ['opt_str'], ''),
                                                   ('_get_args', ['args'], ''),
                                                   ('parse_args',
                                                    ['args=None', 'values=None'],
                                                    "\n        parse_args(args : [string] = sys.argv[1:],\n                   values : Values = None)\n        -> (values : Values, args : [string])\n\n        Parse the command-line options found in 'args' (default:\n        sys.argv[1:]).  Any errors result in a call to 'error()', which\n        by default prints the usage message to stderr and calls\n        sys.exit() with an error message.  On success returns a pair\n        (values, args) where 'values' is an Values instance (with all\n        your option values) and 'args' is the list of arguments left\n        over after parsing options.\n        "),
                                                   ('check_values',
                                                    ['values', 'args'],
                                                    '\n        check_values(values : Values, args : [string])\n        -> (values : Values, args : [string])\n\n        Check that the supplied option values and leftover arguments are\n        valid.  Returns the option values and leftover arguments\n        (possibly adjusted, possibly completely new -- whatever you\n        like).  Default implementation just returns the passed-in\n        values; subclasses may override as desired.\n        '),
                                                   ('_process_args',
                                                    ['largs', 'rargs', 'values'],
                                                    "_process_args(largs : [string],\n                         rargs : [string],\n                         values : Values)\n\n        Process command-line arguments and populate 'values', consuming\n        options and arguments from 'rargs'.  If 'allow_interspersed_args' is\n        false, stop at the first non-option argument.  If true, accumulate any\n        interspersed non-option arguments in 'largs'.\n        "),
                                                   ('_match_long_opt',
                                                    ['opt'],
                                                    "_match_long_opt(opt : string) -> string\n\n        Determine which long option string 'opt' matches, ie. which one\n        it is an unambiguous abbrevation for.  Raises BadOptionError if\n        'opt' doesn't unambiguously match any long option string.\n        "),
                                                   ('_process_long_opt',
                                                    ['rargs', 'values'],
                                                    ''),
                                                   ('_process_short_opts',
                                                    ['rargs', 'values'],
                                                    ''),
                                                   ('get_prog_name', [], ''),
                                                   ('expand_prog_name', ['s'], ''),
                                                   ('get_description', [], ''),
                                                   ('exit', ['status=0', 'msg=None'], ''),
                                                   ('error',
                                                    ['msg'],
                                                    "error(msg : string)\n\n        Print a usage message incorporating 'msg' to stderr and exit.\n        If you override this in a subclass, it should not return -- it\n        should either exit or raise an exception.\n        "),
                                                   ('get_usage', [], ''),
                                                   ('print_usage',
                                                    ['file=None'],
                                                    'print_usage(file : file = stdout)\n\n        Print the usage message for the current program (self.usage) to\n        \'file\' (default stdout).  Any occurence of the string "%prog" in\n        self.usage is replaced with the name of the current program\n        (basename of sys.argv[0]).  Does nothing if self.usage is empty\n        or not defined.\n        '),
                                                   ('get_version', [], ''),
                                                   ('print_version',
                                                    ['file=None'],
                                                    'print_version(file : file = stdout)\n\n        Print the version message for this program (self.version) to\n        \'file\' (default stdout).  As with print_usage(), any occurence\n        of "%prog" in self.version is replaced by the current program\'s\n        name.  Does nothing if self.version is empty or undefined.\n        '),
                                                   ('format_option_help',
                                                    ['formatter=None'],
                                                    ''),
                                                   ('format_epilog', ['formatter'], ''),
                                                   ('format_help', ['formatter=None'], ''),
                                                   ('_get_encoding', ['file'], ''),
                                                   ('print_help',
                                                    ['file=None'],
                                                    "print_help(file : file = stdout)\n\n        Print an extended help message, listing all options and any\n        help text provided with them, to 'file' (default stdout).\n        ")],
                                       'properties': ['standard_option_list',
                                                      'prog',
                                                      'version',
                                                      'allow_interspersed_args',
                                                      'process_default_values',
                                                      'formatter',
                                                      'epilog',
                                                      'option_list',
                                                      'option_groups',
                                                      'rargs',
                                                      'largs',
                                                      'values',
                                                      'usage']},
             'optparse.OptionValueError': {'bases': ['optparse.OptParseError'],
                                           'constructor': [],
                                           'docstring': '\n    Raised if an invalid option value is encountered on the command\n    line.\n    ',
                                           'methods': [],
                                           'properties': []},
             'optparse.TitledHelpFormatter': {'bases': ['optparse.HelpFormatter'],
                                              'constructor': ['indent_increment=0',
                                                              'max_help_position=24',
                                                              'width=None',
                                                              'short_first=0'],
                                              'docstring': 'Format help with underlined section headers.\n    ',
                                              'methods': [('format_usage', ['usage'], ''),
                                                          ('format_heading', ['heading'], '')],
                                              'properties': []},
             'optparse.Values': {'bases': [],
                                 'constructor': ['defaults=None'],
                                 'docstring': '',
                                 'methods': [('__str__', [], ''),
                                             ('__cmp__', ['other'], ''),
                                             ('_update_careful',
                                              ['dict'],
                                              '\n        Update the option values from an arbitrary dictionary, but only\n        use keys from dict that already have a corresponding attribute\n        in self.  Any keys in dict without a corresponding attribute\n        are silently ignored.\n        '),
                                             ('_update_loose',
                                              ['dict'],
                                              '\n        Update the option values from an arbitrary dictionary,\n        using all keys from the dictionary regardless of whether\n        they have a corresponding attribute in self or not.\n        '),
                                             ('_update', ['dict', 'mode'], ''),
                                             ('read_module', ['modname', "mode='careful'"], ''),
                                             ('read_file', ['filename', "mode='careful'"], ''),
                                             ('ensure_value', ['attr', 'value'], '')],
                                 'properties': ['__repr__']},
             'os._Environ': {'bases': ['UserDict.IterableUserDict'],
                             'constructor': ['environ'],
                             'docstring': '',
                             'methods': [('__setitem__', ['key', 'item'], ''),
                                         ('update', ['dict=None', '**kwargs'], ''),
                                         ('__delitem__', ['key'], ''),
                                         ('copy', [], '')],
                             'properties': ['data']},
             'pdb.Pdb': {'bases': ['bdb.Bdb', 'cmd.Cmd'],
                         'constructor': ["completekey='tab'", 'stdin=None', 'stdout=None'],
                         'docstring': '',
                         'methods': [('reset', [], ''),
                                     ('forget', [], ''),
                                     ('setup', ['f', 't'], ''),
                                     ('execRcLines', [], ''),
                                     ('user_call',
                                      ['frame', 'argument_list'],
                                      'This method is called when there is the remote possibility\n        that we ever need to stop in this function.'),
                                     ('user_line',
                                      ['frame'],
                                      'This function is called when we stop or break at this line.'),
                                     ('bp_commands',
                                      ['frame'],
                                      ' Call every command that was set for the current active breakpoint (if there is one)\n        Returns True if the normal interaction function must be called, False otherwise '),
                                     ('user_return',
                                      ['frame', 'return_value'],
                                      'This function is called when a return trap is set here.'),
                                     ('user_exception',
                                      ['frame', '(exc_type, exc_value, exc_traceback)'],
                                      'This function is called if an exception occurs,\n        but only if we are to stop at or just below this level.'),
                                     ('interaction', ['frame', 'traceback'], ''),
                                     ('default', ['line'], ''),
                                     ('precmd',
                                      ['line'],
                                      "Handle alias expansion and ';;' separator."),
                                     ('onecmd',
                                      ['line'],
                                      'Interpret the argument as though it had been typed in response\n        to the prompt.\n\n        Checks whether this line is typed at the normal prompt or in\n        a breakpoint command list definition.\n        '),
                                     ('handle_command_def',
                                      ['line'],
                                      ' Handles one command line during command list definition. '),
                                     ('do_commands',
                                      ['arg'],
                                      'Defines a list of commands associated to a breakpoint\n        Those commands will be executed whenever the breakpoint causes the program to stop execution.'),
                                     ('do_break', ['arg', 'temporary=0'], ''),
                                     ('defaultFile', [], 'Produce a reasonable default.'),
                                     ('do_tbreak', ['arg'], ''),
                                     ('lineinfo', ['identifier'], ''),
                                     ('checkline',
                                      ['filename', 'lineno'],
                                      'Check whether specified line seems to be executable.\n\n        Return `lineno` if it is, 0 if not (e.g. a docstring, comment, blank\n        line or EOF). Warning: testing is not comprehensive.\n        '),
                                     ('do_enable', ['arg'], ''),
                                     ('do_disable', ['arg'], ''),
                                     ('do_condition', ['arg'], ''),
                                     ('do_ignore',
                                      ['arg'],
                                      'arg is bp number followed by ignore count.'),
                                     ('do_clear',
                                      ['arg'],
                                      'Three possibilities, tried in this order:\n        clear -> clear all breaks, ask for confirmation\n        clear file:lineno -> clear all breaks at file:lineno\n        clear bpno bpno ... -> clear breakpoints by number'),
                                     ('do_where', ['arg'], ''),
                                     ('do_up', ['arg'], ''),
                                     ('do_down', ['arg'], ''),
                                     ('do_step', ['arg'], ''),
                                     ('do_next', ['arg'], ''),
                                     ('do_return', ['arg'], ''),
                                     ('do_continue', ['arg'], ''),
                                     ('do_jump', ['arg'], ''),
                                     ('do_debug', ['arg'], ''),
                                     ('do_quit', ['arg'], ''),
                                     ('do_EOF', ['arg'], ''),
                                     ('do_args', ['arg'], ''),
                                     ('do_retval', ['arg'], ''),
                                     ('_getval', ['arg'], ''),
                                     ('do_p', ['arg'], ''),
                                     ('do_pp', ['arg'], ''),
                                     ('do_list', ['arg'], ''),
                                     ('do_whatis', ['arg'], ''),
                                     ('do_alias', ['arg'], ''),
                                     ('do_unalias', ['arg'], ''),
                                     ('print_stack_trace', [], ''),
                                     ('print_stack_entry',
                                      ['frame_lineno', 'prompt_prefix=line_prefix'],
                                      ''),
                                     ('help_help', [], ''),
                                     ('help_h', [], ''),
                                     ('help_where', [], ''),
                                     ('help_w', [], ''),
                                     ('help_down', [], ''),
                                     ('help_d', [], ''),
                                     ('help_up', [], ''),
                                     ('help_u', [], ''),
                                     ('help_break', [], ''),
                                     ('help_b', [], ''),
                                     ('help_clear', [], ''),
                                     ('help_cl', [], ''),
                                     ('help_tbreak', [], ''),
                                     ('help_enable', [], ''),
                                     ('help_disable', [], ''),
                                     ('help_ignore', [], ''),
                                     ('help_condition', [], ''),
                                     ('help_step', [], ''),
                                     ('help_s', [], ''),
                                     ('help_next', [], ''),
                                     ('help_n', [], ''),
                                     ('help_return', [], ''),
                                     ('help_r', [], ''),
                                     ('help_continue', [], ''),
                                     ('help_cont', [], ''),
                                     ('help_c', [], ''),
                                     ('help_jump', [], ''),
                                     ('help_j', [], ''),
                                     ('help_debug', [], ''),
                                     ('help_list', [], ''),
                                     ('help_l', [], ''),
                                     ('help_args', [], ''),
                                     ('help_a', [], ''),
                                     ('help_p', [], ''),
                                     ('help_pp', [], ''),
                                     ('help_exec', [], ''),
                                     ('help_quit', [], ''),
                                     ('help_q', [], ''),
                                     ('help_whatis', [], ''),
                                     ('help_EOF', [], ''),
                                     ('help_alias', [], ''),
                                     ('help_unalias', [], ''),
                                     ('help_commands', [], ''),
                                     ('help_pdb', [], ''),
                                     ('lookupmodule',
                                      ['filename'],
                                      'Helper function for break/clear parsing -- may be overridden.\n\n        lookupmodule() translates (possibly incomplete) file or module name\n        into an absolute file name.\n        '),
                                     ('_runscript', ['filename'], '')],
                         'properties': ['use_rawinput',
                                        'prompt',
                                        'aliases',
                                        'mainpyfile',
                                        '_wait_for_mainpyfile',
                                        'rcLines',
                                        'commands',
                                        'commands_doprompt',
                                        'commands_silent',
                                        'commands_defining',
                                        'commands_bnum',
                                        'lineno',
                                        'stack',
                                        'curindex',
                                        'curframe',
                                        'currentbp',
                                        'lastcmd',
                                        'cmdqueue',
                                        'do_h',
                                        'do_b',
                                        'do_cl',
                                        'do_w',
                                        'do_bt',
                                        'do_u',
                                        'do_d',
                                        'do_s',
                                        'do_n',
                                        'do_r',
                                        'do_c',
                                        'do_cont',
                                        'do_j',
                                        '_user_requested_quit',
                                        'do_q',
                                        'do_exit',
                                        'do_a',
                                        'do_rv',
                                        'do_l',
                                        'commands_resuming',
                                        'help_bt',
                                        'help_exit']},
             'pickle.PickleError': {'bases': ['Exception'],
                                    'constructor': [],
                                    'docstring': 'A common base class for the other pickling exceptions.',
                                    'methods': [],
                                    'properties': []},
             'pickle.Pickler': {'bases': [],
                                'constructor': ['file', 'protocol=None'],
                                'docstring': '',
                                'methods': [('clear_memo',
                                             [],
                                             'Clears the pickler\'s "memo".\n\n        The memo is the data structure that remembers which objects the\n        pickler has already seen, so that shared or recursive objects are\n        pickled by reference and not by value.  This method is useful when\n        re-using picklers.\n\n        '),
                                            ('dump',
                                             ['obj'],
                                             'Write a pickled representation of obj to the open file.'),
                                            ('memoize',
                                             ['obj'],
                                             'Store an object in the memo.'),
                                            ('put', ['i', 'pack=struct.pack'], ''),
                                            ('get', ['i', 'pack=struct.pack'], ''),
                                            ('save', ['obj'], ''),
                                            ('persistent_id', ['obj'], ''),
                                            ('save_pers', ['pid'], ''),
                                            ('save_reduce',
                                             ['func',
                                              'args',
                                              'state=None',
                                              'listitems=None',
                                              'dictitems=None',
                                              'obj=None'],
                                             ''),
                                            ('save_none', ['obj'], ''),
                                            ('save_bool', ['obj'], ''),
                                            ('save_int', ['obj', 'pack=struct.pack'], ''),
                                            ('save_long', ['obj', 'pack=struct.pack'], ''),
                                            ('save_float', ['obj', 'pack=struct.pack'], ''),
                                            ('save_string', ['obj', 'pack=struct.pack'], ''),
                                            ('save_unicode', ['obj', 'pack=struct.pack'], ''),
                                            ('save_tuple', ['obj'], ''),
                                            ('save_empty_tuple', ['obj'], ''),
                                            ('save_list', ['obj'], ''),
                                            ('_batch_appends', ['items'], ''),
                                            ('save_dict', ['obj'], ''),
                                            ('_batch_setitems', ['items'], ''),
                                            ('save_inst', ['obj'], ''),
                                            ('save_global',
                                             ['obj', 'name=None', 'pack=struct.pack'],
                                             '')],
                                'properties': ['write',
                                               'memo',
                                               'proto',
                                               'bin',
                                               'fast',
                                               'dispatch',
                                               '_BATCHSIZE']},
             'pickle.PicklingError': {'bases': ['pickle.PickleError'],
                                      'constructor': [],
                                      'docstring': 'This exception is raised when an unpicklable object is passed to the\n    dump() method.\n\n    ',
                                      'methods': [],
                                      'properties': []},
             'pickle.Unpickler': {'bases': [],
                                  'constructor': ['file'],
                                  'docstring': '',
                                  'methods': [('load',
                                               [],
                                               'Read a pickled object representation from the open file.\n\n        Return the reconstituted object hierarchy specified in the file.\n        '),
                                              ('marker', [], ''),
                                              ('load_eof', [], ''),
                                              ('load_proto', [], ''),
                                              ('load_persid', [], ''),
                                              ('load_binpersid', [], ''),
                                              ('load_none', [], ''),
                                              ('load_false', [], ''),
                                              ('load_true', [], ''),
                                              ('load_int', [], ''),
                                              ('load_binint', [], ''),
                                              ('load_binint1', [], ''),
                                              ('load_binint2', [], ''),
                                              ('load_long', [], ''),
                                              ('load_long1', [], ''),
                                              ('load_long4', [], ''),
                                              ('load_float', [], ''),
                                              ('load_binfloat', ['unpack=struct.unpack'], ''),
                                              ('load_string', [], ''),
                                              ('load_binstring', [], ''),
                                              ('load_unicode', [], ''),
                                              ('load_binunicode', [], ''),
                                              ('load_short_binstring', [], ''),
                                              ('load_tuple', [], ''),
                                              ('load_empty_tuple', [], ''),
                                              ('load_tuple1', [], ''),
                                              ('load_tuple2', [], ''),
                                              ('load_tuple3', [], ''),
                                              ('load_empty_list', [], ''),
                                              ('load_empty_dictionary', [], ''),
                                              ('load_list', [], ''),
                                              ('load_dict', [], ''),
                                              ('_instantiate', ['klass', 'k'], ''),
                                              ('load_inst', [], ''),
                                              ('load_obj', [], ''),
                                              ('load_newobj', [], ''),
                                              ('load_global', [], ''),
                                              ('load_ext1', [], ''),
                                              ('load_ext2', [], ''),
                                              ('load_ext4', [], ''),
                                              ('get_extension', ['code'], ''),
                                              ('find_class', ['module', 'name'], ''),
                                              ('load_reduce', [], ''),
                                              ('load_pop', [], ''),
                                              ('load_pop_mark', [], ''),
                                              ('load_dup', [], ''),
                                              ('load_get', [], ''),
                                              ('load_binget', [], ''),
                                              ('load_long_binget', [], ''),
                                              ('load_put', [], ''),
                                              ('load_binput', [], ''),
                                              ('load_long_binput', [], ''),
                                              ('load_append', [], ''),
                                              ('load_appends', [], ''),
                                              ('load_setitem', [], ''),
                                              ('load_setitems', [], ''),
                                              ('load_build', [], ''),
                                              ('load_mark', [], ''),
                                              ('load_stop', [], '')],
                                  'properties': ['readline',
                                                 'read',
                                                 'memo',
                                                 'mark',
                                                 'stack',
                                                 'append',
                                                 'dispatch']},
             'pickle.UnpicklingError': {'bases': ['pickle.PickleError'],
                                        'constructor': [],
                                        'docstring': 'This exception is raised when there is a problem unpickling an object,\n    such as a security violation.\n\n    Note that other exceptions may also be raised during unpickling, including\n    (but not necessarily limited to) AttributeError, EOFError, ImportError,\n    and IndexError.\n\n    ',
                                        'methods': [],
                                        'properties': []},
             'pickle._EmptyClass': {'bases': [],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'pickle._Stop': {'bases': ['Exception'],
                              'constructor': ['value'],
                              'docstring': '',
                              'methods': [],
                              'properties': ['value']},
             'pickletools.ArgumentDescriptor': {'bases': ['object'],
                                                'constructor': ['name', 'n', 'reader', 'doc'],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': ['__slots__',
                                                               'name',
                                                               'n',
                                                               'reader',
                                                               'doc']},
             'pickletools.OpcodeInfo': {'bases': ['object'],
                                        'constructor': ['name',
                                                        'code',
                                                        'arg',
                                                        'stack_before',
                                                        'stack_after',
                                                        'proto',
                                                        'doc'],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': ['__slots__',
                                                       'name',
                                                       'code',
                                                       'arg',
                                                       'stack_before',
                                                       'stack_after',
                                                       'proto',
                                                       'doc']},
             'pickletools.StackObject': {'bases': ['object'],
                                         'constructor': ['name', 'obtype', 'doc'],
                                         'docstring': '',
                                         'methods': [('__repr__', [], '')],
                                         'properties': ['__slots__', 'name', 'obtype', 'doc']},
             'pickletools._Example': {'bases': [],
                                      'constructor': ['value'],
                                      'docstring': '',
                                      'methods': [],
                                      'properties': ['value']},
             'pipes.Template': {'bases': [],
                                'constructor': [],
                                'docstring': 'Class representing a pipeline template.',
                                'methods': [('__repr__',
                                             [],
                                             't.__repr__() implements repr(t).'),
                                            ('reset',
                                             [],
                                             't.reset() restores a pipeline template to its initial state.'),
                                            ('clone',
                                             [],
                                             't.clone() returns a new pipeline template with identical\n        initial state as the current one.'),
                                            ('debug',
                                             ['flag'],
                                             't.debug(flag) turns debugging on or off.'),
                                            ('append',
                                             ['cmd', 'kind'],
                                             't.append(cmd, kind) adds a new step at the end.'),
                                            ('prepend',
                                             ['cmd', 'kind'],
                                             't.prepend(cmd, kind) adds a new step at the front.'),
                                            ('open',
                                             ['file', 'rw'],
                                             't.open(file, rw) returns a pipe or file object open for\n        reading or writing; the file is the other end of the pipeline.'),
                                            ('open_r',
                                             ['file'],
                                             "t.open_r(file) and t.open_w(file) implement\n        t.open(file, 'r') and t.open(file, 'w') respectively."),
                                            ('open_w', ['file'], ''),
                                            ('copy', ['infile', 'outfile'], ''),
                                            ('makepipeline', ['infile', 'outfile'], '')],
                                'properties': ['debugging', 'steps']},
             'pkgutil.ImpImporter': {'bases': [],
                                     'constructor': ['path=None'],
                                     'docstring': 'PEP 302 Importer that wraps Python\'s "classic" import algorithm\n\n    ImpImporter(dirname) produces a PEP 302 importer that searches that\n    directory.  ImpImporter(None) produces a PEP 302 importer that searches\n    the current sys.path, plus any modules that are frozen or built-in.\n\n    Note that ImpImporter does not currently support being used by placement\n    on sys.meta_path.\n    ',
                                     'methods': [('find_module', ['fullname', 'path=None'], ''),
                                                 ('iter_modules', ["prefix=''"], '')],
                                     'properties': ['path']},
             'pkgutil.ImpLoader': {'bases': [],
                                   'constructor': ['fullname', 'file', 'filename', 'etc'],
                                   'docstring': 'PEP 302 Loader that wraps Python\'s "classic" import algorithm\n    ',
                                   'methods': [('load_module', ['fullname'], ''),
                                               ('get_data', ['pathname'], ''),
                                               ('_reopen', [], ''),
                                               ('_fix_name', ['fullname'], ''),
                                               ('is_package', ['fullname'], ''),
                                               ('get_code', ['fullname=None'], ''),
                                               ('get_source', ['fullname=None'], ''),
                                               ('_get_delegate', [], ''),
                                               ('get_filename', ['fullname=None'], '')],
                                   'properties': ['code',
                                                  'source',
                                                  'file',
                                                  'filename',
                                                  'fullname',
                                                  'etc']},
             'platform._popen': {'bases': [],
                                 'constructor': ['cmd', "mode='r'", 'bufsize=None'],
                                 'docstring': " Fairly portable (alternative) popen implementation.\n\n        This is mostly needed in case os.popen() is not available, or\n        doesn't work as advertised, e.g. in Win9X GUI programs like\n        PythonWin or IDLE.\n\n        Writing to the pipe is currently not supported.\n\n    ",
                                 'methods': [('read', [], ''),
                                             ('readlines', [], ''),
                                             ('close',
                                              ['remove=os.unlink', 'error=os.error'],
                                              '')],
                                 'properties': ['tmpfile', 'pipe', 'bufsize', 'mode', '__del__']},
             'plistlib.Data': {'bases': [],
                               'constructor': ['data'],
                               'docstring': 'Wrapper for binary data.',
                               'methods': [('fromBase64', ['data'], ''),
                                           ('asBase64', ['maxlinelength=76'], ''),
                                           ('__cmp__', ['other'], ''),
                                           ('__repr__', [], '')],
                               'properties': ['data', 'fromBase64']},
             'plistlib.Dict': {'bases': ['plistlib._InternalDict'],
                               'constructor': ['**kwargs'],
                               'docstring': '',
                               'methods': [],
                               'properties': []},
             'plistlib.DumbXMLWriter': {'bases': [],
                                        'constructor': ['file', 'indentLevel=0', "indent='\\t'"],
                                        'docstring': '',
                                        'methods': [('beginElement', ['element'], ''),
                                                    ('endElement', ['element'], ''),
                                                    ('simpleElement',
                                                     ['element', 'value=None'],
                                                     ''),
                                                    ('writeln', ['line'], '')],
                                        'properties': ['file', 'stack', 'indentLevel', 'indent']},
             'plistlib.Plist': {'bases': ['plistlib._InternalDict'],
                                'constructor': ['**kwargs'],
                                'docstring': 'This class has been deprecated. Use readPlist() and writePlist()\n    functions instead, together with regular dict objects.\n    ',
                                'methods': [('fromFile',
                                             ['pathOrFile'],
                                             'Deprecated. Use the readPlist() function instead.'),
                                            ('write',
                                             ['pathOrFile'],
                                             'Deprecated. Use the writePlist() function instead.')],
                                'properties': ['fromFile']},
             'plistlib.PlistParser': {'bases': [],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('parse', ['fileobj'], ''),
                                                  ('handleBeginElement',
                                                   ['element', 'attrs'],
                                                   ''),
                                                  ('handleEndElement', ['element'], ''),
                                                  ('handleData', ['data'], ''),
                                                  ('addObject', ['value'], ''),
                                                  ('getData', [], ''),
                                                  ('begin_dict', ['attrs'], ''),
                                                  ('end_dict', [], ''),
                                                  ('end_key', [], ''),
                                                  ('begin_array', ['attrs'], ''),
                                                  ('end_array', [], ''),
                                                  ('end_true', [], ''),
                                                  ('end_false', [], ''),
                                                  ('end_integer', [], ''),
                                                  ('end_real', [], ''),
                                                  ('end_string', [], ''),
                                                  ('end_data', [], ''),
                                                  ('end_date', [], '')],
                                      'properties': ['stack', 'currentKey', 'root', 'data']},
             'plistlib.PlistWriter': {'bases': ['plistlib.DumbXMLWriter'],
                                      'constructor': ['file',
                                                      'indentLevel=0',
                                                      "indent='\\t'",
                                                      'writeHeader=1'],
                                      'docstring': '',
                                      'methods': [('writeValue', ['value'], ''),
                                                  ('writeData', ['data'], ''),
                                                  ('writeDict', ['d'], ''),
                                                  ('writeArray', ['array'], '')],
                                      'properties': []},
             'plistlib._InternalDict': {'bases': ['dict'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('__getattr__', ['attr'], ''),
                                                    ('__setattr__', ['attr', 'value'], ''),
                                                    ('__delattr__', ['attr'], '')],
                                        'properties': []},
             'popen2.Popen3': {'bases': [],
                               'constructor': ['cmd', 'capturestderr=False', 'bufsize=-1'],
                               'docstring': 'Class representing a child process.  Normally instances are created\n    by the factory functions popen2() and popen3().',
                               'methods': [('__del__', [], ''),
                                           ('_run_child', ['cmd'], ''),
                                           ('poll',
                                            ['_deadstate=None'],
                                            "Return the exit status of the child process if it has finished,\n        or -1 if it hasn't finished yet."),
                                           ('wait',
                                            [],
                                            'Wait for and return the exit status of the child process.')],
                               'properties': ['sts',
                                              'cmd',
                                              'pid',
                                              'tochild',
                                              'fromchild',
                                              'childerr']},
             'popen2.Popen4': {'bases': ['popen2.Popen3'],
                               'constructor': ['cmd', 'bufsize=-1'],
                               'docstring': '',
                               'methods': [],
                               'properties': ['childerr', 'cmd', 'pid', 'tochild', 'fromchild']},
             'poplib.POP3': {'bases': [],
                             'constructor': ['host', 'port=POP3_PORT'],
                             'docstring': "This class supports both the minimal and optional command sets.\n    Arguments can be strings or integers (where appropriate)\n    (e.g.: retr(1) and retr('1') both work equally well.\n\n    Minimal Command Set:\n            USER name               user(name)\n            PASS string             pass_(string)\n            STAT                    stat()\n            LIST [msg]              list(msg = None)\n            RETR msg                retr(msg)\n            DELE msg                dele(msg)\n            NOOP                    noop()\n            RSET                    rset()\n            QUIT                    quit()\n\n    Optional Commands (some servers support these):\n            RPOP name               rpop(name)\n            APOP name digest        apop(name, digest)\n            TOP msg n               top(msg, n)\n            UIDL [msg]              uidl(msg = None)\n\n    Raises one exception: 'error_proto'.\n\n    Instantiate with:\n            POP3(hostname, port=110)\n\n    NB:     the POP protocol locks the mailbox from user\n            authorization until QUIT, so be sure to get in, suck\n            the messages, and quit, each time you access the\n            mailbox.\n\n            POP is a line-based protocol, which means large mail\n            messages consume lots of python cycles reading them\n            line-by-line.\n\n            If it's available on your mail server, use IMAP4\n            instead, it doesn't suffer from the two problems\n            above.\n    ",
                             'methods': [('_putline', ['line'], ''),
                                         ('_putcmd', ['line'], ''),
                                         ('_getline', [], ''),
                                         ('_getresp', [], ''),
                                         ('_getlongresp', [], ''),
                                         ('_shortcmd', ['line'], ''),
                                         ('_longcmd', ['line'], ''),
                                         ('getwelcome', [], ''),
                                         ('set_debuglevel', ['level'], ''),
                                         ('user',
                                          ['user'],
                                          'Send user name, return response\n\n        (should indicate password required).\n        '),
                                         ('pass_',
                                          ['pswd'],
                                          "Send password, return response\n\n        (response includes message count, mailbox size).\n\n        NB: mailbox is locked by server from here to 'quit()'\n        "),
                                         ('stat',
                                          [],
                                          'Get mailbox status.\n\n        Result is tuple of 2 ints (message count, mailbox size)\n        '),
                                         ('list',
                                          ['which=None'],
                                          'Request listing, return result.\n\n        Result without a message number argument is in form\n        [\'response\', [\'mesg_num octets\', ...], octets].\n\n        Result when a message number argument is given is a\n        single response: the "scan listing" for that message.\n        '),
                                         ('retr',
                                          ['which'],
                                          "Retrieve whole message number 'which'.\n\n        Result is in form ['response', ['line', ...], octets].\n        "),
                                         ('dele',
                                          ['which'],
                                          "Delete message number 'which'.\n\n        Result is 'response'.\n        "),
                                         ('noop',
                                          [],
                                          'Does nothing.\n\n        One supposes the response indicates the server is alive.\n        '),
                                         ('rset', [], 'Not sure what this does.'),
                                         ('quit',
                                          [],
                                          'Signoff: commit changes on server, unlock mailbox, close connection.'),
                                         ('rpop', ['user'], 'Not sure what this does.'),
                                         ('apop',
                                          ['user', 'secret'],
                                          "Authorisation\n\n        - only possible if server has supplied a timestamp in initial greeting.\n\n        Args:\n                user    - mailbox user;\n                secret  - secret shared between client and server.\n\n        NB: mailbox is locked by server from here to 'quit()'\n        "),
                                         ('top',
                                          ['which', 'howmuch'],
                                          "Retrieve message header of message number 'which'\n        and first 'howmuch' lines of message body.\n\n        Result is in form ['response', ['line', ...], octets].\n        "),
                                         ('uidl',
                                          ['which=None'],
                                          "Return message digest (unique id) list.\n\n        If 'which', result contains unique id for that message\n        in the form 'response mesgnum uid', otherwise result is\n        the list ['response', ['mesgnum uid', ...], octets]\n        ")],
                             'properties': ['host',
                                            'port',
                                            'sock',
                                            'file',
                                            '_debugging',
                                            'welcome',
                                            'timestamp']},
             'poplib.POP3_SSL': {'bases': ['poplib.POP3'],
                                 'constructor': ['host',
                                                 'port=POP3_SSL_PORT',
                                                 'keyfile=None',
                                                 'certfile=None'],
                                 'docstring': 'POP3 client class over SSL connection\n\n    Instantiate with: POP3_SSL(hostname, port=995, keyfile=None, certfile=None)\n\n           hostname - the hostname of the pop3 over ssl server\n           port - port number\n           keyfile - PEM formatted file that countains your private key\n           certfile - PEM formatted certificate chain file\n\n        See the methods of the parent class POP3 for more documentation.\n    ',
                                 'methods': [('_fillBuffer', [], ''),
                                             ('_getline', [], ''),
                                             ('_putline', ['line'], ''),
                                             ('quit',
                                              [],
                                              'Signoff: commit changes on server, unlock mailbox, close connection.')],
                                 'properties': ['host',
                                                'port',
                                                'keyfile',
                                                'certfile',
                                                'buffer',
                                                'sock',
                                                'file',
                                                'sslobj',
                                                '_debugging',
                                                'welcome']},
             'poplib.error_proto': {'bases': ['Exception'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'posixfile._posixfile_': {'bases': [],
                                       'constructor': [],
                                       'docstring': 'File wrapper class that provides extra POSIX file routines.',
                                       'methods': [('__repr__', [], ''),
                                                   ('open',
                                                    ['name', "mode='r'", 'bufsize=-1'],
                                                    ''),
                                                   ('fileopen', ['file'], ''),
                                                   ('file', [], ''),
                                                   ('dup', [], ''),
                                                   ('dup2', ['fd'], ''),
                                                   ('flags', ['*which'], ''),
                                                   ('lock', ['how', '*args'], '')],
                                       'properties': ['states', '_file_']},
             'pprint.PrettyPrinter': {'bases': [],
                                      'constructor': ['indent=1',
                                                      'width=80',
                                                      'depth=None',
                                                      'stream=None'],
                                      'docstring': '',
                                      'methods': [('pprint', ['object'], ''),
                                                  ('pformat', ['object'], ''),
                                                  ('isrecursive', ['object'], ''),
                                                  ('isreadable', ['object'], ''),
                                                  ('_format',
                                                   ['object',
                                                    'stream',
                                                    'indent',
                                                    'allowance',
                                                    'context',
                                                    'level'],
                                                   ''),
                                                  ('_repr', ['object', 'context', 'level'], ''),
                                                  ('format',
                                                   ['object', 'context', 'maxlevels', 'level'],
                                                   "Format object for a specific context, returning a string\n        and flags indicating whether the representation is 'readable'\n        and whether the object represents a recursive construct.\n        ")],
                                      'properties': ['_depth',
                                                     '_indent_per_level',
                                                     '_width',
                                                     '_stream',
                                                     '_recursive',
                                                     '_readable']},
             'py_compile.PyCompileError': {'bases': ['Exception'],
                                           'constructor': ['exc_type',
                                                           'exc_value',
                                                           'file',
                                                           "msg=''"],
                                           'docstring': "Exception raised when an error occurs while attempting to\n    compile the file.\n\n    To raise this exception, use\n\n        raise PyCompileError(exc_type,exc_value,file[,msg])\n\n    where\n\n        exc_type:   exception type to be used in error message\n                    type name can be accesses as class variable\n                    'exc_type_name'\n\n        exc_value:  exception value to be used in error message\n                    can be accesses as class variable 'exc_value'\n\n        file:       name of file being compiled to be used in error message\n                    can be accesses as class variable 'file'\n\n        msg:        string message to be written as error message\n                    If no value is given, a default exception message will be given,\n                    consistent with 'standard' py_compile output.\n                    message (or default) can be accesses as class variable 'msg'\n\n    ",
                                           'methods': [('__str__', [], '')],
                                           'properties': ['exc_type_name',
                                                          'exc_value',
                                                          'file',
                                                          'msg']},
             'pyclbr.Class': {'bases': [],
                              'constructor': ['module', 'name', 'super', 'file', 'lineno'],
                              'docstring': 'Class to represent a Python class.',
                              'methods': [('_addmethod', ['name', 'lineno'], '')],
                              'properties': ['module',
                                             'name',
                                             'super',
                                             'methods',
                                             'file',
                                             'lineno']},
             'pyclbr.Function': {'bases': [],
                                 'constructor': ['module', 'name', 'file', 'lineno'],
                                 'docstring': 'Class to represent a top-level Python function',
                                 'methods': [],
                                 'properties': ['module', 'name', 'file', 'lineno']},
             'pydoc.Doc': {'bases': [],
                           'constructor': [],
                           'docstring': '',
                           'methods': [('document',
                                        ['object', 'name=None', '*args'],
                                        'Generate documentation for an object.'),
                                       ('fail',
                                        ['object', 'name=None', '*args'],
                                        'Raise an exception for unimplemented types.'),
                                       ('getdocloc',
                                        ['object'],
                                        'Return the location of module docs or None')],
                           'properties': ['docmodule',
                                          'docclass',
                                          'docroutine',
                                          'docother',
                                          'docproperty',
                                          'docdata']},
             'pydoc.ErrorDuringImport': {'bases': ['Exception'],
                                         'constructor': ['filename', '(exc, value, tb)'],
                                         'docstring': 'Errors that occurred while trying to import something to document it.',
                                         'methods': [('__str__', [], '')],
                                         'properties': ['filename', 'exc', 'value', 'tb']},
             'pydoc.HTMLDoc': {'bases': ['pydoc.Doc'],
                               'constructor': [],
                               'docstring': 'Formatter class for HTML documentation.',
                               'methods': [('page',
                                            ['title', 'contents'],
                                            'Format an HTML page.'),
                                           ('heading',
                                            ['title', 'fgcol', 'bgcol', "extras=''"],
                                            'Format a page heading.'),
                                           ('section',
                                            ['title',
                                             'fgcol',
                                             'bgcol',
                                             'contents',
                                             'width=6',
                                             "prelude=''",
                                             'marginalia=None',
                                             "gap='&nbsp;'"],
                                            'Format a section with a heading.'),
                                           ('bigsection',
                                            ['title', '*args'],
                                            'Format a section with a big heading.'),
                                           ('preformat',
                                            ['text'],
                                            'Format literal preformatted text.'),
                                           ('multicolumn',
                                            ['list', 'format', 'cols=4'],
                                            'Format a list of items into a multi-column list.'),
                                           ('grey', ['text'], ''),
                                           ('namelink',
                                            ['name', '*dicts'],
                                            'Make a link for an identifier, given name-to-URL mappings.'),
                                           ('classlink',
                                            ['object', 'modname'],
                                            'Make a link for a class.'),
                                           ('modulelink',
                                            ['object'],
                                            'Make a link for a module.'),
                                           ('modpkglink',
                                            ['(name, path, ispackage, shadowed)'],
                                            'Make a link for a module or package to display in an index.'),
                                           ('markup',
                                            ['text',
                                             'escape=None',
                                             'funcs={}',
                                             'classes={}',
                                             'methods={}'],
                                            'Mark up some plain text, given a context of symbols to look for.\n        Each context dictionary maps object names to anchor names.'),
                                           ('formattree',
                                            ['tree', 'modname', 'parent=None'],
                                            'Produce HTML for a class tree as given by inspect.getclasstree().'),
                                           ('docmodule',
                                            ['object', 'name=None', 'mod=None', '*ignored'],
                                            'Produce HTML documentation for a module object.'),
                                           ('docclass',
                                            ['object',
                                             'name=None',
                                             'mod=None',
                                             'funcs={}',
                                             'classes={}',
                                             '*ignored'],
                                            'Produce HTML documentation for a class object.'),
                                           ('formatvalue',
                                            ['object'],
                                            'Format an argument default value as text.'),
                                           ('docroutine',
                                            ['object',
                                             'name=None',
                                             'mod=None',
                                             'funcs={}',
                                             'classes={}',
                                             'methods={}',
                                             'cl=None'],
                                            'Produce HTML documentation for a function or method object.'),
                                           ('_docdescriptor', ['name', 'value', 'mod'], ''),
                                           ('docproperty',
                                            ['object', 'name=None', 'mod=None', 'cl=None'],
                                            'Produce html documentation for a property.'),
                                           ('docother',
                                            ['object', 'name=None', 'mod=None', '*ignored'],
                                            'Produce HTML documentation for a data object.'),
                                           ('docdata',
                                            ['object', 'name=None', 'mod=None', 'cl=None'],
                                            'Produce html documentation for a data descriptor.'),
                                           ('index',
                                            ['dir', 'shadowed=None'],
                                            'Generate an HTML index for a directory of modules.')],
                               'properties': ['_repr_instance', 'repr', 'escape']},
             'pydoc.HTMLRepr': {'bases': ['repr.Repr'],
                                'constructor': [],
                                'docstring': 'Class for safely making an HTML representation of a Python object.',
                                'methods': [('escape', ['text'], ''),
                                            ('repr', ['object'], ''),
                                            ('repr1', ['x', 'level'], ''),
                                            ('repr_string', ['x', 'level'], ''),
                                            ('repr_instance', ['x', 'level'], '')],
                                'properties': ['maxlist',
                                               'maxtuple',
                                               'maxdict',
                                               'maxstring',
                                               'maxother',
                                               'repr_str',
                                               'repr_unicode']},
             'pydoc.Helper': {'bases': [],
                              'constructor': ['input', 'output'],
                              'docstring': '',
                              'methods': [('__repr__', [], ''),
                                          ('__call__', ['request=None'], ''),
                                          ('interact', [], ''),
                                          ('getline',
                                           ['prompt'],
                                           'Read one line, using raw_input when available.'),
                                          ('help', ['request'], ''),
                                          ('intro', [], ''),
                                          ('list', ['items', 'columns=4', 'width=80'], ''),
                                          ('listkeywords', [], ''),
                                          ('listtopics', [], ''),
                                          ('showtopic', ['topic'], ''),
                                          ('listmodules', ["key=''"], '')],
                              'properties': ['keywords', 'topics', 'input', 'output', 'docdir']},
             'pydoc.ModuleScanner': {'bases': [],
                                     'constructor': [],
                                     'docstring': 'An interruptible scanner that searches module synopses.',
                                     'methods': [('run',
                                                  ['callback', 'key=None', 'completer=None'],
                                                  '')],
                                     'properties': ['quit']},
             'pydoc.Scanner': {'bases': [],
                               'constructor': ['roots', 'children', 'descendp'],
                               'docstring': 'A generic tree iterator.',
                               'methods': [('next', [], '')],
                               'properties': ['roots', 'state', 'children', 'descendp']},
             'pydoc.TextDoc': {'bases': ['pydoc.Doc'],
                               'constructor': [],
                               'docstring': 'Formatter class for text documentation.',
                               'methods': [('bold',
                                            ['text'],
                                            'Format a string in bold by overstriking.'),
                                           ('indent',
                                            ['text', "prefix='    '"],
                                            'Indent text by prepending a given prefix to each line.'),
                                           ('section',
                                            ['title', 'contents'],
                                            'Format a section with a given heading.'),
                                           ('formattree',
                                            ['tree', 'modname', 'parent=None', "prefix=''"],
                                            'Render in text a class tree as returned by inspect.getclasstree().'),
                                           ('docmodule',
                                            ['object', 'name=None', 'mod=None'],
                                            'Produce text documentation for a given module object.'),
                                           ('docclass',
                                            ['object', 'name=None', 'mod=None'],
                                            'Produce text documentation for a given class object.'),
                                           ('formatvalue',
                                            ['object'],
                                            'Format an argument default value as text.'),
                                           ('docroutine',
                                            ['object', 'name=None', 'mod=None', 'cl=None'],
                                            'Produce text documentation for a function or method object.'),
                                           ('_docdescriptor', ['name', 'value', 'mod'], ''),
                                           ('docproperty',
                                            ['object', 'name=None', 'mod=None', 'cl=None'],
                                            'Produce text documentation for a property.'),
                                           ('docdata',
                                            ['object', 'name=None', 'mod=None', 'cl=None'],
                                            'Produce text documentation for a data descriptor.'),
                                           ('docother',
                                            ['object',
                                             'name=None',
                                             'mod=None',
                                             'parent=None',
                                             'maxlen=None',
                                             'doc=None'],
                                            'Produce text documentation for a data object.')],
                               'properties': ['_repr_instance', 'repr']},
             'pydoc.TextRepr': {'bases': ['repr.Repr'],
                                'constructor': [],
                                'docstring': 'Class for safely making a text representation of a Python object.',
                                'methods': [('repr1', ['x', 'level'], ''),
                                            ('repr_string', ['x', 'level'], ''),
                                            ('repr_instance', ['x', 'level'], '')],
                                'properties': ['maxlist',
                                               'maxtuple',
                                               'maxdict',
                                               'maxstring',
                                               'maxother',
                                               'repr_str']},
             'pydoc.deque': {'bases': ['list'],
                             'constructor': [],
                             'docstring': '',
                             'methods': [('popleft', [], '')],
                             'properties': []},
             'random.Random': {'bases': ['_random.Random'],
                               'constructor': ['x=None'],
                               'docstring': "Random number generator base class used by bound module functions.\n\n    Used to instantiate instances of Random to get generators that don't\n    share state.  Especially useful for multi-threaded programs, creating\n    a different instance of Random for each thread, and using the jumpahead()\n    method to ensure that the generated sequences seen by each thread don't\n    overlap.\n\n    Class Random can also be subclassed if you want to use a different basic\n    generator of your own devising: in that case, override the following\n    methods:  random(), seed(), getstate(), setstate() and jumpahead().\n    Optionally, implement a getrandombits() method so that randrange()\n    can cover arbitrarily large ranges.\n\n    ",
                               'methods': [('seed',
                                            ['a=None'],
                                            'Initialize internal state from hashable object.\n\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n\n        If a is not None or an int or long, hash(a) is used instead.\n        '),
                                           ('getstate',
                                            [],
                                            'Return internal state; can be passed to setstate() later.'),
                                           ('setstate',
                                            ['state'],
                                            'Restore internal state from object returned by getstate().'),
                                           ('__getstate__', [], ''),
                                           ('__setstate__', ['state'], ''),
                                           ('__reduce__', [], ''),
                                           ('randrange',
                                            ['start',
                                             'stop=None',
                                             'step=1',
                                             'int=int',
                                             'default=None',
                                             'maxwidth=1<<BPF'],
                                            "Choose a random item from range(start, stop[, step]).\n\n        This fixes the problem with randint() which includes the\n        endpoint; in Python this is usually not what you want.\n        Do not supply the 'int', 'default', and 'maxwidth' arguments.\n        "),
                                           ('randint',
                                            ['a', 'b'],
                                            'Return random integer in range [a, b], including both end points.\n        '),
                                           ('_randbelow',
                                            ['n',
                                             '_log=_log',
                                             'int=int',
                                             '_maxwidth=1<<BPF',
                                             '_Method=_MethodType',
                                             '_BuiltinMethod=_BuiltinMethodType'],
                                            'Return a random int in the range [0,n)\n\n        Handles the case where n has more bits than returned\n        by a single call to the underlying generator.\n        '),
                                           ('choice',
                                            ['seq'],
                                            'Choose a random element from a non-empty sequence.'),
                                           ('shuffle',
                                            ['x', 'random=None', 'int=int'],
                                            'x, random=random.random -> shuffle list x in place; return None.\n\n        Optional arg random is a 0-argument function returning a random\n        float in [0.0, 1.0); by default, the standard random.random.\n        '),
                                           ('sample',
                                            ['population', 'k'],
                                            'Chooses k unique random elements from a population sequence.\n\n        Returns a new list containing elements from the population while\n        leaving the original population unchanged.  The resulting list is\n        in selection order so that all sub-slices will also be valid random\n        samples.  This allows raffle winners (the sample) to be partitioned\n        into grand prize and second place winners (the subslices).\n\n        Members of the population need not be hashable or unique.  If the\n        population contains repeats, then each occurrence is a possible\n        selection in the sample.\n\n        To choose a sample in a range of integers, use xrange as an argument.\n        This is especially fast and space efficient for sampling from a\n        large population:   sample(xrange(10000000), 60)\n        '),
                                           ('uniform',
                                            ['a', 'b'],
                                            'Get a random number in the range [a, b).'),
                                           ('normalvariate',
                                            ['mu', 'sigma'],
                                            'Normal distribution.\n\n        mu is the mean, and sigma is the standard deviation.\n\n        '),
                                           ('lognormvariate',
                                            ['mu', 'sigma'],
                                            "Log normal distribution.\n\n        If you take the natural logarithm of this distribution, you'll get a\n        normal distribution with mean mu and standard deviation sigma.\n        mu can have any value, and sigma must be greater than zero.\n\n        "),
                                           ('expovariate',
                                            ['lambd'],
                                            'Exponential distribution.\n\n        lambd is 1.0 divided by the desired mean.  (The parameter would be\n        called "lambda", but that is a reserved word in Python.)  Returned\n        values range from 0 to positive infinity.\n\n        '),
                                           ('vonmisesvariate',
                                            ['mu', 'kappa'],
                                            'Circular data distribution.\n\n        mu is the mean angle, expressed in radians between 0 and 2*pi, and\n        kappa is the concentration parameter, which must be greater than or\n        equal to zero.  If kappa is equal to zero, this distribution reduces\n        to a uniform random angle over the range 0 to 2*pi.\n\n        '),
                                           ('gammavariate',
                                            ['alpha', 'beta'],
                                            'Gamma distribution.  Not the gamma function!\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n\n        '),
                                           ('gauss',
                                            ['mu', 'sigma'],
                                            'Gaussian distribution.\n\n        mu is the mean, and sigma is the standard deviation.  This is\n        slightly faster than the normalvariate() function.\n\n        Not thread-safe without a lock around calls.\n\n        '),
                                           ('betavariate',
                                            ['alpha', 'beta'],
                                            'Beta distribution.\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n        Returned values range between 0 and 1.\n\n        '),
                                           ('paretovariate',
                                            ['alpha'],
                                            'Pareto distribution.  alpha is the shape parameter.'),
                                           ('weibullvariate',
                                            ['alpha', 'beta'],
                                            'Weibull distribution.\n\n        alpha is the scale parameter and beta is the shape parameter.\n\n        ')],
                               'properties': ['VERSION', 'gauss_next']},
             'random.SystemRandom': {'bases': ['random.Random'],
                                     'constructor': [],
                                     'docstring': 'Alternate random number generator using sources provided\n    by the operating system (such as /dev/urandom on Unix or\n    CryptGenRandom on Windows).\n\n     Not available on all systems (see os.urandom() for details).\n    ',
                                     'methods': [('random',
                                                  [],
                                                  'Get the next random number in the range [0.0, 1.0).'),
                                                 ('getrandbits',
                                                  ['k'],
                                                  'getrandbits(k) -> x.  Generates a long int with k random bits.'),
                                                 ('_stub',
                                                  ['*args', '**kwds'],
                                                  'Stub method.  Not used for a system random number generator.'),
                                                 ('_notimplemented',
                                                  ['*args', '**kwds'],
                                                  'Method should not be called for a system random number generator.')],
                                     'properties': ['seed', 'jumpahead', 'getstate', 'setstate']},
             'random.WichmannHill': {'bases': ['random.Random'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('seed',
                                                  ['a=None'],
                                                  'Initialize internal state from hashable object.\n\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n\n        If a is not None or an int or long, hash(a) is used instead.\n\n        If a is an int or long, a is used directly.  Distinct values between\n        0 and 27814431486575L inclusive are guaranteed to yield distinct\n        internal states (this guarantee is specific to the default\n        Wichmann-Hill generator).\n        '),
                                                 ('random',
                                                  [],
                                                  'Get the next random number in the range [0.0, 1.0).'),
                                                 ('getstate',
                                                  [],
                                                  'Return internal state; can be passed to setstate() later.'),
                                                 ('setstate',
                                                  ['state'],
                                                  'Restore internal state from object returned by getstate().'),
                                                 ('jumpahead',
                                                  ['n'],
                                                  'Act as if n calls to random() were made, but quickly.\n\n        n is an int, greater than or equal to 0.\n\n        Example use:  If you have 2 threads and know that each will\n        consume no more than a million random numbers, create two Random\n        objects r1 and r2, then do\n            r2.setstate(r1.getstate())\n            r2.jumpahead(1000000)\n        Then r1 and r2 will use guaranteed-disjoint segments of the full\n        period.\n        '),
                                                 ('__whseed',
                                                  ['x=0', 'y=0', 'z=0'],
                                                  'Set the Wichmann-Hill seed from (x, y, z).\n\n        These must be integers in the range [0, 256).\n        '),
                                                 ('whseed',
                                                  ['a=None'],
                                                  "Seed from hashable object's hash code.\n\n        None or no argument seeds from current time.  It is not guaranteed\n        that objects with distinct hash codes lead to distinct internal\n        states.\n\n        This is obsolete, provided for compatibility with the seed routine\n        used prior to Python 2.1.  Use the .seed() method instead.\n        ")],
                                     'properties': ['VERSION', '_seed', 'gauss_next']},
             're.Scanner': {'bases': [],
                            'constructor': ['lexicon', 'flags=0'],
                            'docstring': '',
                            'methods': [('scan', ['string'], '')],
                            'properties': ['lexicon', 'scanner', 'match']},
             'repr.Repr': {'bases': [],
                           'constructor': [],
                           'docstring': '',
                           'methods': [('repr', ['x'], ''),
                                       ('repr1', ['x', 'level'], ''),
                                       ('_repr_iterable',
                                        ['x', 'level', 'left', 'right', 'maxiter', "trail=''"],
                                        ''),
                                       ('repr_tuple', ['x', 'level'], ''),
                                       ('repr_list', ['x', 'level'], ''),
                                       ('repr_array', ['x', 'level'], ''),
                                       ('repr_set', ['x', 'level'], ''),
                                       ('repr_frozenset', ['x', 'level'], ''),
                                       ('repr_deque', ['x', 'level'], ''),
                                       ('repr_dict', ['x', 'level'], ''),
                                       ('repr_str', ['x', 'level'], ''),
                                       ('repr_long', ['x', 'level'], ''),
                                       ('repr_instance', ['x', 'level'], '')],
                           'properties': ['maxlevel',
                                          'maxtuple',
                                          'maxlist',
                                          'maxarray',
                                          'maxdict',
                                          'maxset',
                                          'maxfrozenset',
                                          'maxdeque',
                                          'maxstring',
                                          'maxlong',
                                          'maxother']},
             'rexec.FileBase': {'bases': [],
                                'constructor': [],
                                'docstring': '',
                                'methods': [],
                                'properties': ['ok_file_methods']},
             'rexec.FileDelegate': {'bases': ['rexec.FileBase'],
                                    'constructor': ['mod', 'name'],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': ['mod', 'name', 'm']},
             'rexec.FileWrapper': {'bases': ['rexec.FileBase'],
                                   'constructor': ['f'],
                                   'docstring': '',
                                   'methods': [('close', [], '')],
                                   'properties': []},
             'rexec.RExec': {'bases': ['ihooks._Verbose'],
                             'constructor': ['hooks=None', 'verbose=0'],
                             'docstring': 'Basic restricted execution framework.\n\n    Code executed in this restricted environment will only have access to\n    modules and functions that are deemed safe; you can subclass RExec to\n    add or remove capabilities as desired.\n\n    The RExec class can prevent code from performing unsafe operations like\n    reading or writing disk files, or using TCP/IP sockets.  However, it does\n    not protect against code using extremely large amounts of memory or\n    processor time.\n\n    ',
                             'methods': [('set_trusted_path', [], ''),
                                         ('load_dynamic', ['name', 'filename', 'file'], ''),
                                         ('make_initial_modules', [], ''),
                                         ('get_suffixes', [], ''),
                                         ('is_builtin', ['mname'], ''),
                                         ('make_builtin', [], ''),
                                         ('make_main', [], ''),
                                         ('make_osname', [], ''),
                                         ('make_sys', [], ''),
                                         ('copy_except', ['src', 'exceptions'], ''),
                                         ('copy_only', ['src', 'names'], ''),
                                         ('copy_none', ['src'], ''),
                                         ('add_module', ['mname'], ''),
                                         ('r_exec',
                                          ['code'],
                                          "Execute code within a restricted environment.\n\n        The code parameter must either be a string containing one or more\n        lines of Python code, or a compiled code object, which will be\n        executed in the restricted environment's __main__ module.\n\n        "),
                                         ('r_eval',
                                          ['code'],
                                          "Evaluate code within a restricted environment.\n\n        The code parameter must either be a string containing a Python\n        expression, or a compiled code object, which will be evaluated in\n        the restricted environment's __main__ module.  The value of the\n        expression or code object will be returned.\n\n        "),
                                         ('r_execfile',
                                          ['file'],
                                          "Execute the Python code in the file in the restricted\n        environment's __main__ module.\n\n        "),
                                         ('r_import',
                                          ['mname', 'globals={}', 'locals={}', 'fromlist=[]'],
                                          'Import a module, raising an ImportError exception if the module\n        is considered unsafe.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        '),
                                         ('r_reload',
                                          ['m'],
                                          'Reload the module object, re-parsing and re-initializing it.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        '),
                                         ('r_unload',
                                          ['m'],
                                          "Unload the module.\n\n        Removes it from the restricted environment's sys.modules dictionary.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        "),
                                         ('make_delegate_files', [], ''),
                                         ('set_files', [], ''),
                                         ('reset_files', [], ''),
                                         ('save_files', [], ''),
                                         ('restore_files', [], ''),
                                         ('s_apply', ['func', 'args=()', 'kw={}'], ''),
                                         ('s_exec',
                                          ['*args'],
                                          "Execute code within a restricted environment.\n\n        Similar to the r_exec() method, but the code will be granted access\n        to restricted versions of the standard I/O streams sys.stdin,\n        sys.stderr, and sys.stdout.\n\n        The code parameter must either be a string containing one or more\n        lines of Python code, or a compiled code object, which will be\n        executed in the restricted environment's __main__ module.\n\n        "),
                                         ('s_eval',
                                          ['*args'],
                                          "Evaluate code within a restricted environment.\n\n        Similar to the r_eval() method, but the code will be granted access\n        to restricted versions of the standard I/O streams sys.stdin,\n        sys.stderr, and sys.stdout.\n\n        The code parameter must either be a string containing a Python\n        expression, or a compiled code object, which will be evaluated in\n        the restricted environment's __main__ module.  The value of the\n        expression or code object will be returned.\n\n        "),
                                         ('s_execfile',
                                          ['*args'],
                                          "Execute the Python code in the file in the restricted\n        environment's __main__ module.\n\n        Similar to the r_execfile() method, but the code will be granted\n        access to restricted versions of the standard I/O streams sys.stdin,\n        sys.stderr, and sys.stdout.\n\n        "),
                                         ('s_import',
                                          ['*args'],
                                          'Import a module, raising an ImportError exception if the module\n        is considered unsafe.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        Similar to the r_import() method, but has access to restricted\n        versions of the standard I/O streams sys.stdin, sys.stderr, and\n        sys.stdout.\n\n        '),
                                         ('s_reload',
                                          ['*args'],
                                          'Reload the module object, re-parsing and re-initializing it.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        Similar to the r_reload() method, but has access to restricted\n        versions of the standard I/O streams sys.stdin, sys.stderr, and\n        sys.stdout.\n\n        '),
                                         ('s_unload',
                                          ['*args'],
                                          "Unload the module.\n\n        Removes it from the restricted environment's sys.modules dictionary.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        Similar to the r_unload() method, but has access to restricted\n        versions of the standard I/O streams sys.stdin, sys.stderr, and\n        sys.stdout.\n\n        "),
                                         ('r_open',
                                          ['file', "mode='r'", 'buf=-1'],
                                          "Method called when open() is called in the restricted environment.\n\n        The arguments are identical to those of the open() function, and a\n        file object (or a class instance compatible with file objects)\n        should be returned.  RExec's default behaviour is allow opening\n        any file for reading, but forbidding any attempt to write a file.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        "),
                                         ('r_exc_info', [], '')],
                             'properties': ['ok_path',
                                            'ok_builtin_modules',
                                            'ok_posix_names',
                                            'ok_sys_names',
                                            'nok_builtin_names',
                                            'ok_file_types',
                                            'hooks',
                                            'modules',
                                            'ok_dynamic_modules',
                                            'loader',
                                            'importer',
                                            'trusted_path',
                                            'delegate_stdin',
                                            'delegate_stdout',
                                            'delegate_stderr',
                                            'restricted_stdin',
                                            'restricted_stdout',
                                            'restricted_stderr',
                                            'save_stdin',
                                            'save_stdout',
                                            'save_stderr']},
             'rexec.RHooks': {'bases': ['ihooks.Hooks'],
                              'constructor': ['*args'],
                              'docstring': '',
                              'methods': [('set_rexec', ['rexec'], ''),
                                          ('get_suffixes', [], ''),
                                          ('is_builtin', ['name'], ''),
                                          ('init_builtin', ['name'], ''),
                                          ('init_frozen', ['name'], ''),
                                          ('load_source', ['*args'], ''),
                                          ('load_compiled', ['*args'], ''),
                                          ('load_package', ['*args'], ''),
                                          ('load_dynamic', ['name', 'filename', 'file'], ''),
                                          ('add_module', ['name'], ''),
                                          ('modules_dict', [], ''),
                                          ('default_path', [], '')],
                              'properties': ['rexec']},
             'rfc822.AddressList': {'bases': ['rfc822.AddrlistClass'],
                                    'constructor': ['field'],
                                    'docstring': 'An AddressList encapsulates a list of parsed RFC 2822 addresses.',
                                    'methods': [('__len__', [], ''),
                                                ('__str__', [], ''),
                                                ('__add__', ['other'], ''),
                                                ('__iadd__', ['other'], ''),
                                                ('__sub__', ['other'], ''),
                                                ('__isub__', ['other'], ''),
                                                ('__getitem__', ['index'], '')],
                                    'properties': ['addresslist']},
             'rfc822.AddrlistClass': {'bases': [],
                                      'constructor': ['field'],
                                      'docstring': 'Address parser class by Ben Escoto.\n\n    To understand what this class does, it helps to have a copy of\n    RFC 2822 in front of you.\n\n    http://www.faqs.org/rfcs/rfc2822.html\n\n    Note: this class interface is deprecated and may be removed in the future.\n    Use rfc822.AddressList instead.\n    ',
                                      'methods': [('gotonext',
                                                   [],
                                                   'Parse up to the start of the next address.'),
                                                  ('getaddrlist',
                                                   [],
                                                   'Parse all addresses.\n\n        Returns a list containing all of the addresses.\n        '),
                                                  ('getaddress', [], 'Parse the next address.'),
                                                  ('getrouteaddr',
                                                   [],
                                                   'Parse a route address (Return-path value).\n\n        This method just skips all the route stuff and returns the addrspec.\n        '),
                                                  ('getaddrspec',
                                                   [],
                                                   'Parse an RFC 2822 addr-spec.'),
                                                  ('getdomain',
                                                   [],
                                                   'Get the complete domain name from an address.'),
                                                  ('getdelimited',
                                                   ['beginchar',
                                                    'endchars',
                                                    'allowcomments=1'],
                                                   "Parse a header fragment delimited by special characters.\n\n        `beginchar' is the start character for the fragment.  If self is not\n        looking at an instance of `beginchar' then getdelimited returns the\n        empty string.\n\n        `endchars' is a sequence of allowable end-delimiting characters.\n        Parsing stops when one of these is encountered.\n\n        If `allowcomments' is non-zero, embedded RFC 2822 comments are allowed\n        within the parsed fragment.\n        "),
                                                  ('getquote',
                                                   [],
                                                   "Get a quote-delimited fragment from self's field."),
                                                  ('getcomment',
                                                   [],
                                                   "Get a parenthesis-delimited fragment from self's field."),
                                                  ('getdomainliteral',
                                                   [],
                                                   'Parse an RFC 2822 domain-literal.'),
                                                  ('getatom',
                                                   ['atomends=None'],
                                                   "Parse an RFC 2822 atom.\n\n        Optional atomends specifies a different set of end token delimiters\n        (the default is to use self.atomends).  This is used e.g. in\n        getphraselist() since phrase endings must not include the `.' (which\n        is legal in phrases)."),
                                                  ('getphraselist',
                                                   [],
                                                   'Parse a sequence of RFC 2822 phrases.\n\n        A phrase is a sequence of words, which are in turn either RFC 2822\n        atoms or quoted-strings.  Phrases are canonicalized by squeezing all\n        runs of continuous whitespace into one space.\n        ')],
                                      'properties': ['specials',
                                                     'pos',
                                                     'LWS',
                                                     'CR',
                                                     'atomends',
                                                     'phraseends',
                                                     'field',
                                                     'commentlist']},
             'rfc822.Message': {'bases': [],
                                'constructor': ['fp', 'seekable=1'],
                                'docstring': 'Represents a single RFC 2822-compliant message.',
                                'methods': [('rewindbody',
                                             [],
                                             'Rewind the file to the start of the body (if seekable).'),
                                            ('readheaders',
                                             [],
                                             'Read header lines.\n\n        Read header lines up to the entirely blank line that terminates them.\n        The (normally blank) line that ends the headers is skipped, but not\n        included in the returned list.  If a non-header line ends the headers,\n        (which is an error), an attempt is made to backspace over it; it is\n        never included in the returned list.\n\n        The variable self.status is set to the empty string if all went well,\n        otherwise it is an error message.  The variable self.headers is a\n        completely uninterpreted list of lines contained in the header (so\n        printing them will reproduce the header exactly as it appears in the\n        file).\n        '),
                                            ('isheader',
                                             ['line'],
                                             'Determine whether a given line is a legal header.\n\n        This method should return the header name, suitably canonicalized.\n        You may override this method in order to use Message parsing on tagged\n        data in RFC 2822-like formats with special header formats.\n        '),
                                            ('islast',
                                             ['line'],
                                             "Determine whether a line is a legal end of RFC 2822 headers.\n\n        You may override this method if your application wants to bend the\n        rules, e.g. to strip trailing whitespace, or to recognize MH template\n        separators ('--------').  For convenience (e.g. for code reading from\n        sockets) a line consisting of \r\n also matches.\n        "),
                                            ('iscomment',
                                             ['line'],
                                             'Determine whether a line should be skipped entirely.\n\n        You may override this method in order to use Message parsing on tagged\n        data in RFC 2822-like formats that support embedded comments or\n        free-text data.\n        '),
                                            ('getallmatchingheaders',
                                             ['name'],
                                             'Find all header lines matching a given header name.\n\n        Look through the list of headers and find all lines matching a given\n        header name (and their continuation lines).  A list of the lines is\n        returned, without interpretation.  If the header does not occur, an\n        empty list is returned.  If the header occurs multiple times, all\n        occurrences are returned.  Case is not important in the header name.\n        '),
                                            ('getfirstmatchingheader',
                                             ['name'],
                                             'Get the first header line matching name.\n\n        This is similar to getallmatchingheaders, but it returns only the\n        first matching header (and its continuation lines).\n        '),
                                            ('getrawheader',
                                             ['name'],
                                             'A higher-level interface to getfirstmatchingheader().\n\n        Return a string containing the literal text of the header but with the\n        keyword stripped.  All leading, trailing and embedded whitespace is\n        kept in the string, however.  Return None if the header does not\n        occur.\n        '),
                                            ('getheader',
                                             ['name', 'default=None'],
                                             "Get the header value for a name.\n\n        This is the normal interface: it returns a stripped version of the\n        header value for a given header name, or None if it doesn't exist.\n        This uses the dictionary version which finds the *last* such header.\n        "),
                                            ('getheaders',
                                             ['name'],
                                             'Get all values for a header.\n\n        This returns a list of values for headers given more than once; each\n        value in the result list is stripped in the same way as the result of\n        getheader().  If the header is not given, return an empty list.\n        '),
                                            ('getaddr',
                                             ['name'],
                                             "Get a single address from a header, as a tuple.\n\n        An example return value:\n        ('Guido van Rossum', 'guido@cwi.nl')\n        "),
                                            ('getaddrlist',
                                             ['name'],
                                             'Get a list of addresses from a header.\n\n        Retrieves a list of addresses from a header, where each address is a\n        tuple as returned by getaddr().  Scans all named headers, so it works\n        properly with multiple To: or Cc: headers for example.\n        '),
                                            ('getdate',
                                             ['name'],
                                             'Retrieve a date field from a header.\n\n        Retrieves a date field from the named header, returning a tuple\n        compatible with time.mktime().\n        '),
                                            ('getdate_tz',
                                             ['name'],
                                             "Retrieve a date field from a header as a 10-tuple.\n\n        The first 9 elements make up a tuple compatible with time.mktime(),\n        and the 10th is the offset of the poster's time zone from GMT/UTC.\n        "),
                                            ('__len__',
                                             [],
                                             'Get the number of headers in a message.'),
                                            ('__getitem__',
                                             ['name'],
                                             'Get a specific header, as from a dictionary.'),
                                            ('__setitem__',
                                             ['name', 'value'],
                                             'Set the value of a header.\n\n        Note: This is not a perfect inversion of __getitem__, because any\n        changed headers get stuck at the end of the raw-headers list rather\n        than where the altered header was.\n        '),
                                            ('__delitem__',
                                             ['name'],
                                             'Delete all occurrences of a specific header, if it is present.'),
                                            ('setdefault', ['name', "default=''"], ''),
                                            ('has_key',
                                             ['name'],
                                             'Determine whether a message contains the named header.'),
                                            ('__contains__',
                                             ['name'],
                                             'Determine whether a message contains the named header.'),
                                            ('__iter__', [], ''),
                                            ('keys',
                                             [],
                                             "Get all of a message's header field names."),
                                            ('values',
                                             [],
                                             "Get all of a message's header field values."),
                                            ('items',
                                             [],
                                             "Get all of a message's headers.\n\n        Returns a list of name, value tuples.\n        "),
                                            ('__str__', [], '')],
                                'properties': ['fp',
                                               'seekable',
                                               'startofheaders',
                                               'startofbody',
                                               'dict',
                                               'unixfrom',
                                               'headers',
                                               'status',
                                               'get']},
             'rlcompleter.Completer': {'bases': [],
                                       'constructor': ['namespace=None'],
                                       'docstring': '',
                                       'methods': [('complete',
                                                    ['text', 'state'],
                                                    "Return the next possible completion for 'text'.\n\n        This is called successively with state == 0, 1, 2, ... until it\n        returns None.  The completion should begin with 'text'.\n\n        "),
                                                   ('global_matches',
                                                    ['text'],
                                                    'Compute matches when text is a simple name.\n\n        Return a list of all keywords, built-in functions and names currently\n        defined in self.namespace that match.\n\n        '),
                                                   ('attr_matches',
                                                    ['text'],
                                                    'Compute matches when text contains a dot.\n\n        Assuming the text is of the form NAME.NAME....[NAME], and is\n        evaluatable in self.namespace, it will be evaluated and its attributes\n        (as revealed by dir()) are used as possible completions.  (For class\n        instances, class members are also considered.)\n\n        WARNING: this can still invoke arbitrary C code, if an object\n        with a __getattr__ hook is evaluated.\n\n        ')],
                                       'properties': ['use_main_ns', 'namespace', 'matches']},
             'robotparser.Entry': {'bases': [],
                                   'constructor': [],
                                   'docstring': 'An entry has one or more user-agents and zero or more rulelines',
                                   'methods': [('__str__', [], ''),
                                               ('applies_to',
                                                ['useragent'],
                                                'check if this entry applies to the specified agent'),
                                               ('allowance',
                                                ['filename'],
                                                'Preconditions:\n        - our agent applies to this entry\n        - filename is URL decoded')],
                                   'properties': ['useragents', 'rulelines']},
             'robotparser.RobotFileParser': {'bases': [],
                                             'constructor': ["url=''"],
                                             'docstring': ' This class provides a set of methods to read, parse and answer\n    questions about a single robots.txt file.\n\n    ',
                                             'methods': [('mtime',
                                                          [],
                                                          'Returns the time the robots.txt file was last fetched.\n\n        This is useful for long-running web spiders that need to\n        check for new robots.txt files periodically.\n\n        '),
                                                         ('modified',
                                                          [],
                                                          'Sets the time the robots.txt file was last fetched to the\n        current time.\n\n        '),
                                                         ('set_url',
                                                          ['url'],
                                                          'Sets the URL referring to a robots.txt file.'),
                                                         ('read',
                                                          [],
                                                          'Reads the robots.txt URL and feeds it to the parser.'),
                                                         ('_add_entry', ['entry'], ''),
                                                         ('parse',
                                                          ['lines'],
                                                          'parse the input lines from a robots.txt file.\n           We allow that a user-agent: line is not preceded by\n           one or more blank lines.'),
                                                         ('can_fetch',
                                                          ['useragent', 'url'],
                                                          'using the parsed robots.txt decide if useragent can fetch url'),
                                                         ('__str__', [], '')],
                                             'properties': ['entries',
                                                            'default_entry',
                                                            'disallow_all',
                                                            'allow_all',
                                                            'last_checked',
                                                            'url',
                                                            'host',
                                                            'path',
                                                            'errcode']},
             'robotparser.RuleLine': {'bases': [],
                                      'constructor': ['path', 'allowance'],
                                      'docstring': 'A rule line is a single "Allow:" (allowance==True) or "Disallow:"\n       (allowance==False) followed by a path.',
                                      'methods': [('applies_to', ['filename'], ''),
                                                  ('__str__', [], '')],
                                      'properties': ['path', 'allowance']},
             'robotparser.URLopener': {'bases': ['urllib.FancyURLopener'],
                                       'constructor': ['*args'],
                                       'docstring': '',
                                       'methods': [('prompt_user_passwd',
                                                    ['host', 'realm'],
                                                    ''),
                                                   ('http_error_default',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers'],
                                                    '')],
                                       'properties': ['errcode']},
             'sched.scheduler': {'bases': [],
                                 'constructor': ['timefunc', 'delayfunc'],
                                 'docstring': '',
                                 'methods': [('enterabs',
                                              ['time', 'priority', 'action', 'argument'],
                                              'Enter a new event in the queue at an absolute time.\n\n        Returns an ID for the event which can be used to remove it,\n        if necessary.\n\n        '),
                                             ('enter',
                                              ['delay', 'priority', 'action', 'argument'],
                                              'A variant that specifies the time as a relative time.\n\n        This is actually the more commonly used interface.\n\n        '),
                                             ('cancel',
                                              ['event'],
                                              'Remove an event from the queue.\n\n        This must be presented the ID as returned by enter().\n        If the event is not in the queue, this raises RuntimeError.\n\n        '),
                                             ('empty', [], 'Check whether the queue is empty.'),
                                             ('run',
                                              [],
                                              "Execute events until the queue is empty.\n\n        When there is a positive delay until the first event, the\n        delay function is called and the event is left in the queue;\n        otherwise, the event is removed from the queue and executed\n        (its action function is called, passing it the argument).  If\n        the delay function returns prematurely, it is simply\n        restarted.\n\n        It is legal for both the delay function and the action\n        function to to modify the queue or to raise an exception;\n        exceptions are not caught but the scheduler's state remains\n        well-defined so run() may be called again.\n\n        A questionably hack is added to allow other threads to run:\n        just after an event is executed, a delay of 0 is executed, to\n        avoid monopolizing the CPU when other threads are also\n        runnable.\n\n        ")],
                                 'properties': ['queue', 'timefunc', 'delayfunc']},
             'sets.BaseSet': {'bases': ['object'],
                              'constructor': [],
                              'docstring': 'Common base class for mutable and immutable sets.',
                              'methods': [('__len__',
                                           [],
                                           'Return the number of elements of a set.'),
                                          ('__repr__',
                                           [],
                                           "Return string representation of a set.\n\n        This looks like 'Set([<list of elements>])'.\n        "),
                                          ('_repr', ['sorted=False'], ''),
                                          ('__iter__',
                                           [],
                                           'Return an iterator over the elements or a set.\n\n        This is the keys iterator for the underlying dict.\n        '),
                                          ('__cmp__', ['other'], ''),
                                          ('__eq__', ['other'], ''),
                                          ('__ne__', ['other'], ''),
                                          ('copy', [], 'Return a shallow copy of a set.'),
                                          ('__deepcopy__',
                                           ['memo'],
                                           'Return a deep copy of a set; used by copy module.'),
                                          ('__or__',
                                           ['other'],
                                           'Return the union of two sets as a new set.\n\n        (I.e. all elements that are in either set.)\n        '),
                                          ('union',
                                           ['other'],
                                           'Return the union of two sets as a new set.\n\n        (I.e. all elements that are in either set.)\n        '),
                                          ('__and__',
                                           ['other'],
                                           'Return the intersection of two sets as a new set.\n\n        (I.e. all elements that are in both sets.)\n        '),
                                          ('intersection',
                                           ['other'],
                                           'Return the intersection of two sets as a new set.\n\n        (I.e. all elements that are in both sets.)\n        '),
                                          ('__xor__',
                                           ['other'],
                                           'Return the symmetric difference of two sets as a new set.\n\n        (I.e. all elements that are in exactly one of the sets.)\n        '),
                                          ('symmetric_difference',
                                           ['other'],
                                           'Return the symmetric difference of two sets as a new set.\n\n        (I.e. all elements that are in exactly one of the sets.)\n        '),
                                          ('__sub__',
                                           ['other'],
                                           'Return the difference of two sets as a new Set.\n\n        (I.e. all elements that are in this set and not in the other.)\n        '),
                                          ('difference',
                                           ['other'],
                                           'Return the difference of two sets as a new Set.\n\n        (I.e. all elements that are in this set and not in the other.)\n        '),
                                          ('__contains__',
                                           ['element'],
                                           "Report whether an element is a member of a set.\n\n        (Called in response to the expression `element in self'.)\n        "),
                                          ('issubset',
                                           ['other'],
                                           'Report whether another set contains this set.'),
                                          ('issuperset',
                                           ['other'],
                                           'Report whether this set contains another set.'),
                                          ('__lt__', ['other'], ''),
                                          ('__gt__', ['other'], ''),
                                          ('_binary_sanity_check', ['other'], ''),
                                          ('_compute_hash', [], ''),
                                          ('_update', ['iterable'], '')],
                              'properties': ['__slots__',
                                             '__str__',
                                             '__copy__',
                                             '__le__',
                                             '__ge__']},
             'sets.ImmutableSet': {'bases': ['sets.BaseSet'],
                                   'constructor': ['iterable=None'],
                                   'docstring': 'Immutable set class.',
                                   'methods': [('__hash__', [], ''),
                                               ('__getstate__', [], ''),
                                               ('__setstate__', ['state'], '')],
                                   'properties': ['__slots__', '_hashcode', '_data']},
             'sets.Set': {'bases': ['sets.BaseSet'],
                          'constructor': ['iterable=None'],
                          'docstring': ' Mutable set class.',
                          'methods': [('__getstate__', [], ''),
                                      ('__setstate__', ['data'], ''),
                                      ('__hash__', [], 'A Set cannot be hashed.'),
                                      ('__ior__',
                                       ['other'],
                                       'Update a set with the union of itself and another.'),
                                      ('union_update',
                                       ['other'],
                                       'Update a set with the union of itself and another.'),
                                      ('__iand__',
                                       ['other'],
                                       'Update a set with the intersection of itself and another.'),
                                      ('intersection_update',
                                       ['other'],
                                       'Update a set with the intersection of itself and another.'),
                                      ('__ixor__',
                                       ['other'],
                                       'Update a set with the symmetric difference of itself and another.'),
                                      ('symmetric_difference_update',
                                       ['other'],
                                       'Update a set with the symmetric difference of itself and another.'),
                                      ('__isub__',
                                       ['other'],
                                       'Remove all elements of another set from this set.'),
                                      ('difference_update',
                                       ['other'],
                                       'Remove all elements of another set from this set.'),
                                      ('update',
                                       ['iterable'],
                                       'Add all values from an iterable (such as a list or file).'),
                                      ('clear', [], 'Remove all elements from this set.'),
                                      ('add',
                                       ['element'],
                                       'Add an element to a set.\n\n        This has no effect if the element is already present.\n        '),
                                      ('remove',
                                       ['element'],
                                       'Remove an element from a set; it must be a member.\n\n        If the element is not a member, raise a KeyError.\n        '),
                                      ('discard',
                                       ['element'],
                                       'Remove an element from a set if it is a member.\n\n        If the element is not a member, do nothing.\n        '),
                                      ('pop',
                                       [],
                                       'Remove and return an arbitrary set element.'),
                                      ('__as_immutable__', [], ''),
                                      ('__as_temporarily_immutable__', [], '')],
                          'properties': ['__slots__', '_data']},
             'sets._TemporarilyImmutableSet': {'bases': ['sets.BaseSet'],
                                               'constructor': ['set'],
                                               'docstring': '',
                                               'methods': [('__hash__', [], '')],
                                               'properties': ['_set', '_data']},
             'sgmllib.SGMLParseError': {'bases': ['RuntimeError'],
                                        'constructor': [],
                                        'docstring': 'Exception raised for all parse errors.',
                                        'methods': [],
                                        'properties': []},
             'sgmllib.SGMLParser': {'bases': ['markupbase.ParserBase'],
                                    'constructor': ['verbose=0'],
                                    'docstring': '',
                                    'methods': [('reset',
                                                 [],
                                                 'Reset this instance. Loses all unprocessed data.'),
                                                ('setnomoretags',
                                                 [],
                                                 'Enter literal mode (CDATA) till EOF.\n\n        Intended for derived classes only.\n        '),
                                                ('setliteral',
                                                 ['*args'],
                                                 'Enter literal mode (CDATA).\n\n        Intended for derived classes only.\n        '),
                                                ('feed',
                                                 ['data'],
                                                 "Feed some data to the parser.\n\n        Call this as often as you want, with as little or as much text\n        as you want (may include '\n').  (This just saves the text,\n        all the processing is done by goahead().)\n        "),
                                                ('close', [], 'Handle the remaining data.'),
                                                ('error', ['message'], ''),
                                                ('goahead', ['end'], ''),
                                                ('parse_pi', ['i'], ''),
                                                ('get_starttag_text', [], ''),
                                                ('parse_starttag', ['i'], ''),
                                                ('_convert_ref', ['match'], ''),
                                                ('parse_endtag', ['i'], ''),
                                                ('finish_shorttag', ['tag', 'data'], ''),
                                                ('finish_starttag', ['tag', 'attrs'], ''),
                                                ('finish_endtag', ['tag'], ''),
                                                ('handle_starttag',
                                                 ['tag', 'method', 'attrs'],
                                                 ''),
                                                ('handle_endtag', ['tag', 'method'], ''),
                                                ('report_unbalanced', ['tag'], ''),
                                                ('convert_charref',
                                                 ['name'],
                                                 'Convert character reference, may be overridden.'),
                                                ('convert_codepoint', ['codepoint'], ''),
                                                ('handle_charref',
                                                 ['name'],
                                                 'Handle character reference, no need to override.'),
                                                ('convert_entityref',
                                                 ['name'],
                                                 'Convert entity references.\n\n        As an alternative to overriding this method; one can tailor the\n        results by setting up the self.entitydefs mapping appropriately.\n        '),
                                                ('handle_entityref',
                                                 ['name'],
                                                 'Handle entity references, no need to override.'),
                                                ('handle_data', ['data'], ''),
                                                ('handle_comment', ['data'], ''),
                                                ('handle_decl', ['decl'], ''),
                                                ('handle_pi', ['data'], ''),
                                                ('unknown_starttag', ['tag', 'attrs'], ''),
                                                ('unknown_endtag', ['tag'], ''),
                                                ('unknown_charref', ['ref'], ''),
                                                ('unknown_entityref', ['ref'], '')],
                                    'properties': ['entity_or_charref',
                                                   'verbose',
                                                   '__starttag_text',
                                                   'rawdata',
                                                   'stack',
                                                   'lasttag',
                                                   'nomoretags',
                                                   'literal',
                                                   '_decl_otherchars',
                                                   'entitydefs']},
             'sgmllib.TestSGMLParser': {'bases': ['sgmllib.SGMLParser'],
                                        'constructor': ['verbose=0'],
                                        'docstring': '',
                                        'methods': [('handle_data', ['data'], ''),
                                                    ('flush', [], ''),
                                                    ('handle_comment', ['data'], ''),
                                                    ('unknown_starttag', ['tag', 'attrs'], ''),
                                                    ('unknown_endtag', ['tag'], ''),
                                                    ('unknown_entityref', ['ref'], ''),
                                                    ('unknown_charref', ['ref'], ''),
                                                    ('unknown_decl', ['data'], ''),
                                                    ('close', [], '')],
                                        'properties': ['testdata']},
             'shelve.BsdDbShelf': {'bases': ['shelve.Shelf'],
                                   'constructor': ['dict', 'protocol=None', 'writeback=False'],
                                   'docstring': 'Shelf implementation using the "BSD" db interface.\n\n    This adds methods first(), next(), previous(), last() and\n    set_location() that have no counterpart in [g]dbm databases.\n\n    The actual database must be opened using one of the "bsddb"\n    modules "open" routines (i.e. bsddb.hashopen, bsddb.btopen or\n    bsddb.rnopen) and passed to the constructor.\n\n    See the module\'s __doc__ string for an overview of the interface.\n    ',
                                   'methods': [('set_location', ['key'], ''),
                                               ('next', [], ''),
                                               ('previous', [], ''),
                                               ('first', [], ''),
                                               ('last', [], '')],
                                   'properties': []},
             'shelve.DbfilenameShelf': {'bases': ['shelve.Shelf'],
                                        'constructor': ['filename',
                                                        "flag='c'",
                                                        'protocol=None',
                                                        'writeback=False'],
                                        'docstring': 'Shelf implementation using the "anydbm" generic dbm interface.\n\n    This is initialized with the filename for the dbm database.\n    See the module\'s __doc__ string for an overview of the interface.\n    ',
                                        'methods': [],
                                        'properties': []},
             'shelve.Shelf': {'bases': ['UserDict.DictMixin'],
                              'constructor': ['dict', 'protocol=None', 'writeback=False'],
                              'docstring': "Base class for shelf implementations.\n\n    This is initialized with a dictionary-like object.\n    See the module's __doc__ string for an overview of the interface.\n    ",
                              'methods': [('keys', [], ''),
                                          ('__len__', [], ''),
                                          ('has_key', ['key'], ''),
                                          ('__contains__', ['key'], ''),
                                          ('get', ['key', 'default=None'], ''),
                                          ('__getitem__', ['key'], ''),
                                          ('__setitem__', ['key', 'value'], ''),
                                          ('__delitem__', ['key'], ''),
                                          ('close', [], ''),
                                          ('__del__', [], ''),
                                          ('sync', [], '')],
                              'properties': ['dict', '_protocol', 'writeback', 'cache']},
             'shlex.shlex': {'bases': [],
                             'constructor': ['instream=None', 'infile=None', 'posix=False'],
                             'docstring': 'A lexical analyzer class for simple shell-like syntaxes.',
                             'methods': [('push_token',
                                          ['tok'],
                                          'Push a token onto the stack popped by the get_token method'),
                                         ('push_source',
                                          ['newstream', 'newfile=None'],
                                          "Push an input source onto the lexer's input source stack."),
                                         ('pop_source', [], 'Pop the input source stack.'),
                                         ('get_token',
                                          [],
                                          "Get a token from the input stream (or from stack if it's nonempty)"),
                                         ('read_token', [], ''),
                                         ('sourcehook',
                                          ['newfile'],
                                          'Hook called on a filename to be sourced.'),
                                         ('error_leader',
                                          ['infile=None', 'lineno=None'],
                                          'Emit a C-compiler-like, Emacs-friendly error-message leader.'),
                                         ('__iter__', [], ''),
                                         ('next', [], '')],
                             'properties': ['instream',
                                            'infile',
                                            'posix',
                                            'eof',
                                            'commenters',
                                            'wordchars',
                                            'whitespace',
                                            'whitespace_split',
                                            'quotes',
                                            'escape',
                                            'escapedquotes',
                                            'state',
                                            'pushback',
                                            'lineno',
                                            'debug',
                                            'token',
                                            'filestack',
                                            'source']},
             'shutil.Error': {'bases': ['EnvironmentError'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'site._Helper': {'bases': ['object'],
                              'constructor': [],
                              'docstring': "Define the built-in 'help'.\n    This is a wrapper around pydoc.help (with a twist).\n\n    ",
                              'methods': [('__repr__', [], ''),
                                          ('__call__', ['*args', '**kwds'], '')],
                              'properties': []},
             'site._Printer': {'bases': ['object'],
                               'constructor': ['name', 'data', 'files=()', 'dirs=()'],
                               'docstring': 'interactive prompt objects for printing the license text, a list of\n    contributors and the copyright notice.',
                               'methods': [('__setup', [], ''),
                                           ('__repr__', [], ''),
                                           ('__call__', [], '')],
                               'properties': ['MAXLINES',
                                              '__name',
                                              '__data',
                                              '__files',
                                              '__dirs',
                                              '__lines',
                                              '__linecnt']},
             'smtpd.DebuggingServer': {'bases': ['smtpd.SMTPServer'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('process_message',
                                                    ['peer', 'mailfrom', 'rcpttos', 'data'],
                                                    '')],
                                       'properties': []},
             'smtpd.Devnull': {'bases': [],
                               'constructor': [],
                               'docstring': '',
                               'methods': [('write', ['msg'], ''), ('flush', [], '')],
                               'properties': []},
             'smtpd.MailmanProxy': {'bases': ['smtpd.PureProxy'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('process_message',
                                                 ['peer', 'mailfrom', 'rcpttos', 'data'],
                                                 '')],
                                    'properties': []},
             'smtpd.Options': {'bases': [],
                               'constructor': [],
                               'docstring': '',
                               'methods': [],
                               'properties': ['setuid', 'classname']},
             'smtpd.PureProxy': {'bases': ['smtpd.SMTPServer'],
                                 'constructor': [],
                                 'docstring': '',
                                 'methods': [('process_message',
                                              ['peer', 'mailfrom', 'rcpttos', 'data'],
                                              ''),
                                             ('_deliver', ['mailfrom', 'rcpttos', 'data'], '')],
                                 'properties': []},
             'smtpd.SMTPChannel': {'bases': ['asynchat.async_chat'],
                                   'constructor': ['server', 'conn', 'addr'],
                                   'docstring': '',
                                   'methods': [('push', ['msg'], ''),
                                               ('collect_incoming_data', ['data'], ''),
                                               ('found_terminator', [], ''),
                                               ('smtp_HELO', ['arg'], ''),
                                               ('smtp_NOOP', ['arg'], ''),
                                               ('smtp_QUIT', ['arg'], ''),
                                               ('__getaddr', ['keyword', 'arg'], ''),
                                               ('smtp_MAIL', ['arg'], ''),
                                               ('smtp_RCPT', ['arg'], ''),
                                               ('smtp_RSET', ['arg'], ''),
                                               ('smtp_DATA', ['arg'], '')],
                                   'properties': ['COMMAND',
                                                  'DATA',
                                                  '__server',
                                                  '__conn',
                                                  '__addr',
                                                  '__line',
                                                  '__state',
                                                  '__greeting',
                                                  '__mailfrom',
                                                  '__rcpttos',
                                                  '__data',
                                                  '__fqdn',
                                                  '__peer']},
             'smtpd.SMTPServer': {'bases': ['asyncore.dispatcher'],
                                  'constructor': ['localaddr', 'remoteaddr'],
                                  'docstring': '',
                                  'methods': [('handle_accept', [], ''),
                                              ('process_message',
                                               ['peer', 'mailfrom', 'rcpttos', 'data'],
                                               "Override this abstract method to handle messages from the client.\n\n        peer is a tuple containing (ipaddr, port) of the client that made the\n        socket connection to our smtp port.\n\n        mailfrom is the raw address the client claims the message is coming\n        from.\n\n        rcpttos is a list of raw addresses the client wishes to deliver the\n        message to.\n\n        data is a string containing the entire full text of the message,\n        headers (if supplied) and all.  It has been `de-transparencied'\n        according to RFC 821, Section 4.5.2.  In other words, a line\n        containing a `.' followed by other text has had the leading dot\n        removed.\n\n        This function should return None, for a normal `250 Ok' response;\n        otherwise it returns the desired response string in RFC 821 format.\n\n        ")],
                                  'properties': ['_localaddr', '_remoteaddr']},
             'smtplib.SMTP': {'bases': [],
                              'constructor': ["host=''", 'port=0', 'local_hostname=None'],
                              'docstring': "This class manages a connection to an SMTP or ESMTP server.\n    SMTP Objects:\n        SMTP objects have the following attributes:\n            helo_resp\n                This is the message given by the server in response to the\n                most recent HELO command.\n\n            ehlo_resp\n                This is the message given by the server in response to the\n                most recent EHLO command. This is usually multiline.\n\n            does_esmtp\n                This is a True value _after you do an EHLO command_, if the\n                server supports ESMTP.\n\n            esmtp_features\n                This is a dictionary, which, if the server supports ESMTP,\n                will _after you do an EHLO command_, contain the names of the\n                SMTP service extensions this server supports, and their\n                parameters (if any).\n\n                Note, all extension names are mapped to lower case in the\n                dictionary.\n\n        See each method's docstrings for details.  In general, there is a\n        method of the same name to perform each SMTP command.  There is also a\n        method called 'sendmail' that will do an entire mail transaction.\n        ",
                              'methods': [('set_debuglevel',
                                           ['debuglevel'],
                                           'Set the debug output level.\n\n        A non-false value results in debug messages for connection and for all\n        messages sent to and received from the server.\n\n        '),
                                          ('connect',
                                           ["host='localhost'", 'port=0'],
                                           "Connect to a host on a given port.\n\n        If the hostname ends with a colon (`:') followed by a number, and\n        there is no port specified, that suffix will be stripped off and the\n        number interpreted as the port number to use.\n\n        Note: This method is automatically invoked by __init__, if a host is\n        specified during instantiation.\n\n        "),
                                          ('send', ['str'], "Send `str' to the server."),
                                          ('putcmd',
                                           ['cmd', "args=''"],
                                           'Send a command to the server.'),
                                          ('getreply',
                                           [],
                                           "Get a reply from the server.\n\n        Returns a tuple consisting of:\n\n          - server response code (e.g. '250', or such, if all goes well)\n            Note: returns -1 if it can't read response code.\n\n          - server response string corresponding to response code (multiline\n            responses are converted to a single, multiline string).\n\n        Raises SMTPServerDisconnected if end-of-file is reached.\n        "),
                                          ('docmd',
                                           ['cmd', "args=''"],
                                           'Send a command, and return its response code.'),
                                          ('helo',
                                           ["name=''"],
                                           "SMTP 'helo' command.\n        Hostname to send for this command defaults to the FQDN of the local\n        host.\n        "),
                                          ('ehlo',
                                           ["name=''"],
                                           " SMTP 'ehlo' command.\n        Hostname to send for this command defaults to the FQDN of the local\n        host.\n        "),
                                          ('has_extn',
                                           ['opt'],
                                           'Does the server support a given SMTP service extension?'),
                                          ('help',
                                           ["args=''"],
                                           "SMTP 'help' command.\n        Returns help text from server."),
                                          ('rset',
                                           [],
                                           "SMTP 'rset' command -- resets session."),
                                          ('noop',
                                           [],
                                           "SMTP 'noop' command -- doesn't do anything :>"),
                                          ('mail',
                                           ['sender', 'options=[]'],
                                           "SMTP 'mail' command -- begins mail xfer session."),
                                          ('rcpt',
                                           ['recip', 'options=[]'],
                                           "SMTP 'rcpt' command -- indicates 1 recipient for this mail."),
                                          ('data',
                                           ['msg'],
                                           "SMTP 'DATA' command -- sends message data to server.\n\n        Automatically quotes lines beginning with a period per rfc821.\n        Raises SMTPDataError if there is an unexpected reply to the\n        DATA command; the return value from this method is the final\n        response code received when the all data is sent.\n        "),
                                          ('verify',
                                           ['address'],
                                           "SMTP 'verify' command -- checks for address validity."),
                                          ('expn',
                                           ['address'],
                                           "SMTP 'verify' command -- checks for address validity."),
                                          ('login',
                                           ['user', 'password'],
                                           "Log in on an SMTP server that requires authentication.\n\n        The arguments are:\n            - user:     The user name to authenticate with.\n            - password: The password for the authentication.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.\n\n        This method will return normally if the authentication was successful.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError            The server didn't reply properly to\n                                  the helo greeting.\n         SMTPAuthenticationError  The server didn't accept the username/\n                                  password combination.\n         SMTPException            No suitable authentication method was\n                                  found.\n        "),
                                          ('starttls',
                                           ['keyfile=None', 'certfile=None'],
                                           'Puts the connection to the SMTP server into TLS mode.\n\n        If the server supports TLS, this will encrypt the rest of the SMTP\n        session. If you provide the keyfile and certfile parameters,\n        the identity of the SMTP server and client can be checked. This,\n        however, depends on whether the socket module really checks the\n        certificates.\n        '),
                                          ('sendmail',
                                           ['from_addr',
                                            'to_addrs',
                                            'msg',
                                            'mail_options=[]',
                                            'rcpt_options=[]'],
                                           'This command performs an entire mail transaction.\n\n        The arguments are:\n            - from_addr    : The address sending this mail.\n            - to_addrs     : A list of addresses to send this mail to.  A bare\n                             string will be treated as a list with 1 address.\n            - msg          : The message to send.\n            - mail_options : List of ESMTP options (such as 8bitmime) for the\n                             mail command.\n            - rcpt_options : List of ESMTP options (such as DSN commands) for\n                             all the rcpt commands.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.  If the server does ESMTP, message size\n        and each of the specified options will be passed to it.  If EHLO\n        fails, HELO will be tried and ESMTP options suppressed.\n\n        This method will return normally if the mail is accepted for at least\n        one recipient.  It returns a dictionary, with one entry for each\n        recipient that was refused.  Each entry contains a tuple of the SMTP\n        error code and the accompanying error message sent by the server.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError          The server didn\'t reply properly to\n                                the helo greeting.\n         SMTPRecipientsRefused  The server rejected ALL recipients\n                                (no mail was sent).\n         SMTPSenderRefused      The server didn\'t accept the from_addr.\n         SMTPDataError          The server replied with an unexpected\n                                error code (other than a refusal of\n                                a recipient).\n\n        Note: the connection will be open even after an exception is raised.\n\n        Example:\n\n         >>> import smtplib\n         >>> s=smtplib.SMTP("localhost")\n         >>> tolist=["one@one.org","two@two.org","three@three.org","four@four.org"]\n         >>> msg = \'\'\'\\\n         ... From: Me@my.org\n         ... Subject: testin\'...\n         ...\n         ... This is a test \'\'\'\n         >>> s.sendmail("me@my.org",tolist,msg)\n         { "three@three.org" : ( 550 ,"User unknown" ) }\n         >>> s.quit()\n\n        In the above example, the message was accepted for delivery to three\n        of the four addresses, and one was rejected, with the error code\n        550.  If all addresses are accepted, then the method will return an\n        empty dictionary.\n\n        '),
                                          ('close',
                                           [],
                                           'Close the connection to the SMTP server.'),
                                          ('quit', [], 'Terminate the SMTP session.')],
                              'properties': ['debuglevel',
                                             'file',
                                             'helo_resp',
                                             'ehlo_resp',
                                             'does_esmtp',
                                             'esmtp_features',
                                             'local_hostname',
                                             'sock',
                                             'vrfy']},
             'smtplib.SMTPAuthenticationError': {'bases': ['smtplib.SMTPResponseException'],
                                                 'constructor': [],
                                                 'docstring': "Authentication error.\n\n    Most probably the server didn't accept the username/password\n    combination provided.\n    ",
                                                 'methods': [],
                                                 'properties': []},
             'smtplib.SMTPConnectError': {'bases': ['smtplib.SMTPResponseException'],
                                          'constructor': [],
                                          'docstring': 'Error during connection establishment.',
                                          'methods': [],
                                          'properties': []},
             'smtplib.SMTPDataError': {'bases': ['smtplib.SMTPResponseException'],
                                       'constructor': [],
                                       'docstring': "The SMTP server didn't accept the data.",
                                       'methods': [],
                                       'properties': []},
             'smtplib.SMTPException': {'bases': ['Exception'],
                                       'constructor': [],
                                       'docstring': 'Base class for all exceptions raised by this module.',
                                       'methods': [],
                                       'properties': []},
             'smtplib.SMTPHeloError': {'bases': ['smtplib.SMTPResponseException'],
                                       'constructor': [],
                                       'docstring': 'The server refused our HELO reply.',
                                       'methods': [],
                                       'properties': []},
             'smtplib.SMTPRecipientsRefused': {'bases': ['smtplib.SMTPException'],
                                               'constructor': ['recipients'],
                                               'docstring': "All recipient addresses refused.\n\n    The errors for each recipient are accessible through the attribute\n    'recipients', which is a dictionary of exactly the same sort as\n    SMTP.sendmail() returns.\n    ",
                                               'methods': [],
                                               'properties': ['recipients', 'args']},
             'smtplib.SMTPResponseException': {'bases': ['smtplib.SMTPException'],
                                               'constructor': ['code', 'msg'],
                                               'docstring': "Base class for all exceptions that include an SMTP error code.\n\n    These exceptions are generated in some instances when the SMTP\n    server returns an error code.  The error code is stored in the\n    `smtp_code' attribute of the error, and the `smtp_error' attribute\n    is set to the error message.\n    ",
                                               'methods': [],
                                               'properties': ['smtp_code', 'smtp_error', 'args']},
             'smtplib.SMTPSenderRefused': {'bases': ['smtplib.SMTPResponseException'],
                                           'constructor': ['code', 'msg', 'sender'],
                                           'docstring': "Sender address refused.\n\n    In addition to the attributes set by on all SMTPResponseException\n    exceptions, this sets `sender' to the string that the SMTP refused.\n    ",
                                           'methods': [],
                                           'properties': ['smtp_code',
                                                          'smtp_error',
                                                          'sender',
                                                          'args']},
             'smtplib.SMTPServerDisconnected': {'bases': ['smtplib.SMTPException'],
                                                'constructor': [],
                                                'docstring': 'Not connected to any SMTP server.\n\n    This exception is raised when the server unexpectedly disconnects,\n    or when an attempt is made to use the SMTP instance before\n    connecting it to a server.\n    ',
                                                'methods': [],
                                                'properties': []},
             'smtplib.SSLFakeFile': {'bases': [],
                                     'constructor': ['sslobj'],
                                     'docstring': 'A fake file like object that really wraps a SSLObject.\n\n    It only supports what is needed in smtplib.\n    ',
                                     'methods': [('readline', [], ''), ('close', [], '')],
                                     'properties': ['sslobj']},
             'smtplib.SSLFakeSocket': {'bases': [],
                                       'constructor': ['realsock', 'sslobj'],
                                       'docstring': 'A fake socket object that really wraps a SSLObject.\n\n    It only supports what is needed in smtplib.\n    ',
                                       'methods': [('send', ['str'], ''), ('close', [], '')],
                                       'properties': ['realsock', 'sslobj', 'sendall']},
             'socket._closedsocket': {'bases': ['object'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('_dummy', [], '')],
                                      'properties': ['__slots__',
                                                     'send',
                                                     'recv',
                                                     'recv_into',
                                                     'sendto',
                                                     'recvfrom',
                                                     'recvfrom_into',
                                                     '__getattr__']},
             'socket._fileobject': {'bases': ['object'],
                                    'constructor': ['sock',
                                                    "mode='rb'",
                                                    'bufsize=-1',
                                                    'close=False'],
                                    'docstring': 'Faux file object attached to a socket object.',
                                    'methods': [('_getclosed', [], ''),
                                                ('close', [], ''),
                                                ('__del__', [], ''),
                                                ('flush', [], ''),
                                                ('fileno', [], ''),
                                                ('write', ['data'], ''),
                                                ('writelines', ['list'], ''),
                                                ('_get_wbuf_len', [], ''),
                                                ('read', ['size=-1'], ''),
                                                ('readline', ['size=-1'], ''),
                                                ('readlines', ['sizehint=0'], ''),
                                                ('__iter__', [], ''),
                                                ('next', [], '')],
                                    'properties': ['default_bufsize',
                                                   'name',
                                                   '__slots__',
                                                   '_sock',
                                                   'mode',
                                                   'bufsize',
                                                   'softspace',
                                                   '_rbufsize',
                                                   '_wbufsize',
                                                   '_rbuf',
                                                   '_wbuf',
                                                   '_close',
                                                   'closed']},
             'socket._socketobject': {'bases': ['object'],
                                      'constructor': ['family=AF_INET',
                                                      'type=SOCK_STREAM',
                                                      'proto=0',
                                                      '_sock=None'],
                                      'docstring': '',
                                      'methods': [('close', [], ''),
                                                  ('accept', [], ''),
                                                  ('dup',
                                                   [],
                                                   'dup() -> socket object\n\n        Return a new socket object connected to the same system resource.'),
                                                  ('makefile',
                                                   ["mode='r'", 'bufsize=-1'],
                                                   'makefile([mode[, bufsize]]) -> file object\n\n        Return a regular file object corresponding to the socket.  The mode\n        and bufsize arguments are as for the built-in open() function.')],
                                      'properties': ['__doc__',
                                                     '__slots__',
                                                     '_sock',
                                                     'family',
                                                     'type',
                                                     'proto',
                                                     '_s',
                                                     '_m']},
             'sre_constants.error': {'bases': ['Exception'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': []},
             'sre_parse.Pattern': {'bases': [],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [('opengroup', ['name=None'], ''),
                                               ('closegroup', ['gid'], ''),
                                               ('checkgroup', ['gid'], '')],
                                   'properties': ['flags', 'open', 'groups', 'groupdict']},
             'sre_parse.SubPattern': {'bases': [],
                                      'constructor': ['pattern', 'data=None'],
                                      'docstring': '',
                                      'methods': [('dump', ['level=0'], ''),
                                                  ('__repr__', [], ''),
                                                  ('__len__', [], ''),
                                                  ('__delitem__', ['index'], ''),
                                                  ('__getitem__', ['index'], ''),
                                                  ('__setitem__', ['index', 'code'], ''),
                                                  ('__getslice__', ['start', 'stop'], ''),
                                                  ('insert', ['index', 'code'], ''),
                                                  ('append', ['code'], ''),
                                                  ('getwidth', [], '')],
                                      'properties': ['pattern', 'data', 'width']},
             'sre_parse.Tokenizer': {'bases': [],
                                     'constructor': ['string'],
                                     'docstring': '',
                                     'methods': [('__next', [], ''),
                                                 ('match', ['char', 'skip=1'], ''),
                                                 ('get', [], ''),
                                                 ('tell', [], ''),
                                                 ('seek', ['index'], '')],
                                     'properties': ['string', 'index', 'next']},
             'string.Template': {'bases': [],
                                 'constructor': ['template'],
                                 'docstring': 'A string class for supporting $-substitutions.',
                                 'methods': [('_invalid', ['mo'], ''),
                                             ('substitute', ['*args', '**kws'], ''),
                                             ('safe_substitute', ['*args', '**kws'], '')],
                                 'properties': ['__metaclass__',
                                                'delimiter',
                                                'idpattern',
                                                'template']},
             'string._TemplateMetaclass': {'bases': ['type'],
                                           'constructor': ['name', 'bases', 'dct'],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': ['pattern']},
             'string._multimap': {'bases': [],
                                  'constructor': ['primary', 'secondary'],
                                  'docstring': 'Helper class for combining multiple mappings.\n\n    Used by .{safe_,}substitute() to combine the mapping and keyword\n    arguments.\n    ',
                                  'methods': [('__getitem__', ['key'], '')],
                                  'properties': ['_primary', '_secondary']},
             'subprocess.CalledProcessError': {'bases': ['Exception'],
                                               'constructor': ['returncode', 'cmd'],
                                               'docstring': 'This exception is raised when a process run by check_call() returns\n    a non-zero exit status.  The exit status will be stored in the\n    returncode attribute.',
                                               'methods': [('__str__', [], '')],
                                               'properties': ['returncode', 'cmd']},
             'subprocess.Popen': {'bases': ['object'],
                                  'constructor': ['args',
                                                  'bufsize=0',
                                                  'executable=None',
                                                  'stdin=None',
                                                  'stdout=None',
                                                  'stderr=None',
                                                  'preexec_fn=None',
                                                  'close_fds=False',
                                                  'shell=False',
                                                  'cwd=None',
                                                  'env=None',
                                                  'universal_newlines=False',
                                                  'startupinfo=None',
                                                  'creationflags=0'],
                                  'docstring': '',
                                  'methods': [('_translate_newlines', ['data'], ''),
                                              ('__del__', ['sys=sys'], ''),
                                              ('communicate',
                                               ['input=None'],
                                               'Interact with process: Send data to stdin.  Read data from\n        stdout and stderr, until end-of-file is reached.  Wait for\n        process to terminate.  The optional input argument should be a\n        string to be sent to the child process, or None, if no data\n        should be sent to the child.\n\n        communicate() returns a tuple (stdout, stderr).'),
                                              ('poll', [], ''),
                                              ('_get_handles',
                                               ['stdin', 'stdout', 'stderr'],
                                               'Construct and return tupel with IO objects:\n            p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite\n            '),
                                              ('_make_inheritable',
                                               ['handle'],
                                               'Return a duplicate of handle, which is inheritable'),
                                              ('_find_w9xpopen',
                                               [],
                                               'Find and return absolut path to w9xpopen.exe'),
                                              ('_execute_child',
                                               ['args',
                                                'executable',
                                                'preexec_fn',
                                                'close_fds',
                                                'cwd',
                                                'env',
                                                'universal_newlines',
                                                'startupinfo',
                                                'creationflags',
                                                'shell',
                                                'p2cread',
                                                'p2cwrite',
                                                'c2pread',
                                                'c2pwrite',
                                                'errread',
                                                'errwrite'],
                                               'Execute program (MS Windows version)'),
                                              ('_internal_poll',
                                               ['_deadstate=None'],
                                               'Check if child process has terminated.  Returns returncode\n            attribute.'),
                                              ('wait',
                                               [],
                                               'Wait for child process to terminate.  Returns returncode\n            attribute.'),
                                              ('_readerthread', ['fh', 'buffer'], ''),
                                              ('_communicate', ['input'], ''),
                                              ('_set_cloexec_flag', ['fd'], ''),
                                              ('_close_fds', ['but'], ''),
                                              ('_read_no_intr',
                                               ['fd', 'buffersize'],
                                               'Like os.read, but retries on EINTR'),
                                              ('_write_no_intr',
                                               ['fd', 's'],
                                               'Like os.write, but retries on EINTR'),
                                              ('_waitpid_no_intr',
                                               ['pid', 'options'],
                                               'Like os.waitpid, but retries on EINTR'),
                                              ('_fo_read_no_intr',
                                               ['obj'],
                                               'Like obj.read(), but retries on EINTR'),
                                              ('_fo_write_no_intr',
                                               ['obj', 'data'],
                                               'Like obj.write(), but retries on EINTR'),
                                              ('_execute_child',
                                               ['args',
                                                'executable',
                                                'preexec_fn',
                                                'close_fds',
                                                'cwd',
                                                'env',
                                                'universal_newlines',
                                                'startupinfo',
                                                'creationflags',
                                                'shell',
                                                'p2cread',
                                                'p2cwrite',
                                                'c2pread',
                                                'c2pwrite',
                                                'errread',
                                                'errwrite'],
                                               'Execute program (POSIX version)'),
                                              ('_handle_exitstatus', ['sts'], '')],
                                  'properties': ['_child_created',
                                                 'stdin',
                                                 'stdout',
                                                 'stderr',
                                                 'pid',
                                                 'returncode',
                                                 'universal_newlines',
                                                 '_handle']},
             'subprocess.STARTUPINFO': {'bases': [],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': ['dwFlags',
                                                       'hStdInput',
                                                       'hStdOutput',
                                                       'hStdError',
                                                       'wShowWindow']},
             'subprocess.pywintypes': {'bases': [],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': ['error']},
             'sunau.Au_read': {'bases': [],
                               'constructor': ['f'],
                               'docstring': '',
                               'methods': [('__del__', [], ''),
                                           ('initfp', ['file'], ''),
                                           ('getfp', [], ''),
                                           ('getnchannels', [], ''),
                                           ('getsampwidth', [], ''),
                                           ('getframerate', [], ''),
                                           ('getnframes', [], ''),
                                           ('getcomptype', [], ''),
                                           ('getcompname', [], ''),
                                           ('getparams', [], ''),
                                           ('getmarkers', [], ''),
                                           ('getmark', ['id'], ''),
                                           ('readframes', ['nframes'], ''),
                                           ('rewind', [], ''),
                                           ('tell', [], ''),
                                           ('setpos', ['pos'], ''),
                                           ('close', [], '')],
                               'properties': ['_file',
                                              '_soundpos',
                                              '_hdr_size',
                                              '_data_size',
                                              '_encoding',
                                              '_sampwidth',
                                              '_framesize',
                                              '_framerate',
                                              '_nchannels',
                                              '_info']},
             'sunau.Au_write': {'bases': [],
                                'constructor': ['f'],
                                'docstring': '',
                                'methods': [('__del__', [], ''),
                                            ('initfp', ['file'], ''),
                                            ('setnchannels', ['nchannels'], ''),
                                            ('getnchannels', [], ''),
                                            ('setsampwidth', ['sampwidth'], ''),
                                            ('getsampwidth', [], ''),
                                            ('setframerate', ['framerate'], ''),
                                            ('getframerate', [], ''),
                                            ('setnframes', ['nframes'], ''),
                                            ('getnframes', [], ''),
                                            ('setcomptype', ['type', 'name'], ''),
                                            ('getcomptype', [], ''),
                                            ('getcompname', [], ''),
                                            ('setparams',
                                             ['(nchannels, sampwidth, framerate, nframes, comptype, compname)'],
                                             ''),
                                            ('getparams', [], ''),
                                            ('tell', [], ''),
                                            ('writeframesraw', ['data'], ''),
                                            ('writeframes', ['data'], ''),
                                            ('close', [], ''),
                                            ('_ensure_header_written', [], ''),
                                            ('_write_header', [], ''),
                                            ('_patchheader', [], '')],
                                'properties': ['_file',
                                               '_framerate',
                                               '_nchannels',
                                               '_sampwidth',
                                               '_framesize',
                                               '_nframes',
                                               '_nframeswritten',
                                               '_datawritten',
                                               '_datalength',
                                               '_info',
                                               '_comptype']},
             'sunau.Error': {'bases': ['Exception'],
                             'constructor': [],
                             'docstring': '',
                             'methods': [],
                             'properties': []},
             'sunaudio.error': {'bases': ['Exception'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [],
                                'properties': []},
             'symtable.Class': {'bases': ['symtable.SymbolTable'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [('get_methods', [], '')],
                                'properties': ['__methods']},
             'symtable.Function': {'bases': ['symtable.SymbolTable'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [('__idents_matching', ['test_func'], ''),
                                               ('get_parameters', [], ''),
                                               ('get_locals', [], ''),
                                               ('get_globals', [], ''),
                                               ('get_frees', [], '')],
                                   'properties': ['__params',
                                                  '__locals',
                                                  '__frees',
                                                  '__globals']},
             'symtable.Symbol': {'bases': [],
                                 'constructor': ['name', 'flags', 'namespaces=None'],
                                 'docstring': '',
                                 'methods': [('__repr__', [], ''),
                                             ('get_name', [], ''),
                                             ('is_referenced', [], ''),
                                             ('is_parameter', [], ''),
                                             ('is_global', [], ''),
                                             ('is_vararg', [], ''),
                                             ('is_keywordarg', [], ''),
                                             ('is_local', [], ''),
                                             ('is_free', [], ''),
                                             ('is_imported', [], ''),
                                             ('is_assigned', [], ''),
                                             ('is_in_tuple', [], ''),
                                             ('is_namespace',
                                              [],
                                              'Returns true if name binding introduces new namespace.\n\n        If the name is used as the target of a function or class\n        statement, this will be true.\n\n        Note that a single name can be bound to multiple objects.  If\n        is_namespace() is true, the name may also be bound to other\n        objects, like an int or list, that does not introduce a new\n        namespace.\n        '),
                                             ('get_namespaces',
                                              [],
                                              'Return a list of namespaces bound to this name'),
                                             ('get_namespace',
                                              [],
                                              'Returns the single namespace bound to this name.\n\n        Raises ValueError if the name is bound to multiple namespaces.\n        ')],
                                 'properties': ['__name', '__flags', '__namespaces']},
             'symtable.SymbolTable': {'bases': [],
                                      'constructor': ['raw_table', 'filename'],
                                      'docstring': '',
                                      'methods': [('__repr__', [], ''),
                                                  ('get_type', [], ''),
                                                  ('get_id', [], ''),
                                                  ('get_name', [], ''),
                                                  ('get_lineno', [], ''),
                                                  ('is_optimized', [], ''),
                                                  ('is_nested', [], ''),
                                                  ('has_children', [], ''),
                                                  ('has_exec',
                                                   [],
                                                   'Return true if the scope uses exec'),
                                                  ('has_import_star',
                                                   [],
                                                   'Return true if the scope uses import *'),
                                                  ('get_identifiers', [], ''),
                                                  ('lookup', ['name'], ''),
                                                  ('get_symbols', [], ''),
                                                  ('__check_children', ['name'], ''),
                                                  ('get_children', [], '')],
                                      'properties': ['_table', '_filename', '_symbols']},
             'symtable.SymbolTableFactory': {'bases': [],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('new', ['table', 'filename'], ''),
                                                         ('__call__',
                                                          ['table', 'filename'],
                                                          '')],
                                             'properties': ['__memo']},
             'tabnanny.NannyNag': {'bases': ['Exception'],
                                   'constructor': ['lineno', 'msg', 'line'],
                                   'docstring': '\n    Raised by tokeneater() if detecting an ambiguous indent.\n    Captured and handled in check().\n    ',
                                   'methods': [('get_lineno', [], ''),
                                               ('get_msg', [], ''),
                                               ('get_line', [], '')],
                                   'properties': ['lineno', 'msg', 'line']},
             'tabnanny.Whitespace': {'bases': [],
                                     'constructor': ['ws'],
                                     'docstring': '',
                                     'methods': [('longest_run_of_spaces', [], ''),
                                                 ('indent_level', ['tabsize'], ''),
                                                 ('equal', ['other'], ''),
                                                 ('not_equal_witness', ['other'], ''),
                                                 ('less', ['other'], ''),
                                                 ('not_less_witness', ['other'], '')],
                                     'properties': ['S',
                                                    'T',
                                                    'raw',
                                                    'n',
                                                    'nt',
                                                    'norm',
                                                    'is_simple']},
             'tarfile.CompressionError': {'bases': ['tarfile.TarError'],
                                          'constructor': [],
                                          'docstring': 'Exception for unavailable compression methods.',
                                          'methods': [],
                                          'properties': []},
             'tarfile.ExFileObject': {'bases': ['object'],
                                      'constructor': ['tarfile', 'tarinfo'],
                                      'docstring': 'File-like object for reading an archive member.\n       Is returned by TarFile.extractfile().\n    ',
                                      'methods': [('read',
                                                   ['size=None'],
                                                   'Read at most size bytes from the file. If size is not\n           present or None, read all data until EOF is reached.\n        '),
                                                  ('readline',
                                                   ['size=-1'],
                                                   'Read one entire line from the file. If size is present\n           and non-negative, return a string with at most that\n           size, which may be an incomplete line.\n        '),
                                                  ('readlines',
                                                   [],
                                                   'Return a list with all remaining lines.\n        '),
                                                  ('tell',
                                                   [],
                                                   'Return the current file position.\n        '),
                                                  ('seek',
                                                   ['pos', 'whence=os.SEEK_SET'],
                                                   'Seek to a position in the file.\n        '),
                                                  ('close',
                                                   [],
                                                   'Close the file object.\n        '),
                                                  ('__iter__',
                                                   [],
                                                   "Get an iterator over the file's lines.\n        ")],
                                      'properties': ['blocksize',
                                                     'fileobj',
                                                     'name',
                                                     'mode',
                                                     'closed',
                                                     'size',
                                                     'position',
                                                     'buffer']},
             'tarfile.ExtractError': {'bases': ['tarfile.TarError'],
                                      'constructor': [],
                                      'docstring': 'General exception for extract errors.',
                                      'methods': [],
                                      'properties': []},
             'tarfile.ReadError': {'bases': ['tarfile.TarError'],
                                   'constructor': [],
                                   'docstring': 'Exception for unreadble tar archives.',
                                   'methods': [],
                                   'properties': []},
             'tarfile.StreamError': {'bases': ['tarfile.TarError'],
                                     'constructor': [],
                                     'docstring': 'Exception for unsupported operations on stream-like TarFiles.',
                                     'methods': [],
                                     'properties': []},
             'tarfile.TarError': {'bases': ['Exception'],
                                  'constructor': [],
                                  'docstring': 'Base exception.',
                                  'methods': [],
                                  'properties': []},
             'tarfile.TarFile': {'bases': ['object'],
                                 'constructor': ['name=None', "mode='r'", 'fileobj=None'],
                                 'docstring': 'The TarFile Class provides an interface to tar archives.\n    ',
                                 'methods': [('open',
                                              ['name=None',
                                               "mode='r'",
                                               'fileobj=None',
                                               'bufsize=20*512'],
                                              "Open a tar archive for reading, writing or appending. Return\n           an appropriate TarFile class.\n\n           mode:\n           'r' or 'r:*' open for reading with transparent compression\n           'r:'         open for reading exclusively uncompressed\n           'r:gz'       open for reading with gzip compression\n           'r:bz2'      open for reading with bzip2 compression\n           'a' or 'a:'  open for appending\n           'w' or 'w:'  open for writing without compression\n           'w:gz'       open for writing with gzip compression\n           'w:bz2'      open for writing with bzip2 compression\n\n           'r|*'        open a stream of tar blocks with transparent compression\n           'r|'         open an uncompressed stream of tar blocks for reading\n           'r|gz'       open a gzip compressed stream of tar blocks\n           'r|bz2'      open a bzip2 compressed stream of tar blocks\n           'w|'         open an uncompressed stream for writing\n           'w|gz'       open a gzip compressed stream for writing\n           'w|bz2'      open a bzip2 compressed stream for writing\n        "),
                                             ('taropen',
                                              ['name', "mode='r'", 'fileobj=None'],
                                              'Open uncompressed tar archive name for reading or writing.\n        '),
                                             ('gzopen',
                                              ['name',
                                               "mode='r'",
                                               'fileobj=None',
                                               'compresslevel=9'],
                                              'Open gzip compressed tar archive name for reading or writing.\n           Appending is not allowed.\n        '),
                                             ('bz2open',
                                              ['name',
                                               "mode='r'",
                                               'fileobj=None',
                                               'compresslevel=9'],
                                              'Open bzip2 compressed tar archive name for reading or writing.\n           Appending is not allowed.\n        '),
                                             ('close',
                                              [],
                                              'Close the TarFile. In write-mode, two finishing zero blocks are\n           appended to the archive.\n        '),
                                             ('getmember',
                                              ['name'],
                                              "Return a TarInfo object for member `name'. If `name' can not be\n           found in the archive, KeyError is raised. If a member occurs more\n           than once in the archive, its last occurence is assumed to be the\n           most up-to-date version.\n        "),
                                             ('getmembers',
                                              [],
                                              'Return the members of the archive as a list of TarInfo objects. The\n           list has the same order as the members in the archive.\n        '),
                                             ('getnames',
                                              [],
                                              'Return the members of the archive as a list of their names. It has\n           the same order as the list returned by getmembers().\n        '),
                                             ('gettarinfo',
                                              ['name=None', 'arcname=None', 'fileobj=None'],
                                              "Create a TarInfo object for either the file `name' or the file\n           object `fileobj' (using os.fstat on its file descriptor). You can\n           modify some of the TarInfo's attributes before you add it using\n           addfile(). If given, `arcname' specifies an alternative name for the\n           file in the archive.\n        "),
                                             ('list',
                                              ['verbose=True'],
                                              "Print a table of contents to sys.stdout. If `verbose' is False, only\n           the names of the members are printed. If it is True, an `ls -l'-like\n           output is produced.\n        "),
                                             ('add',
                                              ['name', 'arcname=None', 'recursive=True'],
                                              "Add the file `name' to the archive. `name' may be any type of file\n           (directory, fifo, symbolic link, etc.). If given, `arcname'\n           specifies an alternative name for the file in the archive.\n           Directories are added recursively by default. This can be avoided by\n           setting `recursive' to False.\n        "),
                                             ('addfile',
                                              ['tarinfo', 'fileobj=None'],
                                              "Add the TarInfo object `tarinfo' to the archive. If `fileobj' is\n           given, tarinfo.size bytes are read from it and added to the archive.\n           You can create TarInfo objects using gettarinfo().\n           On Windows platforms, `fileobj' should always be opened with mode\n           'rb' to avoid irritation about the file size.\n        "),
                                             ('extractall',
                                              ["path='.'", 'members=None'],
                                              "Extract all members from the archive to the current working\n           directory and set owner, modification time and permissions on\n           directories afterwards. `path' specifies a different directory\n           to extract to. `members' is optional and must be a subset of the\n           list returned by getmembers().\n        "),
                                             ('extract',
                                              ['member', "path=''"],
                                              "Extract a member from the archive to the current working directory,\n           using its full name. Its file information is extracted as accurately\n           as possible. `member' may be a filename or a TarInfo object. You can\n           specify a different directory using `path'.\n        "),
                                             ('extractfile',
                                              ['member'],
                                              "Extract a member from the archive as a file object. `member' may be\n           a filename or a TarInfo object. If `member' is a regular file, a\n           file-like object is returned. If `member' is a link, a file-like\n           object is constructed from the link's target. If `member' is none of\n           the above, None is returned.\n           The file-like object is read-only and provides the following\n           methods: read(), readline(), readlines(), seek() and tell()\n        "),
                                             ('_extract_member',
                                              ['tarinfo', 'targetpath'],
                                              'Extract the TarInfo object tarinfo to a physical\n           file called targetpath.\n        '),
                                             ('makedir',
                                              ['tarinfo', 'targetpath'],
                                              'Make a directory called targetpath.\n        '),
                                             ('makefile',
                                              ['tarinfo', 'targetpath'],
                                              'Make a file called targetpath.\n        '),
                                             ('makeunknown',
                                              ['tarinfo', 'targetpath'],
                                              'Make a file from a TarInfo object with an unknown type\n           at targetpath.\n        '),
                                             ('makefifo',
                                              ['tarinfo', 'targetpath'],
                                              'Make a fifo called targetpath.\n        '),
                                             ('makedev',
                                              ['tarinfo', 'targetpath'],
                                              'Make a character or block device called targetpath.\n        '),
                                             ('makelink',
                                              ['tarinfo', 'targetpath'],
                                              'Make a (symbolic) link called targetpath. If it cannot be created\n          (platform limitation), we try to make a copy of the referenced file\n          instead of a link.\n        '),
                                             ('chown',
                                              ['tarinfo', 'targetpath'],
                                              'Set owner of targetpath according to tarinfo.\n        '),
                                             ('chmod',
                                              ['tarinfo', 'targetpath'],
                                              'Set file permissions of targetpath according to tarinfo.\n        '),
                                             ('utime',
                                              ['tarinfo', 'targetpath'],
                                              'Set modification time of targetpath according to tarinfo.\n        '),
                                             ('next',
                                              [],
                                              'Return the next member of the archive as a TarInfo object, when\n           TarFile is opened for reading. Return None if there is no more\n           available.\n        '),
                                             ('proc_member',
                                              ['tarinfo'],
                                              'Choose the right processing method for tarinfo depending\n           on its type and call it.\n        '),
                                             ('proc_builtin',
                                              ['tarinfo'],
                                              'Process a builtin type member or an unknown member\n           which will be treated as a regular file.\n        '),
                                             ('proc_gnulong',
                                              ['tarinfo'],
                                              'Process the blocks that hold a GNU longname\n           or longlink member.\n        '),
                                             ('proc_sparse',
                                              ['tarinfo'],
                                              'Process a GNU sparse header plus extra headers.\n        '),
                                             ('_block',
                                              ['count'],
                                              'Round up a byte count by BLOCKSIZE and return it,\n           e.g. _block(834) => 1024.\n        '),
                                             ('_getmember',
                                              ['name', 'tarinfo=None'],
                                              'Find an archive member by name from bottom to top.\n           If tarinfo is given, it is used as the starting point.\n        '),
                                             ('_load',
                                              [],
                                              'Read through the entire archive file and look for readable\n           members.\n        '),
                                             ('_check',
                                              ['mode=None'],
                                              "Check if TarFile is still open, and if the operation's mode\n           corresponds to TarFile's mode.\n        "),
                                             ('__iter__',
                                              [],
                                              'Provide an iterator object.\n        '),
                                             ('_dbg',
                                              ['level', 'msg'],
                                              'Write debugging output to sys.stderr.\n        ')],
                                 'properties': ['debug',
                                                'dereference',
                                                'ignore_zeros',
                                                'errorlevel',
                                                'posix',
                                                'fileobject',
                                                '_mode',
                                                'mode',
                                                '_extfileobj',
                                                'name',
                                                'fileobj',
                                                'closed',
                                                'members',
                                                '_loaded',
                                                'offset',
                                                'inodes',
                                                'firstmember',
                                                'OPEN_METH']},
             'tarfile.TarFileCompat': {'bases': [],
                                       'constructor': ['file',
                                                       "mode='r'",
                                                       'compression=TAR_PLAIN'],
                                       'docstring': "TarFile class compatible with standard module zipfile's\n       ZipFile class.\n    ",
                                       'methods': [('namelist', [], ''),
                                                   ('infolist', [], ''),
                                                   ('printdir', [], ''),
                                                   ('testzip', [], ''),
                                                   ('getinfo', ['name'], ''),
                                                   ('read', ['name'], ''),
                                                   ('write',
                                                    ['filename',
                                                     'arcname=None',
                                                     'compress_type=None'],
                                                    ''),
                                                   ('writestr', ['zinfo', 'bytes'], ''),
                                                   ('close', [], '')],
                                       'properties': ['tarfile']},
             'tarfile.TarInfo': {'bases': ['object'],
                                 'constructor': ["name=''"],
                                 'docstring': 'Informational class which holds the details about an\n       archive member given by a tar header block.\n       TarInfo objects are returned by TarFile.getmember(),\n       TarFile.getmembers() and TarFile.gettarinfo() and are\n       usually created internally.\n    ',
                                 'methods': [('__repr__', [], ''),
                                             ('frombuf',
                                              ['buf'],
                                              'Construct a TarInfo object from a 512 byte string buffer.\n        '),
                                             ('tobuf',
                                              ['posix=False'],
                                              'Return a tar header as a string of 512 byte blocks.\n        '),
                                             ('_create_gnulong',
                                              ['name', 'type'],
                                              'Create a GNU longname/longlink header from name.\n           It consists of an extended tar header, with the length\n           of the longname as size, followed by data blocks,\n           which contain the longname as a null terminated string.\n        '),
                                             ('isreg', [], ''),
                                             ('isfile', [], ''),
                                             ('isdir', [], ''),
                                             ('issym', [], ''),
                                             ('islnk', [], ''),
                                             ('ischr', [], ''),
                                             ('isblk', [], ''),
                                             ('isfifo', [], ''),
                                             ('issparse', [], ''),
                                             ('isdev', [], '')],
                                 'properties': ['name',
                                                'mode',
                                                'uid',
                                                'gid',
                                                'size',
                                                'mtime',
                                                'chksum',
                                                'type',
                                                'linkname',
                                                'uname',
                                                'gname',
                                                'devmajor',
                                                'devminor',
                                                'offset',
                                                'offset_data',
                                                'buf']},
             'tarfile.TarIter': {'bases': [],
                                 'constructor': ['tarfile'],
                                 'docstring': 'Iterator Class.\n\n       for tarinfo in TarFile(...):\n           suite...\n    ',
                                 'methods': [('__iter__',
                                              [],
                                              'Return iterator object.\n        '),
                                             ('next',
                                              [],
                                              "Return the next item using TarFile's next() method.\n           When all members have been read, set TarFile as _loaded.\n        ")],
                                 'properties': ['tarfile', 'index']},
             'tarfile._BZ2Proxy': {'bases': ['object'],
                                   'constructor': ['fileobj', 'mode'],
                                   'docstring': 'Small proxy class that enables external file object\n       support for "r:bz2" and "w:bz2" modes. This is actually\n       a workaround for a limitation in bz2 module\'s BZ2File\n       class which (unlike gzip.GzipFile) has no support for\n       a file object argument.\n    ',
                                   'methods': [('init', [], ''),
                                               ('read', ['size'], ''),
                                               ('seek', ['pos'], ''),
                                               ('tell', [], ''),
                                               ('write', ['data'], ''),
                                               ('close', [], '')],
                                   'properties': ['blocksize',
                                                  'fileobj',
                                                  'mode',
                                                  'pos',
                                                  'bz2obj',
                                                  'buf']},
             'tarfile._FileInFile': {'bases': ['object'],
                                     'constructor': ['fileobj', 'offset', 'size', 'sparse=None'],
                                     'docstring': 'A thin wrapper around an existing file object that\n       provides a part of its data as an individual file\n       object.\n    ',
                                     'methods': [('tell',
                                                  [],
                                                  'Return the current file position.\n        '),
                                                 ('seek',
                                                  ['position'],
                                                  'Seek to a position in the file.\n        '),
                                                 ('read',
                                                  ['size=None'],
                                                  'Read data from the file.\n        '),
                                                 ('readnormal',
                                                  ['size'],
                                                  'Read operation for regular files.\n        '),
                                                 ('readsparse',
                                                  ['size'],
                                                  'Read operation for sparse files.\n        '),
                                                 ('readsparsesection',
                                                  ['size'],
                                                  'Read a single section of a sparse file.\n        ')],
                                     'properties': ['fileobj',
                                                    'offset',
                                                    'size',
                                                    'sparse',
                                                    'position']},
             'tarfile._LowLevelFile': {'bases': [],
                                       'constructor': ['name', 'mode'],
                                       'docstring': 'Low-level file object. Supports reading and writing.\n       It is used instead of a regular file object for streaming\n       access.\n    ',
                                       'methods': [('close', [], ''),
                                                   ('read', ['size'], ''),
                                                   ('write', ['s'], '')],
                                       'properties': ['fd']},
             'tarfile._Stream': {'bases': [],
                                 'constructor': ['name',
                                                 'mode',
                                                 'comptype',
                                                 'fileobj',
                                                 'bufsize'],
                                 'docstring': 'Class that serves as an adapter between TarFile and\n       a stream-like object.  The stream-like object only\n       needs to have a read() or write() method and is accessed\n       blockwise.  Use of gzip or bzip2 compression is possible.\n       A stream-like object could be for example: sys.stdin,\n       sys.stdout, a socket, a tape device etc.\n\n       _Stream is intended to be used only internally.\n    ',
                                 'methods': [('__del__', [], ''),
                                             ('_init_write_gz',
                                              [],
                                              'Initialize for writing with gzip compression.\n        '),
                                             ('write',
                                              ['s'],
                                              'Write string s to the stream.\n        '),
                                             ('__write',
                                              ['s'],
                                              'Write string s to the stream if a whole new block\n           is ready to be written.\n        '),
                                             ('close',
                                              [],
                                              'Close the _Stream object. No operation should be\n           done on it afterwards.\n        '),
                                             ('_init_read_gz',
                                              [],
                                              'Initialize for reading a gzip compressed fileobj.\n        '),
                                             ('tell',
                                              [],
                                              "Return the stream's file pointer position.\n        "),
                                             ('seek',
                                              ['pos=0'],
                                              "Set the stream's file pointer to pos. Negative seeking\n           is forbidden.\n        "),
                                             ('read',
                                              ['size=None'],
                                              'Return the next size number of bytes from the stream.\n           If size is not defined, return all bytes of the stream\n           up to EOF.\n        '),
                                             ('_read',
                                              ['size'],
                                              'Return size bytes from the stream.\n        '),
                                             ('__read',
                                              ['size'],
                                              'Return size bytes from stream. If internal buffer is empty,\n           read another block from the stream.\n        ')],
                                 'properties': ['_extfileobj',
                                                'name',
                                                'mode',
                                                'comptype',
                                                'fileobj',
                                                'bufsize',
                                                'buf',
                                                'pos',
                                                'closed',
                                                'zlib',
                                                'crc',
                                                'dbuf',
                                                'cmp']},
             'tarfile._StreamProxy': {'bases': ['object'],
                                      'constructor': ['fileobj'],
                                      'docstring': "Small proxy class that enables transparent compression\n       detection for the Stream interface (mode 'r|*').\n    ",
                                      'methods': [('read', ['size'], ''),
                                                  ('getcomptype', [], ''),
                                                  ('close', [], '')],
                                      'properties': ['fileobj', 'buf', 'read']},
             'tarfile._data': {'bases': ['tarfile._section'],
                               'constructor': ['offset', 'size', 'realpos'],
                               'docstring': 'Represent a data section in a sparse file.\n    ',
                               'methods': [],
                               'properties': ['realpos']},
             'tarfile._hole': {'bases': ['tarfile._section'],
                               'constructor': [],
                               'docstring': 'Represent a hole section in a sparse file.\n    ',
                               'methods': [],
                               'properties': []},
             'tarfile._ringbuffer': {'bases': ['list'],
                                     'constructor': [],
                                     'docstring': 'Ringbuffer class which increases performance\n       over a regular list.\n    ',
                                     'methods': [('find', ['offset'], '')],
                                     'properties': ['idx']},
             'tarfile._section': {'bases': [],
                                  'constructor': ['offset', 'size'],
                                  'docstring': 'Base class for _data and _hole.\n    ',
                                  'methods': [('__contains__', ['offset'], '')],
                                  'properties': ['offset', 'size']},
             'telnetlib.Telnet': {'bases': [],
                                  'constructor': ['host=None', 'port=0'],
                                  'docstring': "Telnet interface class.\n\n    An instance of this class represents a connection to a telnet\n    server.  The instance is initially not connected; the open()\n    method must be used to establish a connection.  Alternatively, the\n    host name and optional port number can be passed to the\n    constructor, too.\n\n    Don't try to reopen an already connected instance.\n\n    This class has many read_*() methods.  Note that some of them\n    raise EOFError when the end of the connection is read, because\n    they can return an empty string for other reasons.  See the\n    individual doc strings.\n\n    read_until(expected, [timeout])\n        Read until the expected string has been seen, or a timeout is\n        hit (default is no timeout); may block.\n\n    read_all()\n        Read all data until EOF; may block.\n\n    read_some()\n        Read at least one byte or EOF; may block.\n\n    read_very_eager()\n        Read all data available already queued or on the socket,\n        without blocking.\n\n    read_eager()\n        Read either data already queued or some data available on the\n        socket, without blocking.\n\n    read_lazy()\n        Read all data in the raw queue (processing it first), without\n        doing any socket I/O.\n\n    read_very_lazy()\n        Reads all data in the cooked queue, without doing any socket\n        I/O.\n\n    read_sb_data()\n        Reads available data between SB ... SE sequence. Don't block.\n\n    set_option_negotiation_callback(callback)\n        Each time a telnet option is read on the input flow, this callback\n        (if set) is called with the following parameters :\n        callback(telnet socket, command, option)\n            option will be chr(0) when there is no option.\n        No other action is done afterwards by telnetlib.\n\n    ",
                                  'methods': [('open',
                                               ['host', 'port=0'],
                                               "Connect to a host.\n\n        The optional second argument is the port number, which\n        defaults to the standard telnet port (23).\n\n        Don't try to reopen an already connected instance.\n\n        "),
                                              ('__del__',
                                               [],
                                               'Destructor -- close the connection.'),
                                              ('msg',
                                               ['msg', '*args'],
                                               'Print a debug message, when the debug level is > 0.\n\n        If extra arguments are present, they are substituted in the\n        message using the standard string formatting operator.\n\n        '),
                                              ('set_debuglevel',
                                               ['debuglevel'],
                                               'Set the debug level.\n\n        The higher it is, the more debug output you get (on sys.stdout).\n\n        '),
                                              ('close', [], 'Close the connection.'),
                                              ('get_socket',
                                               [],
                                               'Return the socket object used internally.'),
                                              ('fileno',
                                               [],
                                               'Return the fileno() of the socket object used internally.'),
                                              ('write',
                                               ['buffer'],
                                               'Write a string to the socket, doubling any IAC characters.\n\n        Can block if the connection is blocked.  May raise\n        socket.error if the connection is closed.\n\n        '),
                                              ('read_until',
                                               ['match', 'timeout=None'],
                                               'Read until a given string is encountered or until timeout.\n\n        When no match is found, return whatever is available instead,\n        possibly the empty string.  Raise EOFError if the connection\n        is closed and no cooked data is available.\n\n        '),
                                              ('read_all',
                                               [],
                                               'Read all data until EOF; block until connection closed.'),
                                              ('read_some',
                                               [],
                                               "Read at least one byte of cooked data unless EOF is hit.\n\n        Return '' if EOF is hit.  Block if no data is immediately\n        available.\n\n        "),
                                              ('read_very_eager',
                                               [],
                                               "Read everything that's possible without blocking in I/O (eager).\n\n        Raise EOFError if connection closed and no cooked data\n        available.  Return '' if no cooked data available otherwise.\n        Don't block unless in the midst of an IAC sequence.\n\n        "),
                                              ('read_eager',
                                               [],
                                               "Read readily available data.\n\n        Raise EOFError if connection closed and no cooked data\n        available.  Return '' if no cooked data available otherwise.\n        Don't block unless in the midst of an IAC sequence.\n\n        "),
                                              ('read_lazy',
                                               [],
                                               "Process and return data that's already in the queues (lazy).\n\n        Raise EOFError if connection closed and no data available.\n        Return '' if no cooked data available otherwise.  Don't block\n        unless in the midst of an IAC sequence.\n\n        "),
                                              ('read_very_lazy',
                                               [],
                                               "Return any data available in the cooked queue (very lazy).\n\n        Raise EOFError if connection closed and no data available.\n        Return '' if no cooked data available otherwise.  Don't block.\n\n        "),
                                              ('read_sb_data',
                                               [],
                                               "Return any data available in the SB ... SE queue.\n\n        Return '' if no SB ... SE available. Should only be called\n        after seeing a SB or SE command. When a new SB command is\n        found, old unread SB data will be discarded. Don't block.\n\n        "),
                                              ('set_option_negotiation_callback',
                                               ['callback'],
                                               'Provide a callback function called after each receipt of a telnet option.'),
                                              ('process_rawq',
                                               [],
                                               "Transfer from raw queue to cooked queue.\n\n        Set self.eof when connection is closed.  Don't block unless in\n        the midst of an IAC sequence.\n\n        "),
                                              ('rawq_getchar',
                                               [],
                                               'Get next char from raw queue.\n\n        Block if no data is immediately available.  Raise EOFError\n        when connection is closed.\n\n        '),
                                              ('fill_rawq',
                                               [],
                                               'Fill raw queue from exactly one recv() system call.\n\n        Block if no data is immediately available.  Set self.eof when\n        connection is closed.\n\n        '),
                                              ('sock_avail',
                                               [],
                                               'Test whether data is available on the socket.'),
                                              ('interact',
                                               [],
                                               'Interaction function, emulates a very dumb telnet client.'),
                                              ('mt_interact',
                                               [],
                                               'Multithreaded version of interact().'),
                                              ('listener',
                                               [],
                                               'Helper for mt_interact() -- this executes in the other thread.'),
                                              ('expect',
                                               ['list', 'timeout=None'],
                                               "Read until one from a list of a regular expressions matches.\n\n        The first argument is a list of regular expressions, either\n        compiled (re.RegexObject instances) or uncompiled (strings).\n        The optional second argument is a timeout, in seconds; default\n        is no timeout.\n\n        Return a tuple of three items: the index in the list of the\n        first regular expression that matches; the match object\n        returned; and the text read up till and including the match.\n\n        If EOF is read and no text was read, raise EOFError.\n        Otherwise, when nothing matches, return (-1, None, text) where\n        text is the text received so far (may be the empty string if a\n        timeout happened).\n\n        If a regular expression ends with a greedy match (e.g. '.*')\n        or if more than one expression can match the same input, the\n        results are undeterministic, and may depend on the I/O timing.\n\n        ")],
                                  'properties': ['debuglevel',
                                                 'host',
                                                 'port',
                                                 'sock',
                                                 'rawq',
                                                 'irawq',
                                                 'cookedq',
                                                 'eof',
                                                 'iacseq',
                                                 'sb',
                                                 'sbdataq',
                                                 'option_callback']},
             'tempfile._RandomNameSequence': {'bases': [],
                                              'constructor': [],
                                              'docstring': 'An instance of _RandomNameSequence generates an endless\n    sequence of unpredictable strings which can safely be incorporated\n    into file names.  Each string is six characters long.  Multiple\n    threads can safely use the same instance at the same time.\n\n    _RandomNameSequence is an iterator.',
                                              'methods': [('__iter__', [], ''),
                                                          ('next', [], '')],
                                              'properties': ['characters',
                                                             'mutex',
                                                             'rng',
                                                             'normcase']},
             'tempfile._TemporaryFileWrapper': {'bases': [],
                                                'constructor': ['file', 'name'],
                                                'docstring': 'Temporary file wrapper\n\n    This class provides a wrapper around files opened for\n    temporary use.  In particular, it seeks to automatically\n    remove the file when it is no longer needed.\n    ',
                                                'methods': [('__getattr__', ['name'], ''),
                                                            ('__enter__', [], ''),
                                                            ('close', [], ''),
                                                            ('__del__', [], ''),
                                                            ('__exit__',
                                                             ['exc', 'value', 'tb'],
                                                             '')],
                                                'properties': ['file',
                                                               'name',
                                                               'close_called',
                                                               'unlink']},
             'textwrap.TextWrapper': {'bases': [],
                                      'constructor': ['width=70',
                                                      "initial_indent=''",
                                                      "subsequent_indent=''",
                                                      'expand_tabs=True',
                                                      'replace_whitespace=True',
                                                      'fix_sentence_endings=False',
                                                      'break_long_words=True'],
                                      'docstring': '\n    Object for wrapping/filling text.  The public interface consists of\n    the wrap() and fill() methods; the other methods are just there for\n    subclasses to override in order to tweak the default behaviour.\n    If you want to completely replace the main wrapping algorithm,\n    you\'ll probably have to override _wrap_chunks().\n\n    Several instance attributes control various aspects of wrapping:\n      width (default: 70)\n        the maximum width of wrapped lines (unless break_long_words\n        is false)\n      initial_indent (default: "")\n        string that will be prepended to the first line of wrapped\n        output.  Counts towards the line\'s width.\n      subsequent_indent (default: "")\n        string that will be prepended to all lines save the first\n        of wrapped output; also counts towards each line\'s width.\n      expand_tabs (default: true)\n        Expand tabs in input text to spaces before further processing.\n        Each tab will become 1 .. 8 spaces, depending on its position in\n        its line.  If false, each tab is treated as a single character.\n      replace_whitespace (default: true)\n        Replace all whitespace characters in the input text by spaces\n        after tab expansion.  Note that if expand_tabs is false and\n        replace_whitespace is true, every tab will be converted to a\n        single space!\n      fix_sentence_endings (default: false)\n        Ensure that sentence-ending punctuation is always followed\n        by two spaces.  Off by default because the algorithm is\n        (unavoidably) imperfect.\n      break_long_words (default: true)\n        Break words longer than \'width\'.  If false, those words will not\n        be broken, and some lines might be longer than \'width\'.\n    ',
                                      'methods': [('_munge_whitespace',
                                                   ['text'],
                                                   '_munge_whitespace(text : string) -> string\n\n        Munge whitespace in text: expand tabs and convert all other\n        whitespace characters to spaces.  Eg. " foo\tbar\n\nbaz"\n        becomes " foo    bar  baz".\n        '),
                                                  ('_split',
                                                   ['text'],
                                                   "_split(text : string) -> [string]\n\n        Split the text to wrap into indivisible chunks.  Chunks are\n        not quite the same as words; see wrap_chunks() for full\n        details.  As an example, the text\n          Look, goof-ball -- use the -b option!\n        breaks into the following chunks:\n          'Look,', ' ', 'goof-', 'ball', ' ', '--', ' ',\n          'use', ' ', 'the', ' ', '-b', ' ', 'option!'\n        "),
                                                  ('_fix_sentence_endings',
                                                   ['chunks'],
                                                   '_fix_sentence_endings(chunks : [string])\n\n        Correct for sentence endings buried in \'chunks\'.  Eg. when the\n        original text contains "... foo.\nBar ...", munge_whitespace()\n        and split() will convert that to [..., "foo.", " ", "Bar", ...]\n        which has one too few spaces; this method simply changes the one\n        space to two.\n        '),
                                                  ('_handle_long_word',
                                                   ['reversed_chunks',
                                                    'cur_line',
                                                    'cur_len',
                                                    'width'],
                                                   '_handle_long_word(chunks : [string],\n                             cur_line : [string],\n                             cur_len : int, width : int)\n\n        Handle a chunk of text (most likely a word, not whitespace) that\n        is too long to fit in any line.\n        '),
                                                  ('_wrap_chunks',
                                                   ['chunks'],
                                                   '_wrap_chunks(chunks : [string]) -> [string]\n\n        Wrap a sequence of text chunks and return a list of lines of\n        length \'self.width\' or less.  (If \'break_long_words\' is false,\n        some lines may be longer than this.)  Chunks correspond roughly\n        to words and the whitespace between them: each chunk is\n        indivisible (modulo \'break_long_words\'), but a line break can\n        come between any two chunks.  Chunks should not have internal\n        whitespace; ie. a chunk is either all whitespace or a "word".\n        Whitespace chunks will be removed from the beginning and end of\n        lines, but apart from that whitespace is preserved.\n        '),
                                                  ('wrap',
                                                   ['text'],
                                                   "wrap(text : string) -> [string]\n\n        Reformat the single paragraph in 'text' so it fits in lines of\n        no more than 'self.width' columns, and return a list of wrapped\n        lines.  Tabs in 'text' are expanded with string.expandtabs(),\n        and all other whitespace characters (including newline) are\n        converted to space.\n        "),
                                                  ('fill',
                                                   ['text'],
                                                   "fill(text : string) -> string\n\n        Reformat the single paragraph in 'text' to fit in lines of no\n        more than 'self.width' columns, and return a new string\n        containing the entire wrapped paragraph.\n        ")],
                                      'properties': ['whitespace_trans',
                                                     'unicode_whitespace_trans',
                                                     'uspace',
                                                     'x',
                                                     'wordsep_re',
                                                     'sentence_end_re',
                                                     'width',
                                                     'initial_indent',
                                                     'subsequent_indent',
                                                     'expand_tabs',
                                                     'replace_whitespace',
                                                     'fix_sentence_endings',
                                                     'break_long_words']},
             'threading.Thread': {'bases': ['threading._Verbose'],
                                  'constructor': ['group=None',
                                                  'target=None',
                                                  'name=None',
                                                  'args=()',
                                                  'kwargs=None',
                                                  'verbose=None'],
                                  'docstring': '',
                                  'methods': [('_set_daemon', [], ''),
                                              ('__repr__', [], ''),
                                              ('start', [], ''),
                                              ('run', [], ''),
                                              ('__bootstrap', [], ''),
                                              ('__bootstrap_inner', [], ''),
                                              ('__stop', [], ''),
                                              ('__delete',
                                               [],
                                               'Remove current thread from the dict of currently running threads.'),
                                              ('join', ['timeout=None'], ''),
                                              ('getName', [], ''),
                                              ('setName', ['name'], ''),
                                              ('isAlive', [], ''),
                                              ('isDaemon', [], ''),
                                              ('setDaemon', ['daemonic'], '')],
                                  'properties': ['__initialized',
                                                 '__exc_info',
                                                 '__target',
                                                 '__name',
                                                 '__args',
                                                 '__kwargs',
                                                 '__daemonic',
                                                 '__started',
                                                 '__stopped',
                                                 '__block',
                                                 '__stderr']},
             'threading._BoundedSemaphore': {'bases': ['threading._Semaphore'],
                                             'constructor': ['value=1', 'verbose=None'],
                                             'docstring': 'Semaphore that checks that # releases is <= # acquires',
                                             'methods': [('release', [], '')],
                                             'properties': ['_initial_value']},
             'threading._Condition': {'bases': ['threading._Verbose'],
                                      'constructor': ['lock=None', 'verbose=None'],
                                      'docstring': '',
                                      'methods': [('__enter__', [], ''),
                                                  ('__exit__', ['*args'], ''),
                                                  ('__repr__', [], ''),
                                                  ('_release_save', [], ''),
                                                  ('_acquire_restore', ['x'], ''),
                                                  ('_is_owned', [], ''),
                                                  ('wait', ['timeout=None'], ''),
                                                  ('notify', ['n=1'], ''),
                                                  ('notifyAll', [], '')],
                                      'properties': ['__lock',
                                                     'acquire',
                                                     'release',
                                                     '_release_save',
                                                     '_acquire_restore',
                                                     '_is_owned',
                                                     '__waiters']},
             'threading._DummyThread': {'bases': ['threading.Thread'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('_set_daemon', [], ''),
                                                    ('join', ['timeout=None'], '')],
                                        'properties': ['_Thread__block', '_Thread__started']},
             'threading._Event': {'bases': ['threading._Verbose'],
                                  'constructor': ['verbose=None'],
                                  'docstring': '',
                                  'methods': [('isSet', [], ''),
                                              ('set', [], ''),
                                              ('clear', [], ''),
                                              ('wait', ['timeout=None'], '')],
                                  'properties': ['__cond', '__flag']},
             'threading._MainThread': {'bases': ['threading.Thread'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('_set_daemon', [], ''),
                                                   ('_exitfunc', [], '')],
                                       'properties': ['_Thread__started']},
             'threading._RLock': {'bases': ['threading._Verbose'],
                                  'constructor': ['verbose=None'],
                                  'docstring': '',
                                  'methods': [('__repr__', [], ''),
                                              ('acquire', ['blocking=1'], ''),
                                              ('release', [], ''),
                                              ('__exit__', ['t', 'v', 'tb'], ''),
                                              ('_acquire_restore', ['(count, owner)'], ''),
                                              ('_release_save', [], ''),
                                              ('_is_owned', [], '')],
                                  'properties': ['__block', '__owner', '__count', '__enter__']},
             'threading._Semaphore': {'bases': ['threading._Verbose'],
                                      'constructor': ['value=1', 'verbose=None'],
                                      'docstring': '',
                                      'methods': [('acquire', ['blocking=1'], ''),
                                                  ('release', [], ''),
                                                  ('__exit__', ['t', 'v', 'tb'], '')],
                                      'properties': ['__cond', '__value', '__enter__']},
             'threading._Timer': {'bases': ['threading.Thread'],
                                  'constructor': ['interval',
                                                  'function',
                                                  'args=[]',
                                                  'kwargs={}'],
                                  'docstring': "Call a function after a specified number of seconds:\n\n    t = Timer(30.0, f, args=[], kwargs={})\n    t.start()\n    t.cancel() # stop the timer's action if it's still waiting\n    ",
                                  'methods': [('cancel',
                                               [],
                                               "Stop the timer if it hasn't finished yet"),
                                              ('run', [], '')],
                                  'properties': ['interval',
                                                 'function',
                                                 'args',
                                                 'kwargs',
                                                 'finished']},
             'threading._Verbose': {'bases': ['object'],
                                    'constructor': ['verbose=None'],
                                    'docstring': '',
                                    'methods': [('_note', ['*args'], '')],
                                    'properties': []},
             'timeit.Timer': {'bases': [],
                              'constructor': ["stmt='pass'",
                                              "setup='pass'",
                                              'timer=default_timer'],
                              'docstring': "Class for timing execution speed of small code snippets.\n\n    The constructor takes a statement to be timed, an additional\n    statement used for setup, and a timer function.  Both statements\n    default to 'pass'; the timer function is platform-dependent (see\n    module doc string).\n\n    To measure the execution time of the first statement, use the\n    timeit() method.  The repeat() method is a convenience to call\n    timeit() multiple times and return a list of results.\n\n    The statements may contain newlines, as long as they don't contain\n    multi-line string literals.\n    ",
                              'methods': [('print_exc',
                                           ['file=None'],
                                           'Helper to print a traceback from the timed code.\n\n        Typical use:\n\n            t = Timer(...)       # outside the try/except\n            try:\n                t.timeit(...)    # or t.repeat(...)\n            except:\n                t.print_exc()\n\n        The advantage over the standard traceback is that source lines\n        in the compiled template will be displayed.\n\n        The optional file argument directs where the traceback is\n        sent; it defaults to sys.stderr.\n        '),
                                          ('timeit',
                                           ['number=default_number'],
                                           "Time 'number' executions of the main statement.\n\n        To be precise, this executes the setup statement once, and\n        then returns the time it takes to execute the main statement\n        a number of times, as a float measured in seconds.  The\n        argument is the number of times through the loop, defaulting\n        to one million.  The main statement, the setup statement and\n        the timer function to be used are passed to the constructor.\n        "),
                                          ('repeat',
                                           ['repeat=default_repeat', 'number=default_number'],
                                           "Call timeit() a few times.\n\n        This is a convenience function that calls the timeit()\n        repeatedly, returning a list of results.  The first argument\n        specifies how many times to call timeit(), defaulting to 3;\n        the second argument specifies the timer argument, defaulting\n        to one million.\n\n        Note: it's tempting to calculate mean and standard deviation\n        from the result vector and report these.  However, this is not\n        very useful.  In a typical case, the lowest value gives a\n        lower bound for how fast your machine can run the given code\n        snippet; higher values in the result vector are typically not\n        caused by variability in Python's speed, but by other\n        processes interfering with your timing accuracy.  So the min()\n        of the result is probably the only number you should be\n        interested in.  After that, you should look at the entire\n        vector and apply common sense rather than statistics.\n        ")],
                              'properties': ['timer', 'src', 'inner']},
             'tkColorChooser.Chooser': {'bases': ['tkCommonDialog.Dialog'],
                                        'constructor': [],
                                        'docstring': 'Ask for a color',
                                        'methods': [('_fixoptions', [], ''),
                                                    ('_fixresult', ['widget', 'result'], '')],
                                        'properties': ['command']},
             'tkCommonDialog.Dialog': {'bases': [],
                                       'constructor': ['master=None', '**options'],
                                       'docstring': '',
                                       'methods': [('_fixoptions', [], ''),
                                                   ('_fixresult', ['widget', 'result'], ''),
                                                   ('show', ['**options'], '')],
                                       'properties': ['command', 'master', 'options']},
             'tkFileDialog.Directory': {'bases': ['tkCommonDialog.Dialog'],
                                        'constructor': [],
                                        'docstring': 'Ask for a directory',
                                        'methods': [('_fixresult', ['widget', 'result'], '')],
                                        'properties': ['command', 'directory']},
             'tkFileDialog.Open': {'bases': ['tkFileDialog._Dialog'],
                                   'constructor': [],
                                   'docstring': 'Ask for a filename to open',
                                   'methods': [('_fixresult', ['widget', 'result'], '')],
                                   'properties': ['command']},
             'tkFileDialog.SaveAs': {'bases': ['tkFileDialog._Dialog'],
                                     'constructor': [],
                                     'docstring': 'Ask for a filename to save as',
                                     'methods': [],
                                     'properties': ['command']},
             'tkFileDialog._Dialog': {'bases': ['tkCommonDialog.Dialog'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('_fixoptions', [], ''),
                                                  ('_fixresult', ['widget', 'result'], '')],
                                      'properties': ['filename']},
             'tkFont.Font': {'bases': [],
                             'constructor': ['root=None',
                                             'font=None',
                                             'name=None',
                                             'exists=False',
                                             '**options'],
                             'docstring': "Represents a named font.\n\n    Constructor options are:\n\n    font -- font specifier (name, system font, or (family, size, style)-tuple)\n    name -- name to use for this font configuration (defaults to a unique name)\n    exists -- does a named font by this name already exist?\n       Creates a new named font if False, points to the existing font if True.\n       Raises _tkinter.TclError if the assertion is false.\n\n       the following are ignored if font is specified:\n\n    family -- font 'family', e.g. Courier, Times, Helvetica\n    size -- font size in points\n    weight -- font thickness: NORMAL, BOLD\n    slant -- font slant: ROMAN, ITALIC\n    underline -- font underlining: false (0), true (1)\n    overstrike -- font strikeout: false (0), true (1)\n\n    ",
                             'methods': [('_set', ['kw'], ''),
                                         ('_get', ['args'], ''),
                                         ('_mkdict', ['args'], ''),
                                         ('__str__', [], ''),
                                         ('__eq__', ['other'], ''),
                                         ('__getitem__', ['key'], ''),
                                         ('__setitem__', ['key', 'value'], ''),
                                         ('__del__', [], ''),
                                         ('copy',
                                          [],
                                          'Return a distinct copy of the current font'),
                                         ('actual',
                                          ['option=None'],
                                          'Return actual font attributes'),
                                         ('cget', ['option'], 'Get font attribute'),
                                         ('config', ['**options'], 'Modify font attributes'),
                                         ('measure', ['text'], 'Return text width'),
                                         ('metrics',
                                          ['*options'],
                                          'Return font metrics.\n\n        For best performance, create a dummy widget\n        using this font before calling this method.')],
                             'properties': ['name',
                                            'delete_font',
                                            '_root',
                                            '_split',
                                            '_call',
                                            'configure']},
             'tkMessageBox.Message': {'bases': ['tkCommonDialog.Dialog'],
                                      'constructor': [],
                                      'docstring': 'A message box',
                                      'methods': [],
                                      'properties': ['command']},
             'tkSimpleDialog.Dialog': {'bases': ['tkSimpleDialog.Toplevel'],
                                       'constructor': ['parent', 'title=None'],
                                       'docstring': 'Class to open dialogs.\n\n    This class is intended as a base class for custom dialogs\n    ',
                                       'methods': [('destroy', [], 'Destroy the window'),
                                                   ('body',
                                                    ['master'],
                                                    'create dialog body.\n\n        return widget that should have initial focus.\n        This method should be overridden, and is called\n        by the __init__ method.\n        '),
                                                   ('buttonbox',
                                                    [],
                                                    'add standard button box.\n\n        override if you do not want the standard buttons\n        '),
                                                   ('ok', ['event=None'], ''),
                                                   ('cancel', ['event=None'], ''),
                                                   ('validate',
                                                    [],
                                                    'validate the data\n\n        This method is called automatically to validate the data before the\n        dialog is destroyed. By default, it always validates OK.\n        '),
                                                   ('apply',
                                                    [],
                                                    'process the data\n\n        This method is called automatically to process the data, *after*\n        the dialog is destroyed. By default, it does nothing.\n        ')],
                                       'properties': ['parent', 'result', 'initial_focus']},
             'tkSimpleDialog._QueryDialog': {'bases': ['tkSimpleDialog.Dialog'],
                                             'constructor': ['title',
                                                             'prompt',
                                                             'initialvalue=None',
                                                             'minvalue=None',
                                                             'maxvalue=None',
                                                             'parent=None'],
                                             'docstring': '',
                                             'methods': [('destroy', [], ''),
                                                         ('body', ['master'], ''),
                                                         ('validate', [], '')],
                                             'properties': ['prompt',
                                                            'minvalue',
                                                            'maxvalue',
                                                            'initialvalue',
                                                            'entry',
                                                            'result']},
             'tkSimpleDialog._QueryFloat': {'bases': ['tkSimpleDialog._QueryDialog'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('getresult', [], '')],
                                            'properties': ['errormessage']},
             'tkSimpleDialog._QueryInteger': {'bases': ['tkSimpleDialog._QueryDialog'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('getresult', [], '')],
                                              'properties': ['errormessage']},
             'tkSimpleDialog._QueryString': {'bases': ['tkSimpleDialog._QueryDialog'],
                                             'constructor': ['*args', '**kw'],
                                             'docstring': '',
                                             'methods': [('body', ['master'], ''),
                                                         ('getresult', [], '')],
                                             'properties': ['__show']},
             'toaiff.error': {'bases': ['Exception'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'tokenize.StopTokenizing': {'bases': ['Exception'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': []},
             'tokenize.TokenError': {'bases': ['Exception'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': []},
             'trace.CoverageResults': {'bases': [],
                                       'constructor': ['counts=None',
                                                       'calledfuncs=None',
                                                       'infile=None',
                                                       'callers=None',
                                                       'outfile=None'],
                                       'docstring': '',
                                       'methods': [('update',
                                                    ['other'],
                                                    'Merge in the data from another CoverageResults'),
                                                   ('write_results',
                                                    ['show_missing=True',
                                                     'summary=False',
                                                     'coverdir=None'],
                                                    '\n        @param coverdir\n        '),
                                                   ('write_results_file',
                                                    ['path', 'lines', 'lnotab', 'lines_hit'],
                                                    'Return a coverage results file in path.')],
                                       'properties': ['counts',
                                                      'counter',
                                                      'calledfuncs',
                                                      'callers',
                                                      'infile',
                                                      'outfile']},
             'trace.Ignore': {'bases': [],
                              'constructor': ['modules=None', 'dirs=None'],
                              'docstring': '',
                              'methods': [('names', ['filename', 'modulename'], '')],
                              'properties': ['_mods', '_dirs', '_ignore']},
             'trace.Trace': {'bases': [],
                             'constructor': ['count=1',
                                             'trace=1',
                                             'countfuncs=0',
                                             'countcallers=0',
                                             'ignoremods=()',
                                             'ignoredirs=()',
                                             'infile=None',
                                             'outfile=None'],
                             'docstring': '',
                             'methods': [('run', ['cmd'], ''),
                                         ('runctx', ['cmd', 'globals=None', 'locals=None'], ''),
                                         ('runfunc', ['func', '*args', '**kw'], ''),
                                         ('file_module_function_of', ['frame'], ''),
                                         ('globaltrace_trackcallers',
                                          ['frame', 'why', 'arg'],
                                          'Handler for call events.\n\n        Adds information about who called who to the self._callers dict.\n        '),
                                         ('globaltrace_countfuncs',
                                          ['frame', 'why', 'arg'],
                                          'Handler for call events.\n\n        Adds (filename, modulename, funcname) to the self._calledfuncs dict.\n        '),
                                         ('globaltrace_lt',
                                          ['frame', 'why', 'arg'],
                                          "Handler for call events.\n\n        If the code block being entered is to be ignored, returns `None',\n        else returns self.localtrace.\n        "),
                                         ('localtrace_trace_and_count',
                                          ['frame', 'why', 'arg'],
                                          ''),
                                         ('localtrace_trace', ['frame', 'why', 'arg'], ''),
                                         ('localtrace_count', ['frame', 'why', 'arg'], ''),
                                         ('results', [], '')],
                             'properties': ['infile',
                                            'outfile',
                                            'ignore',
                                            'counts',
                                            'blabbed',
                                            'pathtobasename',
                                            'donothing',
                                            'trace',
                                            '_calledfuncs',
                                            '_callers',
                                            '_caller_cache',
                                            'globaltrace',
                                            'localtrace']},
             'turtle.Error': {'bases': ['Exception'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'turtle.Pen': {'bases': ['turtle.RawPen'],
                            'constructor': [],
                            'docstring': '',
                            'methods': [('_destroy', [], '')],
                            'properties': []},
             'turtle.RawPen': {'bases': [],
                               'constructor': ['canvas'],
                               'docstring': '',
                               'methods': [('degrees',
                                            ['fullcircle=360.0'],
                                            ' Set angle measurement units to degrees.\n\n        Example:\n        >>> turtle.degrees()\n        '),
                                           ('radians',
                                            [],
                                            ' Set the angle measurement units to radians.\n\n        Example:\n        >>> turtle.radians()\n        '),
                                           ('reset',
                                            [],
                                            ' Clear the screen, re-center the pen, and set variables to\n        the default values.\n\n        Example:\n        >>> turtle.position()\n        [0.0, -22.0]\n        >>> turtle.heading()\n        100.0\n        >>> turtle.reset()\n        >>> turtle.position()\n        [0.0, 0.0]\n        >>> turtle.heading()\n        0.0\n        '),
                                           ('clear',
                                            [],
                                            ' Clear the screen. The turtle does not move.\n\n        Example:\n        >>> turtle.clear()\n        '),
                                           ('tracer',
                                            ['flag'],
                                            ' Set tracing on if flag is True, and off if it is False.\n        Tracing means line are drawn more slowly, with an\n        animation of an arrow along the line.\n\n        Example:\n        >>> turtle.tracer(False)   # turns off Tracer\n        '),
                                           ('forward',
                                            ['distance'],
                                            ' Go forward distance steps.\n\n        Example:\n        >>> turtle.position()\n        [0.0, 0.0]\n        >>> turtle.forward(25)\n        >>> turtle.position()\n        [25.0, 0.0]\n        >>> turtle.forward(-75)\n        >>> turtle.position()\n        [-50.0, 0.0]\n        '),
                                           ('backward',
                                            ['distance'],
                                            " Go backwards distance steps.\n\n        The turtle's heading does not change.\n\n        Example:\n        >>> turtle.position()\n        [0.0, 0.0]\n        >>> turtle.backward(30)\n        >>> turtle.position()\n        [-30.0, 0.0]\n        "),
                                           ('left',
                                            ['angle'],
                                            ' Turn left angle units (units are by default degrees,\n        but can be set via the degrees() and radians() functions.)\n\n        When viewed from above, the turning happens in-place around\n        its front tip.\n\n        Example:\n        >>> turtle.heading()\n        22\n        >>> turtle.left(45)\n        >>> turtle.heading()\n        67.0\n        '),
                                           ('right',
                                            ['angle'],
                                            ' Turn right angle units (units are by default degrees,\n        but can be set via the degrees() and radians() functions.)\n\n        When viewed from above, the turning happens in-place around\n        its front tip.\n\n        Example:\n        >>> turtle.heading()\n        22\n        >>> turtle.right(45)\n        >>> turtle.heading()\n        337.0\n        '),
                                           ('up',
                                            [],
                                            ' Pull the pen up -- no drawing when moving.\n\n        Example:\n        >>> turtle.up()\n        '),
                                           ('down',
                                            [],
                                            ' Put the pen down -- draw when moving.\n\n        Example:\n        >>> turtle.down()\n        '),
                                           ('width',
                                            ['width'],
                                            ' Set the line to thickness to width.\n\n        Example:\n        >>> turtle.width(10)\n        '),
                                           ('color',
                                            ['*args'],
                                            ' Set the pen color.\n\n        Three input formats are allowed:\n\n            color(s)\n            s is a Tk specification string, such as "red" or "yellow"\n\n            color((r, g, b))\n            *a tuple* of r, g, and b, which represent, an RGB color,\n            and each of r, g, and b are in the range [0..1]\n\n            color(r, g, b)\n            r, g, and b represent an RGB color, and each of r, g, and b\n            are in the range [0..1]\n\n        Example:\n\n        >>> turtle.color(\'brown\')\n        >>> tup = (0.2, 0.8, 0.55)\n        >>> turtle.color(tup)\n        >>> turtle.color(0, .5, 0)\n        '),
                                           ('_set_color', ['color'], ''),
                                           ('write',
                                            ['text', 'move=False'],
                                            " Write text at the current pen position.\n\n        If move is true, the pen is moved to the bottom-right corner\n        of the text. By default, move is False.\n\n        Example:\n        >>> turtle.write('The race is on!')\n        >>> turtle.write('Home = (0, 0)', True)\n        "),
                                           ('fill',
                                            ['flag'],
                                            ' Call fill(1) before drawing the shape you\n         want to fill, and fill(0) when done.\n\n        Example:\n        >>> turtle.fill(1)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.fill(0)\n        '),
                                           ('begin_fill',
                                            [],
                                            ' Called just before drawing a shape to be filled.\n            Must eventually be followed by a corresponding end_fill() call.\n            Otherwise it will be ignored.\n\n        Example:\n        >>> turtle.begin_fill()\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.end_fill()\n        '),
                                           ('end_fill',
                                            [],
                                            ' Called after drawing a shape to be filled.\n\n        Example:\n        >>> turtle.begin_fill()\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.left(90)\n        >>> turtle.forward(100)\n        >>> turtle.end_fill()\n        '),
                                           ('circle',
                                            ['radius', 'extent=None'],
                                            ' Draw a circle with given radius.\n        The center is radius units left of the turtle; extent\n        determines which part of the circle is drawn. If not given,\n        the entire circle is drawn.\n\n        If extent is not a full circle, one endpoint of the arc is the\n        current pen position. The arc is drawn in a counter clockwise\n        direction if radius is positive, otherwise in a clockwise\n        direction. In the process, the direction of the turtle is\n        changed by the amount of the extent.\n\n        >>> turtle.circle(50)\n        >>> turtle.circle(120, 180)  # half a circle\n        '),
                                           ('heading',
                                            [],
                                            " Return the turtle's current heading.\n\n        Example:\n        >>> turtle.heading()\n        67.0\n        "),
                                           ('setheading',
                                            ['angle'],
                                            ' Set the turtle facing the given angle.\n\n        Here are some common directions in degrees:\n\n           0 - east\n          90 - north\n         180 - west\n         270 - south\n\n        Example:\n        >>> turtle.setheading(90)\n        >>> turtle.heading()\n        90\n        >>> turtle.setheading(128)\n        >>> turtle.heading()\n        128\n        '),
                                           ('window_width',
                                            [],
                                            ' Returns the width of the turtle window.\n\n        Example:\n        >>> turtle.window_width()\n        640\n        '),
                                           ('window_height',
                                            [],
                                            ' Return the height of the turtle window.\n\n        Example:\n        >>> turtle.window_height()\n        768\n        '),
                                           ('position',
                                            [],
                                            ' Return the current (x, y) location of the turtle.\n\n        Example:\n        >>> turtle.position()\n        [0.0, 240.0]\n        '),
                                           ('setx',
                                            ['xpos'],
                                            " Set the turtle's x coordinate to be xpos.\n\n        Example:\n        >>> turtle.position()\n        [10.0, 240.0]\n        >>> turtle.setx(10)\n        >>> turtle.position()\n        [10.0, 240.0]\n        "),
                                           ('sety',
                                            ['ypos'],
                                            " Set the turtle's y coordinate to be ypos.\n\n        Example:\n        >>> turtle.position()\n        [0.0, 0.0]\n        >>> turtle.sety(-22)\n        >>> turtle.position()\n        [0.0, -22.0]\n        "),
                                           ('towards',
                                            ['*args'],
                                            'Returs the angle, which corresponds to the line\n        from turtle-position to point (x,y).\n\n        Argument can be two coordinates or one pair of coordinates\n        or a RawPen/Pen instance.\n\n        Example:\n        >>> turtle.position()\n        [10.0, 10.0]\n        >>> turtle.towards(0,0)\n        225.0\n        '),
                                           ('goto',
                                            ['*args'],
                                            " Go to the given point.\n\n        If the pen is down, then a line will be drawn. The turtle's\n        orientation does not change.\n\n        Two input formats are accepted:\n\n           goto(x, y)\n           go to point (x, y)\n\n           goto((x, y))\n           go to point (x, y)\n\n        Example:\n        >>> turtle.position()\n        [0.0, 0.0]\n        >>> turtle.goto(50, -45)\n        >>> turtle.position()\n        [50.0, -45.0]\n        "),
                                           ('_goto', ['x1', 'y1'], ''),
                                           ('speed',
                                            ['speed'],
                                            " Set the turtle's speed.\n\n        speed must one of these five strings:\n\n            'fastest' is a 0 ms delay\n            'fast' is a 5 ms delay\n            'normal' is a 10 ms delay\n            'slow' is a 15 ms delay\n            'slowest' is a 20 ms delay\n\n         Example:\n         >>> turtle.speed('slow')\n        "),
                                           ('delay',
                                            ['delay'],
                                            ' Set the drawing delay in milliseconds.\n\n        This is intended to allow finer control of the drawing speed\n        than the speed() method\n\n        Example:\n        >>> turtle.delay(15)\n        '),
                                           ('_draw_turtle', ['position=[]'], ''),
                                           ('_delete_turtle', [], '')],
                               'properties': ['_canvas',
                                              '_items',
                                              '_tracing',
                                              '_arrow',
                                              '_delay',
                                              '_angle',
                                              '_fullcircle',
                                              '_invradian',
                                              '_origin',
                                              '_position',
                                              '_drawing',
                                              '_width',
                                              '_color',
                                              '_filling',
                                              '_path']},
             'turtle.Turtle': {'bases': ['turtle.Pen'],
                               'constructor': [],
                               'docstring': '',
                               'methods': [],
                               'properties': []},
             'types._C': {'bases': [],
                          'constructor': [],
                          'docstring': '',
                          'methods': [('_m', [], '')],
                          'properties': []},
             'unittest.FunctionTestCase': {'bases': ['unittest.TestCase'],
                                           'constructor': ['testFunc',
                                                           'setUp=None',
                                                           'tearDown=None',
                                                           'description=None'],
                                           'docstring': "A test case that wraps a test function.\n\n    This is useful for slipping pre-existing test functions into the\n    PyUnit framework. Optionally, set-up and tidy-up functions can be\n    supplied. As with TestCase, the tidy-up ('tearDown') function will\n    always be called if the set-up ('setUp') function ran successfully.\n    ",
                                           'methods': [('setUp', [], ''),
                                                       ('tearDown', [], ''),
                                                       ('runTest', [], ''),
                                                       ('id', [], ''),
                                                       ('__str__', [], ''),
                                                       ('__repr__', [], ''),
                                                       ('shortDescription', [], '')],
                                           'properties': ['__setUpFunc',
                                                          '__tearDownFunc',
                                                          '__testFunc',
                                                          '__description']},
             'unittest.TestCase': {'bases': [],
                                   'constructor': ["methodName='runTest'"],
                                   'docstring': "A class whose instances are single test cases.\n\n    By default, the test code itself should be placed in a method named\n    'runTest'.\n\n    If the fixture may be used for many test cases, create as\n    many test methods as are needed. When instantiating such a TestCase\n    subclass, specify in the constructor arguments the name of the test method\n    that the instance is to execute.\n\n    Test authors should subclass TestCase for their own tests. Construction\n    and deconstruction of the test's environment ('fixture') can be\n    implemented by overriding the 'setUp' and 'tearDown' methods respectively.\n\n    If it is necessary to override the __init__ method, the base class\n    __init__ method must always be called. It is important that subclasses\n    should not change the signature of their __init__ method, since instances\n    of the classes are instantiated automatically by parts of the framework\n    in order to be run.\n    ",
                                   'methods': [('setUp',
                                                [],
                                                'Hook method for setting up the test fixture before exercising it.'),
                                               ('tearDown',
                                                [],
                                                'Hook method for deconstructing the test fixture after testing it.'),
                                               ('countTestCases', [], ''),
                                               ('defaultTestResult', [], ''),
                                               ('shortDescription',
                                                [],
                                                "Returns a one-line description of the test, or None if no\n        description has been provided.\n\n        The default implementation of this method returns the first line of\n        the specified test method's docstring.\n        "),
                                               ('id', [], ''),
                                               ('__str__', [], ''),
                                               ('__repr__', [], ''),
                                               ('run', ['result=None'], ''),
                                               ('__call__', ['*args', '**kwds'], ''),
                                               ('debug',
                                                [],
                                                'Run the test without collecting errors in a TestResult'),
                                               ('_exc_info',
                                                [],
                                                'Return a version of sys.exc_info() with the traceback frame\n           minimised; usually the top level of the traceback frame is not\n           needed.\n        '),
                                               ('fail',
                                                ['msg=None'],
                                                'Fail immediately, with the given message.'),
                                               ('failIf',
                                                ['expr', 'msg=None'],
                                                'Fail the test if the expression is true.'),
                                               ('failUnless',
                                                ['expr', 'msg=None'],
                                                'Fail the test unless the expression is true.'),
                                               ('failUnlessRaises',
                                                ['excClass',
                                                 'callableObj',
                                                 '*args',
                                                 '**kwargs'],
                                                'Fail unless an exception of class excClass is thrown\n           by callableObj when invoked with arguments args and keyword\n           arguments kwargs. If a different type of exception is\n           thrown, it will not be caught, and the test case will be\n           deemed to have suffered an error, exactly as for an\n           unexpected exception.\n        '),
                                               ('failUnlessEqual',
                                                ['first', 'second', 'msg=None'],
                                                "Fail if the two objects are unequal as determined by the '=='\n           operator.\n        "),
                                               ('failIfEqual',
                                                ['first', 'second', 'msg=None'],
                                                "Fail if the two objects are equal as determined by the '=='\n           operator.\n        "),
                                               ('failUnlessAlmostEqual',
                                                ['first', 'second', 'places=7', 'msg=None'],
                                                'Fail if the two objects are unequal as determined by their\n           difference rounded to the given number of decimal places\n           (default 7) and comparing to zero.\n\n           Note that decimal places (from zero) are usually not the same\n           as significant digits (measured from the most signficant digit).\n        '),
                                               ('failIfAlmostEqual',
                                                ['first', 'second', 'places=7', 'msg=None'],
                                                'Fail if the two objects are equal as determined by their\n           difference rounded to the given number of decimal places\n           (default 7) and comparing to zero.\n\n           Note that decimal places (from zero) are usually not the same\n           as significant digits (measured from the most signficant digit).\n        ')],
                                   'properties': ['failureException',
                                                  '_testMethodName',
                                                  '_testMethodDoc',
                                                  'assertEqual',
                                                  'assertEquals',
                                                  'assertNotEqual',
                                                  'assertNotEquals',
                                                  'assertAlmostEqual',
                                                  'assertAlmostEquals',
                                                  'assertNotAlmostEqual',
                                                  'assertNotAlmostEquals',
                                                  'assertRaises',
                                                  'assert_',
                                                  'assertTrue',
                                                  'assertFalse']},
             'unittest.TestLoader': {'bases': [],
                                     'constructor': [],
                                     'docstring': 'This class is responsible for loading tests according to various\n    criteria and returning them wrapped in a Test\n    ',
                                     'methods': [('loadTestsFromTestCase',
                                                  ['testCaseClass'],
                                                  'Return a suite of all tests cases contained in testCaseClass'),
                                                 ('loadTestsFromModule',
                                                  ['module'],
                                                  'Return a suite of all tests cases contained in the given module'),
                                                 ('loadTestsFromName',
                                                  ['name', 'module=None'],
                                                  'Return a suite of all tests cases given a string specifier.\n\n        The name may resolve either to a module, a test case class, a\n        test method within a test case class, or a callable object which\n        returns a TestCase or TestSuite instance.\n\n        The method optionally resolves the names relative to a given module.\n        '),
                                                 ('loadTestsFromNames',
                                                  ['names', 'module=None'],
                                                  "Return a suite of all tests cases found using the given sequence\n        of string specifiers. See 'loadTestsFromName()'.\n        "),
                                                 ('getTestCaseNames',
                                                  ['testCaseClass'],
                                                  'Return a sorted sequence of method names found within testCaseClass\n        ')],
                                     'properties': ['testMethodPrefix',
                                                    'sortTestMethodsUsing',
                                                    'suiteClass']},
             'unittest.TestProgram': {'bases': [],
                                      'constructor': ["module='__main__'",
                                                      'defaultTest=None',
                                                      'argv=None',
                                                      'testRunner=None',
                                                      'testLoader=defaultTestLoader'],
                                      'docstring': 'A command-line program that runs a set of tests; this is primarily\n       for making test modules conveniently executable.\n    ',
                                      'methods': [('usageExit', ['msg=None'], ''),
                                                  ('parseArgs', ['argv'], ''),
                                                  ('createTests', [], ''),
                                                  ('runTests', [], '')],
                                      'properties': ['USAGE',
                                                     'module',
                                                     'verbosity',
                                                     'defaultTest',
                                                     'testRunner',
                                                     'testLoader',
                                                     'progName',
                                                     'test',
                                                     'testNames']},
             'unittest.TestResult': {'bases': [],
                                     'constructor': [],
                                     'docstring': 'Holder for test result information.\n\n    Test results are automatically managed by the TestCase and TestSuite\n    classes, and do not need to be explicitly manipulated by writers of tests.\n\n    Each instance holds the total number of tests run, and collections of\n    failures and errors that occurred among those test runs. The collections\n    contain tuples of (testcase, exceptioninfo), where exceptioninfo is the\n    formatted traceback of the error that occurred.\n    ',
                                     'methods': [('startTest',
                                                  ['test'],
                                                  'Called when the given test is about to be run'),
                                                 ('stopTest',
                                                  ['test'],
                                                  'Called when the given test has been run'),
                                                 ('addError',
                                                  ['test', 'err'],
                                                  "Called when an error has occurred. 'err' is a tuple of values as\n        returned by sys.exc_info().\n        "),
                                                 ('addFailure',
                                                  ['test', 'err'],
                                                  "Called when an error has occurred. 'err' is a tuple of values as\n        returned by sys.exc_info()."),
                                                 ('addSuccess',
                                                  ['test'],
                                                  'Called when a test has completed successfully'),
                                                 ('wasSuccessful',
                                                  [],
                                                  'Tells whether or not this result was a success'),
                                                 ('stop',
                                                  [],
                                                  'Indicates that the tests should be aborted'),
                                                 ('_exc_info_to_string',
                                                  ['err', 'test'],
                                                  'Converts a sys.exc_info()-style tuple of values into a string.'),
                                                 ('_is_relevant_tb_level', ['tb'], ''),
                                                 ('_count_relevant_tb_levels', ['tb'], ''),
                                                 ('__repr__', [], '')],
                                     'properties': ['failures',
                                                    'errors',
                                                    'testsRun',
                                                    'shouldStop']},
             'unittest.TestSuite': {'bases': [],
                                    'constructor': ['tests=()'],
                                    'docstring': 'A test suite is a composite test consisting of a number of TestCases.\n\n    For use, create an instance of TestSuite, then add test case instances.\n    When all tests have been added, the suite can be passed to a test\n    runner, such as TextTestRunner. It will run the individual test cases\n    in the order in which they were added, aggregating the results. When\n    subclassing, do not forget to call the base class constructor.\n    ',
                                    'methods': [('__repr__', [], ''),
                                                ('__iter__', [], ''),
                                                ('countTestCases', [], ''),
                                                ('addTest', ['test'], ''),
                                                ('addTests', ['tests'], ''),
                                                ('run', ['result'], ''),
                                                ('__call__', ['*args', '**kwds'], ''),
                                                ('debug',
                                                 [],
                                                 'Run the tests without collecting errors in a TestResult')],
                                    'properties': ['_tests', '__str__']},
             'unittest.TextTestRunner': {'bases': [],
                                         'constructor': ['stream=sys.stderr',
                                                         'descriptions=1',
                                                         'verbosity=1'],
                                         'docstring': 'A test runner class that displays results in textual form.\n\n    It prints out the names of tests as they are run, errors as they\n    occur, and a summary of the results at the end of the test run.\n    ',
                                         'methods': [('_makeResult', [], ''),
                                                     ('run',
                                                      ['test'],
                                                      'Run the given test case or test suite.')],
                                         'properties': ['stream', 'descriptions', 'verbosity']},
             'unittest._TextTestResult': {'bases': ['unittest.TestResult'],
                                          'constructor': ['stream', 'descriptions', 'verbosity'],
                                          'docstring': 'A test result class that can print formatted text results to a stream.\n\n    Used by TextTestRunner.\n    ',
                                          'methods': [('getDescription', ['test'], ''),
                                                      ('startTest', ['test'], ''),
                                                      ('addSuccess', ['test'], ''),
                                                      ('addError', ['test', 'err'], ''),
                                                      ('addFailure', ['test', 'err'], ''),
                                                      ('printErrors', [], ''),
                                                      ('printErrorList',
                                                       ['flavour', 'errors'],
                                                       '')],
                                          'properties': ['separator1',
                                                         'separator2',
                                                         'stream',
                                                         'showAll',
                                                         'dots',
                                                         'descriptions']},
             'unittest._WritelnDecorator': {'bases': [],
                                            'constructor': ['stream'],
                                            'docstring': "Used to decorate file-like objects with a handy 'writeln' method",
                                            'methods': [('__getattr__', ['attr'], ''),
                                                        ('writeln', ['arg=None'], '')],
                                            'properties': ['stream']},
             'urllib.ContentTooShortError': {'bases': ['IOError'],
                                             'constructor': ['message', 'content'],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['content']},
             'urllib.FancyURLopener': {'bases': ['urllib.URLopener'],
                                       'constructor': ['*args', '**kwargs'],
                                       'docstring': 'Derived class with handlers for errors we can handle (perhaps).',
                                       'methods': [('http_error_default',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers'],
                                                    "Default error handling -- don't raise an exception."),
                                                   ('http_error_302',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data=None'],
                                                    'Error 302 -- relocated (temporarily).'),
                                                   ('redirect_internal',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data'],
                                                    ''),
                                                   ('http_error_301',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data=None'],
                                                    'Error 301 -- also relocated (permanently).'),
                                                   ('http_error_303',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data=None'],
                                                    'Error 303 -- also relocated (essentially identical to 302).'),
                                                   ('http_error_307',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data=None'],
                                                    'Error 307 -- relocated, but turn POST into error.'),
                                                   ('http_error_401',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data=None'],
                                                    'Error 401 -- authentication required.\n        This function supports Basic authentication only.'),
                                                   ('http_error_407',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data=None'],
                                                    'Error 407 -- proxy authentication required.\n        This function supports Basic authentication only.'),
                                                   ('retry_proxy_http_basic_auth',
                                                    ['url', 'realm', 'data=None'],
                                                    ''),
                                                   ('retry_proxy_https_basic_auth',
                                                    ['url', 'realm', 'data=None'],
                                                    ''),
                                                   ('retry_http_basic_auth',
                                                    ['url', 'realm', 'data=None'],
                                                    ''),
                                                   ('retry_https_basic_auth',
                                                    ['url', 'realm', 'data=None'],
                                                    ''),
                                                   ('get_user_passwd',
                                                    ['host', 'realm', 'clear_cache=0'],
                                                    ''),
                                                   ('prompt_user_passwd',
                                                    ['host', 'realm'],
                                                    'Override this in a GUI environment!')],
                                       'properties': ['auth_cache', 'tries', 'maxtries']},
             'urllib.URLopener': {'bases': [],
                                  'constructor': ['proxies=None', '**x509'],
                                  'docstring': "Class to open URLs.\n    This is a class rather than just a subroutine because we may need\n    more than one set of global protocol-specific options.\n    Note -- this is a base class for those who don't want the\n    automatic handling of errors type 302 (relocated) and 401\n    (authorization needed).",
                                  'methods': [('__del__', [], ''),
                                              ('close', [], ''),
                                              ('cleanup', [], ''),
                                              ('addheader',
                                               ['*args'],
                                               "Add a header to be used by the HTTP interface only\n        e.g. u.addheader('Accept', 'sound/basic')"),
                                              ('open',
                                               ['fullurl', 'data=None'],
                                               "Use URLopener().open(file) instead of open(file, 'r')."),
                                              ('open_unknown',
                                               ['fullurl', 'data=None'],
                                               'Overridable interface to open unknown URL type.'),
                                              ('open_unknown_proxy',
                                               ['proxy', 'fullurl', 'data=None'],
                                               'Overridable interface to open unknown URL type.'),
                                              ('retrieve',
                                               ['url',
                                                'filename=None',
                                                'reporthook=None',
                                                'data=None'],
                                               'retrieve(url) returns (filename, headers) for a local object\n        or (tempfilename, headers) for a remote object.'),
                                              ('open_http',
                                               ['url', 'data=None'],
                                               'Use HTTP protocol.'),
                                              ('http_error',
                                               ['url',
                                                'fp',
                                                'errcode',
                                                'errmsg',
                                                'headers',
                                                'data=None'],
                                               'Handle http errors.\n        Derived class can override this, or provide specific handlers\n        named http_error_DDD where DDD is the 3-digit error code.'),
                                              ('http_error_default',
                                               ['url', 'fp', 'errcode', 'errmsg', 'headers'],
                                               'Default error handler: close the connection and raise IOError.'),
                                              ('open_https',
                                               ['url', 'data=None'],
                                               'Use HTTPS protocol.'),
                                              ('open_gopher', ['url'], 'Use Gopher protocol.'),
                                              ('open_file',
                                               ['url'],
                                               'Use local file or FTP depending on form of URL.'),
                                              ('open_local_file', ['url'], 'Use local file.'),
                                              ('open_ftp', ['url'], 'Use FTP protocol.'),
                                              ('open_data',
                                               ['url', 'data=None'],
                                               'Use "data" URL.')],
                                  'properties': ['__tempfiles',
                                                 'version',
                                                 'proxies',
                                                 'key_file',
                                                 'cert_file',
                                                 'addheaders',
                                                 '__unlink',
                                                 'tempcache',
                                                 'ftpcache',
                                                 'type']},
             'urllib.addbase': {'bases': [],
                                'constructor': ['fp'],
                                'docstring': 'Base class for addinfo and addclosehook.',
                                'methods': [('__repr__', [], ''), ('close', [], '')],
                                'properties': ['fp',
                                               'read',
                                               'readline',
                                               'readlines',
                                               'fileno',
                                               '__iter__',
                                               'next']},
             'urllib.addclosehook': {'bases': ['urllib.addbase'],
                                     'constructor': ['fp', 'closehook', '*hookargs'],
                                     'docstring': 'Class to add a close hook to an open file.',
                                     'methods': [('close', [], '')],
                                     'properties': ['closehook', 'hookargs']},
             'urllib.addinfo': {'bases': ['urllib.addbase'],
                                'constructor': ['fp', 'headers'],
                                'docstring': 'class to add an info() method to an open file.',
                                'methods': [('info', [], '')],
                                'properties': ['headers']},
             'urllib.addinfourl': {'bases': ['urllib.addbase'],
                                   'constructor': ['fp', 'headers', 'url'],
                                   'docstring': 'class to add info() and geturl() methods to an open file.',
                                   'methods': [('info', [], ''), ('geturl', [], '')],
                                   'properties': ['headers', 'url']},
             'urllib.ftpwrapper': {'bases': [],
                                   'constructor': ['user', 'passwd', 'host', 'port', 'dirs'],
                                   'docstring': 'Class used by open_ftp() for cache of open FTP connections.',
                                   'methods': [('init', [], ''),
                                               ('retrfile', ['file', 'type'], ''),
                                               ('endtransfer', [], ''),
                                               ('close', [], '')],
                                   'properties': ['user',
                                                  'passwd',
                                                  'host',
                                                  'port',
                                                  'dirs',
                                                  'busy',
                                                  'ftp']},
             'urllib2.AbstractBasicAuthHandler': {'bases': [],
                                                  'constructor': ['password_mgr=None'],
                                                  'docstring': '',
                                                  'methods': [('http_error_auth_reqed',
                                                               ['authreq',
                                                                'host',
                                                                'req',
                                                                'headers'],
                                                               ''),
                                                              ('retry_http_basic_auth',
                                                               ['host', 'req', 'realm'],
                                                               '')],
                                                  'properties': ['rx', 'passwd', 'add_password']},
             'urllib2.AbstractDigestAuthHandler': {'bases': [],
                                                   'constructor': ['passwd=None'],
                                                   'docstring': '',
                                                   'methods': [('reset_retry_count', [], ''),
                                                               ('http_error_auth_reqed',
                                                                ['auth_header',
                                                                 'host',
                                                                 'req',
                                                                 'headers'],
                                                                ''),
                                                               ('retry_http_digest_auth',
                                                                ['req', 'auth'],
                                                                ''),
                                                               ('get_cnonce', ['nonce'], ''),
                                                               ('get_authorization',
                                                                ['req', 'chal'],
                                                                ''),
                                                               ('get_algorithm_impls',
                                                                ['algorithm'],
                                                                ''),
                                                               ('get_entity_digest',
                                                                ['data', 'chal'],
                                                                '')],
                                                   'properties': ['passwd',
                                                                  'add_password',
                                                                  'retried',
                                                                  'nonce_count']},
             'urllib2.AbstractHTTPHandler': {'bases': ['urllib2.BaseHandler'],
                                             'constructor': ['debuglevel=0'],
                                             'docstring': '',
                                             'methods': [('set_http_debuglevel', ['level'], ''),
                                                         ('do_request_', ['request'], ''),
                                                         ('do_open',
                                                          ['http_class', 'req'],
                                                          'Return an addinfourl object for the request, using http_class.\n\n        http_class must implement the HTTPConnection API from httplib.\n        The addinfourl return value is a file-like object.  It also\n        has methods and attributes including:\n            - info(): return a mimetools.Message object for the headers\n            - geturl(): return the original request URL\n            - code: HTTP status code\n        ')],
                                             'properties': ['_debuglevel']},
             'urllib2.BaseHandler': {'bases': [],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('add_parent', ['parent'], ''),
                                                 ('close', [], ''),
                                                 ('__lt__', ['other'], '')],
                                     'properties': ['handler_order', 'parent']},
             'urllib2.CacheFTPHandler': {'bases': ['urllib2.FTPHandler'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('setTimeout', ['t'], ''),
                                                     ('setMaxConns', ['m'], ''),
                                                     ('connect_ftp',
                                                      ['user',
                                                       'passwd',
                                                       'host',
                                                       'port',
                                                       'dirs'],
                                                      ''),
                                                     ('check_cache', [], '')],
                                         'properties': ['cache',
                                                        'timeout',
                                                        'soonest',
                                                        'delay',
                                                        'max_conns']},
             'urllib2.FTPHandler': {'bases': ['urllib2.BaseHandler'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('ftp_open', ['req'], ''),
                                                ('connect_ftp',
                                                 ['user', 'passwd', 'host', 'port', 'dirs'],
                                                 '')],
                                    'properties': []},
             'urllib2.FileHandler': {'bases': ['urllib2.BaseHandler'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('file_open', ['req'], ''),
                                                 ('get_names', [], ''),
                                                 ('open_local_file', ['req'], '')],
                                     'properties': ['names']},
             'urllib2.GopherError': {'bases': ['urllib2.URLError'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': []},
             'urllib2.GopherHandler': {'bases': ['urllib2.BaseHandler'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('gopher_open', ['req'], '')],
                                       'properties': []},
             'urllib2.HTTPBasicAuthHandler': {'bases': ['urllib2.AbstractBasicAuthHandler',
                                                        'urllib2.BaseHandler'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('http_error_401',
                                                           ['req',
                                                            'fp',
                                                            'code',
                                                            'msg',
                                                            'headers'],
                                                           '')],
                                              'properties': ['auth_header']},
             'urllib2.HTTPCookieProcessor': {'bases': ['urllib2.BaseHandler'],
                                             'constructor': ['cookiejar=None'],
                                             'docstring': '',
                                             'methods': [('http_request', ['request'], ''),
                                                         ('http_response',
                                                          ['request', 'response'],
                                                          '')],
                                             'properties': ['cookiejar',
                                                            'https_request',
                                                            'https_response']},
             'urllib2.HTTPDefaultErrorHandler': {'bases': ['urllib2.BaseHandler'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('http_error_default',
                                                              ['req',
                                                               'fp',
                                                               'code',
                                                               'msg',
                                                               'hdrs'],
                                                              '')],
                                                 'properties': []},
             'urllib2.HTTPDigestAuthHandler': {'bases': ['urllib2.BaseHandler',
                                                         'urllib2.AbstractDigestAuthHandler'],
                                               'constructor': [],
                                               'docstring': 'An authentication protocol defined by RFC 2069\n\n    Digest authentication improves on basic authentication because it\n    does not transmit passwords in the clear.\n    ',
                                               'methods': [('http_error_401',
                                                            ['req',
                                                             'fp',
                                                             'code',
                                                             'msg',
                                                             'headers'],
                                                            '')],
                                               'properties': ['auth_header', 'handler_order']},
             'urllib2.HTTPError': {'bases': ['urllib2.URLError', 'urllib.addinfourl'],
                                   'constructor': ['url', 'code', 'msg', 'hdrs', 'fp'],
                                   'docstring': 'Raised when HTTP error occurs, but also acts like non-error return',
                                   'methods': [('__str__', [], '')],
                                   'properties': ['__super_init',
                                                  'code',
                                                  'msg',
                                                  'hdrs',
                                                  'fp',
                                                  'filename']},
             'urllib2.HTTPErrorProcessor': {'bases': ['urllib2.BaseHandler'],
                                            'constructor': [],
                                            'docstring': 'Process HTTP error responses.',
                                            'methods': [('http_response',
                                                         ['request', 'response'],
                                                         '')],
                                            'properties': ['handler_order', 'https_response']},
             'urllib2.HTTPHandler': {'bases': ['urllib2.AbstractHTTPHandler'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('http_open', ['req'], '')],
                                     'properties': ['http_request']},
             'urllib2.HTTPPasswordMgr': {'bases': [],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('add_password',
                                                      ['realm', 'uri', 'user', 'passwd'],
                                                      ''),
                                                     ('find_user_password',
                                                      ['realm', 'authuri'],
                                                      ''),
                                                     ('reduce_uri',
                                                      ['uri', 'default_port=True'],
                                                      'Accept authority or URI and extract only the authority and path.'),
                                                     ('is_suburi',
                                                      ['base', 'test'],
                                                      'Check if test is below base in a URI tree\n\n        Both args must be URIs in reduced form.\n        ')],
                                         'properties': ['passwd']},
             'urllib2.HTTPPasswordMgrWithDefaultRealm': {'bases': ['urllib2.HTTPPasswordMgr'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('find_user_password',
                                                                      ['realm', 'authuri'],
                                                                      '')],
                                                         'properties': []},
             'urllib2.HTTPRedirectHandler': {'bases': ['urllib2.BaseHandler'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('redirect_request',
                                                          ['req',
                                                           'fp',
                                                           'code',
                                                           'msg',
                                                           'headers',
                                                           'newurl'],
                                                          "Return a Request or None in response to a redirect.\n\n        This is called by the http_error_30x methods when a\n        redirection response is received.  If a redirection should\n        take place, return a new Request to allow http_error_30x to\n        perform the redirect.  Otherwise, raise HTTPError if no-one\n        else should try to handle this url.  Return None if you can't\n        but another Handler might.\n        "),
                                                         ('http_error_302',
                                                          ['req',
                                                           'fp',
                                                           'code',
                                                           'msg',
                                                           'headers'],
                                                          '')],
                                             'properties': ['max_repeats',
                                                            'max_redirections',
                                                            'http_error_301',
                                                            'http_error_303',
                                                            'http_error_307',
                                                            'inf_msg']},
             'urllib2.HTTPSHandler': {'bases': ['urllib2.AbstractHTTPHandler'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('https_open', ['req'], '')],
                                      'properties': ['https_request']},
             'urllib2.OpenerDirector': {'bases': [],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('add_handler', ['handler'], ''),
                                                    ('close', [], ''),
                                                    ('_call_chain',
                                                     ['chain', 'kind', 'meth_name', '*args'],
                                                     ''),
                                                    ('open', ['fullurl', 'data=None'], ''),
                                                    ('_open', ['req', 'data=None'], ''),
                                                    ('error', ['proto', '*args'], '')],
                                        'properties': ['addheaders',
                                                       'handlers',
                                                       'handle_open',
                                                       'handle_error',
                                                       'process_response',
                                                       'process_request']},
             'urllib2.ProxyBasicAuthHandler': {'bases': ['urllib2.AbstractBasicAuthHandler',
                                                         'urllib2.BaseHandler'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('http_error_407',
                                                            ['req',
                                                             'fp',
                                                             'code',
                                                             'msg',
                                                             'headers'],
                                                            '')],
                                               'properties': ['auth_header']},
             'urllib2.ProxyDigestAuthHandler': {'bases': ['urllib2.BaseHandler',
                                                          'urllib2.AbstractDigestAuthHandler'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('http_error_407',
                                                             ['req',
                                                              'fp',
                                                              'code',
                                                              'msg',
                                                              'headers'],
                                                             '')],
                                                'properties': ['auth_header', 'handler_order']},
             'urllib2.ProxyHandler': {'bases': ['urllib2.BaseHandler'],
                                      'constructor': ['proxies=None'],
                                      'docstring': '',
                                      'methods': [('proxy_open', ['req', 'proxy', 'type'], '')],
                                      'properties': ['handler_order', 'proxies']},
             'urllib2.Request': {'bases': [],
                                 'constructor': ['url',
                                                 'data=None',
                                                 'headers={}',
                                                 'origin_req_host=None',
                                                 'unverifiable=False'],
                                 'docstring': '',
                                 'methods': [('__getattr__', ['attr'], ''),
                                             ('get_method', [], ''),
                                             ('add_data', ['data'], ''),
                                             ('has_data', [], ''),
                                             ('get_data', [], ''),
                                             ('get_full_url', [], ''),
                                             ('get_type', [], ''),
                                             ('get_host', [], ''),
                                             ('get_selector', [], ''),
                                             ('set_proxy', ['host', 'type'], ''),
                                             ('get_origin_req_host', [], ''),
                                             ('is_unverifiable', [], ''),
                                             ('add_header', ['key', 'val'], ''),
                                             ('add_unredirected_header', ['key', 'val'], ''),
                                             ('has_header', ['header_name'], ''),
                                             ('get_header',
                                              ['header_name', 'default=None'],
                                              ''),
                                             ('header_items', [], '')],
                                 'properties': ['__original',
                                                'type',
                                                'host',
                                                'port',
                                                'data',
                                                'headers',
                                                'unredirected_hdrs',
                                                'origin_req_host',
                                                'unverifiable',
                                                '__r_type',
                                                '__r_host']},
             'urllib2.URLError': {'bases': ['IOError'],
                                  'constructor': ['reason'],
                                  'docstring': '',
                                  'methods': [('__str__', [], '')],
                                  'properties': ['args', 'reason']},
             'urllib2.UnknownHandler': {'bases': ['urllib2.BaseHandler'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('unknown_open', ['req'], '')],
                                        'properties': []},
             'urlparse.BaseResult': {'bases': ['tuple'],
                                     'constructor': [],
                                     'docstring': 'Base class for the parsed result objects.\n\n    This provides the attributes shared by the two derived result\n    objects as read-only properties.  The derived classes are\n    responsible for checking the right number of arguments were\n    supplied to the constructor.\n\n    ',
                                     'methods': [],
                                     'properties': ['__slots__',
                                                    'scheme',
                                                    'netloc',
                                                    'path',
                                                    'query',
                                                    'fragment',
                                                    'username',
                                                    'password',
                                                    'hostname',
                                                    'port']},
             'urlparse.ParseResult': {'bases': ['urlparse.BaseResult'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('__new__',
                                                   ['scheme',
                                                    'netloc',
                                                    'path',
                                                    'params',
                                                    'query',
                                                    'fragment'],
                                                   ''),
                                                  ('geturl', [], '')],
                                      'properties': ['__slots__', 'params']},
             'urlparse.SplitResult': {'bases': ['urlparse.BaseResult'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('__new__',
                                                   ['scheme',
                                                    'netloc',
                                                    'path',
                                                    'query',
                                                    'fragment'],
                                                   ''),
                                                  ('geturl', [], '')],
                                      'properties': ['__slots__']},
             'uu.Error': {'bases': ['Exception'],
                          'constructor': [],
                          'docstring': '',
                          'methods': [],
                          'properties': []},
             'uuid.UUID': {'bases': ['object'],
                           'constructor': ['hex=None',
                                           'bytes=None',
                                           'bytes_le=None',
                                           'fields=None',
                                           'int=None',
                                           'version=None'],
                           'docstring': "Instances of the UUID class represent UUIDs as specified in RFC 4122.\n    UUID objects are immutable, hashable, and usable as dictionary keys.\n    Converting a UUID to a string with str() yields something in the form\n    '12345678-1234-1234-1234-123456789abc'.  The UUID constructor accepts\n    five possible forms: a similar string of hexadecimal digits, or a tuple\n    of six integer fields (with 32-bit, 16-bit, 16-bit, 8-bit, 8-bit, and\n    48-bit values respectively) as an argument named 'fields', or a string\n    of 16 bytes (with all the integer fields in big-endian order) as an\n    argument named 'bytes', or a string of 16 bytes (with the first three\n    fields in little-endian order) as an argument named 'bytes_le', or a\n    single 128-bit integer as an argument named 'int'.\n\n    UUIDs have these read-only attributes:\n\n        bytes       the UUID as a 16-byte string (containing the six\n                    integer fields in big-endian byte order)\n\n        bytes_le    the UUID as a 16-byte string (with time_low, time_mid,\n                    and time_hi_version in little-endian byte order)\n\n        fields      a tuple of the six integer fields of the UUID,\n                    which are also available as six individual attributes\n                    and two derived attributes:\n\n            time_low                the first 32 bits of the UUID\n            time_mid                the next 16 bits of the UUID\n            time_hi_version         the next 16 bits of the UUID\n            clock_seq_hi_variant    the next 8 bits of the UUID\n            clock_seq_low           the next 8 bits of the UUID\n            node                    the last 48 bits of the UUID\n\n            time                    the 60-bit timestamp\n            clock_seq               the 14-bit sequence number\n\n        hex         the UUID as a 32-character hexadecimal string\n\n        int         the UUID as a 128-bit integer\n\n        urn         the UUID as a URN as specified in RFC 4122\n\n        variant     the UUID variant (one of the constants RESERVED_NCS,\n                    RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE)\n\n        version     the UUID version number (1 through 5, meaningful only\n                    when the variant is RFC_4122)\n    ",
                           'methods': [('__cmp__', ['other'], ''),
                                       ('__hash__', [], ''),
                                       ('__int__', [], ''),
                                       ('__repr__', [], ''),
                                       ('__setattr__', ['name', 'value'], ''),
                                       ('__str__', [], ''),
                                       ('get_bytes', [], ''),
                                       ('get_bytes_le', [], ''),
                                       ('get_fields', [], ''),
                                       ('get_time_low', [], ''),
                                       ('get_time_mid', [], ''),
                                       ('get_time_hi_version', [], ''),
                                       ('get_clock_seq_hi_variant', [], ''),
                                       ('get_clock_seq_low', [], ''),
                                       ('get_time', [], ''),
                                       ('get_clock_seq', [], ''),
                                       ('get_node', [], ''),
                                       ('get_hex', [], ''),
                                       ('get_urn', [], ''),
                                       ('get_variant', [], ''),
                                       ('get_version', [], '')],
                           'properties': ['bytes',
                                          'bytes_le',
                                          'fields',
                                          'time_low',
                                          'time_mid',
                                          'time_hi_version',
                                          'clock_seq_hi_variant',
                                          'clock_seq_low',
                                          'time',
                                          'clock_seq',
                                          'node',
                                          'hex',
                                          'urn',
                                          'variant',
                                          'version']},
             'warnings._OptionError': {'bases': ['Exception'],
                                       'constructor': [],
                                       'docstring': 'Exception used by option processing helpers.',
                                       'methods': [],
                                       'properties': []},
             'wave.Error': {'bases': ['Exception'],
                            'constructor': [],
                            'docstring': '',
                            'methods': [],
                            'properties': []},
             'wave.Wave_read': {'bases': [],
                                'constructor': ['f'],
                                'docstring': "Variables used in this class:\n\n    These variables are available to the user though appropriate\n    methods of this class:\n    _file -- the open file with methods read(), close(), and seek()\n              set through the __init__() method\n    _nchannels -- the number of audio channels\n              available through the getnchannels() method\n    _nframes -- the number of audio frames\n              available through the getnframes() method\n    _sampwidth -- the number of bytes per audio sample\n              available through the getsampwidth() method\n    _framerate -- the sampling frequency\n              available through the getframerate() method\n    _comptype -- the AIFF-C compression type ('NONE' if AIFF)\n              available through the getcomptype() method\n    _compname -- the human-readable AIFF-C compression type\n              available through the getcomptype() method\n    _soundpos -- the position in the audio stream\n              available through the tell() method, set through the\n              setpos() method\n\n    These variables are used internally only:\n    _fmt_chunk_read -- 1 iff the FMT chunk has been read\n    _data_seek_needed -- 1 iff positioned correctly in audio\n              file for readframes()\n    _data_chunk -- instantiation of a chunk class for the DATA chunk\n    _framesize -- size of one frame in the file\n    ",
                                'methods': [('initfp', ['file'], ''),
                                            ('__del__', [], ''),
                                            ('getfp', [], ''),
                                            ('rewind', [], ''),
                                            ('close', [], ''),
                                            ('tell', [], ''),
                                            ('getnchannels', [], ''),
                                            ('getnframes', [], ''),
                                            ('getsampwidth', [], ''),
                                            ('getframerate', [], ''),
                                            ('getcomptype', [], ''),
                                            ('getcompname', [], ''),
                                            ('getparams', [], ''),
                                            ('getmarkers', [], ''),
                                            ('getmark', ['id'], ''),
                                            ('setpos', ['pos'], ''),
                                            ('readframes', ['nframes'], ''),
                                            ('_read_fmt_chunk', ['chunk'], '')],
                                'properties': ['_convert',
                                               '_soundpos',
                                               '_file',
                                               '_fmt_chunk_read',
                                               '_data_chunk',
                                               '_data_seek_needed',
                                               '_nframes',
                                               '_i_opened_the_file',
                                               '_nchannels',
                                               '_framerate',
                                               '_sampwidth',
                                               '_framesize',
                                               '_comptype',
                                               '_compname']},
             'wave.Wave_write': {'bases': [],
                                 'constructor': ['f'],
                                 'docstring': "Variables used in this class:\n\n    These variables are user settable through appropriate methods\n    of this class:\n    _file -- the open file with methods write(), close(), tell(), seek()\n              set through the __init__() method\n    _comptype -- the AIFF-C compression type ('NONE' in AIFF)\n              set through the setcomptype() or setparams() method\n    _compname -- the human-readable AIFF-C compression type\n              set through the setcomptype() or setparams() method\n    _nchannels -- the number of audio channels\n              set through the setnchannels() or setparams() method\n    _sampwidth -- the number of bytes per audio sample\n              set through the setsampwidth() or setparams() method\n    _framerate -- the sampling frequency\n              set through the setframerate() or setparams() method\n    _nframes -- the number of audio frames written to the header\n              set through the setnframes() or setparams() method\n\n    These variables are used internally only:\n    _datalength -- the size of the audio samples written to the header\n    _nframeswritten -- the number of frames actually written\n    _datawritten -- the size of the audio samples actually written\n    ",
                                 'methods': [('initfp', ['file'], ''),
                                             ('__del__', [], ''),
                                             ('setnchannels', ['nchannels'], ''),
                                             ('getnchannels', [], ''),
                                             ('setsampwidth', ['sampwidth'], ''),
                                             ('getsampwidth', [], ''),
                                             ('setframerate', ['framerate'], ''),
                                             ('getframerate', [], ''),
                                             ('setnframes', ['nframes'], ''),
                                             ('getnframes', [], ''),
                                             ('setcomptype', ['comptype', 'compname'], ''),
                                             ('getcomptype', [], ''),
                                             ('getcompname', [], ''),
                                             ('setparams',
                                              ['(nchannels, sampwidth, framerate, nframes, comptype, compname)'],
                                              ''),
                                             ('getparams', [], ''),
                                             ('setmark', ['id', 'pos', 'name'], ''),
                                             ('getmark', ['id'], ''),
                                             ('getmarkers', [], ''),
                                             ('tell', [], ''),
                                             ('writeframesraw', ['data'], ''),
                                             ('writeframes', ['data'], ''),
                                             ('close', [], ''),
                                             ('_ensure_header_written', ['datasize'], ''),
                                             ('_write_header', ['initlength'], ''),
                                             ('_patchheader', [], '')],
                                 'properties': ['_i_opened_the_file',
                                                '_file',
                                                '_convert',
                                                '_nchannels',
                                                '_sampwidth',
                                                '_framerate',
                                                '_nframes',
                                                '_nframeswritten',
                                                '_datawritten',
                                                '_datalength',
                                                '_comptype',
                                                '_compname',
                                                '_form_length_pos',
                                                '_data_length_pos']},
             'weakref.KeyedRef': {'bases': ['_weakref.ref'],
                                  'constructor': ['ob', 'callback', 'key'],
                                  'docstring': "Specialized reference that includes a key corresponding to the value.\n\n    This is used in the WeakValueDictionary to avoid having to create\n    a function object for each key stored in the mapping.  A shared\n    callback object can use the 'key' attribute of a KeyedRef instead\n    of getting a reference to the key from an enclosing scope.\n\n    ",
                                  'methods': [('__new__', ['ob', 'callback', 'key'], '')],
                                  'properties': ['__slots__', 'key']},
             'weakref.WeakKeyDictionary': {'bases': ['UserDict.UserDict'],
                                           'constructor': ['dict=None'],
                                           'docstring': ' Mapping class that references keys weakly.\n\n    Entries in the dictionary will be discarded when there is no\n    longer a strong reference to the key. This can be used to\n    associate additional data with an object owned by other parts of\n    an application without adding attributes to those objects. This\n    can be especially useful with objects that override attribute\n    accesses.\n    ',
                                           'methods': [('__delitem__', ['key'], ''),
                                                       ('__getitem__', ['key'], ''),
                                                       ('__repr__', [], ''),
                                                       ('__setitem__', ['key', 'value'], ''),
                                                       ('copy', [], ''),
                                                       ('get', ['key', 'default=None'], ''),
                                                       ('has_key', ['key'], ''),
                                                       ('__contains__', ['key'], ''),
                                                       ('items', [], ''),
                                                       ('iteritems', [], ''),
                                                       ('iterkeyrefs',
                                                        [],
                                                        "Return an iterator that yields the weak references to the keys.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the keys around longer than needed.\n\n        "),
                                                       ('iterkeys', [], ''),
                                                       ('__iter__', [], ''),
                                                       ('itervalues', [], ''),
                                                       ('keyrefs',
                                                        [],
                                                        "Return a list of weak references to the keys.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the keys around longer than needed.\n\n        "),
                                                       ('keys', [], ''),
                                                       ('popitem', [], ''),
                                                       ('pop', ['key', '*args'], ''),
                                                       ('setdefault',
                                                        ['key', 'default=None'],
                                                        ''),
                                                       ('update',
                                                        ['dict=None', '**kwargs'],
                                                        '')],
                                           'properties': ['data', '_remove']},
             'weakref.WeakValueDictionary': {'bases': ['UserDict.UserDict'],
                                             'constructor': ['*args', '**kw'],
                                             'docstring': 'Mapping class that references values weakly.\n\n    Entries in the dictionary will be discarded when no strong\n    reference to the value exists anymore\n    ',
                                             'methods': [('__getitem__', ['key'], ''),
                                                         ('__contains__', ['key'], ''),
                                                         ('has_key', ['key'], ''),
                                                         ('__repr__', [], ''),
                                                         ('__setitem__', ['key', 'value'], ''),
                                                         ('copy', [], ''),
                                                         ('get', ['key', 'default=None'], ''),
                                                         ('items', [], ''),
                                                         ('iteritems', [], ''),
                                                         ('iterkeys', [], ''),
                                                         ('__iter__', [], ''),
                                                         ('itervaluerefs',
                                                          [],
                                                          "Return an iterator that yields the weak references to the values.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the values around longer than needed.\n\n        "),
                                                         ('itervalues', [], ''),
                                                         ('popitem', [], ''),
                                                         ('pop', ['key', '*args'], ''),
                                                         ('setdefault',
                                                          ['key', 'default=None'],
                                                          ''),
                                                         ('update',
                                                          ['dict=None', '**kwargs'],
                                                          ''),
                                                         ('valuerefs',
                                                          [],
                                                          "Return a list of weak references to the values.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the values around longer than needed.\n\n        "),
                                                         ('values', [], '')],
                                             'properties': ['_remove']},
             'webbrowser.BackgroundBrowser': {'bases': ['webbrowser.GenericBrowser'],
                                              'constructor': [],
                                              'docstring': 'Class for all browsers which are to be started in the\n       background.',
                                              'methods': [('open',
                                                           ['url', 'new=0', 'autoraise=1'],
                                                           '')],
                                              'properties': []},
             'webbrowser.BaseBrowser': {'bases': ['object'],
                                        'constructor': ["name=''"],
                                        'docstring': 'Parent class for all browsers. Do not use directly.',
                                        'methods': [('open',
                                                     ['url', 'new=0', 'autoraise=1'],
                                                     ''),
                                                    ('open_new', ['url'], ''),
                                                    ('open_new_tab', ['url'], '')],
                                        'properties': ['args', 'name', 'basename']},
             'webbrowser.Elinks': {'bases': ['webbrowser.UnixBrowser'],
                                   'constructor': [],
                                   'docstring': 'Launcher class for Elinks browsers.',
                                   'methods': [],
                                   'properties': ['remote_args',
                                                  'remote_action',
                                                  'remote_action_newwin',
                                                  'remote_action_newtab',
                                                  'background',
                                                  'redirect_stdout']},
             'webbrowser.Error': {'bases': ['Exception'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [],
                                  'properties': []},
             'webbrowser.Galeon': {'bases': ['webbrowser.UnixBrowser'],
                                   'constructor': [],
                                   'docstring': 'Launcher class for Galeon/Epiphany browsers.',
                                   'methods': [],
                                   'properties': ['raise_opts',
                                                  'remote_args',
                                                  'remote_action',
                                                  'remote_action_newwin',
                                                  'background']},
             'webbrowser.GenericBrowser': {'bases': ['webbrowser.BaseBrowser'],
                                           'constructor': ['name'],
                                           'docstring': 'Class for all browsers started with a command\n       and without remote functionality.',
                                           'methods': [('open',
                                                        ['url', 'new=0', 'autoraise=1'],
                                                        '')],
                                           'properties': ['name', 'args', 'basename']},
             'webbrowser.Grail': {'bases': ['webbrowser.BaseBrowser'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('_find_grail_rc', [], ''),
                                              ('_remote', ['action'], ''),
                                              ('open', ['url', 'new=0', 'autoraise=1'], '')],
                                  'properties': []},
             'webbrowser.InternetConfig': {'bases': ['webbrowser.BaseBrowser'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('open',
                                                        ['url', 'new=0', 'autoraise=1'],
                                                        '')],
                                           'properties': []},
             'webbrowser.Konqueror': {'bases': ['webbrowser.BaseBrowser'],
                                      'constructor': [],
                                      'docstring': 'Controller for the KDE File Manager (kfm, or Konqueror).\n\n    See the output of ``kfmclient --commands``\n    for more information on the Konqueror remote-control interface.\n    ',
                                      'methods': [('open', ['url', 'new=0', 'autoraise=1'], '')],
                                      'properties': []},
             'webbrowser.MacOSX': {'bases': ['webbrowser.BaseBrowser'],
                                   'constructor': ['name'],
                                   'docstring': 'Launcher class for Aqua browsers on Mac OS X\n\n        Optionally specify a browser name on instantiation.  Note that this\n        will not work for Aqua browsers if the user has moved the application\n        package after installation.\n\n        If no browser is specified, the default browser, as specified in the\n        Internet System Preferences panel, will be used.\n        ',
                                   'methods': [('open', ['url', 'new=0', 'autoraise=1'], '')],
                                   'properties': ['name']},
             'webbrowser.Mozilla': {'bases': ['webbrowser.UnixBrowser'],
                                    'constructor': [],
                                    'docstring': 'Launcher class for Mozilla/Netscape browsers.',
                                    'methods': [],
                                    'properties': ['raise_opts',
                                                   'remote_args',
                                                   'remote_action',
                                                   'remote_action_newwin',
                                                   'remote_action_newtab',
                                                   'background']},
             'webbrowser.Opera': {'bases': ['webbrowser.UnixBrowser'],
                                  'constructor': [],
                                  'docstring': 'Launcher class for Opera browser.',
                                  'methods': [],
                                  'properties': ['raise_opts',
                                                 'remote_args',
                                                 'remote_action',
                                                 'remote_action_newwin',
                                                 'remote_action_newtab',
                                                 'background']},
             'webbrowser.UnixBrowser': {'bases': ['webbrowser.BaseBrowser'],
                                        'constructor': [],
                                        'docstring': 'Parent class for all Unix browsers with remote functionality.',
                                        'methods': [('_invoke',
                                                     ['args', 'remote', 'autoraise'],
                                                     ''),
                                                    ('open',
                                                     ['url', 'new=0', 'autoraise=1'],
                                                     '')],
                                        'properties': ['raise_opts',
                                                       'remote_args',
                                                       'remote_action',
                                                       'remote_action_newwin',
                                                       'remote_action_newtab',
                                                       'background',
                                                       'redirect_stdout']},
             'webbrowser.WindowsDefault': {'bases': ['webbrowser.BaseBrowser'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('open',
                                                        ['url', 'new=0', 'autoraise=1'],
                                                        '')],
                                           'properties': []},
             'wsgiref.handlers.BaseCGIHandler': {'bases': ['wsgiref.handlers.SimpleHandler'],
                                                 'constructor': [],
                                                 'docstring': "CGI-like systems using input/output/error streams and environ mapping\n\n    Usage::\n\n        handler = BaseCGIHandler(inp,out,err,env)\n        handler.run(app)\n\n    This handler class is useful for gateway protocols like ReadyExec and\n    FastCGI, that have usable input/output/error streams and an environment\n    mapping.  It's also the base class for CGIHandler, which just uses\n    sys.stdin, os.environ, and so on.\n\n    The constructor also takes keyword arguments 'multithread' and\n    'multiprocess' (defaulting to 'True' and 'False' respectively) to control\n    the configuration sent to the application.  It sets 'origin_server' to\n    False (to enable CGI-like output), and assumes that 'wsgi.run_once' is\n    False.\n    ",
                                                 'methods': [],
                                                 'properties': ['origin_server']},
             'wsgiref.handlers.BaseHandler': {'bases': [],
                                              'constructor': [],
                                              'docstring': 'Manage the invocation of a WSGI application',
                                              'methods': [('run',
                                                           ['application'],
                                                           'Invoke the application'),
                                                          ('setup_environ',
                                                           [],
                                                           'Set up the environment for one request'),
                                                          ('finish_response',
                                                           [],
                                                           "Send any iterable data, then close self and the iterable\n\n        Subclasses intended for use in asynchronous servers will\n        want to redefine this method, such that it sets up callbacks\n        in the event loop to iterate over the data, and to call\n        'self.close()' once the response is finished.\n        "),
                                                          ('get_scheme',
                                                           [],
                                                           'Return the URL scheme being used'),
                                                          ('set_content_length',
                                                           [],
                                                           'Compute Content-Length or switch to chunked encoding if possible'),
                                                          ('cleanup_headers',
                                                           [],
                                                           'Make any necessary header changes or defaults\n\n        Subclasses can extend this to add other defaults.\n        '),
                                                          ('start_response',
                                                           ['status',
                                                            'headers',
                                                            'exc_info=None'],
                                                           "'start_response()' callable as specified by PEP 333"),
                                                          ('send_preamble',
                                                           [],
                                                           'Transmit version/status/date/server, via self._write()'),
                                                          ('write',
                                                           ['data'],
                                                           "'write()' callable as specified by PEP 333"),
                                                          ('sendfile',
                                                           [],
                                                           "Platform-specific file transmission\n\n        Override this method in subclasses to support platform-specific\n        file transmission.  It is only called if the application's\n        return iterable ('self.result') is an instance of\n        'self.wsgi_file_wrapper'.\n\n        This method should return a true value if it was able to actually\n        transmit the wrapped file-like object using a platform-specific\n        approach.  It should return a false value if normal iteration\n        should be used instead.  An exception can be raised to indicate\n        that transmission was attempted, but failed.\n\n        NOTE: this method should call 'self.send_headers()' if\n        'self.headers_sent' is false and it is going to attempt direct\n        transmission of the file.\n        "),
                                                          ('finish_content',
                                                           [],
                                                           'Ensure headers and content have both been sent'),
                                                          ('close',
                                                           [],
                                                           'Close the iterable (if needed) and reset all instance vars\n\n        Subclasses may want to also drop the client connection.\n        '),
                                                          ('send_headers',
                                                           [],
                                                           'Transmit headers to the client, via self._write()'),
                                                          ('result_is_file',
                                                           [],
                                                           "True if 'self.result' is an instance of 'self.wsgi_file_wrapper'"),
                                                          ('client_is_modern',
                                                           [],
                                                           'True if client can accept status and headers'),
                                                          ('log_exception',
                                                           ['exc_info'],
                                                           "Log the 'exc_info' tuple in the server log\n\n        Subclasses may override to retarget the output or change its format.\n        "),
                                                          ('handle_error',
                                                           [],
                                                           'Log current error, and send error output to client if possible'),
                                                          ('error_output',
                                                           ['environ', 'start_response'],
                                                           "WSGI mini-app to create error output\n\n        By default, this just uses the 'error_status', 'error_headers',\n        and 'error_body' attributes to generate an output page.  It can\n        be overridden in a subclass to dynamically generate diagnostics,\n        choose an appropriate message for the user's preferred language, etc.\n\n        Note, however, that it's not recommended from a security perspective to\n        spit out diagnostics to any old user; ideally, you should have to do\n        something special to enable diagnostic output, which is why we don't\n        include any here!\n        "),
                                                          ('_write',
                                                           ['data'],
                                                           "Override in subclass to buffer data for send to client\n\n        It's okay if this method actually transmits the data; BaseHandler\n        just separates write and flush operations for greater efficiency\n        when the underlying system actually has such a distinction.\n        "),
                                                          ('_flush',
                                                           [],
                                                           "Override in subclass to force sending of recent '_write()' calls\n\n        It's okay if this method is a no-op (i.e., if '_write()' actually\n        sends the data.\n        "),
                                                          ('get_stdin',
                                                           [],
                                                           "Override in subclass to return suitable 'wsgi.input'"),
                                                          ('get_stderr',
                                                           [],
                                                           "Override in subclass to return suitable 'wsgi.errors'"),
                                                          ('add_cgi_vars',
                                                           [],
                                                           "Override in subclass to insert CGI variables in 'self.environ'")],
                                              'properties': ['wsgi_version',
                                                             'wsgi_multithread',
                                                             'wsgi_multiprocess',
                                                             'wsgi_run_once',
                                                             'origin_server',
                                                             'http_version',
                                                             'server_software',
                                                             'os_environ',
                                                             'wsgi_file_wrapper',
                                                             'headers_class',
                                                             'traceback_limit',
                                                             'error_status',
                                                             'error_headers',
                                                             'error_body',
                                                             'status',
                                                             'result',
                                                             'headers_sent',
                                                             'headers',
                                                             'bytes_sent',
                                                             'environ']},
             'wsgiref.handlers.CGIHandler': {'bases': ['wsgiref.handlers.BaseCGIHandler'],
                                             'constructor': [],
                                             'docstring': "CGI-based invocation via sys.stdin/stdout/stderr and os.environ\n\n    Usage::\n\n        CGIHandler().run(app)\n\n    The difference between this class and BaseCGIHandler is that it always\n    uses 'wsgi.run_once' of 'True', 'wsgi.multithread' of 'False', and\n    'wsgi.multiprocess' of 'True'.  It does not take any initialization\n    parameters, but always uses 'sys.stdin', 'os.environ', and friends.\n\n    If you need to override any of these parameters, use BaseCGIHandler\n    instead.\n    ",
                                             'methods': [],
                                             'properties': ['wsgi_run_once']},
             'wsgiref.handlers.SimpleHandler': {'bases': ['wsgiref.handlers.BaseHandler'],
                                                'constructor': ['stdin',
                                                                'stdout',
                                                                'stderr',
                                                                'environ',
                                                                'multithread=True',
                                                                'multiprocess=False'],
                                                'docstring': "Handler that's just initialized with streams, environment, etc.\n\n    This handler subclass is intended for synchronous HTTP/1.0 origin servers,\n    and handles sending the entire response output, given the correct inputs.\n\n    Usage::\n\n        handler = SimpleHandler(\n            inp,out,err,env, multithread=False, multiprocess=True\n        )\n        handler.run(app)",
                                                'methods': [('get_stdin', [], ''),
                                                            ('get_stderr', [], ''),
                                                            ('add_cgi_vars', [], ''),
                                                            ('_write', ['data'], ''),
                                                            ('_flush', [], '')],
                                                'properties': ['stdin',
                                                               'stdout',
                                                               'stderr',
                                                               'base_env',
                                                               'wsgi_multithread',
                                                               'wsgi_multiprocess',
                                                               '_write',
                                                               '_flush']},
             'wsgiref.headers.Headers': {'bases': [],
                                         'constructor': ['headers'],
                                         'docstring': 'Manage a collection of HTTP response headers',
                                         'methods': [('__len__',
                                                      [],
                                                      'Return the total number of headers, including duplicates.'),
                                                     ('__setitem__',
                                                      ['name', 'val'],
                                                      'Set the value of a header.'),
                                                     ('__delitem__',
                                                      ['name'],
                                                      'Delete all occurrences of a header, if present.\n\n        Does *not* raise an exception if the header is missing.\n        '),
                                                     ('__getitem__',
                                                      ['name'],
                                                      "Get the first header value for 'name'\n\n        Return None if the header is missing instead of raising an exception.\n\n        Note that if the header appeared multiple times, the first exactly which\n        occurrance gets returned is undefined.  Use getall() to get all\n        the values matching a header field name.\n        "),
                                                     ('has_key',
                                                      ['name'],
                                                      'Return true if the message contains the header.'),
                                                     ('get_all',
                                                      ['name'],
                                                      'Return a list of all the values for the named field.\n\n        These will be sorted in the order they appeared in the original header\n        list or were added to this instance, and may contain duplicates.  Any\n        fields deleted and re-inserted are always appended to the header list.\n        If no fields exist with the given name, returns an empty list.\n        '),
                                                     ('get',
                                                      ['name', 'default=None'],
                                                      "Get the first header value for 'name', or return 'default'"),
                                                     ('keys',
                                                      [],
                                                      'Return a list of all the header field names.\n\n        These will be sorted in the order they appeared in the original header\n        list, or were added to this instance, and may contain duplicates.\n        Any fields deleted and re-inserted are always appended to the header\n        list.\n        '),
                                                     ('values',
                                                      [],
                                                      'Return a list of all header values.\n\n        These will be sorted in the order they appeared in the original header\n        list, or were added to this instance, and may contain duplicates.\n        Any fields deleted and re-inserted are always appended to the header\n        list.\n        '),
                                                     ('items',
                                                      [],
                                                      'Get all the header fields and values.\n\n        These will be sorted in the order they were in the original header\n        list, or were added to this instance, and may contain duplicates.\n        Any fields deleted and re-inserted are always appended to the header\n        list.\n        '),
                                                     ('__repr__', [], ''),
                                                     ('__str__',
                                                      [],
                                                      'str() returns the formatted headers, complete with end line,\n        suitable for direct HTTP transmission.'),
                                                     ('setdefault',
                                                      ['name', 'value'],
                                                      "Return first matching header value for 'name', or 'value'\n\n        If there is no header named 'name', add a new header with name 'name'\n        and value 'value'."),
                                                     ('add_header',
                                                      ['_name', '_value', '**_params'],
                                                      'Extended header setting.\n\n        _name is the header field to add.  keyword arguments can be used to set\n        additional parameters for the header field, with underscores converted\n        to dashes.  Normally the parameter will be added as key="value" unless\n        value is None, in which case only the key will be added.\n\n        Example:\n\n        h.add_header(\'content-disposition\', \'attachment\', filename=\'bud.gif\')\n\n        Note that unlike the corresponding \'email.Message\' method, this does\n        *not* handle \'(charset, language, value)\' tuples: all values must be\n        strings or None.\n        ')],
                                         'properties': ['_headers', '__contains__']},
             'wsgiref.simple_server.ServerHandler': {'bases': ['wsgiref.handlers.SimpleHandler'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('close', [], '')],
                                                     'properties': ['server_software']},
             'wsgiref.simple_server.WSGIRequestHandler': {'bases': ['BaseHTTPServer.BaseHTTPRequestHandler'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('get_environ', [], ''),
                                                                      ('get_stderr', [], ''),
                                                                      ('handle',
                                                                       [],
                                                                       'Handle a single HTTP request')],
                                                          'properties': ['server_version',
                                                                         'raw_requestline']},
             'wsgiref.simple_server.WSGIServer': {'bases': ['BaseHTTPServer.HTTPServer'],
                                                  'constructor': [],
                                                  'docstring': 'BaseHTTPServer that implements the Python WSGI protocol',
                                                  'methods': [('server_bind',
                                                               [],
                                                               'Override server_bind to store the server name.'),
                                                              ('setup_environ', [], ''),
                                                              ('get_app', [], ''),
                                                              ('set_app', ['application'], '')],
                                                  'properties': ['application', 'base_environ']},
             'wsgiref.util.FileWrapper': {'bases': [],
                                          'constructor': ['filelike', 'blksize=8192'],
                                          'docstring': 'Wrapper to convert file-like objects to iterables',
                                          'methods': [('__getitem__', ['key'], ''),
                                                      ('__iter__', [], ''),
                                                      ('next', [], '')],
                                          'properties': ['filelike', 'blksize', 'close']},
             'wsgiref.validate.ErrorWrapper': {'bases': [],
                                               'constructor': ['wsgi_errors'],
                                               'docstring': '',
                                               'methods': [('write', ['s'], ''),
                                                           ('flush', [], ''),
                                                           ('writelines', ['seq'], ''),
                                                           ('close', [], '')],
                                               'properties': ['errors']},
             'wsgiref.validate.InputWrapper': {'bases': [],
                                               'constructor': ['wsgi_input'],
                                               'docstring': '',
                                               'methods': [('read', ['*args'], ''),
                                                           ('readline', [], ''),
                                                           ('readlines', ['*args'], ''),
                                                           ('__iter__', [], ''),
                                                           ('close', [], '')],
                                               'properties': ['input']},
             'wsgiref.validate.IteratorWrapper': {'bases': [],
                                                  'constructor': ['wsgi_iterator',
                                                                  'check_start_response'],
                                                  'docstring': '',
                                                  'methods': [('__iter__', [], ''),
                                                              ('next', [], ''),
                                                              ('close', [], ''),
                                                              ('__del__', [], '')],
                                                  'properties': ['original_iterator',
                                                                 'iterator',
                                                                 'closed',
                                                                 'check_start_response']},
             'wsgiref.validate.PartialIteratorWrapper': {'bases': [],
                                                         'constructor': ['wsgi_iterator'],
                                                         'docstring': '',
                                                         'methods': [('__iter__', [], '')],
                                                         'properties': ['iterator']},
             'wsgiref.validate.WSGIWarning': {'bases': ['Warning'],
                                              'constructor': [],
                                              'docstring': '\n    Raised in response to WSGI-spec-related warnings\n    ',
                                              'methods': [],
                                              'properties': []},
             'wsgiref.validate.WriteWrapper': {'bases': [],
                                               'constructor': ['wsgi_writer'],
                                               'docstring': '',
                                               'methods': [('__call__', ['s'], '')],
                                               'properties': ['writer']},
             'xdrlib.ConversionError': {'bases': ['xdrlib.Error'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': []},
             'xdrlib.Error': {'bases': ['Exception'],
                              'constructor': ['msg'],
                              'docstring': 'Exception class for this module. Use:\n\n    except xdrlib.Error, var:\n        # var has the Error instance for the exception\n\n    Public ivars:\n        msg -- contains the message\n\n    ',
                              'methods': [('__repr__', [], ''), ('__str__', [], '')],
                              'properties': ['msg']},
             'xdrlib.Packer': {'bases': [],
                               'constructor': [],
                               'docstring': 'Pack various data representations into a buffer.',
                               'methods': [('reset', [], ''),
                                           ('get_buffer', [], ''),
                                           ('pack_uint', ['x'], ''),
                                           ('pack_bool', ['x'], ''),
                                           ('pack_uhyper', ['x'], ''),
                                           ('pack_float', ['x'], ''),
                                           ('pack_double', ['x'], ''),
                                           ('pack_fstring', ['n', 's'], ''),
                                           ('pack_string', ['s'], ''),
                                           ('pack_list', ['list', 'pack_item'], ''),
                                           ('pack_farray', ['n', 'list', 'pack_item'], ''),
                                           ('pack_array', ['list', 'pack_item'], '')],
                               'properties': ['__buf',
                                              'get_buf',
                                              'pack_int',
                                              'pack_enum',
                                              'pack_hyper',
                                              'pack_fopaque',
                                              'pack_opaque',
                                              'pack_bytes']},
             'xdrlib.Unpacker': {'bases': [],
                                 'constructor': ['data'],
                                 'docstring': 'Unpacks various data representations from the given buffer.',
                                 'methods': [('reset', ['data'], ''),
                                             ('get_position', [], ''),
                                             ('set_position', ['position'], ''),
                                             ('get_buffer', [], ''),
                                             ('done', [], ''),
                                             ('unpack_uint', [], ''),
                                             ('unpack_int', [], ''),
                                             ('unpack_bool', [], ''),
                                             ('unpack_uhyper', [], ''),
                                             ('unpack_hyper', [], ''),
                                             ('unpack_float', [], ''),
                                             ('unpack_double', [], ''),
                                             ('unpack_fstring', ['n'], ''),
                                             ('unpack_string', [], ''),
                                             ('unpack_list', ['unpack_item'], ''),
                                             ('unpack_farray', ['n', 'unpack_item'], ''),
                                             ('unpack_array', ['unpack_item'], '')],
                                 'properties': ['__buf',
                                                '__pos',
                                                'unpack_enum',
                                                'unpack_fopaque',
                                                'unpack_opaque',
                                                'unpack_bytes']},
             'xml.dom.DOMException': {'bases': ['Exception'],
                                      'constructor': ['*args', '**kw'],
                                      'docstring': 'Abstract base class for DOM exceptions.\n    Exceptions with specific codes are specializations of this class.',
                                      'methods': [('_get_code', [], '')],
                                      'properties': []},
             'xml.dom.DomstringSizeErr': {'bases': ['xml.dom.DOMException'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': ['code']},
             'xml.dom.HierarchyRequestErr': {'bases': ['xml.dom.DOMException'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['code']},
             'xml.dom.IndexSizeErr': {'bases': ['xml.dom.DOMException'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [],
                                      'properties': ['code']},
             'xml.dom.InuseAttributeErr': {'bases': ['xml.dom.DOMException'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': ['code']},
             'xml.dom.InvalidAccessErr': {'bases': ['xml.dom.DOMException'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': ['code']},
             'xml.dom.InvalidCharacterErr': {'bases': ['xml.dom.DOMException'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['code']},
             'xml.dom.InvalidModificationErr': {'bases': ['xml.dom.DOMException'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': ['code']},
             'xml.dom.InvalidStateErr': {'bases': ['xml.dom.DOMException'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['code']},
             'xml.dom.NamespaceErr': {'bases': ['xml.dom.DOMException'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [],
                                      'properties': ['code']},
             'xml.dom.NoDataAllowedErr': {'bases': ['xml.dom.DOMException'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': ['code']},
             'xml.dom.NoModificationAllowedErr': {'bases': ['xml.dom.DOMException'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['code']},
             'xml.dom.Node': {'bases': [],
                              'constructor': [],
                              'docstring': 'Class giving the NodeType constants.',
                              'methods': [],
                              'properties': ['ELEMENT_NODE',
                                             'ATTRIBUTE_NODE',
                                             'TEXT_NODE',
                                             'CDATA_SECTION_NODE',
                                             'ENTITY_REFERENCE_NODE',
                                             'ENTITY_NODE',
                                             'PROCESSING_INSTRUCTION_NODE',
                                             'COMMENT_NODE',
                                             'DOCUMENT_NODE',
                                             'DOCUMENT_TYPE_NODE',
                                             'DOCUMENT_FRAGMENT_NODE',
                                             'NOTATION_NODE']},
             'xml.dom.NodeFilter.NodeFilter': {'bases': [],
                                               'constructor': [],
                                               'docstring': '\n    This is the DOM2 NodeFilter interface. It contains only constants.\n    ',
                                               'methods': [('acceptNode', ['node'], '')],
                                               'properties': ['FILTER_ACCEPT',
                                                              'FILTER_REJECT',
                                                              'FILTER_SKIP',
                                                              'SHOW_ALL',
                                                              'SHOW_ELEMENT',
                                                              'SHOW_ATTRIBUTE',
                                                              'SHOW_TEXT',
                                                              'SHOW_CDATA_SECTION',
                                                              'SHOW_ENTITY_REFERENCE',
                                                              'SHOW_ENTITY',
                                                              'SHOW_PROCESSING_INSTRUCTION',
                                                              'SHOW_COMMENT',
                                                              'SHOW_DOCUMENT',
                                                              'SHOW_DOCUMENT_TYPE',
                                                              'SHOW_DOCUMENT_FRAGMENT',
                                                              'SHOW_NOTATION']},
             'xml.dom.NotFoundErr': {'bases': ['xml.dom.DOMException'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': ['code']},
             'xml.dom.NotSupportedErr': {'bases': ['xml.dom.DOMException'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['code']},
             'xml.dom.SyntaxErr': {'bases': ['xml.dom.DOMException'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': ['code']},
             'xml.dom.UserDataHandler': {'bases': [],
                                         'constructor': [],
                                         'docstring': 'Class giving the operation constants for UserDataHandler.handle().',
                                         'methods': [],
                                         'properties': ['NODE_CLONED',
                                                        'NODE_IMPORTED',
                                                        'NODE_DELETED',
                                                        'NODE_RENAMED']},
             'xml.dom.ValidationErr': {'bases': ['xml.dom.DOMException'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': ['code']},
             'xml.dom.WrongDocumentErr': {'bases': ['xml.dom.DOMException'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': ['code']},
             'xml.dom.expatbuilder.ElementInfo': {'bases': ['object'],
                                                  'constructor': ['tagName', 'model=None'],
                                                  'docstring': '',
                                                  'methods': [('__getstate__', [], ''),
                                                              ('__setstate__', ['state'], ''),
                                                              ('getAttributeType',
                                                               ['aname'],
                                                               ''),
                                                              ('getAttributeTypeNS',
                                                               ['namespaceURI', 'localName'],
                                                               ''),
                                                              ('isElementContent', [], ''),
                                                              ('isEmpty', [], ''),
                                                              ('isId', ['aname'], ''),
                                                              ('isIdNS',
                                                               ['euri',
                                                                'ename',
                                                                'auri',
                                                                'aname'],
                                                               '')],
                                                  'properties': ['__slots__',
                                                                 'tagName',
                                                                 '_attr_info',
                                                                 '_model']},
             'xml.dom.expatbuilder.ExpatBuilder': {'bases': [],
                                                   'constructor': ['options=None'],
                                                   'docstring': 'Document builder that uses Expat to build a ParsedXML.DOM document\n    instance.',
                                                   'methods': [('createParser',
                                                                [],
                                                                'Create a new parser object.'),
                                                               ('getParser',
                                                                [],
                                                                'Return the parser object, creating a new one if needed.'),
                                                               ('reset',
                                                                [],
                                                                'Free all data structures used during DOM construction.'),
                                                               ('install',
                                                                ['parser'],
                                                                'Install the callbacks needed to build the DOM into the parser.'),
                                                               ('parseFile',
                                                                ['file'],
                                                                'Parse a document from a file object, returning the document\n        node.'),
                                                               ('parseString',
                                                                ['string'],
                                                                'Parse a document from a string, returning the document node.'),
                                                               ('_setup_subset',
                                                                ['buffer'],
                                                                'Load the internal subset if there might be one.'),
                                                               ('start_doctype_decl_handler',
                                                                ['doctypeName',
                                                                 'systemId',
                                                                 'publicId',
                                                                 'has_internal_subset'],
                                                                ''),
                                                               ('end_doctype_decl_handler',
                                                                [],
                                                                ''),
                                                               ('pi_handler',
                                                                ['target', 'data'],
                                                                ''),
                                                               ('character_data_handler_cdata',
                                                                ['data'],
                                                                ''),
                                                               ('character_data_handler',
                                                                ['data'],
                                                                ''),
                                                               ('entity_decl_handler',
                                                                ['entityName',
                                                                 'is_parameter_entity',
                                                                 'value',
                                                                 'base',
                                                                 'systemId',
                                                                 'publicId',
                                                                 'notationName'],
                                                                ''),
                                                               ('notation_decl_handler',
                                                                ['notationName',
                                                                 'base',
                                                                 'systemId',
                                                                 'publicId'],
                                                                ''),
                                                               ('comment_handler',
                                                                ['data'],
                                                                ''),
                                                               ('start_cdata_section_handler',
                                                                [],
                                                                ''),
                                                               ('end_cdata_section_handler',
                                                                [],
                                                                ''),
                                                               ('external_entity_ref_handler',
                                                                ['context',
                                                                 'base',
                                                                 'systemId',
                                                                 'publicId'],
                                                                ''),
                                                               ('first_element_handler',
                                                                ['name', 'attributes'],
                                                                ''),
                                                               ('start_element_handler',
                                                                ['name', 'attributes'],
                                                                ''),
                                                               ('_finish_start_element',
                                                                ['node'],
                                                                ''),
                                                               ('end_element_handler',
                                                                ['name'],
                                                                ''),
                                                               ('_finish_end_element',
                                                                ['curNode'],
                                                                ''),
                                                               ('_handle_white_text_nodes',
                                                                ['node', 'info'],
                                                                ''),
                                                               ('element_decl_handler',
                                                                ['name', 'model'],
                                                                ''),
                                                               ('attlist_decl_handler',
                                                                ['elem',
                                                                 'name',
                                                                 'type',
                                                                 'default',
                                                                 'required'],
                                                                ''),
                                                               ('xml_decl_handler',
                                                                ['version',
                                                                 'encoding',
                                                                 'standalone'],
                                                                '')],
                                                   'properties': ['_options',
                                                                  '_filter',
                                                                  '_finish_start_element',
                                                                  '_parser',
                                                                  '_intern_setdefault',
                                                                  'document',
                                                                  'curNode',
                                                                  '_elem_info',
                                                                  '_cdata',
                                                                  '_finish_end_element',
                                                                  '_cdata_continue']},
             'xml.dom.expatbuilder.ExpatBuilderNS': {'bases': ['xml.dom.expatbuilder.Namespaces',
                                                               'xml.dom.expatbuilder.ExpatBuilder'],
                                                     'constructor': [],
                                                     'docstring': 'Document builder that supports namespaces.',
                                                     'methods': [('reset', [], '')],
                                                     'properties': []},
             'xml.dom.expatbuilder.FilterCrutch': {'bases': ['object'],
                                                   'constructor': ['builder'],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['__slots__',
                                                                  '_level',
                                                                  '_builder',
                                                                  '_old_start',
                                                                  '_old_end']},
             'xml.dom.expatbuilder.FilterVisibilityController': {'bases': ['object'],
                                                                 'constructor': ['filter'],
                                                                 'docstring': 'Wrapper around a DOMBuilderFilter which implements the checks\n    to make the whatToShow filter attribute work.',
                                                                 'methods': [('startContainer',
                                                                              ['node'],
                                                                              ''),
                                                                             ('acceptNode',
                                                                              ['node'],
                                                                              '')],
                                                                 'properties': ['__slots__',
                                                                                'filter',
                                                                                '_nodetype_mask']},
             'xml.dom.expatbuilder.FragmentBuilder': {'bases': ['xml.dom.expatbuilder.ExpatBuilder'],
                                                      'constructor': ['context', 'options=None'],
                                                      'docstring': 'Builder which constructs document fragments given XML source\n    text and a context node.\n\n    The context node is expected to provide information about the\n    namespace declarations which are in scope at the start of the\n    fragment.\n    ',
                                                      'methods': [('reset', [], ''),
                                                                  ('parseFile',
                                                                   ['file'],
                                                                   'Parse a document fragment from a file object, returning the\n        fragment node.'),
                                                                  ('parseString',
                                                                   ['string'],
                                                                   'Parse a document fragment from a string, returning the\n        fragment node.'),
                                                                  ('_getDeclarations',
                                                                   [],
                                                                   "Re-create the internal subset from the DocumentType node.\n\n        This is only needed if we don't already have the\n        internalSubset as a string.\n        "),
                                                                  ('_getNSattrs', [], ''),
                                                                  ('external_entity_ref_handler',
                                                                   ['context',
                                                                    'base',
                                                                    'systemId',
                                                                    'publicId'],
                                                                   '')],
                                                      'properties': ['originalDocument',
                                                                     'context',
                                                                     'fragment',
                                                                     '_source',
                                                                     'document',
                                                                     'curNode']},
             'xml.dom.expatbuilder.FragmentBuilderNS': {'bases': ['xml.dom.expatbuilder.Namespaces',
                                                                  'xml.dom.expatbuilder.FragmentBuilder'],
                                                        'constructor': [],
                                                        'docstring': 'Fragment builder that supports namespaces.',
                                                        'methods': [('reset', [], ''),
                                                                    ('_getNSattrs',
                                                                     [],
                                                                     'Return string of namespace attributes from this element and\n        ancestors.')],
                                                        'properties': []},
             'xml.dom.expatbuilder.InternalSubsetExtractor': {'bases': ['xml.dom.expatbuilder.ExpatBuilder'],
                                                              'constructor': [],
                                                              'docstring': 'XML processor which can rip out the internal document type subset.',
                                                              'methods': [('getSubset',
                                                                           [],
                                                                           'Return the internal subset as a string.'),
                                                                          ('parseFile',
                                                                           ['file'],
                                                                           ''),
                                                                          ('parseString',
                                                                           ['string'],
                                                                           ''),
                                                                          ('install',
                                                                           ['parser'],
                                                                           ''),
                                                                          ('start_doctype_decl_handler',
                                                                           ['name',
                                                                            'publicId',
                                                                            'systemId',
                                                                            'has_internal_subset'],
                                                                           ''),
                                                                          ('end_doctype_decl_handler',
                                                                           [],
                                                                           ''),
                                                                          ('start_element_handler',
                                                                           ['name', 'attrs'],
                                                                           '')],
                                                              'properties': ['subset']},
             'xml.dom.expatbuilder.Namespaces': {'bases': [],
                                                 'constructor': [],
                                                 'docstring': 'Mix-in class for builders; adds support for namespaces.',
                                                 'methods': [('_initNamespaces', [], ''),
                                                             ('createParser',
                                                              [],
                                                              'Create a new namespace-handling parser.'),
                                                             ('install',
                                                              ['parser'],
                                                              'Insert the namespace-handlers onto the parser.'),
                                                             ('start_namespace_decl_handler',
                                                              ['prefix', 'uri'],
                                                              'Push this namespace declaration on our storage.'),
                                                             ('start_element_handler',
                                                              ['name', 'attributes'],
                                                              ''),
                                                             ('end_element_handler',
                                                              ['name'],
                                                              '')],
                                                 'properties': ['_ns_ordered_prefixes',
                                                                'curNode']},
             'xml.dom.expatbuilder.ParseEscape': {'bases': ['Exception'],
                                                  'constructor': [],
                                                  'docstring': 'Exception raised to short-circuit parsing in InternalSubsetExtractor.',
                                                  'methods': [],
                                                  'properties': []},
             'xml.dom.expatbuilder.Rejecter': {'bases': ['xml.dom.expatbuilder.FilterCrutch'],
                                               'constructor': ['builder'],
                                               'docstring': '',
                                               'methods': [('start_element_handler',
                                                            ['*args'],
                                                            ''),
                                                           ('end_element_handler',
                                                            ['*args'],
                                                            '')],
                                               'properties': ['__slots__', '_level']},
             'xml.dom.expatbuilder.Skipper': {'bases': ['xml.dom.expatbuilder.FilterCrutch'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('start_element_handler',
                                                           ['*args'],
                                                           ''),
                                                          ('end_element_handler',
                                                           ['*args'],
                                                           '')],
                                              'properties': ['__slots__', '_level', '_builder']},
             'xml.dom.minicompat.EmptyNodeList': {'bases': ['tuple'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('__add__', ['other'], ''),
                                                              ('__radd__', ['other'], ''),
                                                              ('item', ['index'], ''),
                                                              ('_get_length', [], ''),
                                                              ('_set_length', ['value'], '')],
                                                  'properties': ['__slots__', 'length']},
             'xml.dom.minicompat.NodeList': {'bases': ['list'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('item', ['index'], ''),
                                                         ('_get_length', [], ''),
                                                         ('_set_length', ['value'], ''),
                                                         ('__getstate__', [], ''),
                                                         ('__setstate__', ['state'], '')],
                                             'properties': ['__slots__', 'length']},
             'xml.dom.minidom.Attr': {'bases': ['xml.dom.minidom.Node'],
                                      'constructor': ['qName',
                                                      'namespaceURI=EMPTY_NAMESPACE',
                                                      'localName=None',
                                                      'prefix=None'],
                                      'docstring': '',
                                      'methods': [('_get_localName', [], ''),
                                                  ('_get_name', [], ''),
                                                  ('_get_specified', [], ''),
                                                  ('__setattr__', ['name', 'value'], ''),
                                                  ('_set_prefix', ['prefix'], ''),
                                                  ('_set_value', ['value'], ''),
                                                  ('unlink', [], ''),
                                                  ('_get_isId', [], ''),
                                                  ('_get_schemaType', [], '')],
                                      'properties': ['nodeType',
                                                     'attributes',
                                                     'ownerElement',
                                                     'specified',
                                                     '_is_id',
                                                     '_child_node_types']},
             'xml.dom.minidom.CDATASection': {'bases': ['xml.dom.minidom.Text'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('writexml',
                                                           ['writer',
                                                            "indent=''",
                                                            "addindent=''",
                                                            "newl=''"],
                                                           '')],
                                              'properties': ['nodeType', 'nodeName']},
             'xml.dom.minidom.CharacterData': {'bases': ['xml.dom.minidom.Childless',
                                                         'xml.dom.minidom.Node'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('_get_length', [], ''),
                                                           ('_get_data', [], ''),
                                                           ('_set_data', ['data'], ''),
                                                           ('__setattr__',
                                                            ['name', 'value'],
                                                            ''),
                                                           ('__repr__', [], ''),
                                                           ('substringData',
                                                            ['offset', 'count'],
                                                            ''),
                                                           ('appendData', ['arg'], ''),
                                                           ('insertData',
                                                            ['offset', 'arg'],
                                                            ''),
                                                           ('deleteData',
                                                            ['offset', 'count'],
                                                            ''),
                                                           ('replaceData',
                                                            ['offset', 'count', 'arg'],
                                                            '')],
                                               'properties': ['__len__',
                                                              '_get_nodeValue',
                                                              '_set_nodeValue',
                                                              'data']},
             'xml.dom.minidom.Childless': {'bases': [],
                                           'constructor': [],
                                           'docstring': 'Mixin that makes childless-ness easy to implement and avoids\n    the complexity of the Node methods that deal with children.\n    ',
                                           'methods': [('_get_firstChild', [], ''),
                                                       ('_get_lastChild', [], ''),
                                                       ('appendChild', ['node'], ''),
                                                       ('hasChildNodes', [], ''),
                                                       ('insertBefore',
                                                        ['newChild', 'refChild'],
                                                        ''),
                                                       ('removeChild', ['oldChild'], ''),
                                                       ('replaceChild',
                                                        ['newChild', 'oldChild'],
                                                        '')],
                                           'properties': ['attributes',
                                                          'childNodes',
                                                          'firstChild',
                                                          'lastChild']},
             'xml.dom.minidom.Comment': {'bases': ['xml.dom.minidom.Childless',
                                                   'xml.dom.minidom.CharacterData'],
                                         'constructor': ['data'],
                                         'docstring': '',
                                         'methods': [('writexml',
                                                      ['writer',
                                                       "indent=''",
                                                       "addindent=''",
                                                       "newl=''"],
                                                      '')],
                                         'properties': ['nodeType',
                                                        'nodeName',
                                                        'data',
                                                        'nodeValue']},
             'xml.dom.minidom.DOMImplementation': {'bases': ['xml.dom.xmlbuilder.DOMImplementationLS'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('hasFeature',
                                                                ['feature', 'version'],
                                                                ''),
                                                               ('createDocument',
                                                                ['namespaceURI',
                                                                 'qualifiedName',
                                                                 'doctype'],
                                                                ''),
                                                               ('createDocumentType',
                                                                ['qualifiedName',
                                                                 'publicId',
                                                                 'systemId'],
                                                                ''),
                                                               ('getInterface',
                                                                ['feature'],
                                                                ''),
                                                               ('_create_document', [], '')],
                                                   'properties': ['_features']},
             'xml.dom.minidom.Document': {'bases': ['xml.dom.minidom.Node',
                                                    'xml.dom.xmlbuilder.DocumentLS'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [('_get_elem_info', ['element'], ''),
                                                      ('_get_actualEncoding', [], ''),
                                                      ('_get_doctype', [], ''),
                                                      ('_get_documentURI', [], ''),
                                                      ('_get_encoding', [], ''),
                                                      ('_get_errorHandler', [], ''),
                                                      ('_get_standalone', [], ''),
                                                      ('_get_strictErrorChecking', [], ''),
                                                      ('_get_version', [], ''),
                                                      ('appendChild', ['node'], ''),
                                                      ('removeChild', ['oldChild'], ''),
                                                      ('_get_documentElement', [], ''),
                                                      ('unlink', [], ''),
                                                      ('cloneNode', ['deep'], ''),
                                                      ('createDocumentFragment', [], ''),
                                                      ('createElement', ['tagName'], ''),
                                                      ('createTextNode', ['data'], ''),
                                                      ('createCDATASection', ['data'], ''),
                                                      ('createComment', ['data'], ''),
                                                      ('createProcessingInstruction',
                                                       ['target', 'data'],
                                                       ''),
                                                      ('createAttribute', ['qName'], ''),
                                                      ('createElementNS',
                                                       ['namespaceURI', 'qualifiedName'],
                                                       ''),
                                                      ('createAttributeNS',
                                                       ['namespaceURI', 'qualifiedName'],
                                                       ''),
                                                      ('_create_entity',
                                                       ['name',
                                                        'publicId',
                                                        'systemId',
                                                        'notationName'],
                                                       ''),
                                                      ('_create_notation',
                                                       ['name', 'publicId', 'systemId'],
                                                       ''),
                                                      ('getElementById', ['id'], ''),
                                                      ('getElementsByTagName', ['name'], ''),
                                                      ('getElementsByTagNameNS',
                                                       ['namespaceURI', 'localName'],
                                                       ''),
                                                      ('isSupported',
                                                       ['feature', 'version'],
                                                       ''),
                                                      ('importNode', ['node', 'deep'], ''),
                                                      ('writexml',
                                                       ['writer',
                                                        "indent=''",
                                                        "addindent=''",
                                                        "newl=''",
                                                        'encoding=None'],
                                                       ''),
                                                      ('renameNode',
                                                       ['n', 'namespaceURI', 'name'],
                                                       '')],
                                          'properties': ['_child_node_types',
                                                         'nodeType',
                                                         'nodeName',
                                                         'nodeValue',
                                                         'attributes',
                                                         'doctype',
                                                         'parentNode',
                                                         'previousSibling',
                                                         'nextSibling',
                                                         'implementation',
                                                         'actualEncoding',
                                                         'encoding',
                                                         'standalone',
                                                         'version',
                                                         'strictErrorChecking',
                                                         'errorHandler',
                                                         'documentURI',
                                                         '_magic_id_count',
                                                         'childNodes',
                                                         '_elem_info',
                                                         '_id_cache',
                                                         '_id_search_stack',
                                                         'documentElement']},
             'xml.dom.minidom.DocumentFragment': {'bases': ['xml.dom.minidom.Node'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['nodeType',
                                                                 'nodeName',
                                                                 'nodeValue',
                                                                 'attributes',
                                                                 'parentNode',
                                                                 '_child_node_types',
                                                                 'childNodes']},
             'xml.dom.minidom.DocumentType': {'bases': ['xml.dom.minidom.Identified',
                                                        'xml.dom.minidom.Childless',
                                                        'xml.dom.minidom.Node'],
                                              'constructor': ['qualifiedName'],
                                              'docstring': '',
                                              'methods': [('_get_internalSubset', [], ''),
                                                          ('cloneNode', ['deep'], ''),
                                                          ('writexml',
                                                           ['writer',
                                                            "indent=''",
                                                            "addindent=''",
                                                            "newl=''"],
                                                           '')],
                                              'properties': ['nodeType',
                                                             'nodeValue',
                                                             'name',
                                                             'publicId',
                                                             'systemId',
                                                             'internalSubset',
                                                             'entities',
                                                             'notations',
                                                             'nodeName']},
             'xml.dom.minidom.Element': {'bases': ['xml.dom.minidom.Node'],
                                         'constructor': ['tagName',
                                                         'namespaceURI=EMPTY_NAMESPACE',
                                                         'prefix=None',
                                                         'localName=None'],
                                         'docstring': '',
                                         'methods': [('_get_localName', [], ''),
                                                     ('_get_tagName', [], ''),
                                                     ('unlink', [], ''),
                                                     ('getAttribute', ['attname'], ''),
                                                     ('getAttributeNS',
                                                      ['namespaceURI', 'localName'],
                                                      ''),
                                                     ('setAttribute', ['attname', 'value'], ''),
                                                     ('setAttributeNS',
                                                      ['namespaceURI',
                                                       'qualifiedName',
                                                       'value'],
                                                      ''),
                                                     ('getAttributeNode', ['attrname'], ''),
                                                     ('getAttributeNodeNS',
                                                      ['namespaceURI', 'localName'],
                                                      ''),
                                                     ('setAttributeNode', ['attr'], ''),
                                                     ('removeAttribute', ['name'], ''),
                                                     ('removeAttributeNS',
                                                      ['namespaceURI', 'localName'],
                                                      ''),
                                                     ('removeAttributeNode', ['node'], ''),
                                                     ('hasAttribute', ['name'], ''),
                                                     ('hasAttributeNS',
                                                      ['namespaceURI', 'localName'],
                                                      ''),
                                                     ('getElementsByTagName', ['name'], ''),
                                                     ('getElementsByTagNameNS',
                                                      ['namespaceURI', 'localName'],
                                                      ''),
                                                     ('__repr__', [], ''),
                                                     ('writexml',
                                                      ['writer',
                                                       "indent=''",
                                                       "addindent=''",
                                                       "newl=''"],
                                                      ''),
                                                     ('_get_attributes', [], ''),
                                                     ('hasAttributes', [], ''),
                                                     ('setIdAttribute', ['name'], ''),
                                                     ('setIdAttributeNS',
                                                      ['namespaceURI', 'localName'],
                                                      ''),
                                                     ('setIdAttributeNode', ['idAttr'], '')],
                                         'properties': ['nodeType',
                                                        'nodeValue',
                                                        'schemaType',
                                                        '_magic_id_nodes',
                                                        '_child_node_types',
                                                        'tagName',
                                                        'nodeName',
                                                        'prefix',
                                                        'namespaceURI',
                                                        'childNodes',
                                                        '_attrs',
                                                        '_attrsNS',
                                                        'setAttributeNodeNS',
                                                        'removeAttributeNodeNS']},
             'xml.dom.minidom.ElementInfo': {'bases': ['object'],
                                             'constructor': ['name'],
                                             'docstring': 'Object that represents content-model information for an element.\n\n    This implementation is not expected to be used in practice; DOM\n    builders should provide implementations which do the right thing\n    using information available to it.\n\n    ',
                                             'methods': [('getAttributeType', ['aname'], ''),
                                                         ('getAttributeTypeNS',
                                                          ['namespaceURI', 'localName'],
                                                          ''),
                                                         ('isElementContent', [], ''),
                                                         ('isEmpty',
                                                          [],
                                                          'Returns true iff this element is declared to have an EMPTY\n        content model.'),
                                                         ('isId',
                                                          ['aname'],
                                                          'Returns true iff the named attribte is a DTD-style ID.'),
                                                         ('isIdNS',
                                                          ['namespaceURI', 'localName'],
                                                          'Returns true iff the identified attribute is a DTD-style ID.'),
                                                         ('__getstate__', [], ''),
                                                         ('__setstate__', ['state'], '')],
                                             'properties': ['__slots__', 'tagName']},
             'xml.dom.minidom.Entity': {'bases': ['xml.dom.minidom.Identified',
                                                  'xml.dom.minidom.Node'],
                                        'constructor': ['name',
                                                        'publicId',
                                                        'systemId',
                                                        'notation'],
                                        'docstring': '',
                                        'methods': [('_get_actualEncoding', [], ''),
                                                    ('_get_encoding', [], ''),
                                                    ('_get_version', [], ''),
                                                    ('appendChild', ['newChild'], ''),
                                                    ('insertBefore',
                                                     ['newChild', 'refChild'],
                                                     ''),
                                                    ('removeChild', ['oldChild'], ''),
                                                    ('replaceChild',
                                                     ['newChild', 'oldChild'],
                                                     '')],
                                        'properties': ['attributes',
                                                       'nodeType',
                                                       'nodeValue',
                                                       'actualEncoding',
                                                       'encoding',
                                                       'version',
                                                       'nodeName',
                                                       'notationName',
                                                       'childNodes']},
             'xml.dom.minidom.Identified': {'bases': [],
                                            'constructor': [],
                                            'docstring': 'Mix-in class that supports the publicId and systemId attributes.',
                                            'methods': [('_identified_mixin_init',
                                                         ['publicId', 'systemId'],
                                                         ''),
                                                        ('_get_publicId', [], ''),
                                                        ('_get_systemId', [], '')],
                                            'properties': ['publicId', 'systemId']},
             'xml.dom.minidom.NamedNodeMap': {'bases': ['object'],
                                              'constructor': ['attrs',
                                                              'attrsNS',
                                                              'ownerElement'],
                                              'docstring': "The attribute list is a transient interface to the underlying\n    dictionaries.  Mutations here will change the underlying element's\n    dictionary.\n\n    Ordering is imposed artificially and does not reflect the order of\n    attributes as found in an input document.\n    ",
                                              'methods': [('_get_length', [], ''),
                                                          ('item', ['index'], ''),
                                                          ('items', [], ''),
                                                          ('itemsNS', [], ''),
                                                          ('has_key', ['key'], ''),
                                                          ('keys', [], ''),
                                                          ('keysNS', [], ''),
                                                          ('values', [], ''),
                                                          ('get', ['name', 'value=None'], ''),
                                                          ('__cmp__', ['other'], ''),
                                                          ('__getitem__',
                                                           ['attname_or_tuple'],
                                                           ''),
                                                          ('__setitem__',
                                                           ['attname', 'value'],
                                                           ''),
                                                          ('getNamedItem', ['name'], ''),
                                                          ('getNamedItemNS',
                                                           ['namespaceURI', 'localName'],
                                                           ''),
                                                          ('removeNamedItem', ['name'], ''),
                                                          ('removeNamedItemNS',
                                                           ['namespaceURI', 'localName'],
                                                           ''),
                                                          ('setNamedItem', ['node'], ''),
                                                          ('setNamedItemNS', ['node'], ''),
                                                          ('__delitem__',
                                                           ['attname_or_tuple'],
                                                           ''),
                                                          ('__getstate__', [], ''),
                                                          ('__setstate__', ['state'], '')],
                                              'properties': ['__slots__',
                                                             '_attrs',
                                                             '_attrsNS',
                                                             '_ownerElement',
                                                             '__len__']},
             'xml.dom.minidom.Node': {'bases': ['xml.dom.Node'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('__nonzero__', [], ''),
                                                  ('toxml', ['encoding=None'], ''),
                                                  ('toprettyxml',
                                                   ["indent='\\t'",
                                                    "newl='\\n'",
                                                    'encoding=None'],
                                                   ''),
                                                  ('hasChildNodes', [], ''),
                                                  ('_get_childNodes', [], ''),
                                                  ('_get_firstChild', [], ''),
                                                  ('_get_lastChild', [], ''),
                                                  ('insertBefore',
                                                   ['newChild', 'refChild'],
                                                   ''),
                                                  ('appendChild', ['node'], ''),
                                                  ('replaceChild',
                                                   ['newChild', 'oldChild'],
                                                   ''),
                                                  ('removeChild', ['oldChild'], ''),
                                                  ('normalize', [], ''),
                                                  ('cloneNode', ['deep'], ''),
                                                  ('isSupported', ['feature', 'version'], ''),
                                                  ('_get_localName', [], ''),
                                                  ('isSameNode', ['other'], ''),
                                                  ('getInterface', ['feature'], ''),
                                                  ('getUserData', ['key'], ''),
                                                  ('setUserData',
                                                   ['key', 'data', 'handler'],
                                                   ''),
                                                  ('_call_user_data_handler',
                                                   ['operation', 'src', 'dst'],
                                                   ''),
                                                  ('unlink', [], '')],
                                      'properties': ['namespaceURI',
                                                     'parentNode',
                                                     'ownerDocument',
                                                     'nextSibling',
                                                     'previousSibling',
                                                     'prefix',
                                                     '_user_data',
                                                     'childNodes']},
             'xml.dom.minidom.Notation': {'bases': ['xml.dom.minidom.Identified',
                                                    'xml.dom.minidom.Childless',
                                                    'xml.dom.minidom.Node'],
                                          'constructor': ['name', 'publicId', 'systemId'],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': ['nodeType', 'nodeValue', 'nodeName']},
             'xml.dom.minidom.ProcessingInstruction': {'bases': ['xml.dom.minidom.Childless',
                                                                 'xml.dom.minidom.Node'],
                                                       'constructor': ['target', 'data'],
                                                       'docstring': '',
                                                       'methods': [('_get_data', [], ''),
                                                                   ('_set_data', ['value'], ''),
                                                                   ('_get_target', [], ''),
                                                                   ('_set_target',
                                                                    ['value'],
                                                                    ''),
                                                                   ('__setattr__',
                                                                    ['name', 'value'],
                                                                    ''),
                                                                   ('writexml',
                                                                    ['writer',
                                                                     "indent=''",
                                                                     "addindent=''",
                                                                     "newl=''"],
                                                                    '')],
                                                       'properties': ['nodeType',
                                                                      'target',
                                                                      'nodeName',
                                                                      'data',
                                                                      'nodeValue']},
             'xml.dom.minidom.ReadOnlySequentialNamedNodeMap': {'bases': ['object'],
                                                                'constructor': ['seq=()'],
                                                                'docstring': '',
                                                                'methods': [('__len__', [], ''),
                                                                            ('_get_length',
                                                                             [],
                                                                             ''),
                                                                            ('getNamedItem',
                                                                             ['name'],
                                                                             ''),
                                                                            ('getNamedItemNS',
                                                                             ['namespaceURI',
                                                                              'localName'],
                                                                             ''),
                                                                            ('__getitem__',
                                                                             ['name_or_tuple'],
                                                                             ''),
                                                                            ('item',
                                                                             ['index'],
                                                                             ''),
                                                                            ('removeNamedItem',
                                                                             ['name'],
                                                                             ''),
                                                                            ('removeNamedItemNS',
                                                                             ['namespaceURI',
                                                                              'localName'],
                                                                             ''),
                                                                            ('setNamedItem',
                                                                             ['node'],
                                                                             ''),
                                                                            ('setNamedItemNS',
                                                                             ['node'],
                                                                             ''),
                                                                            ('__getstate__',
                                                                             [],
                                                                             ''),
                                                                            ('__setstate__',
                                                                             ['state'],
                                                                             '')],
                                                                'properties': ['__slots__',
                                                                               '_seq']},
             'xml.dom.minidom.Text': {'bases': ['xml.dom.minidom.CharacterData'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('splitText', ['offset'], ''),
                                                  ('writexml',
                                                   ['writer',
                                                    "indent=''",
                                                    "addindent=''",
                                                    "newl=''"],
                                                   ''),
                                                  ('_get_wholeText', [], ''),
                                                  ('replaceWholeText', ['content'], ''),
                                                  ('_get_isWhitespaceInElementContent', [], '')],
                                      'properties': ['nodeType',
                                                     'nodeName',
                                                     'attributes',
                                                     'data']},
             'xml.dom.minidom.TypeInfo': {'bases': ['object'],
                                          'constructor': ['namespace', 'name'],
                                          'docstring': '',
                                          'methods': [('__repr__', [], ''),
                                                      ('_get_name', [], ''),
                                                      ('_get_namespace', [], '')],
                                          'properties': ['__slots__', 'namespace', 'name']},
             'xml.dom.pulldom.DOMEventStream': {'bases': [],
                                                'constructor': ['stream', 'parser', 'bufsize'],
                                                'docstring': '',
                                                'methods': [('reset', [], ''),
                                                            ('__getitem__', ['pos'], ''),
                                                            ('next', [], ''),
                                                            ('__iter__', [], ''),
                                                            ('expandNode', ['node'], ''),
                                                            ('getEvent', [], ''),
                                                            ('_slurp',
                                                             [],
                                                             ' Fallback replacement for getEvent() using the\n            standard SAX2 interface, which means we slurp the\n            SAX events into memory (no performance gain, but\n            we are compatible to all SAX parsers).\n        '),
                                                            ('_emit',
                                                             [],
                                                             ' Fallback replacement for getEvent() that emits\n            the events that _slurp() read previously.\n        '),
                                                            ('clear',
                                                             [],
                                                             'clear(): Explicitly release parsing objects')],
                                                'properties': ['stream',
                                                               'parser',
                                                               'bufsize',
                                                               'getEvent',
                                                               'pulldom']},
             'xml.dom.pulldom.ErrorHandler': {'bases': [],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('warning', ['exception'], ''),
                                                          ('error', ['exception'], ''),
                                                          ('fatalError', ['exception'], '')],
                                              'properties': []},
             'xml.dom.pulldom.PullDOM': {'bases': ['xml.sax.ContentHandler'],
                                         'constructor': ['documentFactory=None'],
                                         'docstring': '',
                                         'methods': [('pop', [], ''),
                                                     ('setDocumentLocator', ['locator'], ''),
                                                     ('startPrefixMapping',
                                                      ['prefix', 'uri'],
                                                      ''),
                                                     ('endPrefixMapping', ['prefix'], ''),
                                                     ('startElementNS',
                                                      ['name', 'tagName', 'attrs'],
                                                      ''),
                                                     ('endElementNS', ['name', 'tagName'], ''),
                                                     ('startElement', ['name', 'attrs'], ''),
                                                     ('endElement', ['name'], ''),
                                                     ('comment', ['s'], ''),
                                                     ('processingInstruction',
                                                      ['target', 'data'],
                                                      ''),
                                                     ('ignorableWhitespace', ['chars'], ''),
                                                     ('characters', ['chars'], ''),
                                                     ('startDocument', [], ''),
                                                     ('buildDocument', ['uri', 'tagname'], ''),
                                                     ('endDocument', [], ''),
                                                     ('clear',
                                                      [],
                                                      'clear(): Explicitly release parsing structures')],
                                         'properties': ['_locator',
                                                        'document',
                                                        'documentFactory',
                                                        'firstEvent',
                                                        'lastEvent',
                                                        'elementStack',
                                                        'push',
                                                        'pop',
                                                        '_ns_contexts',
                                                        '_current_context',
                                                        'pending_events',
                                                        '_xmlns_attrs']},
             'xml.dom.pulldom.SAX2DOM': {'bases': ['xml.dom.pulldom.PullDOM'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('startElementNS',
                                                      ['name', 'tagName', 'attrs'],
                                                      ''),
                                                     ('startElement', ['name', 'attrs'], ''),
                                                     ('processingInstruction',
                                                      ['target', 'data'],
                                                      ''),
                                                     ('ignorableWhitespace', ['chars'], ''),
                                                     ('characters', ['chars'], '')],
                                         'properties': []},
             'xml.dom.xmlbuilder.DOMBuilder': {'bases': [],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('_get_entityResolver', [], ''),
                                                           ('_set_entityResolver',
                                                            ['entityResolver'],
                                                            ''),
                                                           ('_get_errorHandler', [], ''),
                                                           ('_set_errorHandler',
                                                            ['errorHandler'],
                                                            ''),
                                                           ('_get_filter', [], ''),
                                                           ('_set_filter', ['filter'], ''),
                                                           ('setFeature',
                                                            ['name', 'state'],
                                                            ''),
                                                           ('supportsFeature', ['name'], ''),
                                                           ('canSetFeature',
                                                            ['name', 'state'],
                                                            ''),
                                                           ('getFeature', ['name'], ''),
                                                           ('parseURI', ['uri'], ''),
                                                           ('parse', ['input'], ''),
                                                           ('parseWithContext',
                                                            ['input', 'cnode', 'action'],
                                                            ''),
                                                           ('_parse_bytestream',
                                                            ['stream', 'options'],
                                                            '')],
                                               'properties': ['entityResolver',
                                                              'errorHandler',
                                                              'filter',
                                                              'ACTION_REPLACE',
                                                              'ACTION_APPEND_AS_CHILDREN',
                                                              'ACTION_INSERT_AFTER',
                                                              'ACTION_INSERT_BEFORE',
                                                              '_legal_actions',
                                                              '_options',
                                                              '_settings']},
             'xml.dom.xmlbuilder.DOMBuilderFilter': {'bases': [],
                                                     'constructor': [],
                                                     'docstring': 'Element filter which can be used to tailor construction of\n    a DOM instance.\n    ',
                                                     'methods': [('_get_whatToShow', [], ''),
                                                                 ('acceptNode',
                                                                  ['element'],
                                                                  ''),
                                                                 ('startContainer',
                                                                  ['element'],
                                                                  '')],
                                                     'properties': ['FILTER_ACCEPT',
                                                                    'FILTER_REJECT',
                                                                    'FILTER_SKIP',
                                                                    'FILTER_INTERRUPT',
                                                                    'whatToShow']},
             'xml.dom.xmlbuilder.DOMEntityResolver': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('resolveEntity',
                                                                   ['publicId', 'systemId'],
                                                                   ''),
                                                                  ('_get_opener', [], ''),
                                                                  ('_create_opener', [], ''),
                                                                  ('_guess_media_encoding',
                                                                   ['source'],
                                                                   '')],
                                                      'properties': ['__slots__', '_opener']},
             'xml.dom.xmlbuilder.DOMImplementationLS': {'bases': [],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('createDOMBuilder',
                                                                     ['mode', 'schemaType'],
                                                                     ''),
                                                                    ('createDOMWriter', [], ''),
                                                                    ('createDOMInputSource',
                                                                     [],
                                                                     '')],
                                                        'properties': ['MODE_SYNCHRONOUS',
                                                                       'MODE_ASYNCHRONOUS']},
             'xml.dom.xmlbuilder.DOMInputSource': {'bases': ['object'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('_get_byteStream', [], ''),
                                                               ('_set_byteStream',
                                                                ['byteStream'],
                                                                ''),
                                                               ('_get_characterStream', [], ''),
                                                               ('_set_characterStream',
                                                                ['characterStream'],
                                                                ''),
                                                               ('_get_stringData', [], ''),
                                                               ('_set_stringData',
                                                                ['data'],
                                                                ''),
                                                               ('_get_encoding', [], ''),
                                                               ('_set_encoding',
                                                                ['encoding'],
                                                                ''),
                                                               ('_get_publicId', [], ''),
                                                               ('_set_publicId',
                                                                ['publicId'],
                                                                ''),
                                                               ('_get_systemId', [], ''),
                                                               ('_set_systemId',
                                                                ['systemId'],
                                                                ''),
                                                               ('_get_baseURI', [], ''),
                                                               ('_set_baseURI', ['uri'], '')],
                                                   'properties': ['__slots__',
                                                                  'byteStream',
                                                                  'characterStream',
                                                                  'stringData',
                                                                  'encoding',
                                                                  'publicId',
                                                                  'systemId',
                                                                  'baseURI']},
             'xml.dom.xmlbuilder.DocumentLS': {'bases': [],
                                               'constructor': [],
                                               'docstring': 'Mixin to create documents that conform to the load/save spec.',
                                               'methods': [('_get_async', [], ''),
                                                           ('_set_async', ['async'], ''),
                                                           ('abort', [], ''),
                                                           ('load', ['uri'], ''),
                                                           ('loadXML', ['source'], ''),
                                                           ('saveXML', ['snode'], '')],
                                               'properties': ['async']},
             'xml.dom.xmlbuilder.Options': {'bases': [],
                                            'constructor': [],
                                            'docstring': 'Features object that has variables set for each DOMBuilder feature.\n\n    The DOMBuilder class uses an instance of this class to pass settings to\n    the ExpatBuilder class.\n    ',
                                            'methods': [],
                                            'properties': ['namespaces',
                                                           'namespace_declarations',
                                                           'validation',
                                                           'external_parameter_entities',
                                                           'external_general_entities',
                                                           'external_dtd_subset',
                                                           'validate_if_schema',
                                                           'validate',
                                                           'datatype_normalization',
                                                           'create_entity_ref_nodes',
                                                           'entities',
                                                           'whitespace_in_element_content',
                                                           'cdata_sections',
                                                           'comments',
                                                           'charset_overrides_xml_encoding',
                                                           'infoset',
                                                           'supported_mediatypes_only',
                                                           'errorHandler',
                                                           'filter']},
             'xml.etree.ElementInclude.FatalIncludeError': {'bases': ['SyntaxError'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': []},
             'xml.etree.ElementPath.Path': {'bases': [],
                                            'constructor': ['path'],
                                            'docstring': '',
                                            'methods': [('find', ['element'], ''),
                                                        ('findtext',
                                                         ['element', 'default=None'],
                                                         ''),
                                                        ('findall', ['element'], '')],
                                            'properties': ['path', 'tag']},
             'xml.etree.ElementPath.xpath_descendant_or_self': {'bases': [],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': []},
             'xml.etree.ElementTree.ElementTree': {'bases': [],
                                                   'constructor': ['element=None', 'file=None'],
                                                   'docstring': '',
                                                   'methods': [('getroot', [], ''),
                                                               ('_setroot', ['element'], ''),
                                                               ('parse',
                                                                ['source', 'parser=None'],
                                                                ''),
                                                               ('getiterator',
                                                                ['tag=None'],
                                                                ''),
                                                               ('find', ['path'], ''),
                                                               ('findtext',
                                                                ['path', 'default=None'],
                                                                ''),
                                                               ('findall', ['path'], ''),
                                                               ('write',
                                                                ['file',
                                                                 "encoding='us-ascii'"],
                                                                ''),
                                                               ('_write',
                                                                ['file',
                                                                 'node',
                                                                 'encoding',
                                                                 'namespaces'],
                                                                '')],
                                                   'properties': ['_root']},
             'xml.etree.ElementTree.QName': {'bases': [],
                                             'constructor': ['text_or_uri', 'tag=None'],
                                             'docstring': '',
                                             'methods': [('__str__', [], ''),
                                                         ('__hash__', [], ''),
                                                         ('__cmp__', ['other'], '')],
                                             'properties': ['text']},
             'xml.etree.ElementTree.TreeBuilder': {'bases': [],
                                                   'constructor': ['element_factory=None'],
                                                   'docstring': '',
                                                   'methods': [('close', [], ''),
                                                               ('_flush', [], ''),
                                                               ('data', ['data'], ''),
                                                               ('start', ['tag', 'attrs'], ''),
                                                               ('end', ['tag'], '')],
                                                   'properties': ['_data',
                                                                  '_elem',
                                                                  '_last',
                                                                  '_tail',
                                                                  '_factory']},
             'xml.etree.ElementTree.XMLTreeBuilder': {'bases': [],
                                                      'constructor': ['html=0', 'target=None'],
                                                      'docstring': '',
                                                      'methods': [('_fixtext', ['text'], ''),
                                                                  ('_fixname', ['key'], ''),
                                                                  ('_start',
                                                                   ['tag', 'attrib_in'],
                                                                   ''),
                                                                  ('_start_list',
                                                                   ['tag', 'attrib_in'],
                                                                   ''),
                                                                  ('_data', ['text'], ''),
                                                                  ('_end', ['tag'], ''),
                                                                  ('_default', ['text'], ''),
                                                                  ('doctype',
                                                                   ['name', 'pubid', 'system'],
                                                                   ''),
                                                                  ('feed', ['data'], ''),
                                                                  ('close', [], '')],
                                                      'properties': ['_parser',
                                                                     '_target',
                                                                     '_names',
                                                                     '_doctype',
                                                                     'entity']},
             'xml.etree.ElementTree._ElementInterface': {'bases': [],
                                                         'constructor': ['tag', 'attrib'],
                                                         'docstring': '',
                                                         'methods': [('__repr__', [], ''),
                                                                     ('makeelement',
                                                                      ['tag', 'attrib'],
                                                                      ''),
                                                                     ('__len__', [], ''),
                                                                     ('__getitem__',
                                                                      ['index'],
                                                                      ''),
                                                                     ('__setitem__',
                                                                      ['index', 'element'],
                                                                      ''),
                                                                     ('__delitem__',
                                                                      ['index'],
                                                                      ''),
                                                                     ('__getslice__',
                                                                      ['start', 'stop'],
                                                                      ''),
                                                                     ('__setslice__',
                                                                      ['start',
                                                                       'stop',
                                                                       'elements'],
                                                                      ''),
                                                                     ('__delslice__',
                                                                      ['start', 'stop'],
                                                                      ''),
                                                                     ('append',
                                                                      ['element'],
                                                                      ''),
                                                                     ('insert',
                                                                      ['index', 'element'],
                                                                      ''),
                                                                     ('remove',
                                                                      ['element'],
                                                                      ''),
                                                                     ('getchildren', [], ''),
                                                                     ('find', ['path'], ''),
                                                                     ('findtext',
                                                                      ['path', 'default=None'],
                                                                      ''),
                                                                     ('findall', ['path'], ''),
                                                                     ('clear', [], ''),
                                                                     ('get',
                                                                      ['key', 'default=None'],
                                                                      ''),
                                                                     ('set',
                                                                      ['key', 'value'],
                                                                      ''),
                                                                     ('keys', [], ''),
                                                                     ('items', [], ''),
                                                                     ('getiterator',
                                                                      ['tag=None'],
                                                                      '')],
                                                         'properties': ['tag',
                                                                        'attrib',
                                                                        'text',
                                                                        'tail',
                                                                        '_children']},
             'xml.etree.ElementTree._SimpleElementPath': {'bases': [],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('find',
                                                                       ['element', 'tag'],
                                                                       ''),
                                                                      ('findtext',
                                                                       ['element',
                                                                        'tag',
                                                                        'default=None'],
                                                                       ''),
                                                                      ('findall',
                                                                       ['element', 'tag'],
                                                                       '')],
                                                          'properties': []},
             'xml.etree.ElementTree.iterparse': {'bases': [],
                                                 'constructor': ['source', 'events=None'],
                                                 'docstring': '',
                                                 'methods': [('next', [], ''),
                                                             ('__iter__', [], ''),
                                                             ('__getitem__', ['index'], '')],
                                                 'properties': ['_file',
                                                                '_events',
                                                                '_index',
                                                                'root',
                                                                '_root',
                                                                '_parser']},
             'xml.sax._exceptions.SAXException': {'bases': ['Exception'],
                                                  'constructor': ['msg', 'exception=None'],
                                                  'docstring': 'Encapsulate an XML error or warning. This class can contain\n    basic error or warning information from either the XML parser or\n    the application: you can subclass it to provide additional\n    functionality, or to add localization. Note that although you will\n    receive a SAXException as the argument to the handlers in the\n    ErrorHandler interface, you are not actually required to throw\n    the exception; instead, you can simply read the information in\n    it.',
                                                  'methods': [('getMessage',
                                                               [],
                                                               'Return a message for this exception.'),
                                                              ('getException',
                                                               [],
                                                               'Return the embedded exception, or None if there was none.'),
                                                              ('__str__',
                                                               [],
                                                               'Create a string representation of the exception.'),
                                                              ('__getitem__',
                                                               ['ix'],
                                                               'Avoids weird error messages if someone does exception[ix] by\n        mistake, since Exception has __getitem__ defined.')],
                                                  'properties': ['_msg', '_exception']},
             'xml.sax._exceptions.SAXNotRecognizedException': {'bases': ['xml.sax._exceptions.SAXException'],
                                                               'constructor': [],
                                                               'docstring': 'Exception class for an unrecognized identifier.\n\n    An XMLReader will raise this exception when it is confronted with an\n    unrecognized feature or property. SAX applications and extensions may\n    use this class for similar purposes.',
                                                               'methods': [],
                                                               'properties': []},
             'xml.sax._exceptions.SAXNotSupportedException': {'bases': ['xml.sax._exceptions.SAXException'],
                                                              'constructor': [],
                                                              'docstring': 'Exception class for an unsupported operation.\n\n    An XMLReader will raise this exception when a service it cannot\n    perform is requested (specifically setting a state or value). SAX\n    applications and extensions may use this class for similar\n    purposes.',
                                                              'methods': [],
                                                              'properties': []},
             'xml.sax._exceptions.SAXParseException': {'bases': ['xml.sax._exceptions.SAXException'],
                                                       'constructor': ['msg',
                                                                       'exception',
                                                                       'locator'],
                                                       'docstring': 'Encapsulate an XML parse error or warning.\n\n    This exception will include information for locating the error in\n    the original XML document. Note that although the application will\n    receive a SAXParseException as the argument to the handlers in the\n    ErrorHandler interface, the application is not actually required\n    to throw the exception; instead, it can simply read the\n    information in it and take a different action.\n\n    Since this exception is a subclass of SAXException, it inherits\n    the ability to wrap another exception.',
                                                       'methods': [('getColumnNumber',
                                                                    [],
                                                                    'The column number of the end of the text where the exception\n        occurred.'),
                                                                   ('getLineNumber',
                                                                    [],
                                                                    'The line number of the end of the text where the exception occurred.'),
                                                                   ('getPublicId',
                                                                    [],
                                                                    'Get the public identifier of the entity where the exception occurred.'),
                                                                   ('getSystemId',
                                                                    [],
                                                                    'Get the system identifier of the entity where the exception occurred.'),
                                                                   ('__str__',
                                                                    [],
                                                                    'Create a string representation of the exception.')],
                                                       'properties': ['_locator',
                                                                      '_systemId',
                                                                      '_colnum',
                                                                      '_linenum']},
             'xml.sax._exceptions.SAXReaderNotAvailable': {'bases': ['xml.sax._exceptions.SAXNotSupportedException'],
                                                           'constructor': [],
                                                           'docstring': 'Exception class for a missing driver.\n\n    An XMLReader module (driver) should raise this exception when it\n    is first imported, e.g. when a support module cannot be imported.\n    It also may be raised during parsing, e.g. if executing an external\n    program is not permitted.',
                                                           'methods': [],
                                                           'properties': []},
             'xml.sax.expatreader.ExpatLocator': {'bases': ['xml.sax.xmlreader.Locator'],
                                                  'constructor': ['parser'],
                                                  'docstring': 'Locator for use with the ExpatParser class.\n\n    This uses a weak reference to the parser object to avoid creating\n    a circular reference between the parser and the content handler.\n    ',
                                                  'methods': [('getColumnNumber', [], ''),
                                                              ('getLineNumber', [], ''),
                                                              ('getPublicId', [], ''),
                                                              ('getSystemId', [], '')],
                                                  'properties': ['_ref']},
             'xml.sax.expatreader.ExpatParser': {'bases': ['xml.sax.xmlreader.IncrementalParser',
                                                           'xml.sax.xmlreader.Locator'],
                                                 'constructor': ['namespaceHandling=0',
                                                                 'bufsize=2**16-20'],
                                                 'docstring': 'SAX driver for the pyexpat C module.',
                                                 'methods': [('parse',
                                                              ['source'],
                                                              'Parse an XML document from a URL or an InputSource.'),
                                                             ('prepareParser', ['source'], ''),
                                                             ('setContentHandler',
                                                              ['handler'],
                                                              ''),
                                                             ('getFeature', ['name'], ''),
                                                             ('setFeature',
                                                              ['name', 'state'],
                                                              ''),
                                                             ('getProperty', ['name'], ''),
                                                             ('setProperty',
                                                              ['name', 'value'],
                                                              ''),
                                                             ('feed',
                                                              ['data', 'isFinal=0'],
                                                              ''),
                                                             ('close', [], ''),
                                                             ('_reset_cont_handler', [], ''),
                                                             ('_reset_lex_handler_prop',
                                                              [],
                                                              ''),
                                                             ('reset', [], ''),
                                                             ('getColumnNumber', [], ''),
                                                             ('getLineNumber', [], ''),
                                                             ('getPublicId', [], ''),
                                                             ('getSystemId', [], ''),
                                                             ('start_element',
                                                              ['name', 'attrs'],
                                                              ''),
                                                             ('end_element', ['name'], ''),
                                                             ('start_element_ns',
                                                              ['name', 'attrs'],
                                                              ''),
                                                             ('end_element_ns', ['name'], ''),
                                                             ('processing_instruction',
                                                              ['target', 'data'],
                                                              ''),
                                                             ('character_data', ['data'], ''),
                                                             ('start_namespace_decl',
                                                              ['prefix', 'uri'],
                                                              ''),
                                                             ('end_namespace_decl',
                                                              ['prefix'],
                                                              ''),
                                                             ('start_doctype_decl',
                                                              ['name',
                                                               'sysid',
                                                               'pubid',
                                                               'has_internal_subset'],
                                                              ''),
                                                             ('unparsed_entity_decl',
                                                              ['name',
                                                               'base',
                                                               'sysid',
                                                               'pubid',
                                                               'notation_name'],
                                                              ''),
                                                             ('notation_decl',
                                                              ['name',
                                                               'base',
                                                               'sysid',
                                                               'pubid'],
                                                              ''),
                                                             ('external_entity_ref',
                                                              ['context',
                                                               'base',
                                                               'sysid',
                                                               'pubid'],
                                                              ''),
                                                             ('skipped_entity_handler',
                                                              ['name', 'is_pe'],
                                                              '')],
                                                 'properties': ['_source',
                                                                '_parser',
                                                                '_namespaces',
                                                                '_lex_handler_prop',
                                                                '_parsing',
                                                                '_entity_stack',
                                                                '_external_ges',
                                                                '_interning',
                                                                '_decl_handler_prop']},
             'xml.sax.handler.ContentHandler': {'bases': [],
                                                'constructor': [],
                                                'docstring': 'Interface for receiving logical document content events.\n\n    This is the main callback interface in SAX, and the one most\n    important to applications. The order of events in this interface\n    mirrors the order of the information in the document.',
                                                'methods': [('setDocumentLocator',
                                                             ['locator'],
                                                             "Called by the parser to give the application a locator for\n        locating the origin of document events.\n\n        SAX parsers are strongly encouraged (though not absolutely\n        required) to supply a locator: if it does so, it must supply\n        the locator to the application by invoking this method before\n        invoking any of the other methods in the DocumentHandler\n        interface.\n\n        The locator allows the application to determine the end\n        position of any document-related event, even if the parser is\n        not reporting an error. Typically, the application will use\n        this information for reporting its own errors (such as\n        character content that does not match an application's\n        business rules). The information returned by the locator is\n        probably not sufficient for use with a search engine.\n\n        Note that the locator will return correct information only\n        during the invocation of the events in this interface. The\n        application should not attempt to use it at any other time."),
                                                            ('startDocument',
                                                             [],
                                                             'Receive notification of the beginning of a document.\n\n        The SAX parser will invoke this method only once, before any\n        other methods in this interface or in DTDHandler (except for\n        setDocumentLocator).'),
                                                            ('endDocument',
                                                             [],
                                                             'Receive notification of the end of a document.\n\n        The SAX parser will invoke this method only once, and it will\n        be the last method invoked during the parse. The parser shall\n        not invoke this method until it has either abandoned parsing\n        (because of an unrecoverable error) or reached the end of\n        input.'),
                                                            ('startPrefixMapping',
                                                             ['prefix', 'uri'],
                                                             'Begin the scope of a prefix-URI Namespace mapping.\n\n        The information from this event is not necessary for normal\n        Namespace processing: the SAX XML reader will automatically\n        replace prefixes for element and attribute names when the\n        http://xml.org/sax/features/namespaces feature is true (the\n        default).\n\n        There are cases, however, when applications need to use\n        prefixes in character data or in attribute values, where they\n        cannot safely be expanded automatically; the\n        start/endPrefixMapping event supplies the information to the\n        application to expand prefixes in those contexts itself, if\n        necessary.\n\n        Note that start/endPrefixMapping events are not guaranteed to\n        be properly nested relative to each-other: all\n        startPrefixMapping events will occur before the corresponding\n        startElement event, and all endPrefixMapping events will occur\n        after the corresponding endElement event, but their order is\n        not guaranteed.'),
                                                            ('endPrefixMapping',
                                                             ['prefix'],
                                                             'End the scope of a prefix-URI mapping.\n\n        See startPrefixMapping for details. This event will always\n        occur after the corresponding endElement event, but the order\n        of endPrefixMapping events is not otherwise guaranteed.'),
                                                            ('startElement',
                                                             ['name', 'attrs'],
                                                             'Signals the start of an element in non-namespace mode.\n\n        The name parameter contains the raw XML 1.0 name of the\n        element type as a string and the attrs parameter holds an\n        instance of the Attributes class containing the attributes of\n        the element.'),
                                                            ('endElement',
                                                             ['name'],
                                                             'Signals the end of an element in non-namespace mode.\n\n        The name parameter contains the name of the element type, just\n        as with the startElement event.'),
                                                            ('startElementNS',
                                                             ['name', 'qname', 'attrs'],
                                                             'Signals the start of an element in namespace mode.\n\n        The name parameter contains the name of the element type as a\n        (uri, localname) tuple, the qname parameter the raw XML 1.0\n        name used in the source document, and the attrs parameter\n        holds an instance of the Attributes class containing the\n        attributes of the element.\n\n        The uri part of the name tuple is None for elements which have\n        no namespace.'),
                                                            ('endElementNS',
                                                             ['name', 'qname'],
                                                             'Signals the end of an element in namespace mode.\n\n        The name parameter contains the name of the element type, just\n        as with the startElementNS event.'),
                                                            ('characters',
                                                             ['content'],
                                                             'Receive notification of character data.\n\n        The Parser will call this method to report each chunk of\n        character data. SAX parsers may return all contiguous\n        character data in a single chunk, or they may split it into\n        several chunks; however, all of the characters in any single\n        event must come from the same external entity so that the\n        Locator provides useful information.'),
                                                            ('ignorableWhitespace',
                                                             ['whitespace'],
                                                             'Receive notification of ignorable whitespace in element content.\n\n        Validating Parsers must use this method to report each chunk\n        of ignorable whitespace (see the W3C XML 1.0 recommendation,\n        section 2.10): non-validating parsers may also use this method\n        if they are capable of parsing and using content models.\n\n        SAX parsers may return all contiguous whitespace in a single\n        chunk, or they may split it into several chunks; however, all\n        of the characters in any single event must come from the same\n        external entity, so that the Locator provides useful\n        information.'),
                                                            ('processingInstruction',
                                                             ['target', 'data'],
                                                             'Receive notification of a processing instruction.\n\n        The Parser will invoke this method once for each processing\n        instruction found: note that processing instructions may occur\n        before or after the main document element.\n\n        A SAX parser should never report an XML declaration (XML 1.0,\n        section 2.8) or a text declaration (XML 1.0, section 4.3.1)\n        using this method.'),
                                                            ('skippedEntity',
                                                             ['name'],
                                                             'Receive notification of a skipped entity.\n\n        The Parser will invoke this method once for each entity\n        skipped. Non-validating processors may skip entities if they\n        have not seen the declarations (because, for example, the\n        entity was declared in an external DTD subset). All processors\n        may skip external entities, depending on the values of the\n        http://xml.org/sax/features/external-general-entities and the\n        http://xml.org/sax/features/external-parameter-entities\n        properties.')],
                                                'properties': ['_locator']},
             'xml.sax.handler.DTDHandler': {'bases': [],
                                            'constructor': [],
                                            'docstring': 'Handle DTD events.\n\n    This interface specifies only those DTD events required for basic\n    parsing (unparsed entities and attributes).',
                                            'methods': [('notationDecl',
                                                         ['name', 'publicId', 'systemId'],
                                                         'Handle a notation declaration event.'),
                                                        ('unparsedEntityDecl',
                                                         ['name',
                                                          'publicId',
                                                          'systemId',
                                                          'ndata'],
                                                         'Handle an unparsed entity declaration event.')],
                                            'properties': []},
             'xml.sax.handler.EntityResolver': {'bases': [],
                                                'constructor': [],
                                                'docstring': 'Basic interface for resolving entities. If you create an object\n    implementing this interface, then register the object with your\n    Parser, the parser will call the method in your object to\n    resolve all external entities. Note that DefaultHandler implements\n    this interface with the default behaviour.',
                                                'methods': [('resolveEntity',
                                                             ['publicId', 'systemId'],
                                                             'Resolve the system identifier of an entity and return either\n        the system identifier to read from as a string, or an InputSource\n        to read from.')],
                                                'properties': []},
             'xml.sax.handler.ErrorHandler': {'bases': [],
                                              'constructor': [],
                                              'docstring': 'Basic interface for SAX error handlers.\n\n    If you create an object that implements this interface, then\n    register the object with your XMLReader, the parser will call the\n    methods in your object to report all warnings and errors. There\n    are three levels of errors available: warnings, (possibly)\n    recoverable errors, and unrecoverable errors. All methods take a\n    SAXParseException as the only parameter.',
                                              'methods': [('error',
                                                           ['exception'],
                                                           'Handle a recoverable error.'),
                                                          ('fatalError',
                                                           ['exception'],
                                                           'Handle a non-recoverable error.'),
                                                          ('warning',
                                                           ['exception'],
                                                           'Handle a warning.')],
                                              'properties': []},
             'xml.sax.saxutils.XMLFilterBase': {'bases': ['xmlreader.XMLReader'],
                                                'constructor': ['parent=None'],
                                                'docstring': "This class is designed to sit between an XMLReader and the\n    client application's event handlers.  By default, it does nothing\n    but pass requests up to the reader and events on to the handlers\n    unmodified, but subclasses can override specific methods to modify\n    the event stream or the configuration requests as they pass\n    through.",
                                                'methods': [('error', ['exception'], ''),
                                                            ('fatalError', ['exception'], ''),
                                                            ('warning', ['exception'], ''),
                                                            ('setDocumentLocator',
                                                             ['locator'],
                                                             ''),
                                                            ('startDocument', [], ''),
                                                            ('endDocument', [], ''),
                                                            ('startPrefixMapping',
                                                             ['prefix', 'uri'],
                                                             ''),
                                                            ('endPrefixMapping',
                                                             ['prefix'],
                                                             ''),
                                                            ('startElement',
                                                             ['name', 'attrs'],
                                                             ''),
                                                            ('endElement', ['name'], ''),
                                                            ('startElementNS',
                                                             ['name', 'qname', 'attrs'],
                                                             ''),
                                                            ('endElementNS',
                                                             ['name', 'qname'],
                                                             ''),
                                                            ('characters', ['content'], ''),
                                                            ('ignorableWhitespace',
                                                             ['chars'],
                                                             ''),
                                                            ('processingInstruction',
                                                             ['target', 'data'],
                                                             ''),
                                                            ('skippedEntity', ['name'], ''),
                                                            ('notationDecl',
                                                             ['name', 'publicId', 'systemId'],
                                                             ''),
                                                            ('unparsedEntityDecl',
                                                             ['name',
                                                              'publicId',
                                                              'systemId',
                                                              'ndata'],
                                                             ''),
                                                            ('resolveEntity',
                                                             ['publicId', 'systemId'],
                                                             ''),
                                                            ('parse', ['source'], ''),
                                                            ('setLocale', ['locale'], ''),
                                                            ('getFeature', ['name'], ''),
                                                            ('setFeature',
                                                             ['name', 'state'],
                                                             ''),
                                                            ('getProperty', ['name'], ''),
                                                            ('setProperty',
                                                             ['name', 'value'],
                                                             ''),
                                                            ('getParent', [], ''),
                                                            ('setParent', ['parent'], '')],
                                                'properties': ['_parent']},
             'xml.sax.saxutils.XMLGenerator': {'bases': ['handler.ContentHandler'],
                                               'constructor': ['out=None',
                                                               "encoding='iso-8859-1'"],
                                               'docstring': '',
                                               'methods': [('_write', ['text'], ''),
                                                           ('_qname',
                                                            ['name'],
                                                            'Builds a qualified name from a (ns_url, localname) pair'),
                                                           ('startDocument', [], ''),
                                                           ('startPrefixMapping',
                                                            ['prefix', 'uri'],
                                                            ''),
                                                           ('endPrefixMapping', ['prefix'], ''),
                                                           ('startElement',
                                                            ['name', 'attrs'],
                                                            ''),
                                                           ('endElement', ['name'], ''),
                                                           ('startElementNS',
                                                            ['name', 'qname', 'attrs'],
                                                            ''),
                                                           ('endElementNS',
                                                            ['name', 'qname'],
                                                            ''),
                                                           ('characters', ['content'], ''),
                                                           ('ignorableWhitespace',
                                                            ['content'],
                                                            ''),
                                                           ('processingInstruction',
                                                            ['target', 'data'],
                                                            '')],
                                               'properties': ['_out',
                                                              '_ns_contexts',
                                                              '_current_context',
                                                              '_undeclared_ns_maps',
                                                              '_encoding']},
             'xml.sax.xmlreader.AttributesImpl': {'bases': [],
                                                  'constructor': ['attrs'],
                                                  'docstring': '',
                                                  'methods': [('getLength', [], ''),
                                                              ('getType', ['name'], ''),
                                                              ('getValue', ['name'], ''),
                                                              ('getValueByQName', ['name'], ''),
                                                              ('getNameByQName', ['name'], ''),
                                                              ('getQNameByName', ['name'], ''),
                                                              ('getNames', [], ''),
                                                              ('getQNames', [], ''),
                                                              ('__len__', [], ''),
                                                              ('__getitem__', ['name'], ''),
                                                              ('keys', [], ''),
                                                              ('has_key', ['name'], ''),
                                                              ('__contains__', ['name'], ''),
                                                              ('get',
                                                               ['name', 'alternative=None'],
                                                               ''),
                                                              ('copy', [], ''),
                                                              ('items', [], ''),
                                                              ('values', [], '')],
                                                  'properties': ['_attrs']},
             'xml.sax.xmlreader.AttributesNSImpl': {'bases': ['xml.sax.xmlreader.AttributesImpl'],
                                                    'constructor': ['attrs', 'qnames'],
                                                    'docstring': '',
                                                    'methods': [('getValueByQName',
                                                                 ['name'],
                                                                 ''),
                                                                ('getNameByQName',
                                                                 ['name'],
                                                                 ''),
                                                                ('getQNameByName',
                                                                 ['name'],
                                                                 ''),
                                                                ('getQNames', [], ''),
                                                                ('copy', [], '')],
                                                    'properties': ['_attrs', '_qnames']},
             'xml.sax.xmlreader.IncrementalParser': {'bases': ['xml.sax.xmlreader.XMLReader'],
                                                     'constructor': ['bufsize=2**16'],
                                                     'docstring': 'This interface adds three extra methods to the XMLReader\n    interface that allow XML parsers to support incremental\n    parsing. Support for this interface is optional, since not all\n    underlying XML parsers support this functionality.\n\n    When the parser is instantiated it is ready to begin accepting\n    data from the feed method immediately. After parsing has been\n    finished with a call to close the reset method must be called to\n    make the parser ready to accept new data, either from feed or\n    using the parse method.\n\n    Note that these methods must _not_ be called during parsing, that\n    is, after parse has been called and before it returns.\n\n    By default, the class also implements the parse method of the XMLReader\n    interface using the feed, close and reset methods of the\n    IncrementalParser interface as a convenience to SAX 2.0 driver\n    writers.',
                                                     'methods': [('parse', ['source'], ''),
                                                                 ('feed',
                                                                  ['data'],
                                                                  'This method gives the raw XML data in the data parameter to\n        the parser and makes it parse the data, emitting the\n        corresponding events. It is allowed for XML constructs to be\n        split across several calls to feed.\n\n        feed may raise SAXException.'),
                                                                 ('prepareParser',
                                                                  ['source'],
                                                                  'This method is called by the parse implementation to allow\n        the SAX 2.0 driver to prepare itself for parsing.'),
                                                                 ('close',
                                                                  [],
                                                                  'This method is called when the entire XML document has been\n        passed to the parser through the feed method, to notify the\n        parser that there are no more data. This allows the parser to\n        do the final checks on the document and empty the internal\n        data buffer.\n\n        The parser will not be ready to parse another document until\n        the reset method has been called.\n\n        close may raise SAXException.'),
                                                                 ('reset',
                                                                  [],
                                                                  'This method is called after close has been called to reset\n        the parser so that it is ready to parse new documents. The\n        results of calling parse or feed after close without calling\n        reset are undefined.')],
                                                     'properties': ['_bufsize']},
             'xml.sax.xmlreader.InputSource': {'bases': [],
                                               'constructor': ['system_id=None'],
                                               'docstring': 'Encapsulation of the information needed by the XMLReader to\n    read entities.\n\n    This class may include information about the public identifier,\n    system identifier, byte stream (possibly with character encoding\n    information) and/or the character stream of an entity.\n\n    Applications will create objects of this class for use in the\n    XMLReader.parse method and for returning from\n    EntityResolver.resolveEntity.\n\n    An InputSource belongs to the application, the XMLReader is not\n    allowed to modify InputSource objects passed to it from the\n    application, although it may make copies and modify those.',
                                               'methods': [('setPublicId',
                                                            ['public_id'],
                                                            'Sets the public identifier of this InputSource.'),
                                                           ('getPublicId',
                                                            [],
                                                            'Returns the public identifier of this InputSource.'),
                                                           ('setSystemId',
                                                            ['system_id'],
                                                            'Sets the system identifier of this InputSource.'),
                                                           ('getSystemId',
                                                            [],
                                                            'Returns the system identifier of this InputSource.'),
                                                           ('setEncoding',
                                                            ['encoding'],
                                                            'Sets the character encoding of this InputSource.\n\n        The encoding must be a string acceptable for an XML encoding\n        declaration (see section 4.3.3 of the XML recommendation).\n\n        The encoding attribute of the InputSource is ignored if the\n        InputSource also contains a character stream.'),
                                                           ('getEncoding',
                                                            [],
                                                            'Get the character encoding of this InputSource.'),
                                                           ('setByteStream',
                                                            ['bytefile'],
                                                            'Set the byte stream (a Python file-like object which does\n        not perform byte-to-character conversion) for this input\n        source.\n\n        The SAX parser will ignore this if there is also a character\n        stream specified, but it will use a byte stream in preference\n        to opening a URI connection itself.\n\n        If the application knows the character encoding of the byte\n        stream, it should set it with the setEncoding method.'),
                                                           ('getByteStream',
                                                            [],
                                                            'Get the byte stream for this input source.\n\n        The getEncoding method will return the character encoding for\n        this byte stream, or None if unknown.'),
                                                           ('setCharacterStream',
                                                            ['charfile'],
                                                            'Set the character stream for this input source. (The stream\n        must be a Python 2.0 Unicode-wrapped file-like that performs\n        conversion to Unicode strings.)\n\n        If there is a character stream specified, the SAX parser will\n        ignore any byte stream and will not attempt to open a URI\n        connection to the system identifier.'),
                                                           ('getCharacterStream',
                                                            [],
                                                            'Get the character stream for this input source.')],
                                               'properties': ['__system_id',
                                                              '__public_id',
                                                              '__encoding',
                                                              '__bytefile',
                                                              '__charfile']},
             'xml.sax.xmlreader.Locator': {'bases': [],
                                           'constructor': [],
                                           'docstring': 'Interface for associating a SAX event with a document\n    location. A locator object will return valid results only during\n    calls to DocumentHandler methods; at any other time, the\n    results are unpredictable.',
                                           'methods': [('getColumnNumber',
                                                        [],
                                                        'Return the column number where the current event ends.'),
                                                       ('getLineNumber',
                                                        [],
                                                        'Return the line number where the current event ends.'),
                                                       ('getPublicId',
                                                        [],
                                                        'Return the public identifier for the current event.'),
                                                       ('getSystemId',
                                                        [],
                                                        'Return the system identifier for the current event.')],
                                           'properties': []},
             'xml.sax.xmlreader.XMLReader': {'bases': [],
                                             'constructor': [],
                                             'docstring': "Interface for reading an XML document using callbacks.\n\n    XMLReader is the interface that an XML parser's SAX2 driver must\n    implement. This interface allows an application to set and query\n    features and properties in the parser, to register event handlers\n    for document processing, and to initiate a document parse.\n\n    All SAX interfaces are assumed to be synchronous: the parse\n    methods must not return until parsing is complete, and readers\n    must wait for an event-handler callback to return before reporting\n    the next event.",
                                             'methods': [('parse',
                                                          ['source'],
                                                          'Parse an XML document from a system identifier or an InputSource.'),
                                                         ('getContentHandler',
                                                          [],
                                                          'Returns the current ContentHandler.'),
                                                         ('setContentHandler',
                                                          ['handler'],
                                                          'Registers a new object to receive document content events.'),
                                                         ('getDTDHandler',
                                                          [],
                                                          'Returns the current DTD handler.'),
                                                         ('setDTDHandler',
                                                          ['handler'],
                                                          'Register an object to receive basic DTD-related events.'),
                                                         ('getEntityResolver',
                                                          [],
                                                          'Returns the current EntityResolver.'),
                                                         ('setEntityResolver',
                                                          ['resolver'],
                                                          'Register an object to resolve external entities.'),
                                                         ('getErrorHandler',
                                                          [],
                                                          'Returns the current ErrorHandler.'),
                                                         ('setErrorHandler',
                                                          ['handler'],
                                                          'Register an object to receive error-message events.'),
                                                         ('setLocale',
                                                          ['locale'],
                                                          'Allow an application to set the locale for errors and warnings.\n\n        SAX parsers are not required to provide localization for errors\n        and warnings; if they cannot support the requested locale,\n        however, they must throw a SAX exception. Applications may\n        request a locale change in the middle of a parse.'),
                                                         ('getFeature',
                                                          ['name'],
                                                          'Looks up and returns the state of a SAX2 feature.'),
                                                         ('setFeature',
                                                          ['name', 'state'],
                                                          'Sets the state of a SAX2 feature.'),
                                                         ('getProperty',
                                                          ['name'],
                                                          'Looks up and returns the value of a SAX2 property.'),
                                                         ('setProperty',
                                                          ['name', 'value'],
                                                          'Sets the value of a SAX2 property.')],
                                             'properties': ['_cont_handler',
                                                            '_dtd_handler',
                                                            '_ent_handler',
                                                            '_err_handler']},
             'xmllib.Error': {'bases': ['RuntimeError'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'xmllib.TestXMLParser': {'bases': ['xmllib.XMLParser'],
                                      'constructor': ['**kw'],
                                      'docstring': '',
                                      'methods': [('handle_xml',
                                                   ['encoding', 'standalone'],
                                                   ''),
                                                  ('handle_doctype',
                                                   ['tag', 'pubid', 'syslit', 'data'],
                                                   ''),
                                                  ('handle_data', ['data'], ''),
                                                  ('flush', [], ''),
                                                  ('handle_cdata', ['data'], ''),
                                                  ('handle_proc', ['name', 'data'], ''),
                                                  ('handle_comment', ['data'], ''),
                                                  ('syntax_error', ['message'], ''),
                                                  ('unknown_starttag', ['tag', 'attrs'], ''),
                                                  ('unknown_endtag', ['tag'], ''),
                                                  ('unknown_entityref', ['ref'], ''),
                                                  ('unknown_charref', ['ref'], ''),
                                                  ('close', [], '')],
                                      'properties': ['testdata']},
             'xmllib.XMLParser': {'bases': [],
                                  'constructor': ['**kw'],
                                  'docstring': '',
                                  'methods': [('__fixelements', [], ''),
                                              ('__fixclass', ['kl'], ''),
                                              ('__fixdict', ['dict'], ''),
                                              ('reset', [], ''),
                                              ('setnomoretags', [], ''),
                                              ('setliteral', ['*args'], ''),
                                              ('feed', ['data'], ''),
                                              ('close', [], ''),
                                              ('translate_references', ['data', 'all=1'], ''),
                                              ('getnamespace', [], ''),
                                              ('goahead', ['end'], ''),
                                              ('parse_comment', ['i'], ''),
                                              ('parse_doctype', ['res'], ''),
                                              ('parse_cdata', ['i'], ''),
                                              ('parse_proc', ['i'], ''),
                                              ('parse_attributes', ['tag', 'i', 'j'], ''),
                                              ('parse_starttag', ['i'], ''),
                                              ('parse_endtag', ['i'], ''),
                                              ('finish_starttag',
                                               ['tagname', 'attrdict', 'method'],
                                               ''),
                                              ('finish_endtag', ['tag'], ''),
                                              ('handle_xml', ['encoding', 'standalone'], ''),
                                              ('handle_doctype',
                                               ['tag', 'pubid', 'syslit', 'data'],
                                               ''),
                                              ('handle_starttag',
                                               ['tag', 'method', 'attrs'],
                                               ''),
                                              ('handle_endtag', ['tag', 'method'], ''),
                                              ('handle_charref', ['name'], ''),
                                              ('handle_data', ['data'], ''),
                                              ('handle_cdata', ['data'], ''),
                                              ('handle_comment', ['data'], ''),
                                              ('handle_proc', ['name', 'data'], ''),
                                              ('syntax_error', ['message'], ''),
                                              ('unknown_starttag', ['tag', 'attrs'], ''),
                                              ('unknown_endtag', ['tag'], ''),
                                              ('unknown_charref', ['ref'], ''),
                                              ('unknown_entityref', ['name'], '')],
                                  'properties': ['attributes',
                                                 'elements',
                                                 '__accept_unquoted_attributes',
                                                 '__accept_missing_endtag_name',
                                                 '__map_case',
                                                 '__accept_utf8',
                                                 '__translate_attribute_references',
                                                 '__fixed',
                                                 'rawdata',
                                                 'stack',
                                                 'nomoretags',
                                                 'literal',
                                                 'lineno',
                                                 '__at_start',
                                                 '__seen_doctype',
                                                 '__seen_starttag',
                                                 '__use_namespaces',
                                                 '__namespaces',
                                                 '__xml_namespace_attributes',
                                                 'entitydefs']},
             'xmlrpclib.Binary': {'bases': [],
                                  'constructor': ['data=None'],
                                  'docstring': 'Wrapper for binary data.',
                                  'methods': [('__str__', [], ''),
                                              ('__cmp__', ['other'], ''),
                                              ('decode', ['data'], ''),
                                              ('encode', ['out'], '')],
                                  'properties': ['data']},
             'xmlrpclib.Boolean': {'bases': [],
                                   'constructor': ['value=0'],
                                   'docstring': 'Boolean-value wrapper.\n\n        Use True or False to generate a "boolean" XML-RPC value.\n        ',
                                   'methods': [('encode', ['out'], ''),
                                               ('__cmp__', ['other'], ''),
                                               ('__repr__', [], ''),
                                               ('__int__', [], ''),
                                               ('__nonzero__', [], '')],
                                   'properties': ['value']},
             'xmlrpclib.DateTime': {'bases': [],
                                    'constructor': ['value=0'],
                                    'docstring': "DateTime wrapper for an ISO 8601 string or time tuple or\n    localtime integer value to generate 'dateTime.iso8601' XML-RPC\n    value.\n    ",
                                    'methods': [('__cmp__', ['other'], ''),
                                                ('__str__', [], ''),
                                                ('__repr__', [], ''),
                                                ('decode', ['data'], ''),
                                                ('encode', ['out'], '')],
                                    'properties': ['value']},
             'xmlrpclib.Error': {'bases': ['Exception'],
                                 'constructor': [],
                                 'docstring': 'Base class for client errors.',
                                 'methods': [('__str__', [], '')],
                                 'properties': []},
             'xmlrpclib.ExpatParser': {'bases': [],
                                       'constructor': ['target'],
                                       'docstring': '',
                                       'methods': [('feed', ['data'], ''), ('close', [], '')],
                                       'properties': ['_parser', '_target']},
             'xmlrpclib.Fault': {'bases': ['xmlrpclib.Error'],
                                 'constructor': ['faultCode', 'faultString', '**extra'],
                                 'docstring': 'Indicates an XML-RPC fault package.',
                                 'methods': [('__repr__', [], '')],
                                 'properties': ['faultCode', 'faultString']},
             'xmlrpclib.Marshaller': {'bases': [],
                                      'constructor': ['encoding=None', 'allow_none=0'],
                                      'docstring': 'Generate an XML-RPC params chunk from a Python data structure.\n\n    Create a Marshaller instance for each set of parameters, and use\n    the "dumps" method to convert your data (represented as a tuple)\n    to an XML-RPC params chunk.  To write a fault response, pass a\n    Fault instance instead.  You may prefer to use the "dumps" module\n    function for this purpose.\n    ',
                                      'methods': [('dumps', ['values'], ''),
                                                  ('__dump', ['value', 'write'], ''),
                                                  ('dump_nil', ['value', 'write'], ''),
                                                  ('dump_int', ['value', 'write'], ''),
                                                  ('dump_bool', ['value', 'write'], ''),
                                                  ('dump_long', ['value', 'write'], ''),
                                                  ('dump_double', ['value', 'write'], ''),
                                                  ('dump_string',
                                                   ['value', 'write', 'escape=escape'],
                                                   ''),
                                                  ('dump_unicode',
                                                   ['value', 'write', 'escape=escape'],
                                                   ''),
                                                  ('dump_array', ['value', 'write'], ''),
                                                  ('dump_struct',
                                                   ['value', 'write', 'escape=escape'],
                                                   ''),
                                                  ('dump_datetime', ['value', 'write'], ''),
                                                  ('dump_date', ['value', 'write'], ''),
                                                  ('dump_time', ['value', 'write'], ''),
                                                  ('dump_instance', ['value', 'write'], '')],
                                      'properties': ['memo',
                                                     'data',
                                                     'encoding',
                                                     'allow_none',
                                                     'dispatch',
                                                     'write']},
             'xmlrpclib.MultiCall': {'bases': [],
                                     'constructor': ['server'],
                                     'docstring': 'server -> a object used to boxcar method calls\n\n    server should be a ServerProxy object.\n\n    Methods can be added to the MultiCall using normal\n    method call syntax e.g.:\n\n    multicall = MultiCall(server_proxy)\n    multicall.add(2,3)\n    multicall.get_address("Guido")\n\n    To execute the multicall, call the MultiCall object e.g.:\n\n    add_result, address = multicall()\n    ',
                                     'methods': [('__repr__', [], ''),
                                                 ('__getattr__', ['name'], ''),
                                                 ('__call__', [], '')],
                                     'properties': ['__server', '__call_list', '__str__']},
             'xmlrpclib.MultiCallIterator': {'bases': [],
                                             'constructor': ['results'],
                                             'docstring': 'Iterates over the results of a multicall. Exceptions are\n    thrown in response to xmlrpc faults.',
                                             'methods': [('__getitem__', ['i'], '')],
                                             'properties': ['results']},
             'xmlrpclib.ProtocolError': {'bases': ['xmlrpclib.Error'],
                                         'constructor': ['url', 'errcode', 'errmsg', 'headers'],
                                         'docstring': 'Indicates an HTTP protocol error.',
                                         'methods': [('__repr__', [], '')],
                                         'properties': ['url', 'errcode', 'errmsg', 'headers']},
             'xmlrpclib.ResponseError': {'bases': ['xmlrpclib.Error'],
                                         'constructor': [],
                                         'docstring': 'Indicates a broken response package.',
                                         'methods': [],
                                         'properties': []},
             'xmlrpclib.SafeTransport': {'bases': ['xmlrpclib.Transport'],
                                         'constructor': [],
                                         'docstring': 'Handles an HTTPS transaction to an XML-RPC server.',
                                         'methods': [('make_connection', ['host'], '')],
                                         'properties': []},
             'xmlrpclib.ServerProxy': {'bases': [],
                                       'constructor': ['uri',
                                                       'transport=None',
                                                       'encoding=None',
                                                       'verbose=0',
                                                       'allow_none=0',
                                                       'use_datetime=0'],
                                       'docstring': 'uri [,options] -> a logical connection to an XML-RPC server\n\n    uri is the connection point on the server, given as\n    scheme://host/target.\n\n    The standard implementation always supports the "http" scheme.  If\n    SSL socket support is available (Python 2.0), it also supports\n    "https".\n\n    If the target part and the slash preceding it are both omitted,\n    "/RPC2" is assumed.\n\n    The following options can be given as keyword arguments:\n\n        transport: a transport factory\n        encoding: the request encoding (default is UTF-8)\n\n    All 8-bit strings passed to the server proxy are assumed to use\n    the given encoding.\n    ',
                                       'methods': [('__request', ['methodname', 'params'], ''),
                                                   ('__repr__', [], ''),
                                                   ('__getattr__', ['name'], '')],
                                       'properties': ['__host',
                                                      '__handler',
                                                      '__transport',
                                                      '__encoding',
                                                      '__verbose',
                                                      '__allow_none',
                                                      '__str__']},
             'xmlrpclib.SgmlopParser': {'bases': [],
                                        'constructor': ['target'],
                                        'docstring': '',
                                        'methods': [('close', [], ''),
                                                    ('handle_proc', ['tag', 'attr'], ''),
                                                    ('handle_entityref', ['entity'], '')],
                                        'properties': ['finish_starttag',
                                                       'finish_endtag',
                                                       'handle_data',
                                                       'handle_xml',
                                                       'parser',
                                                       'feed',
                                                       'entity']},
             'xmlrpclib.SlowParser': {'bases': [],
                                      'constructor': ['target'],
                                      'docstring': 'Default XML parser (based on xmllib.XMLParser).',
                                      'methods': [],
                                      'properties': ['handle_xml',
                                                     'unknown_starttag',
                                                     'handle_data',
                                                     'handle_cdata',
                                                     'unknown_endtag']},
             'xmlrpclib.Transport': {'bases': [],
                                     'constructor': ['use_datetime=0'],
                                     'docstring': 'Handles an HTTP transaction to an XML-RPC server.',
                                     'methods': [('request',
                                                  ['host',
                                                   'handler',
                                                   'request_body',
                                                   'verbose=0'],
                                                  ''),
                                                 ('getparser', [], ''),
                                                 ('get_host_info', ['host'], ''),
                                                 ('make_connection', ['host'], ''),
                                                 ('send_request',
                                                  ['connection', 'handler', 'request_body'],
                                                  ''),
                                                 ('send_host', ['connection', 'host'], ''),
                                                 ('send_user_agent', ['connection'], ''),
                                                 ('send_content',
                                                  ['connection', 'request_body'],
                                                  ''),
                                                 ('parse_response', ['file'], ''),
                                                 ('_parse_response', ['file', 'sock'], '')],
                                     'properties': ['user_agent', '_use_datetime', 'verbose']},
             'xmlrpclib.Unmarshaller': {'bases': [],
                                        'constructor': ['use_datetime=0'],
                                        'docstring': 'Unmarshal an XML-RPC response, based on incoming XML event\n    messages (start, data, end).  Call close() to get the resulting\n    data structure.\n\n    Note that this reader is fairly tolerant, and gladly accepts bogus\n    XML-RPC data without complaining (but not bogus XML).\n    ',
                                        'methods': [('close', [], ''),
                                                    ('getmethodname', [], ''),
                                                    ('xml', ['encoding', 'standalone'], ''),
                                                    ('start', ['tag', 'attrs'], ''),
                                                    ('data', ['text'], ''),
                                                    ('end', ['tag', 'join=string.join'], ''),
                                                    ('end_dispatch', ['tag', 'data'], ''),
                                                    ('end_nil', ['data'], ''),
                                                    ('end_boolean', ['data'], ''),
                                                    ('end_int', ['data'], ''),
                                                    ('end_double', ['data'], ''),
                                                    ('end_string', ['data'], ''),
                                                    ('end_array', ['data'], ''),
                                                    ('end_struct', ['data'], ''),
                                                    ('end_base64', ['data'], ''),
                                                    ('end_dateTime', ['data'], ''),
                                                    ('end_value', ['data'], ''),
                                                    ('end_params', ['data'], ''),
                                                    ('end_fault', ['data'], ''),
                                                    ('end_methodName', ['data'], '')],
                                        'properties': ['_type',
                                                       '_stack',
                                                       '_marks',
                                                       '_data',
                                                       '_methodname',
                                                       '_encoding',
                                                       'append',
                                                       '_use_datetime',
                                                       '_value',
                                                       'dispatch']},
             'xmlrpclib._Method': {'bases': [],
                                   'constructor': ['send', 'name'],
                                   'docstring': '',
                                   'methods': [('__getattr__', ['name'], ''),
                                               ('__call__', ['*args'], '')],
                                   'properties': ['__send', '__name']},
             'xmlrpclib._MultiCallMethod': {'bases': [],
                                            'constructor': ['call_list', 'name'],
                                            'docstring': '',
                                            'methods': [('__getattr__', ['name'], ''),
                                                        ('__call__', ['*args'], '')],
                                            'properties': ['__call_list', '__name']},
             'zipfile.BadZipfile': {'bases': ['Exception'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'zipfile.LargeZipFile': {'bases': ['Exception'],
                                      'constructor': [],
                                      'docstring': '\n    Raised when writing a zipfile, the zipfile requires ZIP64 extensions\n    and those extensions are disabled.\n    ',
                                      'methods': [],
                                      'properties': []},
             'zipfile.PyZipFile': {'bases': ['zipfile.ZipFile'],
                                   'constructor': [],
                                   'docstring': 'Class to create ZIP archives with Python library files and packages.',
                                   'methods': [('writepy',
                                                ['pathname', "basename=''"],
                                                'Add all files from "pathname" to the ZIP archive.\n\n        If pathname is a package directory, search the directory and\n        all package subdirectories recursively for all *.py and enter\n        the modules into the archive.  If pathname is a plain\n        directory, listdir *.py and enter all modules.  Else, pathname\n        must be a Python *.py file and the module will be put into the\n        archive.  Added modules are always module.pyo or module.pyc.\n        This method will compile the module.py into module.pyc if\n        necessary.\n        '),
                                               ('_get_codename',
                                                ['pathname', 'basename'],
                                                'Return (filename, archivename) for the path.\n\n        Given a module name path, return the correct file path and\n        archive name, compiling if necessary.  For example, given\n        /python/lib/string, return (/python/lib/string.pyc, string).\n        ')],
                                   'properties': []},
             'zipfile.ZipFile': {'bases': [],
                                 'constructor': ['file',
                                                 "mode='r'",
                                                 'compression=ZIP_STORED',
                                                 'allowZip64=False'],
                                 'docstring': ' Class with methods to open, read, write, close, list zip files.\n\n    z = ZipFile(file, mode="r", compression=ZIP_STORED, allowZip64=True)\n\n    file: Either the path to the file, or a file-like object.\n          If it is a path, the file will be opened and closed by ZipFile.\n    mode: The mode can be either read "r", write "w" or append "a".\n    compression: ZIP_STORED (no compression) or ZIP_DEFLATED (requires zlib).\n    allowZip64: if True ZipFile will create files with ZIP64 extensions when\n                needed, otherwise it will raise an exception when this would\n                be necessary.\n\n    ',
                                 'methods': [('_GetContents',
                                              [],
                                              'Read the directory, making sure we close the file if the format\n        is bad.'),
                                             ('_RealGetContents',
                                              [],
                                              'Read in the table of contents for the ZIP file.'),
                                             ('namelist',
                                              [],
                                              'Return a list of file names in the archive.'),
                                             ('infolist',
                                              [],
                                              'Return a list of class ZipInfo instances for files in the\n        archive.'),
                                             ('printdir',
                                              [],
                                              'Print a table of contents for the zip file.'),
                                             ('testzip',
                                              [],
                                              'Read all the files and check the CRC.'),
                                             ('getinfo',
                                              ['name'],
                                              "Return the instance of ZipInfo given 'name'."),
                                             ('read',
                                              ['name'],
                                              'Return file bytes (as a string) for name.'),
                                             ('_writecheck',
                                              ['zinfo'],
                                              'Check for errors before writing a file to the archive.'),
                                             ('write',
                                              ['filename',
                                               'arcname=None',
                                               'compress_type=None'],
                                              'Put the bytes from filename into the archive under the name\n        arcname.'),
                                             ('writestr',
                                              ['zinfo_or_arcname', 'bytes'],
                                              "Write a file into the archive.  The contents is the string\n        'bytes'.  'zinfo_or_arcname' is either a ZipInfo instance or\n        the name of the file in the archive."),
                                             ('__del__',
                                              [],
                                              'Call the "close()" method in case the user forgot.'),
                                             ('close',
                                              [],
                                              'Close the file, and for mode "w" and "a" write the ending\n        records.')],
                                 'properties': ['fp',
                                                '_allowZip64',
                                                '_didModify',
                                                'debug',
                                                'NameToInfo',
                                                'filelist',
                                                'compression',
                                                'mode',
                                                '_filePassed',
                                                'filename',
                                                'comment',
                                                'start_dir']},
             'zipfile.ZipInfo': {'bases': ['object'],
                                 'constructor': ["filename='NoName'",
                                                 'date_time=(1980, 1, 1, 0, 0, 0)'],
                                 'docstring': 'Class with attributes describing each file in the ZIP archive.',
                                 'methods': [('FileHeader',
                                              [],
                                              'Return the per-file header as a string.'),
                                             ('_decodeExtra', [], '')],
                                 'properties': ['__slots__',
                                                'orig_filename',
                                                'filename',
                                                'date_time',
                                                'compress_type',
                                                'comment',
                                                'extra',
                                                'create_system',
                                                'create_version',
                                                'extract_version',
                                                'reserved',
                                                'flag_bits',
                                                'volume',
                                                'internal_attr',
                                                'external_attr',
                                                'file_size',
                                                'compress_size',
                                                'header_offset']}},
 'CONSTANTS': ['fnmatch.__all__',
               'fnmatch._cache',
               'runpy.__all__',
               'shutil.__all__',
               'shutil.WindowsError',
               'calendar.__all__',
               'calendar.error',
               'calendar.January',
               'calendar.February',
               'calendar.mdays',
               'calendar.day_name',
               'calendar.day_abbr',
               'calendar.month_name',
               'calendar.month_abbr',
               'calendar.MONDAY',
               'calendar.TUESDAY',
               'calendar.WEDNESDAY',
               'calendar.THURSDAY',
               'calendar.FRIDAY',
               'calendar.SATURDAY',
               'calendar.SUNDAY',
               'calendar.c',
               'calendar.firstweekday',
               'calendar.monthcalendar',
               'calendar.prweek',
               'calendar.week',
               'calendar.weekheader',
               'calendar.prmonth',
               'calendar.month',
               'calendar.calendar',
               'calendar.prcal',
               'calendar._colwidth',
               'calendar._spacing',
               'calendar.EPOCH',
               'calendar._EPOCH_ORD',
               'md5.new',
               'md5.blocksize',
               'md5.digest_size',
               'contextlib.__all__',
               'compileall.__all__',
               'compileall.exit_status',
               'poplib.__all__',
               'poplib.POP3_PORT',
               'poplib.POP3_SSL_PORT',
               'poplib.CR',
               'poplib.LF',
               'poplib.CRLF',
               'poplib.a',
               'poplib.numMsgs',
               'poplib.totalSize',
               'poplib.i',
               'poplib.header',
               'poplib.msg',
               'poplib.octets',
               'poplib.line',
               'platform.__copyright__',
               'platform.__version__',
               'platform._libc_search',
               'platform._release_filename',
               'platform._release_version',
               'platform._ver_output',
               'platform._abspath',
               'platform._default_architecture',
               'platform._architecture_split',
               'platform._uname_cache',
               'platform._sys_version_parser',
               'platform._sys_version_cache',
               'platform._platform_cache',
               'platform.terse',
               'platform.aliased',
               'Queue.__all__',
               'repr.__all__',
               'repr.aRepr',
               'repr.repr',
               'gzip.__all__',
               'gzip.FTEXT',
               'gzip.FHCRC',
               'gzip.FEXTRA',
               'gzip.FNAME',
               'gzip.FCOMMENT',
               'gzip.READ',
               'gzip.WRITE',
               'bdb.__all__',
               'dis.__all__',
               'dis._opcodes_all',
               'dis.disco',
               'markupbase._declname_match',
               'markupbase._declstringlit_match',
               'markupbase._commentclose',
               'markupbase._markedsectionclose',
               'markupbase._msmarkedsectionclose',
               'markupbase.re',
               'binhex.__all__',
               'binhex._DID_HEADER',
               'binhex._DID_DATA',
               'binhex._DID_RSRC',
               'binhex.REASONABLY_LARGE',
               'binhex.LINELEN',
               'binhex.RUNCHAR',
               'plistlib.__all__',
               'plistlib._dateParser',
               'plistlib._controlCharPat',
               'plistlib.PLISTHEADER',
               'linecache.__all__',
               'linecache.cache',
               'cgi.__version__',
               'cgi.__all__',
               'cgi.logfile',
               'cgi.logfp',
               'cgi.log',
               'cgi.maxlen',
               'pty.__all__',
               'pty.STDIN_FILENO',
               'pty.STDOUT_FILENO',
               'pty.STDERR_FILENO',
               'pty.CHILD',
               'traceback.__all__',
               'httplib.__all__',
               'httplib.HTTP_PORT',
               'httplib.HTTPS_PORT',
               'httplib._UNKNOWN',
               'httplib._CS_IDLE',
               'httplib._CS_REQ_STARTED',
               'httplib._CS_REQ_SENT',
               'httplib.CONTINUE',
               'httplib.SWITCHING_PROTOCOLS',
               'httplib.PROCESSING',
               'httplib.OK',
               'httplib.CREATED',
               'httplib.ACCEPTED',
               'httplib.NON_AUTHORITATIVE_INFORMATION',
               'httplib.NO_CONTENT',
               'httplib.RESET_CONTENT',
               'httplib.PARTIAL_CONTENT',
               'httplib.MULTI_STATUS',
               'httplib.IM_USED',
               'httplib.MULTIPLE_CHOICES',
               'httplib.MOVED_PERMANENTLY',
               'httplib.FOUND',
               'httplib.SEE_OTHER',
               'httplib.NOT_MODIFIED',
               'httplib.USE_PROXY',
               'httplib.TEMPORARY_REDIRECT',
               'httplib.BAD_REQUEST',
               'httplib.UNAUTHORIZED',
               'httplib.PAYMENT_REQUIRED',
               'httplib.FORBIDDEN',
               'httplib.NOT_FOUND',
               'httplib.METHOD_NOT_ALLOWED',
               'httplib.NOT_ACCEPTABLE',
               'httplib.PROXY_AUTHENTICATION_REQUIRED',
               'httplib.REQUEST_TIMEOUT',
               'httplib.CONFLICT',
               'httplib.GONE',
               'httplib.LENGTH_REQUIRED',
               'httplib.PRECONDITION_FAILED',
               'httplib.REQUEST_ENTITY_TOO_LARGE',
               'httplib.REQUEST_URI_TOO_LONG',
               'httplib.UNSUPPORTED_MEDIA_TYPE',
               'httplib.REQUESTED_RANGE_NOT_SATISFIABLE',
               'httplib.EXPECTATION_FAILED',
               'httplib.UNPROCESSABLE_ENTITY',
               'httplib.LOCKED',
               'httplib.FAILED_DEPENDENCY',
               'httplib.UPGRADE_REQUIRED',
               'httplib.INTERNAL_SERVER_ERROR',
               'httplib.NOT_IMPLEMENTED',
               'httplib.BAD_GATEWAY',
               'httplib.SERVICE_UNAVAILABLE',
               'httplib.GATEWAY_TIMEOUT',
               'httplib.HTTP_VERSION_NOT_SUPPORTED',
               'httplib.INSUFFICIENT_STORAGE',
               'httplib.NOT_EXTENDED',
               'httplib.responses',
               'httplib.MAXAMOUNT',
               'httplib.error',
               'MimeWriter.__all__',
               'locale.__all__',
               'locale.CHAR_MAX',
               'locale.LC_ALL',
               'locale.LC_COLLATE',
               'locale.LC_CTYPE',
               'locale.LC_MESSAGES',
               'locale.LC_MONETARY',
               'locale.LC_NUMERIC',
               'locale.LC_TIME',
               'locale.Error',
               'locale._percent_re',
               'locale._setlocale',
               'locale.locale_encoding_alias',
               'locale.locale_alias',
               'locale.windows_locale',
               'pipes.__all__',
               'pipes.FILEIN_FILEOUT',
               'pipes.STDIN_FILEOUT',
               'pipes.FILEIN_STDOUT',
               'pipes.STDIN_STDOUT',
               'pipes.SOURCE',
               'pipes.SINK',
               'pipes.stepkinds',
               'pipes._safechars',
               'pipes._funnychars',
               'functools.WRAPPER_ASSIGNMENTS',
               'functools.WRAPPER_UPDATES',
               'textwrap.__revision__',
               'textwrap.True',
               'textwrap.False',
               'textwrap.__all__',
               'textwrap._whitespace',
               'textwrap._whitespace_only_re',
               'textwrap._leading_whitespace_re',
               'user.home',
               'user.home',
               'user.home',
               'user.home',
               'user.home',
               'user.pythonrc',
               'user.f',
               'smtpd.__all__',
               'smtpd.program',
               'smtpd.__version__',
               'smtpd.DEBUGSTREAM',
               'smtpd.NEWLINE',
               'smtpd.EMPTYSTRING',
               'smtpd.COMMASPACE',
               'smtpd.options',
               'smtpd.nobody',
               'smtpd.e',
               'smtpd.classname',
               'smtpd.lastdot',
               'smtpd.mod',
               'smtpd.classname',
               'smtpd.class_',
               'smtpd.proxy',
               'htmllib.__all__',
               'warnings.__all__',
               'warnings.filters',
               'warnings.defaultaction',
               'warnings.onceregistry',
               'doctest.__docformat__',
               'doctest.__all__',
               'doctest.OPTIONFLAGS_BY_NAME',
               'doctest.DONT_ACCEPT_TRUE_FOR_1',
               'doctest.DONT_ACCEPT_BLANKLINE',
               'doctest.NORMALIZE_WHITESPACE',
               'doctest.ELLIPSIS',
               'doctest.SKIP',
               'doctest.IGNORE_EXCEPTION_DETAIL',
               'doctest.COMPARISON_FLAGS',
               'doctest.REPORT_UDIFF',
               'doctest.REPORT_CDIFF',
               'doctest.REPORT_NDIFF',
               'doctest.REPORT_ONLY_FIRST_FAILURE',
               'doctest.REPORTING_FLAGS',
               'doctest.BLANKLINE_MARKER',
               'doctest.ELLIPSIS_MARKER',
               'doctest.master',
               'doctest._unittest_reportflags',
               'doctest.__test__',
               'urllib.__all__',
               'urllib.__version__',
               'urllib.MAXFTPCACHE',
               'urllib._urlopener',
               'urllib.ftpcache',
               'urllib._localhost',
               'urllib._thishost',
               'urllib._ftperrors',
               'urllib._noheaders',
               'urllib._typeprog',
               'urllib._hostprog',
               'urllib._userprog',
               'urllib._passwdprog',
               'urllib._portprog',
               'urllib._nportprog',
               'urllib._queryprog',
               'urllib._tagprog',
               'urllib._valueprog',
               'urllib._hextochr',
               'urllib.i',
               'urllib.i',
               'urllib.always_safe',
               'urllib._safemaps',
               'urllib.getproxies',
               'webbrowser.__all__',
               'webbrowser._browsers',
               'webbrowser._tryorder',
               'webbrowser.Netscape',
               'webbrowser._tryorder',
               'webbrowser._browsers',
               'webbrowser.browser',
               'webbrowser._tryorder',
               'webbrowser._browsers',
               'webbrowser._userchoices',
               'webbrowser.cmdline',
               'webbrowser.cmdline',
               'webbrowser.cmdline',
               'webbrowser._userchoices',
               'pickle.__version__',
               'pickle.__all__',
               'pickle.format_version',
               'pickle.compatible_formats',
               'pickle.HIGHEST_PROTOCOL',
               'pickle.mloads',
               'pickle.PyStringMap',
               'pickle.UnicodeType',
               'pickle.MARK',
               'pickle.STOP',
               'pickle.POP',
               'pickle.POP_MARK',
               'pickle.DUP',
               'pickle.FLOAT',
               'pickle.INT',
               'pickle.BININT',
               'pickle.BININT1',
               'pickle.LONG',
               'pickle.BININT2',
               'pickle.NONE',
               'pickle.PERSID',
               'pickle.BINPERSID',
               'pickle.REDUCE',
               'pickle.STRING',
               'pickle.BINSTRING',
               'pickle.SHORT_BINSTRING',
               'pickle.UNICODE',
               'pickle.BINUNICODE',
               'pickle.APPEND',
               'pickle.BUILD',
               'pickle.GLOBAL',
               'pickle.DICT',
               'pickle.EMPTY_DICT',
               'pickle.APPENDS',
               'pickle.GET',
               'pickle.BINGET',
               'pickle.INST',
               'pickle.LONG_BINGET',
               'pickle.LIST',
               'pickle.EMPTY_LIST',
               'pickle.OBJ',
               'pickle.PUT',
               'pickle.BINPUT',
               'pickle.LONG_BINPUT',
               'pickle.SETITEM',
               'pickle.TUPLE',
               'pickle.EMPTY_TUPLE',
               'pickle.SETITEMS',
               'pickle.BINFLOAT',
               'pickle.TRUE',
               'pickle.FALSE',
               'pickle.PROTO',
               'pickle.NEWOBJ',
               'pickle.EXT1',
               'pickle.EXT2',
               'pickle.EXT4',
               'pickle.TUPLE1',
               'pickle.TUPLE2',
               'pickle.TUPLE3',
               'pickle.NEWTRUE',
               'pickle.NEWFALSE',
               'pickle.LONG1',
               'pickle.LONG4',
               'pickle._tuplesize2code',
               'pickle.x',
               'pickle.x',
               'pickle.classmap',
               '_threading_local.__all__',
               'string.whitespace',
               'string.lowercase',
               'string.uppercase',
               'string.letters',
               'string.ascii_lowercase',
               'string.ascii_uppercase',
               'string.ascii_letters',
               'string.digits',
               'string.hexdigits',
               'string.octdigits',
               'string.punctuation',
               'string.printable',
               'string.l',
               'string._idmap',
               'string.l',
               'string._idmapL',
               'string.index_error',
               'string.atoi_error',
               'string.atof_error',
               'string.atol_error',
               'string.splitfields',
               'string.joinfields',
               'string._float',
               'string._int',
               'string._long',
               'string.letters',
               'telnetlib.__all__',
               'telnetlib.DEBUGLEVEL',
               'telnetlib.TELNET_PORT',
               'telnetlib.IAC',
               'telnetlib.DONT',
               'telnetlib.DO',
               'telnetlib.WONT',
               'telnetlib.WILL',
               'telnetlib.theNULL',
               'telnetlib.SE',
               'telnetlib.NOP',
               'telnetlib.DM',
               'telnetlib.BRK',
               'telnetlib.IP',
               'telnetlib.AO',
               'telnetlib.AYT',
               'telnetlib.EC',
               'telnetlib.EL',
               'telnetlib.GA',
               'telnetlib.SB',
               'telnetlib.BINARY',
               'telnetlib.ECHO',
               'telnetlib.RCP',
               'telnetlib.SGA',
               'telnetlib.NAMS',
               'telnetlib.STATUS',
               'telnetlib.TM',
               'telnetlib.RCTE',
               'telnetlib.NAOL',
               'telnetlib.NAOP',
               'telnetlib.NAOCRD',
               'telnetlib.NAOHTS',
               'telnetlib.NAOHTD',
               'telnetlib.NAOFFD',
               'telnetlib.NAOVTS',
               'telnetlib.NAOVTD',
               'telnetlib.NAOLFD',
               'telnetlib.XASCII',
               'telnetlib.LOGOUT',
               'telnetlib.BM',
               'telnetlib.DET',
               'telnetlib.SUPDUP',
               'telnetlib.SUPDUPOUTPUT',
               'telnetlib.SNDLOC',
               'telnetlib.TTYPE',
               'telnetlib.EOR',
               'telnetlib.TUID',
               'telnetlib.OUTMRK',
               'telnetlib.TTYLOC',
               'telnetlib.VT3270REGIME',
               'telnetlib.X3PAD',
               'telnetlib.NAWS',
               'telnetlib.TSPEED',
               'telnetlib.LFLOW',
               'telnetlib.LINEMODE',
               'telnetlib.XDISPLOC',
               'telnetlib.OLD_ENVIRON',
               'telnetlib.AUTHENTICATION',
               'telnetlib.ENCRYPT',
               'telnetlib.NEW_ENVIRON',
               'telnetlib.TN3270E',
               'telnetlib.XAUTH',
               'telnetlib.CHARSET',
               'telnetlib.RSP',
               'telnetlib.COM_PORT_OPTION',
               'telnetlib.SUPPRESS_LOCAL_ECHO',
               'telnetlib.TLS',
               'telnetlib.KERMIT',
               'telnetlib.SEND_URL',
               'telnetlib.FORWARD_X',
               'telnetlib.PRAGMA_LOGON',
               'telnetlib.SSPI_LOGON',
               'telnetlib.PRAGMA_HEARTBEAT',
               'telnetlib.EXOPL',
               'telnetlib.NOOPT',
               'pprint.__all__',
               'pprint._commajoin',
               'pprint._id',
               'pprint._len',
               'pprint._type',
               'timeit.itertools',
               'timeit.__all__',
               'timeit.dummy_src_name',
               'timeit.default_number',
               'timeit.default_repeat',
               'timeit.default_timer',
               'timeit.default_timer',
               'timeit.template',
               'threading.__all__',
               'threading._start_new_thread',
               'threading._allocate_lock',
               'threading._get_ident',
               'threading.ThreadError',
               'threading.thread',
               'threading._VERBOSE',
               'threading._profile_hook',
               'threading._trace_hook',
               'threading.Lock',
               'threading._counter',
               'threading._active_limbo_lock',
               'threading._active',
               'threading._limbo',
               'threading._shutdown',
               'gopherlib.__all__',
               'gopherlib.DEF_SELECTOR',
               'gopherlib.DEF_HOST',
               'gopherlib.DEF_PORT',
               'gopherlib.A_TEXT',
               'gopherlib.A_MENU',
               'gopherlib.A_CSO',
               'gopherlib.A_ERROR',
               'gopherlib.A_MACBINHEX',
               'gopherlib.A_PCBINHEX',
               'gopherlib.A_UUENCODED',
               'gopherlib.A_INDEX',
               'gopherlib.A_TELNET',
               'gopherlib.A_BINARY',
               'gopherlib.A_DUPLICATE',
               'gopherlib.A_SOUND',
               'gopherlib.A_EVENT',
               'gopherlib.A_CALENDAR',
               'gopherlib.A_HTML',
               'gopherlib.A_TN3270',
               'gopherlib.A_MIME',
               'gopherlib.A_IMAGE',
               'gopherlib.A_WHOIS',
               'gopherlib.A_QUERY',
               'gopherlib.A_GIF',
               'gopherlib.A_HTML',
               'gopherlib.A_WWW',
               'gopherlib.A_PLUS_IMAGE',
               'gopherlib.A_PLUS_MOVIE',
               'gopherlib.A_PLUS_SOUND',
               'gopherlib._names',
               'gopherlib._type_to_name_map',
               'gopherlib.CRLF',
               'gopherlib.TAB',
               'sgmllib.__all__',
               'sgmllib.interesting',
               'sgmllib.incomplete',
               'sgmllib.entityref',
               'sgmllib.charref',
               'sgmllib.starttagopen',
               'sgmllib.shorttagopen',
               'sgmllib.shorttag',
               'sgmllib.piclose',
               'sgmllib.endbracket',
               'sgmllib.tagfind',
               'sgmllib.attrfind',
               'Bastion.__all__',
               'hashlib.__doc__',
               'hashlib.new',
               'hashlib.opensslFuncName',
               'hashlib.funcName',
               'hashlib.f',
               'hashlib.f',
               'hashlib.opensslFuncName',
               'hashlib.funcName',
               'hashlib.new',
               'hashlib.md5',
               'hashlib.sha1',
               'hashlib.sha224',
               'hashlib.sha256',
               'hashlib.sha384',
               'hashlib.sha512',
               'gettext.__all__',
               'gettext._default_localedir',
               'gettext._translations',
               'gettext._localedirs',
               'gettext._localecodesets',
               'gettext._current_domain',
               'gettext.Catalog',
               'commands.__all__',
               'tabnanny.__version__',
               'tabnanny.__all__',
               'tabnanny.verbose',
               'tabnanny.filename_only',
               'codeop._features',
               'codeop.fname',
               'codeop.__all__',
               'codeop.PyCF_DONT_IMPLY_DEDENT',
               'uu.__all__',
               'DocXMLRPCServer.server',
               'tarfile.__version__',
               'tarfile.version',
               'tarfile.__author__',
               'tarfile.__date__',
               'tarfile.__cvsid__',
               'tarfile.__credits__',
               'tarfile.grp',
               'tarfile.pwd',
               'tarfile.__all__',
               'tarfile.NUL',
               'tarfile.BLOCKSIZE',
               'tarfile.RECORDSIZE',
               'tarfile.MAGIC',
               'tarfile.VERSION',
               'tarfile.LENGTH_NAME',
               'tarfile.LENGTH_LINK',
               'tarfile.LENGTH_PREFIX',
               'tarfile.MAXSIZE_MEMBER',
               'tarfile.REGTYPE',
               'tarfile.AREGTYPE',
               'tarfile.LNKTYPE',
               'tarfile.SYMTYPE',
               'tarfile.CHRTYPE',
               'tarfile.BLKTYPE',
               'tarfile.DIRTYPE',
               'tarfile.FIFOTYPE',
               'tarfile.CONTTYPE',
               'tarfile.GNUTYPE_LONGNAME',
               'tarfile.GNUTYPE_LONGLINK',
               'tarfile.GNUTYPE_SPARSE',
               'tarfile.SUPPORTED_TYPES',
               'tarfile.REGULAR_TYPES',
               'tarfile.S_IFLNK',
               'tarfile.S_IFREG',
               'tarfile.S_IFBLK',
               'tarfile.S_IFDIR',
               'tarfile.S_IFCHR',
               'tarfile.S_IFIFO',
               'tarfile.TSUID',
               'tarfile.TSGID',
               'tarfile.TSVTX',
               'tarfile.TUREAD',
               'tarfile.TUWRITE',
               'tarfile.TUEXEC',
               'tarfile.TGREAD',
               'tarfile.TGWRITE',
               'tarfile.TGEXEC',
               'tarfile.TOREAD',
               'tarfile.TOWRITE',
               'tarfile.TOEXEC',
               'tarfile.filemode_table',
               'tarfile.normpath',
               'tarfile.normpath',
               'tarfile.TAR_PLAIN',
               'tarfile.TAR_GZIPPED',
               'tarfile.open',
               'Cookie.__all__',
               'Cookie._nulljoin',
               'Cookie._semispacejoin',
               'Cookie._spacejoin',
               'Cookie._LegalChars',
               'Cookie._Translator',
               'Cookie._idmap',
               'Cookie.x',
               'Cookie._OctalPatt',
               'Cookie._QuotePatt',
               'Cookie._weekdayname',
               'Cookie._monthname',
               'Cookie._LegalCharsPatt',
               'Cookie._CookiePattern',
               'Cookie.Cookie',
               'xmlrpclib.unicode',
               'xmlrpclib.datetime',
               'xmlrpclib._bool_is_builtin',
               'xmlrpclib._bool_is_builtin',
               'xmlrpclib.__version__',
               'xmlrpclib.MAXINT',
               'xmlrpclib.MININT',
               'xmlrpclib.PARSE_ERROR',
               'xmlrpclib.SERVER_ERROR',
               'xmlrpclib.APPLICATION_ERROR',
               'xmlrpclib.SYSTEM_ERROR',
               'xmlrpclib.TRANSPORT_ERROR',
               'xmlrpclib.NOT_WELLFORMED_ERROR',
               'xmlrpclib.UNSUPPORTED_ENCODING',
               'xmlrpclib.INVALID_ENCODING_CHAR',
               'xmlrpclib.INVALID_XMLRPC',
               'xmlrpclib.METHOD_NOT_FOUND',
               'xmlrpclib.INVALID_METHOD_PARAMS',
               'xmlrpclib.INTERNAL_ERROR',
               'xmlrpclib.boolean',
               'xmlrpclib.Boolean',
               'xmlrpclib.True',
               'xmlrpclib.False',
               'xmlrpclib.True',
               'xmlrpclib.False',
               'xmlrpclib.WRAPPERS',
               'xmlrpclib.WRAPPERS',
               'xmlrpclib.FastParser',
               'xmlrpclib.FastUnmarshaller',
               'xmlrpclib.FastParser',
               'xmlrpclib.FastUnmarshaller',
               'xmlrpclib.FastMarshaller',
               'xmlrpclib.FastMarshaller',
               'xmlrpclib.SgmlopParser',
               'xmlrpclib.ExpatParser',
               'xmlrpclib.Server',
               'xmlrpclib.server',
               'xmlrpclib.v',
               'xmlrpclib.multi',
               'xmlrpclib.response',
               'xmlrpclib.v',
               'statvfs.F_BSIZE',
               'statvfs.F_FRSIZE',
               'statvfs.F_BLOCKS',
               'statvfs.F_BFREE',
               'statvfs.F_BAVAIL',
               'statvfs.F_FILES',
               'statvfs.F_FFREE',
               'statvfs.F_FAVAIL',
               'statvfs.F_FLAG',
               'statvfs.F_NAMEMAX',
               'ihooks.__all__',
               'ihooks.VERBOSE',
               'ihooks.BUILTIN_MODULE',
               'ihooks.FROZEN_MODULE',
               'ihooks.default_importer',
               'ihooks.current_importer',
               'sre_constants.MAGIC',
               'sre_constants.MAXREPEAT',
               'sre_constants.FAILURE',
               'sre_constants.SUCCESS',
               'sre_constants.ANY',
               'sre_constants.ANY_ALL',
               'sre_constants.ASSERT',
               'sre_constants.ASSERT_NOT',
               'sre_constants.AT',
               'sre_constants.BIGCHARSET',
               'sre_constants.BRANCH',
               'sre_constants.CALL',
               'sre_constants.CATEGORY',
               'sre_constants.CHARSET',
               'sre_constants.GROUPREF',
               'sre_constants.GROUPREF_IGNORE',
               'sre_constants.GROUPREF_EXISTS',
               'sre_constants.IN',
               'sre_constants.IN_IGNORE',
               'sre_constants.INFO',
               'sre_constants.JUMP',
               'sre_constants.LITERAL',
               'sre_constants.LITERAL_IGNORE',
               'sre_constants.MARK',
               'sre_constants.MAX_REPEAT',
               'sre_constants.MAX_UNTIL',
               'sre_constants.MIN_REPEAT',
               'sre_constants.MIN_UNTIL',
               'sre_constants.NEGATE',
               'sre_constants.NOT_LITERAL',
               'sre_constants.NOT_LITERAL_IGNORE',
               'sre_constants.RANGE',
               'sre_constants.REPEAT',
               'sre_constants.REPEAT_ONE',
               'sre_constants.SUBPATTERN',
               'sre_constants.MIN_REPEAT_ONE',
               'sre_constants.AT_BEGINNING',
               'sre_constants.AT_BEGINNING_LINE',
               'sre_constants.AT_BEGINNING_STRING',
               'sre_constants.AT_BOUNDARY',
               'sre_constants.AT_NON_BOUNDARY',
               'sre_constants.AT_END',
               'sre_constants.AT_END_LINE',
               'sre_constants.AT_END_STRING',
               'sre_constants.AT_LOC_BOUNDARY',
               'sre_constants.AT_LOC_NON_BOUNDARY',
               'sre_constants.AT_UNI_BOUNDARY',
               'sre_constants.AT_UNI_NON_BOUNDARY',
               'sre_constants.CATEGORY_DIGIT',
               'sre_constants.CATEGORY_NOT_DIGIT',
               'sre_constants.CATEGORY_SPACE',
               'sre_constants.CATEGORY_NOT_SPACE',
               'sre_constants.CATEGORY_WORD',
               'sre_constants.CATEGORY_NOT_WORD',
               'sre_constants.CATEGORY_LINEBREAK',
               'sre_constants.CATEGORY_NOT_LINEBREAK',
               'sre_constants.CATEGORY_LOC_WORD',
               'sre_constants.CATEGORY_LOC_NOT_WORD',
               'sre_constants.CATEGORY_UNI_DIGIT',
               'sre_constants.CATEGORY_UNI_NOT_DIGIT',
               'sre_constants.CATEGORY_UNI_SPACE',
               'sre_constants.CATEGORY_UNI_NOT_SPACE',
               'sre_constants.CATEGORY_UNI_WORD',
               'sre_constants.CATEGORY_UNI_NOT_WORD',
               'sre_constants.CATEGORY_UNI_LINEBREAK',
               'sre_constants.CATEGORY_UNI_NOT_LINEBREAK',
               'sre_constants.OPCODES',
               'sre_constants.ATCODES',
               'sre_constants.CHCODES',
               'sre_constants.OPCODES',
               'sre_constants.ATCODES',
               'sre_constants.CHCODES',
               'sre_constants.OP_IGNORE',
               'sre_constants.AT_MULTILINE',
               'sre_constants.AT_LOCALE',
               'sre_constants.AT_UNICODE',
               'sre_constants.CH_LOCALE',
               'sre_constants.CH_UNICODE',
               'sre_constants.SRE_FLAG_TEMPLATE',
               'sre_constants.SRE_FLAG_IGNORECASE',
               'sre_constants.SRE_FLAG_LOCALE',
               'sre_constants.SRE_FLAG_MULTILINE',
               'sre_constants.SRE_FLAG_DOTALL',
               'sre_constants.SRE_FLAG_UNICODE',
               'sre_constants.SRE_FLAG_VERBOSE',
               'sre_constants.SRE_FLAG_DEBUG',
               'sre_constants.SRE_INFO_PREFIX',
               'sre_constants.SRE_INFO_LITERAL',
               'sre_constants.SRE_INFO_CHARSET',
               'sre_constants.f',
               'ConfigParser.__all__',
               'ConfigParser.DEFAULTSECT',
               'ConfigParser.MAX_INTERPOLATION_DEPTH',
               'cookielib.__all__',
               'cookielib.debug',
               'cookielib.logger',
               'cookielib.DEFAULT_HTTP_PORT',
               'cookielib.MISSING_FILENAME_TEXT',
               'cookielib.EPOCH_YEAR',
               'cookielib.DAYS',
               'cookielib.MONTHS',
               'cookielib.MONTHS_LOWER',
               'cookielib.month',
               'cookielib.UTC_ZONES',
               'cookielib.TIMEZONE_RE',
               'cookielib.STRICT_DATE_RE',
               'cookielib.WEEKDAY_RE',
               'cookielib.LOOSE_HTTP_DATE_RE',
               'cookielib.ISO_DATE_RE',
               'cookielib.HEADER_TOKEN_RE',
               'cookielib.HEADER_QUOTED_VALUE_RE',
               'cookielib.HEADER_VALUE_RE',
               'cookielib.HEADER_ESCAPE_RE',
               'cookielib.HEADER_JOIN_ESCAPE_RE',
               'cookielib.IPV4_RE',
               'cookielib.cut_port_re',
               'cookielib.HTTP_PATH_SAFE',
               'cookielib.ESCAPED_CHAR_RE',
               'tty.__all__',
               'tty.IFLAG',
               'tty.OFLAG',
               'tty.CFLAG',
               'tty.LFLAG',
               'tty.ISPEED',
               'tty.OSPEED',
               'tty.CC',
               'posixpath.__all__',
               'posixpath.curdir',
               'posixpath.pardir',
               'posixpath.extsep',
               'posixpath.sep',
               'posixpath.pathsep',
               'posixpath.defpath',
               'posixpath.altsep',
               'posixpath.devnull',
               'posixpath._varprog',
               'posixpath.supports_unicode_filenames',
               'dircache.__all__',
               'dircache.cache',
               'dircache.opendir',
               'stringprep.b1_set',
               'stringprep.b3_exceptions',
               'stringprep.c22_specials',
               'stringprep.c6_set',
               'stringprep.c7_set',
               'stringprep.c8_set',
               'stringprep.c9_set',
               'cmd.__all__',
               'cmd.PROMPT',
               'cmd.IDENTCHARS',
               'code.__all__',
               'opcode.__all__',
               'opcode.cmp_op',
               'opcode.hasconst',
               'opcode.hasname',
               'opcode.hasjrel',
               'opcode.hasjabs',
               'opcode.haslocal',
               'opcode.hascompare',
               'opcode.hasfree',
               'opcode.opmap',
               'opcode.opname',
               'opcode.op',
               'opcode.op',
               'opcode.HAVE_ARGUMENT',
               'opcode.EXTENDED_ARG',
               'opcode.def_op',
               'opcode.name_op',
               'opcode.jrel_op',
               'opcode.jabs_op',
               'urllib2.__version__',
               'urllib2._opener',
               'urllib2._cut_port_re',
               'SimpleHTTPServer.__version__',
               'SimpleHTTPServer.__all__',
               'glob.__all__',
               'glob.magic_check',
               'trace.pickle',
               'trace.PRAGMA_NOCOVER',
               'trace.rx_blank',
               'py_compile.MAGIC',
               'py_compile.__all__',
               'wave.__all__',
               'wave.WAVE_FORMAT_PCM',
               'wave._array_fmts',
               'wave.big_endian',
               'wave.big_endian',
               'wave.openfp',
               'zipfile.zlib',
               'zipfile.__all__',
               'zipfile.error',
               'zipfile.ZIP64_LIMIT',
               'zipfile.ZIP_STORED',
               'zipfile.ZIP_DEFLATED',
               'zipfile.structEndArchive',
               'zipfile.stringEndArchive',
               'zipfile.structCentralDir',
               'zipfile.stringCentralDir',
               'zipfile.structFileHeader',
               'zipfile.stringFileHeader',
               'zipfile.structEndArchive64Locator',
               'zipfile.stringEndArchive64Locator',
               'zipfile.structEndArchive64',
               'zipfile.stringEndArchive64',
               'zipfile._CD_SIGNATURE',
               'zipfile._CD_CREATE_VERSION',
               'zipfile._CD_CREATE_SYSTEM',
               'zipfile._CD_EXTRACT_VERSION',
               'zipfile._CD_EXTRACT_SYSTEM',
               'zipfile._CD_FLAG_BITS',
               'zipfile._CD_COMPRESS_TYPE',
               'zipfile._CD_TIME',
               'zipfile._CD_DATE',
               'zipfile._CD_CRC',
               'zipfile._CD_COMPRESSED_SIZE',
               'zipfile._CD_UNCOMPRESSED_SIZE',
               'zipfile._CD_FILENAME_LENGTH',
               'zipfile._CD_EXTRA_FIELD_LENGTH',
               'zipfile._CD_COMMENT_LENGTH',
               'zipfile._CD_DISK_NUMBER_START',
               'zipfile._CD_INTERNAL_FILE_ATTRIBUTES',
               'zipfile._CD_EXTERNAL_FILE_ATTRIBUTES',
               'zipfile._CD_LOCAL_HEADER_OFFSET',
               'zipfile._FH_SIGNATURE',
               'zipfile._FH_EXTRACT_VERSION',
               'zipfile._FH_EXTRACT_SYSTEM',
               'zipfile._FH_GENERAL_PURPOSE_FLAG_BITS',
               'zipfile._FH_COMPRESSION_METHOD',
               'zipfile._FH_LAST_MOD_TIME',
               'zipfile._FH_LAST_MOD_DATE',
               'zipfile._FH_CRC',
               'zipfile._FH_COMPRESSED_SIZE',
               'zipfile._FH_UNCOMPRESSED_SIZE',
               'zipfile._FH_FILENAME_LENGTH',
               'zipfile._FH_EXTRA_FIELD_LENGTH',
               'os._names',
               'os.__all__',
               'os.name',
               'os.linesep',
               'os.posix',
               'os.name',
               'os.linesep',
               'os.nt',
               'os.name',
               'os.linesep',
               'os.os2',
               'os.name',
               'os.linesep',
               'os.mac',
               'os.name',
               'os.linesep',
               'os.ce',
               'os.name',
               'os.linesep',
               'os.riscos',
               'os._names',
               'os.SEEK_SET',
               'os.SEEK_CUR',
               'os.SEEK_END',
               'os.environ',
               'os.environ',
               'os.P_WAIT',
               'os.P_NOWAIT',
               'os.P_NOWAITO',
               'StringIO.EINVAL',
               'StringIO.__all__',
               'HTMLParser.interesting_normal',
               'HTMLParser.interesting_cdata',
               'HTMLParser.incomplete',
               'HTMLParser.entityref',
               'HTMLParser.charref',
               'HTMLParser.starttagopen',
               'HTMLParser.piclose',
               'HTMLParser.commentclose',
               'HTMLParser.tagfind',
               'HTMLParser.attrfind',
               'HTMLParser.locatestarttagend',
               'HTMLParser.endendtag',
               'HTMLParser.endtagfind',
               'socket._have_ssl',
               'socket._have_ssl',
               'socket.EBADF',
               'socket.__all__',
               'socket._realsocket',
               'socket._realssl',
               'socket.errorTab',
               'socket._socketmethods',
               'socket._socketmethods',
               'socket._delegate_methods',
               'socket.socket',
               'socket.SocketType',
               'random.__all__',
               'random.NV_MAGICCONST',
               'random.TWOPI',
               'random.LOG4',
               'random.SG_MAGICCONST',
               'random.BPF',
               'random.RECIP_BPF',
               'random._inst',
               'random.seed',
               'random.random',
               'random.uniform',
               'random.randint',
               'random.choice',
               'random.randrange',
               'random.sample',
               'random.shuffle',
               'random.normalvariate',
               'random.lognormvariate',
               'random.expovariate',
               'random.vonmisesvariate',
               'random.gammavariate',
               'random.gauss',
               'random.betavariate',
               'random.paretovariate',
               'random.weibullvariate',
               'random.getstate',
               'random.setstate',
               'random.jumpahead',
               'random.getrandbits',
               'dummy_threading.holding_thread',
               'dummy_threading.holding_threading',
               'dummy_threading.holding__threading_local',
               'dummy_threading.held_thread',
               'dummy_threading.holding_thread',
               'dummy_threading.held_threading',
               'dummy_threading.holding_threading',
               'dummy_threading.held__threading_local',
               'dummy_threading.holding__threading_local',
               'dummy_threading.held_threading',
               'dummy_threading.holding_threading',
               'dummy_threading.held__threading_local',
               'dummy_threading.holding__threading_local',
               'dummy_threading.held_thread',
               'dummy_threading.holding_thread',
               'dummy_threading.dummy_thread',
               'dummy_threading.sys_modules',
               'SocketServer.__version__',
               'SocketServer.__all__',
               'rlcompleter.__all__',
               'popen2.__all__',
               'popen2.MAXFD',
               'popen2.MAXFD',
               'popen2._active',
               'popen2.Popen3',
               'popen2.Popen4',
               'hmac.digest_size',
               'hmac._secret_backdoor_key',
               'copy.error',
               'copy.PyStringMap',
               'copy.__all__',
               'copy._copy_dispatch',
               'copy.d',
               'copy.t',
               'copy.name',
               'copy.t',
               'copy.t',
               'copy.d',
               'copy._deepcopy_dispatch',
               'copy.d',
               'copy.d',
               'copy.types',
               'pdb._repr',
               'pdb._saferepr',
               'pdb.__all__',
               'pdb.line_prefix',
               'pdb.TESTCMD',
               'sched.__all__',
               'mailbox.fcntl',
               'mailbox.__all__',
               'unittest.__author__',
               'unittest.__email__',
               'unittest.__version__',
               'unittest.__all__',
               'unittest.False',
               'unittest.True',
               'unittest.__metaclass__',
               'unittest.__unittest',
               'unittest.defaultTestLoader',
               'unittest.main',
               'fpformat.__all__',
               'fpformat.decoder',
               'fpformat.NotANumber',
               'optparse.__version__',
               'optparse.__all__',
               'optparse.__copyright__',
               'optparse._',
               'optparse._builtin_cvt',
               'optparse.NO_DEFAULT',
               'optparse.SUPPRESS_HELP',
               'optparse.SUPPRESS_USAGE',
               'optparse.True',
               'optparse.False',
               'optparse.make_option',
               'token.ENDMARKER',
               'token.NAME',
               'token.NUMBER',
               'token.STRING',
               'token.NEWLINE',
               'token.INDENT',
               'token.DEDENT',
               'token.LPAR',
               'token.RPAR',
               'token.LSQB',
               'token.RSQB',
               'token.COLON',
               'token.COMMA',
               'token.SEMI',
               'token.PLUS',
               'token.MINUS',
               'token.STAR',
               'token.SLASH',
               'token.VBAR',
               'token.AMPER',
               'token.LESS',
               'token.GREATER',
               'token.EQUAL',
               'token.DOT',
               'token.PERCENT',
               'token.BACKQUOTE',
               'token.LBRACE',
               'token.RBRACE',
               'token.EQEQUAL',
               'token.NOTEQUAL',
               'token.LESSEQUAL',
               'token.GREATEREQUAL',
               'token.TILDE',
               'token.CIRCUMFLEX',
               'token.LEFTSHIFT',
               'token.RIGHTSHIFT',
               'token.DOUBLESTAR',
               'token.PLUSEQUAL',
               'token.MINEQUAL',
               'token.STAREQUAL',
               'token.SLASHEQUAL',
               'token.PERCENTEQUAL',
               'token.AMPEREQUAL',
               'token.VBAREQUAL',
               'token.CIRCUMFLEXEQUAL',
               'token.LEFTSHIFTEQUAL',
               'token.RIGHTSHIFTEQUAL',
               'token.DOUBLESTAREQUAL',
               'token.DOUBLESLASH',
               'token.DOUBLESLASHEQUAL',
               'token.AT',
               'token.OP',
               'token.ERRORTOKEN',
               'token.N_TOKENS',
               'token.NT_OFFSET',
               'token.tok_name',
               'token._name',
               'token._value',
               'netrc.__all__',
               'multifile.__all__',
               'subprocess.mswindows',
               'subprocess.__all__',
               'subprocess.MAXFD',
               'subprocess.MAXFD',
               'subprocess.False',
               'subprocess.True',
               'subprocess._active',
               'subprocess.PIPE',
               'subprocess.STDOUT',
               'mailcap.__all__',
               'bisect.insort',
               'bisect.bisect',
               'toaiff.__all__',
               'toaiff.table',
               'toaiff.t',
               'toaiff.t',
               'toaiff.t',
               'toaiff.t',
               'toaiff.t',
               'toaiff.t',
               'toaiff.t',
               'toaiff.uncompress',
               'pkgutil.__all__',
               'pkgutil.iter_importer_modules',
               'audiodev.__all__',
               'ntpath.__all__',
               'ntpath.curdir',
               'ntpath.pardir',
               'ntpath.extsep',
               'ntpath.sep',
               'ntpath.pathsep',
               'ntpath.altsep',
               'ntpath.defpath',
               'ntpath.defpath',
               'ntpath.altsep',
               'ntpath.devnull',
               'ntpath.lexists',
               'ntpath.realpath',
               'ntpath.supports_unicode_filenames',
               'difflib.__all__',
               'difflib._file_template',
               'difflib._styles',
               'difflib._table_template',
               'difflib._legend',
               'difflib.re',
               'types.NoneType',
               'types.TypeType',
               'types.ObjectType',
               'types.IntType',
               'types.LongType',
               'types.FloatType',
               'types.BooleanType',
               'types.ComplexType',
               'types.StringType',
               'types.UnicodeType',
               'types.StringTypes',
               'types.StringTypes',
               'types.BufferType',
               'types.TupleType',
               'types.ListType',
               'types.DictType',
               'types.DictionaryType',
               'types.FunctionType',
               'types.LambdaType',
               'types.CodeType',
               'types.GeneratorType',
               'types.ClassType',
               'types.UnboundMethodType',
               'types._x',
               'types.InstanceType',
               'types.MethodType',
               'types.BuiltinFunctionType',
               'types.BuiltinMethodType',
               'types.ModuleType',
               'types.FileType',
               'types.XRangeType',
               'types.tb',
               'types.TracebackType',
               'types.FrameType',
               'types.tb',
               'types.tb',
               'types.SliceType',
               'types.EllipsisType',
               'types.DictProxyType',
               'types.NotImplementedType',
               'types.GetSetDescriptorType',
               'types.MemberDescriptorType',
               'types._types',
               'types.sys',
               'types._f',
               'types._g',
               'types._C',
               'types._x',
               'pickletools.__all__',
               'pickletools.UP_TO_NEWLINE',
               'pickletools.TAKEN_FROM_ARGUMENT1',
               'pickletools.TAKEN_FROM_ARGUMENT4',
               'pickletools.uint1',
               'pickletools.uint2',
               'pickletools.int4',
               'pickletools.stringnl',
               'pickletools.stringnl_noescape',
               'pickletools.stringnl_noescape_pair',
               'pickletools.string4',
               'pickletools.string1',
               'pickletools.unicodestringnl',
               'pickletools.unicodestring4',
               'pickletools.decimalnl_short',
               'pickletools.decimalnl_long',
               'pickletools.floatnl',
               'pickletools.float8',
               'pickletools.long1',
               'pickletools.long4',
               'pickletools.pyint',
               'pickletools.pylong',
               'pickletools.pyinteger_or_bool',
               'pickletools.pybool',
               'pickletools.pyfloat',
               'pickletools.pystring',
               'pickletools.pyunicode',
               'pickletools.pynone',
               'pickletools.pytuple',
               'pickletools.pylist',
               'pickletools.pydict',
               'pickletools.anyobject',
               'pickletools.markobject',
               'pickletools.stackslice',
               'pickletools.I',
               'pickletools.opcodes',
               'pickletools.I',
               'pickletools.name2i',
               'pickletools.code2i',
               'pickletools.i',
               'pickletools.d',
               'pickletools.name2i',
               'pickletools.code2i',
               'pickletools.i',
               'pickletools.d',
               'pickletools.code2op',
               'pickletools.d',
               'pickletools.d',
               'pickletools.assure_pickle_consistency',
               'pickletools._dis_test',
               'pickletools._memo_test',
               'pickletools.__test__',
               'pyclbr.__all__',
               'pyclbr._modules',
               'sndhdr.__all__',
               'sndhdr.tests',
               'rexec.__all__',
               'rexec.TEMPLATE',
               'rexec.RModuleLoader',
               'rexec.RModuleImporter',
               'sets.True',
               'sets.False',
               'sets.__all__',
               'sre_parse.SPECIAL_CHARS',
               'sre_parse.REPEAT_CHARS',
               'sre_parse.DIGITS',
               'sre_parse.OCTDIGITS',
               'sre_parse.HEXDIGITS',
               'sre_parse.WHITESPACE',
               'sre_parse.ESCAPES',
               'sre_parse.CATEGORIES',
               'sre_parse.FLAGS',
               'sre_parse._PATTERNENDERS',
               'sre_parse._ASSERTCHARS',
               'sre_parse._LOOKBEHINDASSERTCHARS',
               'sre_parse._REPEATCODES',
               'xmllib.warnings',
               'xmllib.version',
               'xmllib._S',
               'xmllib._opS',
               'xmllib._Name',
               'xmllib._QStr',
               'xmllib.illegal',
               'xmllib.interesting',
               'xmllib.amp',
               'xmllib.ref',
               'xmllib.entityref',
               'xmllib.charref',
               'xmllib.space',
               'xmllib.newline',
               'xmllib.attrfind',
               'xmllib.starttagopen',
               'xmllib.starttagend',
               'xmllib.starttagmatch',
               'xmllib.endtagopen',
               'xmllib.endbracket',
               'xmllib.endbracketfind',
               'xmllib.tagfind',
               'xmllib.cdataopen',
               'xmllib.cdataclose',
               'xmllib._SystemLiteral',
               'xmllib._PublicLiteral',
               'xmllib._ExternalId',
               'xmllib.doctype',
               'xmllib.xmldecl',
               'xmllib.procopen',
               'xmllib.procclose',
               'xmllib.commentopen',
               'xmllib.commentclose',
               'xmllib.doubledash',
               'xmllib.attrtrans',
               'xmllib._NCName',
               'xmllib.ncname',
               'xmllib.qname',
               'xmllib.xmlns',
               'BaseHTTPServer.__version__',
               'BaseHTTPServer.__all__',
               'BaseHTTPServer.DEFAULT_ERROR_MESSAGE',
               'tokenize.__author__',
               'tokenize.__credits__',
               'tokenize.__all__',
               'tokenize.x',
               'tokenize.x',
               'tokenize.token',
               'tokenize.COMMENT',
               'tokenize.NL',
               'tokenize.Whitespace',
               'tokenize.Comment',
               'tokenize.Ignore',
               'tokenize.Name',
               'tokenize.Hexnumber',
               'tokenize.Octnumber',
               'tokenize.Decnumber',
               'tokenize.Intnumber',
               'tokenize.Exponent',
               'tokenize.Pointfloat',
               'tokenize.Expfloat',
               'tokenize.Floatnumber',
               'tokenize.Imagnumber',
               'tokenize.Number',
               'tokenize.Single',
               'tokenize.Double',
               'tokenize.Single3',
               'tokenize.Double3',
               'tokenize.Triple',
               'tokenize.String',
               'tokenize.Operator',
               'tokenize.Bracket',
               'tokenize.Special',
               'tokenize.Funny',
               'tokenize.PlainToken',
               'tokenize.Token',
               'tokenize.ContStr',
               'tokenize.PseudoExtras',
               'tokenize.PseudoToken',
               'tokenize.tokenprog',
               'tokenize.pseudoprog',
               'tokenize.single3prog',
               'tokenize.double3prog',
               'tokenize.endprogs',
               'tokenize.triple_quoted',
               'tokenize.t',
               'tokenize.single_quoted',
               'tokenize.t',
               'tokenize.tabsize',
               'cProfile.__all__',
               'posixfile.SEEK_SET',
               'posixfile.SEEK_CUR',
               'posixfile.SEEK_END',
               'macpath.__all__',
               'macpath.curdir',
               'macpath.pardir',
               'macpath.extsep',
               'macpath.sep',
               'macpath.pathsep',
               'macpath.defpath',
               'macpath.altsep',
               'macpath.devnull',
               'macpath.supports_unicode_filenames',
               'filecmp.__all__',
               'filecmp._cache',
               'filecmp.BUFSIZE',
               'getopt.__all__',
               'getopt.error',
               'smtplib.__all__',
               'smtplib.SMTP_PORT',
               'smtplib.CRLF',
               'smtplib.OLDSTYLE_AUTH',
               'smtplib.fromaddr',
               'smtplib.toaddrs',
               'smtplib.msg',
               'smtplib.line',
               'smtplib.msg',
               'smtplib.server',
               'aifc.__all__',
               'aifc._AIFC_version',
               'aifc._skiplist',
               'aifc._HUGE_VAL',
               'aifc.openfp',
               'aifc.fn',
               'aifc.f',
               'aifc.gn',
               'aifc.g',
               'aifc.data',
               'CGIHTTPServer.__version__',
               'CGIHTTPServer.__all__',
               'CGIHTTPServer.nobody',
               'cgitb.__author__',
               'cgitb.__version__',
               'cgitb.__UNDEF__',
               'cgitb.handler',
               'ftplib.socket',
               'ftplib.SOCKS',
               'ftplib.getfqdn',
               'ftplib.__all__',
               'ftplib.MSG_OOB',
               'ftplib.FTP_PORT',
               'ftplib.all_errors',
               'ftplib.CRLF',
               'ftplib._150_re',
               'ftplib._227_re',
               'UserString.__all__',
               'UserString.called_in_dir',
               'UserString.called_as',
               'UserString.called_as',
               'UserString.py',
               'keyword.__all__',
               'keyword.kwlist',
               'keyword.iskeyword',
               'formatter.AS_IS',
               'tempfile.__all__',
               'tempfile._allocate_lock',
               'tempfile._text_openflags',
               'tempfile._bin_openflags',
               'tempfile.TMP_MAX',
               'tempfile.TMP_MAX',
               'tempfile.template',
               'tempfile.tempdir',
               'tempfile._once_lock',
               'tempfile._stat',
               'tempfile._stat',
               'tempfile._name_sequence',
               'tempfile.tempdir',
               'tempfile.TemporaryFile',
               'nntplib.__all__',
               'nntplib.error_reply',
               'nntplib.error_temp',
               'nntplib.error_perm',
               'nntplib.error_proto',
               'nntplib.error_data',
               'nntplib.NNTP_PORT',
               'nntplib.LONGRESP',
               'nntplib.CRLF',
               'nntplib.newshost',
               'nntplib.mode',
               'nntplib.mode',
               'nntplib.s',
               'nntplib.resp',
               'nntplib.count',
               'nntplib.first',
               'nntplib.last',
               'nntplib.name',
               'nntplib.resp',
               'nntplib.subs',
               'nntplib.item',
               'nntplib.resp',
               'stringold.whitespace',
               'stringold.lowercase',
               'stringold.uppercase',
               'stringold.letters',
               'stringold.digits',
               'stringold.hexdigits',
               'stringold.octdigits',
               'stringold._idmap',
               'stringold.i',
               'stringold._idmap',
               'stringold.i',
               'stringold.index_error',
               'stringold.atoi_error',
               'stringold.atof_error',
               'stringold.atol_error',
               'stringold.splitfields',
               'stringold.joinfields',
               'stringold._apply',
               'stringold._float',
               'stringold._int',
               'stringold._long',
               'stringold._StringType',
               'stringold._idmapL',
               'stringold.letters',
               'robotparser.__all__',
               'robotparser.debug',
               'rfc822.__all__',
               'rfc822._blanklines',
               'rfc822._monthnames',
               'rfc822._daynames',
               'rfc822._timezones',
               'rfc822.file',
               'rfc822.file',
               'rfc822.f',
               'rfc822.m',
               'rfc822.date',
               'rfc822.tz',
               'rfc822.date',
               'rfc822.hhmmss',
               'rfc822.hhmm',
               'rfc822.ss',
               'rfc822.hh',
               'rfc822.mm',
               'rfc822.n',
               'stat.ST_MODE',
               'stat.ST_INO',
               'stat.ST_DEV',
               'stat.ST_NLINK',
               'stat.ST_UID',
               'stat.ST_GID',
               'stat.ST_SIZE',
               'stat.ST_ATIME',
               'stat.ST_MTIME',
               'stat.ST_CTIME',
               'stat.S_IFDIR',
               'stat.S_IFCHR',
               'stat.S_IFBLK',
               'stat.S_IFREG',
               'stat.S_IFIFO',
               'stat.S_IFLNK',
               'stat.S_IFSOCK',
               'stat.S_ISUID',
               'stat.S_ISGID',
               'stat.S_ENFMT',
               'stat.S_ISVTX',
               'stat.S_IREAD',
               'stat.S_IWRITE',
               'stat.S_IEXEC',
               'stat.S_IRWXU',
               'stat.S_IRUSR',
               'stat.S_IWUSR',
               'stat.S_IXUSR',
               'stat.S_IRWXG',
               'stat.S_IRGRP',
               'stat.S_IWGRP',
               'stat.S_IXGRP',
               'stat.S_IRWXO',
               'stat.S_IROTH',
               'stat.S_IWOTH',
               'stat.S_IXOTH',
               'dummy_thread.__author__',
               'dummy_thread.__email__',
               'dummy_thread.__all__',
               'dummy_thread._interrupt',
               'dummy_thread._main',
               '__future__.all_feature_names',
               '__future__.__all__',
               '__future__.CO_NESTED',
               '__future__.CO_GENERATOR_ALLOWED',
               '__future__.CO_FUTURE_DIVISION',
               '__future__.CO_FUTURE_ABSOLUTE_IMPORT',
               '__future__.CO_FUTURE_WITH_STATEMENT',
               '__future__.nested_scopes',
               '__future__.generators',
               '__future__.division',
               '__future__.absolute_import',
               '__future__.with_statement',
               'struct.__version__',
               'struct._MAXCACHE',
               'struct._cache',
               'shelve.__all__',
               'imaplib.__version__',
               'imaplib.__all__',
               'imaplib.CRLF',
               'imaplib.Debug',
               'imaplib.IMAP4_PORT',
               'imaplib.IMAP4_SSL_PORT',
               'imaplib.AllowedVersions',
               'imaplib.Commands',
               'imaplib.Continuation',
               'imaplib.Flags',
               'imaplib.InternalDate',
               'imaplib.Literal',
               'imaplib.MapCRLF',
               'imaplib.Response_code',
               'imaplib.Untagged_response',
               'imaplib.Untagged_status',
               'imaplib.Mon2num',
               'imaplib.optlist',
               'imaplib.args',
               'imaplib.val',
               'imaplib.optlist',
               'imaplib.args',
               'imaplib.stream_command',
               'imaplib.opt',
               'imaplib.val',
               'imaplib.Debug',
               'imaplib.stream_command',
               'imaplib.args',
               'imaplib.args',
               'imaplib.host',
               'imaplib.USER',
               'imaplib.PASSWD',
               'imaplib.test_mesg',
               'imaplib.test_seq1',
               'imaplib.test_seq2',
               'imaplib.M',
               'imaplib.M',
               'imaplib.test_seq1',
               'imaplib.cmd',
               'imaplib.args',
               'imaplib.ml',
               'imaplib.mo',
               'imaplib.path',
               'imaplib.path',
               'imaplib.cmd',
               'imaplib.args',
               'imaplib.dat',
               'imaplib.uid',
               'sre_compile.MAXCODE',
               'sre_compile.MAXCODE',
               'sre_compile._LITERAL_CODES',
               'sre_compile._REPEATING_CODES',
               'sre_compile._SUCCESS_CODES',
               'sre_compile._ASSERT_CODES',
               'sre_compile.STRING_TYPES',
               'sre_compile.STRING_TYPES',
               'quopri.__all__',
               'quopri.ESCAPE',
               'quopri.MAXLINESIZE',
               'quopri.HEX',
               'quopri.EMPTYSTRING',
               'quopri.a2b_qp',
               'quopri.b2a_qp',
               'mimetypes.__all__',
               'mimetypes.knownfiles',
               'mimetypes.inited',
               'mimetypes.USAGE',
               'mimetypes.opts',
               'mimetypes.args',
               'mimetypes.msg',
               'mimetypes.strict',
               'mimetypes.extension',
               'mimetypes.opt',
               'mimetypes.arg',
               'mimetypes.strict',
               'mimetypes.extension',
               'mimetypes.gtype',
               'mimetypes.guess',
               'mimetypes.guess',
               'mimetypes.encoding',
               'sha.new',
               'sha.blocksize',
               'sha.digest_size',
               'sha.digestsize',
               'symbol.single_input',
               'symbol.file_input',
               'symbol.eval_input',
               'symbol.decorator',
               'symbol.decorators',
               'symbol.funcdef',
               'symbol.parameters',
               'symbol.varargslist',
               'symbol.fpdef',
               'symbol.fplist',
               'symbol.stmt',
               'symbol.simple_stmt',
               'symbol.small_stmt',
               'symbol.expr_stmt',
               'symbol.augassign',
               'symbol.print_stmt',
               'symbol.del_stmt',
               'symbol.pass_stmt',
               'symbol.flow_stmt',
               'symbol.break_stmt',
               'symbol.continue_stmt',
               'symbol.return_stmt',
               'symbol.yield_stmt',
               'symbol.raise_stmt',
               'symbol.import_stmt',
               'symbol.import_name',
               'symbol.import_from',
               'symbol.import_as_name',
               'symbol.dotted_as_name',
               'symbol.import_as_names',
               'symbol.dotted_as_names',
               'symbol.dotted_name',
               'symbol.global_stmt',
               'symbol.exec_stmt',
               'symbol.assert_stmt',
               'symbol.compound_stmt',
               'symbol.if_stmt',
               'symbol.while_stmt',
               'symbol.for_stmt',
               'symbol.try_stmt',
               'symbol.with_stmt',
               'symbol.with_var',
               'symbol.except_clause',
               'symbol.suite',
               'symbol.testlist_safe',
               'symbol.old_test',
               'symbol.old_lambdef',
               'symbol.test',
               'symbol.or_test',
               'symbol.and_test',
               'symbol.not_test',
               'symbol.comparison',
               'symbol.comp_op',
               'symbol.expr',
               'symbol.xor_expr',
               'symbol.and_expr',
               'symbol.shift_expr',
               'symbol.arith_expr',
               'symbol.term',
               'symbol.factor',
               'symbol.power',
               'symbol.atom',
               'symbol.listmaker',
               'symbol.testlist_gexp',
               'symbol.lambdef',
               'symbol.trailer',
               'symbol.subscriptlist',
               'symbol.subscript',
               'symbol.sliceop',
               'symbol.exprlist',
               'symbol.testlist',
               'symbol.dictmaker',
               'symbol.classdef',
               'symbol.arglist',
               'symbol.argument',
               'symbol.list_iter',
               'symbol.list_for',
               'symbol.list_if',
               'symbol.gen_iter',
               'symbol.gen_for',
               'symbol.gen_if',
               'symbol.testlist1',
               'symbol.encoding_decl',
               'symbol.yield_expr',
               'symbol.sym_name',
               'symbol._name',
               'symbol._value',
               'csv.__all__',
               'csv.complex',
               'fileinput.__all__',
               'fileinput._state',
               'fileinput.DEFAULT_BUFSIZE',
               'urlparse.__all__',
               'urlparse.uses_relative',
               'urlparse.uses_netloc',
               'urlparse.non_hierarchical',
               'urlparse.uses_params',
               'urlparse.uses_query',
               'urlparse.uses_fragment',
               'urlparse.scheme_chars',
               'urlparse.MAX_CACHE_SIZE',
               'urlparse._parse_cache',
               'urlparse.test_input',
               'xdrlib.__all__',
               'this.s',
               'this.d',
               'this.c',
               'this.i',
               'this.c',
               'os2emxpath.__all__',
               'os2emxpath.curdir',
               'os2emxpath.pardir',
               'os2emxpath.extsep',
               'os2emxpath.sep',
               'os2emxpath.altsep',
               'os2emxpath.pathsep',
               'os2emxpath.defpath',
               'os2emxpath.devnull',
               'os2emxpath.lexists',
               'os2emxpath.realpath',
               'os2emxpath.supports_unicode_filenames',
               'symtable.__all__',
               'symtable.newSymbolTable',
               'symtable.src',
               'symtable.mod',
               'symtable.ident',
               'symtable.info',
               'imputil.__all__',
               'imputil._StringType',
               'imputil._ModuleType',
               'imputil._suffix_char',
               'imputil._suffix',
               'imputil._os_stat',
               'imputil._os_path_join',
               '_strptime.__author__',
               '_strptime.__email__',
               '_strptime.__all__',
               '_strptime._cache_lock',
               '_strptime._TimeRE_cache',
               '_strptime._CACHE_MAX_SIZE',
               '_strptime._regex_cache',
               'colorsys.__all__',
               'colorsys.ONE_THIRD',
               'colorsys.ONE_SIXTH',
               'colorsys.TWO_THIRD',
               'mhlib.MH_PROFILE',
               'mhlib.PATH',
               'mhlib.MH_SEQUENCES',
               'mhlib.FOLDER_PROTECT',
               'mhlib.__all__',
               'mhlib.numericprog',
               'getpass.__all__',
               'getpass.getpass',
               'getpass.getpass',
               'getpass.getpass',
               'getpass.getpass',
               'shlex.__all__',
               'shlex.lexer',
               'shlex.file',
               'shlex.lexer',
               'shlex.tt',
               'weakref.ProxyTypes',
               'weakref.__all__',
               'modulefinder.READ_MODE',
               'modulefinder.READ_MODE',
               'modulefinder.LOAD_CONST',
               'modulefinder.IMPORT_NAME',
               'modulefinder.STORE_NAME',
               'modulefinder.STORE_GLOBAL',
               'modulefinder.STORE_OPS',
               'modulefinder.packagePathMap',
               'modulefinder.replacePackageMap',
               'modulefinder.mf',
               'dumbdbm._open',
               'dumbdbm._BLOCKSIZE',
               'dumbdbm.error',
               're.__all__',
               're.__version__',
               're.I',
               're.IGNORECASE',
               're.L',
               're.LOCALE',
               're.U',
               're.UNICODE',
               're.M',
               're.MULTILINE',
               're.S',
               're.DOTALL',
               're.X',
               're.VERBOSE',
               're.T',
               're.TEMPLATE',
               're.DEBUG',
               're.error',
               're._alphanum',
               're.c',
               're.c',
               're._cache',
               're._cache_repl',
               're._pattern_type',
               're._MAXCACHE',
               'decimal.__all__',
               'decimal.ROUND_DOWN',
               'decimal.ROUND_HALF_UP',
               'decimal.ROUND_HALF_EVEN',
               'decimal.ROUND_CEILING',
               'decimal.ROUND_FLOOR',
               'decimal.ROUND_UP',
               'decimal.ROUND_HALF_DOWN',
               'decimal.ROUND_05UP',
               'decimal._signals',
               'decimal._condition_map',
               'decimal.threading',
               'decimal.sys',
               'decimal.MockThreading',
               'decimal.local',
               'decimal.threading',
               'decimal.local',
               'decimal.rounding_functions',
               'decimal.name',
               'decimal.name',
               'decimal.globalname',
               'decimal.val',
               'decimal.name',
               'decimal.val',
               'decimal.globalname',
               'decimal.rounding_functions',
               'decimal._log10_digits',
               'decimal.DefaultContext',
               'decimal.BasicContext',
               'decimal.ExtendedContext',
               'decimal._parser',
               'decimal._all_zeros',
               'decimal._exact_half',
               'decimal.re',
               'decimal.Inf',
               'decimal.negInf',
               'decimal.NaN',
               'decimal.Dec_0',
               'decimal.Dec_p1',
               'decimal.Dec_n1',
               'decimal.Infsign',
               'pydoc.__author__',
               'pydoc.__date__',
               'pydoc.__version__',
               'pydoc.__credits__',
               'pydoc._re_stripid',
               'pydoc.text',
               'pydoc.html',
               'pydoc.help',
               'atexit.__all__',
               'atexit._exithandlers',
               'copy_reg.__all__',
               'copy_reg.dispatch_table',
               'copy_reg._HEAPTYPE',
               'copy_reg._extension_registry',
               'copy_reg._inverted_registry',
               'copy_reg._extension_cache',
               'codecs.why',
               'codecs.__all__',
               'codecs.BOM_UTF8',
               'codecs.BOM_LE',
               'codecs.BOM_UTF16_LE',
               'codecs.BOM_BE',
               'codecs.BOM_UTF16_BE',
               'codecs.BOM_UTF32_LE',
               'codecs.BOM_UTF32_BE',
               'codecs.BOM',
               'codecs.BOM_UTF16',
               'codecs.BOM_UTF32',
               'codecs.BOM',
               'codecs.BOM_UTF16',
               'codecs.BOM_UTF32',
               'codecs.BOM32_LE',
               'codecs.BOM32_BE',
               'codecs.BOM64_LE',
               'codecs.BOM64_BE',
               'codecs.strict_errors',
               'codecs.ignore_errors',
               'codecs.replace_errors',
               'codecs.xmlcharrefreplace_errors',
               'codecs.backslashreplace_errors',
               'codecs.strict_errors',
               'codecs.ignore_errors',
               'codecs.replace_errors',
               'codecs.xmlcharrefreplace_errors',
               'codecs.backslashreplace_errors',
               'codecs._false',
               'dbhash.__all__',
               'dbhash.error',
               'uuid.__author__',
               'uuid.RESERVED_NCS',
               'uuid.RFC_4122',
               'uuid.RESERVED_MICROSOFT',
               'uuid.RESERVED_FUTURE',
               'uuid._uuid_generate_random',
               'uuid._uuid_generate_time',
               'uuid._UuidCreate',
               'uuid._buffer',
               'uuid.libname',
               'uuid.lib',
               'uuid._uuid_generate_random',
               'uuid._uuid_generate_time',
               'uuid.lib',
               'uuid.lib',
               'uuid._UuidCreate',
               'uuid._node',
               'uuid._last_timestamp',
               'uuid.NAMESPACE_DNS',
               'uuid.NAMESPACE_URL',
               'uuid.NAMESPACE_OID',
               'uuid.NAMESPACE_X500',
               'whichdb._dbmerror',
               'whichdb.dbm',
               'whichdb._dbmerror',
               'whichdb.filename',
               'htmlentitydefs.name2codepoint',
               'htmlentitydefs.codepoint2name',
               'htmlentitydefs.entitydefs',
               'htmlentitydefs.name',
               'htmlentitydefs.codepoint',
               'htmlentitydefs.name',
               'htmlentitydefs.codepoint',
               'mimetools.__all__',
               'mimetools._counter_lock',
               'mimetools.thread',
               'mimetools._counter',
               'mimetools._prefix',
               'mimetools.uudecode_pipe',
               'mimetools.decodetab',
               'mimetools.encodetab',
               'inspect.__author__',
               'inspect.__date__',
               'inspect.modulesbyfile',
               'inspect._filesbymodname',
               'inspect.CO_OPTIMIZED',
               'inspect.CO_NEWLOCALS',
               'inspect.CO_VARARGS',
               'inspect.CO_VARKEYWORDS',
               'inspect.currentframe',
               'macurl2path.__all__',
               'mimify.MAXLEN',
               'mimify.CHARSET',
               'mimify.QUOTE',
               'mimify.__all__',
               'mimify.qp',
               'mimify.base64_re',
               'mimify.mp',
               'mimify.chrset',
               'mimify.he',
               'mimify.mime_code',
               'mimify.mime_head',
               'mimify.repl',
               'mimify.mime_char',
               'mimify.mime_header_char',
               'mimify.mime_header',
               'mimify.mv',
               'mimify.cte',
               'mimify.iso_char',
               'mimify.usage',
               'mimify.decode_base64',
               'mimify.opts',
               'mimify.args',
               'mimify.o',
               'mimify.a',
               'mimify.encode',
               'mimify.encode',
               'mimify.MAXLEN',
               'mimify.decode_base64',
               'mimify.encode_args',
               'mimify.encode_args',
               'mimify.encode_args',
               'mimify.encode_args',
               'heapq.__about__',
               'heapq.__all__',
               'heapq._nsmallest',
               'heapq._nlargest',
               'heapq.heap',
               'heapq.data',
               'heapq.item',
               'heapq.sort',
               'SimpleXMLRPCServer.fcntl',
               'SimpleXMLRPCServer.server',
               'base64.__all__',
               'base64._translation',
               'base64._x',
               'base64.EMPTYSTRING',
               'base64._b32alphabet',
               'base64._b32tab',
               'base64._b32tab',
               'base64.k',
               'base64.v',
               'base64._b32rev',
               'base64.k',
               'base64.v',
               'base64.MAXLINESIZE',
               'base64.MAXBINSIZE',
               'asyncore.socket_map',
               'asyncore.poll3',
               'sunaudio.MAGIC',
               'imghdr.__all__',
               'imghdr.tests',
               'sunau.AUDIO_FILE_MAGIC',
               'sunau.AUDIO_FILE_ENCODING_MULAW_8',
               'sunau.AUDIO_FILE_ENCODING_LINEAR_8',
               'sunau.AUDIO_FILE_ENCODING_LINEAR_16',
               'sunau.AUDIO_FILE_ENCODING_LINEAR_24',
               'sunau.AUDIO_FILE_ENCODING_LINEAR_32',
               'sunau.AUDIO_FILE_ENCODING_FLOAT',
               'sunau.AUDIO_FILE_ENCODING_DOUBLE',
               'sunau.AUDIO_FILE_ENCODING_ADPCM_G721',
               'sunau.AUDIO_FILE_ENCODING_ADPCM_G722',
               'sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3',
               'sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5',
               'sunau.AUDIO_FILE_ENCODING_ALAW_8',
               'sunau.AUDIO_UNKNOWN_SIZE',
               'sunau._simple_encodings',
               'sunau.openfp',
               'anydbm._names',
               'anydbm._errors',
               'anydbm._defaultmod',
               'anydbm._name',
               'anydbm._mod',
               'anydbm._defaultmod',
               'anydbm.error',
               'ctypes._endian._array_type',
               'ctypes._endian._OTHER_ENDIAN',
               'ctypes._endian.LittleEndianStructure',
               'ctypes._endian._OTHER_ENDIAN',
               'ctypes._endian.BigEndianStructure',
               'ctypes.__version__',
               'ctypes.DEFAULT_MODE',
               'ctypes.DEFAULT_MODE',
               'ctypes._c_functype_cache',
               'ctypes._FUNCFLAG_STDCALL',
               'ctypes._win_functype_cache',
               'ctypes.c_int',
               'ctypes.c_uint',
               'ctypes.c_longlong',
               'ctypes.c_ulonglong',
               'ctypes.c_voidp',
               'ctypes._pointer_type_cache',
               'ctypes.cdll',
               'ctypes.pydll',
               'ctypes.pythonapi',
               'ctypes.pythonapi',
               'ctypes.pythonapi',
               'ctypes.windll',
               'ctypes.oledll',
               'ctypes.GetLastError',
               'ctypes.GetLastError',
               'ctypes.c_size_t',
               'ctypes.c_size_t',
               'ctypes.memmove',
               'ctypes.memset',
               'ctypes._cast',
               'ctypes._string_at',
               'ctypes._wstring_at',
               'ctypes.c_int8',
               'ctypes.c_uint8',
               'ctypes.kind',
               'ctypes.c_int16',
               'ctypes.c_int32',
               'ctypes.c_int64',
               'ctypes.kind',
               'ctypes.c_uint16',
               'ctypes.c_uint32',
               'ctypes.c_uint64',
               'ctypes.kind',
               'ctypes.wintypes.BYTE',
               'ctypes.wintypes.WORD',
               'ctypes.wintypes.DWORD',
               'ctypes.wintypes.WCHAR',
               'ctypes.wintypes.UINT',
               'ctypes.wintypes.DOUBLE',
               'ctypes.wintypes.BOOLEAN',
               'ctypes.wintypes.BOOL',
               'ctypes.wintypes.ULONG',
               'ctypes.wintypes.LONG',
               'ctypes.wintypes._LARGE_INTEGER',
               'ctypes.wintypes.LARGE_INTEGER',
               'ctypes.wintypes._ULARGE_INTEGER',
               'ctypes.wintypes.ULARGE_INTEGER',
               'ctypes.wintypes.LPCOLESTR',
               'ctypes.wintypes.LPOLESTR',
               'ctypes.wintypes.OLESTR',
               'ctypes.wintypes.LPCWSTR',
               'ctypes.wintypes.LPWSTR',
               'ctypes.wintypes.LPCSTR',
               'ctypes.wintypes.LPSTR',
               'ctypes.wintypes.WPARAM',
               'ctypes.wintypes.LPARAM',
               'ctypes.wintypes.ATOM',
               'ctypes.wintypes.LANGID',
               'ctypes.wintypes.COLORREF',
               'ctypes.wintypes.LGRPID',
               'ctypes.wintypes.LCTYPE',
               'ctypes.wintypes.LCID',
               'ctypes.wintypes.HANDLE',
               'ctypes.wintypes.HACCEL',
               'ctypes.wintypes.HBITMAP',
               'ctypes.wintypes.HBRUSH',
               'ctypes.wintypes.HCOLORSPACE',
               'ctypes.wintypes.HDC',
               'ctypes.wintypes.HDESK',
               'ctypes.wintypes.HDWP',
               'ctypes.wintypes.HENHMETAFILE',
               'ctypes.wintypes.HFONT',
               'ctypes.wintypes.HGDIOBJ',
               'ctypes.wintypes.HGLOBAL',
               'ctypes.wintypes.HHOOK',
               'ctypes.wintypes.HICON',
               'ctypes.wintypes.HINSTANCE',
               'ctypes.wintypes.HKEY',
               'ctypes.wintypes.HKL',
               'ctypes.wintypes.HLOCAL',
               'ctypes.wintypes.HMENU',
               'ctypes.wintypes.HMETAFILE',
               'ctypes.wintypes.HMODULE',
               'ctypes.wintypes.HMONITOR',
               'ctypes.wintypes.HPALETTE',
               'ctypes.wintypes.HPEN',
               'ctypes.wintypes.HRGN',
               'ctypes.wintypes.HRSRC',
               'ctypes.wintypes.HSTR',
               'ctypes.wintypes.HTASK',
               'ctypes.wintypes.HWINSTA',
               'ctypes.wintypes.HWND',
               'ctypes.wintypes.SC_HANDLE',
               'ctypes.wintypes.SERVICE_STATUS_HANDLE',
               'ctypes.wintypes.tagRECT',
               'ctypes.wintypes._RECTL',
               'ctypes.wintypes.RECTL',
               'ctypes.wintypes.SMALL_RECT',
               'ctypes.wintypes.tagPOINT',
               'ctypes.wintypes._POINTL',
               'ctypes.wintypes.POINTL',
               'ctypes.wintypes.tagSIZE',
               'ctypes.wintypes.SIZEL',
               'ctypes.wintypes._FILETIME',
               'ctypes.wintypes.tagMSG',
               'ctypes.wintypes.MAX_PATH',
               'ctypes.wintypes.__all__',
               'ctypes.macholib.__version__',
               'ctypes.macholib.dyld.__all__',
               'ctypes.macholib.dyld.DEFAULT_FRAMEWORK_FALLBACK',
               'ctypes.macholib.dyld.DEFAULT_LIBRARY_FALLBACK',
               'ctypes.macholib.dylib.__all__',
               'ctypes.macholib.dylib.DYLIB_RE',
               'ctypes.macholib.framework.__all__',
               'ctypes.macholib.framework.STRICT_FRAMEWORK_RE',
               'distutils.debug.__revision__',
               'distutils.debug.DEBUG',
               'distutils.__revision__',
               'distutils.__version__',
               'distutils.spawn.__revision__',
               'distutils.core.__revision__',
               'distutils.core.USAGE',
               'distutils.core._setup_stop_after',
               'distutils.core._setup_distribution',
               'distutils.core.setup_keywords',
               'distutils.core.extension_keywords',
               'distutils.text_file.__revision__',
               'distutils.text_file.test_data',
               'distutils.text_file.result1',
               'distutils.text_file.result2',
               'distutils.text_file.result3',
               'distutils.text_file.result4',
               'distutils.text_file.result5',
               'distutils.text_file.result6',
               'distutils.text_file.filename',
               'distutils.text_file.out_file',
               'distutils.text_file.in_file',
               'distutils.text_file.in_file',
               'distutils.text_file.in_file',
               'distutils.text_file.in_file',
               'distutils.text_file.in_file',
               'distutils.text_file.in_file',
               'distutils.sysconfig.__revision__',
               'distutils.sysconfig.PREFIX',
               'distutils.sysconfig.EXEC_PREFIX',
               'distutils.sysconfig.argv0_path',
               'distutils.sysconfig.landmark',
               'distutils.sysconfig.python_build',
               'distutils.sysconfig.landmark',
               'distutils.sysconfig._variable_rx',
               'distutils.sysconfig._findvar1_rx',
               'distutils.sysconfig._findvar2_rx',
               'distutils.sysconfig._config_vars',
               'distutils.cmd.__revision__',
               'distutils.extension.__revision__',
               'distutils.extension.warnings',
               'distutils.dist.__revision__',
               'distutils.dist.warnings',
               'distutils.dist.command_re',
               'distutils.dist.dist',
               'distutils.versionpredicate.re_validPackage',
               'distutils.versionpredicate.re_paren',
               'distutils.versionpredicate.re_splitComparison',
               'distutils.versionpredicate.compmap',
               'distutils.versionpredicate._provision_rx',
               'distutils.cygwinccompiler.__revision__',
               'distutils.cygwinccompiler.CONFIG_H_OK',
               'distutils.cygwinccompiler.CONFIG_H_NOTOK',
               'distutils.cygwinccompiler.CONFIG_H_UNCERTAIN',
               'distutils.bcppcompiler.__revision__',
               'distutils.archive_util.__revision__',
               'distutils.archive_util.ARCHIVE_FORMATS',
               'distutils.errors.__revision__',
               'distutils.mwerkscompiler.__revision__',
               'distutils.util.__revision__',
               'distutils.util._environ_checked',
               'distutils.util._wordchars_re',
               'distutils.util._squote_re',
               'distutils.util._dquote_re',
               'distutils.fancy_getopt.__revision__',
               'distutils.fancy_getopt.longopt_pat',
               'distutils.fancy_getopt.longopt_re',
               'distutils.fancy_getopt.neg_alias_re',
               'distutils.fancy_getopt.longopt_xlate',
               'distutils.fancy_getopt.WS_TRANS',
               'distutils.fancy_getopt.text',
               'distutils.fancy_getopt.w',
               'distutils.emxccompiler.__revision__',
               'distutils.emxccompiler.CONFIG_H_OK',
               'distutils.emxccompiler.CONFIG_H_NOTOK',
               'distutils.emxccompiler.CONFIG_H_UNCERTAIN',
               'distutils.file_util.__revision__',
               'distutils.file_util._copy_action',
               'distutils.dir_util.__revision__',
               'distutils.dir_util._path_created',
               'distutils.filelist.__revision__',
               'distutils.unixccompiler.__revision__',
               'distutils.ccompiler.__revision__',
               'distutils.ccompiler._default_compilers',
               'distutils.ccompiler.compiler_class',
               'distutils.msvccompiler.__revision__',
               'distutils.msvccompiler._can_read_reg',
               'distutils.msvccompiler._can_read_reg',
               'distutils.msvccompiler.hkey_mod',
               'distutils.msvccompiler.RegOpenKeyEx',
               'distutils.msvccompiler.RegEnumKey',
               'distutils.msvccompiler.RegEnumValue',
               'distutils.msvccompiler.RegError',
               'distutils.msvccompiler._can_read_reg',
               'distutils.msvccompiler.hkey_mod',
               'distutils.msvccompiler.RegOpenKeyEx',
               'distutils.msvccompiler.RegEnumKey',
               'distutils.msvccompiler.RegEnumValue',
               'distutils.msvccompiler.RegError',
               'distutils.msvccompiler.HKEYS',
               'distutils.log.DEBUG',
               'distutils.log.INFO',
               'distutils.log.WARN',
               'distutils.log.ERROR',
               'distutils.log.FATAL',
               'distutils.log._global_log',
               'distutils.log.log',
               'distutils.log.debug',
               'distutils.log.info',
               'distutils.log.warn',
               'distutils.log.error',
               'distutils.log.fatal',
               'distutils.dep_util.__revision__',
               'distutils.command.build_py.__revision__',
               'distutils.command.register.__revision__',
               'distutils.command.__revision__',
               'distutils.command.__all__',
               'distutils.command.install_lib.__revision__',
               'distutils.command.install_lib.PYTHON_SOURCE_EXTENSION',
               'distutils.command.install_lib.PYTHON_SOURCE_EXTENSION',
               'distutils.command.bdist_rpm.__revision__',
               'distutils.command.install_headers.__revision__',
               'distutils.command.build_ext.__revision__',
               'distutils.command.build_ext.extension_name_re',
               'distutils.command.install.__revision__',
               'distutils.command.install.WINDOWS_SCHEME',
               'distutils.command.install.WINDOWS_SCHEME',
               'distutils.command.install.INSTALL_SCHEMES',
               'distutils.command.install.SCHEME_KEYS',
               'distutils.command.build.__revision__',
               'distutils.command.build_clib.__revision__',
               'distutils.command.build_scripts.__revision__',
               'distutils.command.build_scripts.first_line_re',
               'distutils.command.bdist_dumb.__revision__',
               'distutils.command.bdist.__revision__',
               'distutils.command.config.__revision__',
               'distutils.command.config.LANG_EXT',
               'distutils.command.bdist_wininst.__revision__',
               'distutils.command.install_scripts.__revision__',
               'distutils.command.install_data.__revision__',
               'distutils.command.sdist.__revision__',
               'distutils.command.clean.__revision__',
               'distutils.tests.here',
               'bsddb._bsddb',
               'bsddb.db',
               'bsddb._db',
               'bsddb.__version__',
               'bsddb.error',
               'bsddb.thread',
               'bsddb.dbtables._cvsid',
               'bsddb.dbtables._table_names_key',
               'bsddb.dbtables._columns',
               'bsddb.dbtables._data',
               'bsddb.dbtables._rowid',
               'bsddb.dbtables._rowid_str_len',
               'bsddb.dbutils._deadlock_MinSleepTime',
               'bsddb.dbutils._deadlock_MaxSleepTime',
               'bsddb.dbutils._deadlock_VerboseFile',
               'TYPES._SYS_TYPES_H',
               'TYPES._FEATURES_H',
               'TYPES.__USE_ANSI',
               'TYPES.__FAVOR_BSD',
               'TYPES._ISOC99_SOURCE',
               'TYPES._POSIX_SOURCE',
               'TYPES._POSIX_C_SOURCE',
               'TYPES._XOPEN_SOURCE',
               'TYPES._XOPEN_SOURCE_EXTENDED',
               'TYPES._LARGEFILE64_SOURCE',
               'TYPES._BSD_SOURCE',
               'TYPES._SVID_SOURCE',
               'TYPES._BSD_SOURCE',
               'TYPES._SVID_SOURCE',
               'TYPES.__USE_ISOC99',
               'TYPES._POSIX_SOURCE',
               'TYPES._POSIX_C_SOURCE',
               'TYPES._POSIX_C_SOURCE',
               'TYPES.__USE_POSIX',
               'TYPES.__USE_POSIX2',
               'TYPES.__USE_POSIX199309',
               'TYPES.__USE_POSIX199506',
               'TYPES.__USE_XOPEN',
               'TYPES.__USE_XOPEN_EXTENDED',
               'TYPES.__USE_UNIX98',
               'TYPES._LARGEFILE_SOURCE',
               'TYPES.__USE_XOPEN2K',
               'TYPES.__USE_ISOC99',
               'TYPES.__USE_XOPEN_EXTENDED',
               'TYPES.__USE_LARGEFILE',
               'TYPES.__USE_LARGEFILE64',
               'TYPES.__USE_FILE_OFFSET64',
               'TYPES.__USE_MISC',
               'TYPES.__USE_BSD',
               'TYPES.__USE_SVID',
               'TYPES.__USE_GNU',
               'TYPES.__USE_REENTRANT',
               'TYPES.__STDC_IEC_559__',
               'TYPES.__STDC_IEC_559_COMPLEX__',
               'TYPES.__STDC_ISO_10646__',
               'TYPES.__GNU_LIBRARY__',
               'TYPES.__GLIBC__',
               'TYPES.__GLIBC_MINOR__',
               'TYPES._SYS_CDEFS_H',
               'TYPES.__flexarr',
               'TYPES.__flexarr',
               'TYPES.__flexarr',
               'TYPES.__flexarr',
               'TYPES.__USE_LARGEFILE',
               'TYPES.__USE_LARGEFILE64',
               'TYPES.__USE_EXTERN_INLINES',
               'TYPES._BITS_TYPES_H',
               'TYPES.__FD_SETSIZE',
               'TYPES._BITS_PTHREADTYPES_H',
               'TYPES.SCHED_OTHER',
               'TYPES.SCHED_FIFO',
               'TYPES.SCHED_RR',
               'TYPES.CSIGNAL',
               'TYPES.CLONE_VM',
               'TYPES.CLONE_FS',
               'TYPES.CLONE_FILES',
               'TYPES.CLONE_SIGHAND',
               'TYPES.CLONE_PID',
               'TYPES.CLONE_PTRACE',
               'TYPES.CLONE_VFORK',
               'TYPES.__defined_schedparam',
               'TYPES._TIME_H',
               'TYPES._BITS_TIME_H',
               'TYPES.CLOCKS_PER_SEC',
               'TYPES.CLOCK_REALTIME',
               'TYPES.CLOCK_PROCESS_CPUTIME_ID',
               'TYPES.CLOCK_THREAD_CPUTIME_ID',
               'TYPES.TIMER_ABSTIME',
               'TYPES._STRUCT_TIMEVAL',
               'TYPES.CLK_TCK',
               'TYPES.__clock_t_defined',
               'TYPES.__time_t_defined',
               'TYPES.__clockid_t_defined',
               'TYPES.__timer_t_defined',
               'TYPES.__timespec_defined',
               'TYPES.__BIT_TYPES_DEFINED__',
               'TYPES._ENDIAN_H',
               'TYPES.__LITTLE_ENDIAN',
               'TYPES.__BIG_ENDIAN',
               'TYPES.__PDP_ENDIAN',
               'TYPES.__BYTE_ORDER',
               'TYPES.__FLOAT_WORD_ORDER',
               'TYPES.LITTLE_ENDIAN',
               'TYPES.BIG_ENDIAN',
               'TYPES.PDP_ENDIAN',
               'TYPES.BYTE_ORDER',
               'TYPES._SYS_SELECT_H',
               'TYPES._SIGSET_H_types',
               'TYPES._SIGSET_H_fns',
               'TYPES.FD_SETSIZE',
               'TYPES._SYS_SYSMACROS_H',
               'IN._NETINET_IN_H',
               'IN._FEATURES_H',
               'IN.__USE_ANSI',
               'IN.__FAVOR_BSD',
               'IN._ISOC99_SOURCE',
               'IN._POSIX_SOURCE',
               'IN._POSIX_C_SOURCE',
               'IN._XOPEN_SOURCE',
               'IN._XOPEN_SOURCE_EXTENDED',
               'IN._LARGEFILE64_SOURCE',
               'IN._BSD_SOURCE',
               'IN._SVID_SOURCE',
               'IN._BSD_SOURCE',
               'IN._SVID_SOURCE',
               'IN.__USE_ISOC99',
               'IN._POSIX_SOURCE',
               'IN._POSIX_C_SOURCE',
               'IN._POSIX_C_SOURCE',
               'IN.__USE_POSIX',
               'IN.__USE_POSIX2',
               'IN.__USE_POSIX199309',
               'IN.__USE_POSIX199506',
               'IN.__USE_XOPEN',
               'IN.__USE_XOPEN_EXTENDED',
               'IN.__USE_UNIX98',
               'IN._LARGEFILE_SOURCE',
               'IN.__USE_XOPEN2K',
               'IN.__USE_ISOC99',
               'IN.__USE_XOPEN_EXTENDED',
               'IN.__USE_LARGEFILE',
               'IN.__USE_LARGEFILE64',
               'IN.__USE_FILE_OFFSET64',
               'IN.__USE_MISC',
               'IN.__USE_BSD',
               'IN.__USE_SVID',
               'IN.__USE_GNU',
               'IN.__USE_REENTRANT',
               'IN.__STDC_IEC_559__',
               'IN.__STDC_IEC_559_COMPLEX__',
               'IN.__STDC_ISO_10646__',
               'IN.__GNU_LIBRARY__',
               'IN.__GLIBC__',
               'IN.__GLIBC_MINOR__',
               'IN._SYS_CDEFS_H',
               'IN.__flexarr',
               'IN.__flexarr',
               'IN.__flexarr',
               'IN.__flexarr',
               'IN.__USE_LARGEFILE',
               'IN.__USE_LARGEFILE64',
               'IN.__USE_EXTERN_INLINES',
               'IN._STDINT_H',
               'IN._BITS_WCHAR_H',
               'IN.__WCHAR_MIN',
               'IN.__WCHAR_MAX',
               'IN.__WORDSIZE',
               'IN.INT8_MIN',
               'IN.INT16_MIN',
               'IN.INT32_MIN',
               'IN.INT64_MIN',
               'IN.INT8_MAX',
               'IN.INT16_MAX',
               'IN.INT32_MAX',
               'IN.INT64_MAX',
               'IN.UINT8_MAX',
               'IN.UINT16_MAX',
               'IN.UINT64_MAX',
               'IN.INT_LEAST8_MIN',
               'IN.INT_LEAST16_MIN',
               'IN.INT_LEAST32_MIN',
               'IN.INT_LEAST64_MIN',
               'IN.INT_LEAST8_MAX',
               'IN.INT_LEAST16_MAX',
               'IN.INT_LEAST32_MAX',
               'IN.INT_LEAST64_MAX',
               'IN.UINT_LEAST8_MAX',
               'IN.UINT_LEAST16_MAX',
               'IN.UINT_LEAST64_MAX',
               'IN.INT_FAST8_MIN',
               'IN.INT_FAST16_MIN',
               'IN.INT_FAST32_MIN',
               'IN.INT_FAST16_MIN',
               'IN.INT_FAST32_MIN',
               'IN.INT_FAST64_MIN',
               'IN.INT_FAST8_MAX',
               'IN.INT_FAST16_MAX',
               'IN.INT_FAST32_MAX',
               'IN.INT_FAST16_MAX',
               'IN.INT_FAST32_MAX',
               'IN.INT_FAST64_MAX',
               'IN.UINT_FAST8_MAX',
               'IN.UINT_FAST64_MAX',
               'IN.INTPTR_MIN',
               'IN.INTPTR_MAX',
               'IN.INTPTR_MIN',
               'IN.INTPTR_MAX',
               'IN.INTMAX_MIN',
               'IN.INTMAX_MAX',
               'IN.UINTMAX_MAX',
               'IN.PTRDIFF_MIN',
               'IN.PTRDIFF_MAX',
               'IN.PTRDIFF_MIN',
               'IN.PTRDIFF_MAX',
               'IN.SIG_ATOMIC_MIN',
               'IN.SIG_ATOMIC_MAX',
               'IN.WCHAR_MIN',
               'IN.WCHAR_MAX',
               'IN._BITS_TYPES_H',
               'IN.__FD_SETSIZE',
               'IN._BITS_PTHREADTYPES_H',
               'IN.SCHED_OTHER',
               'IN.SCHED_FIFO',
               'IN.SCHED_RR',
               'IN.CSIGNAL',
               'IN.CLONE_VM',
               'IN.CLONE_FS',
               'IN.CLONE_FILES',
               'IN.CLONE_SIGHAND',
               'IN.CLONE_PID',
               'IN.CLONE_PTRACE',
               'IN.CLONE_VFORK',
               'IN.__defined_schedparam',
               'IN.IN_CLASSA_NET',
               'IN.IN_CLASSA_NSHIFT',
               'IN.IN_CLASSA_HOST',
               'IN.IN_CLASSA_MAX',
               'IN.IN_CLASSB_NET',
               'IN.IN_CLASSB_NSHIFT',
               'IN.IN_CLASSB_HOST',
               'IN.IN_CLASSB_MAX',
               'IN.IN_CLASSC_NET',
               'IN.IN_CLASSC_NSHIFT',
               'IN.IN_CLASSC_HOST',
               'IN.IN_LOOPBACKNET',
               'IN.INET_ADDRSTRLEN',
               'IN.INET6_ADDRSTRLEN',
               'IN._LIBC_LIMITS_H_',
               'IN.MB_LEN_MAX',
               'IN._LIMITS_H',
               'IN.CHAR_BIT',
               'IN.SCHAR_MIN',
               'IN.SCHAR_MAX',
               'IN.UCHAR_MAX',
               'IN.CHAR_MIN',
               'IN.CHAR_MAX',
               'IN.CHAR_MIN',
               'IN.CHAR_MAX',
               'IN.SHRT_MIN',
               'IN.SHRT_MAX',
               'IN.USHRT_MAX',
               'IN.INT_MAX',
               'IN.LONG_MAX',
               'IN.LONG_MAX',
               'IN.LONG_MIN',
               'IN._BITS_POSIX1_LIM_H',
               'IN._POSIX_AIO_LISTIO_MAX',
               'IN._POSIX_AIO_MAX',
               'IN._POSIX_ARG_MAX',
               'IN._POSIX_CHILD_MAX',
               'IN._POSIX_DELAYTIMER_MAX',
               'IN._POSIX_LINK_MAX',
               'IN._POSIX_MAX_CANON',
               'IN._POSIX_MAX_INPUT',
               'IN._POSIX_MQ_OPEN_MAX',
               'IN._POSIX_MQ_PRIO_MAX',
               'IN._POSIX_NGROUPS_MAX',
               'IN._POSIX_OPEN_MAX',
               'IN._POSIX_FD_SETSIZE',
               'IN._POSIX_NAME_MAX',
               'IN._POSIX_PATH_MAX',
               'IN._POSIX_PIPE_BUF',
               'IN._POSIX_RTSIG_MAX',
               'IN._POSIX_SEM_NSEMS_MAX',
               'IN._POSIX_SEM_VALUE_MAX',
               'IN._POSIX_SIGQUEUE_MAX',
               'IN._POSIX_SSIZE_MAX',
               'IN._POSIX_STREAM_MAX',
               'IN._POSIX_TZNAME_MAX',
               'IN._POSIX_QLIMIT',
               'IN._POSIX_HIWAT',
               'IN._POSIX_UIO_MAXIOV',
               'IN._POSIX_TTY_NAME_MAX',
               'IN._POSIX_TIMER_MAX',
               'IN._POSIX_LOGIN_NAME_MAX',
               'IN._POSIX_CLOCKRES_MIN',
               'IN.NR_OPEN',
               'IN.NGROUPS_MAX',
               'IN.ARG_MAX',
               'IN.CHILD_MAX',
               'IN.OPEN_MAX',
               'IN.LINK_MAX',
               'IN.MAX_CANON',
               'IN.MAX_INPUT',
               'IN.NAME_MAX',
               'IN.PATH_MAX',
               'IN.PIPE_BUF',
               'IN.RTSIG_MAX',
               'IN._POSIX_THREAD_KEYS_MAX',
               'IN.PTHREAD_KEYS_MAX',
               'IN._POSIX_THREAD_DESTRUCTOR_ITERATIONS',
               'IN.PTHREAD_DESTRUCTOR_ITERATIONS',
               'IN._POSIX_THREAD_THREADS_MAX',
               'IN.PTHREAD_THREADS_MAX',
               'IN.AIO_PRIO_DELTA_MAX',
               'IN.PTHREAD_STACK_MIN',
               'IN.TIMER_MAX',
               'IN.SSIZE_MAX',
               'IN.NGROUPS_MAX',
               'IN._BITS_POSIX2_LIM_H',
               'IN._POSIX2_BC_BASE_MAX',
               'IN._POSIX2_BC_DIM_MAX',
               'IN._POSIX2_BC_SCALE_MAX',
               'IN._POSIX2_BC_STRING_MAX',
               'IN._POSIX2_COLL_WEIGHTS_MAX',
               'IN._POSIX2_EXPR_NEST_MAX',
               'IN._POSIX2_LINE_MAX',
               'IN._POSIX2_RE_DUP_MAX',
               'IN._POSIX2_CHARCLASS_NAME_MAX',
               'IN.BC_BASE_MAX',
               'IN.BC_DIM_MAX',
               'IN.BC_SCALE_MAX',
               'IN.BC_STRING_MAX',
               'IN.COLL_WEIGHTS_MAX',
               'IN.EXPR_NEST_MAX',
               'IN.LINE_MAX',
               'IN.CHARCLASS_NAME_MAX',
               'IN.RE_DUP_MAX',
               'IN._XOPEN_LIM_H',
               'IN.L_tmpnam',
               'IN.TMP_MAX',
               'IN.FILENAME_MAX',
               'IN.L_ctermid',
               'IN.L_cuserid',
               'IN.FOPEN_MAX',
               'IN.IOV_MAX',
               'IN._XOPEN_IOV_MAX',
               'IN.NL_ARGMAX',
               'IN.NL_LANGMAX',
               'IN.NL_MSGMAX',
               'IN.NL_NMAX',
               'IN.NL_SETMAX',
               'IN.NL_TEXTMAX',
               'IN.NZERO',
               'IN.WORD_BIT',
               'IN.WORD_BIT',
               'IN.WORD_BIT',
               'IN.WORD_BIT',
               'IN.WORD_BIT',
               'IN.WORD_BIT',
               'IN.WORD_BIT',
               'IN.LONG_BIT',
               'IN.LONG_BIT',
               'IN.LONG_BIT',
               'IN.LONG_BIT',
               'IN.LONG_BIT',
               'IN.LONG_BIT',
               'IN.PF_UNSPEC',
               'IN.PF_LOCAL',
               'IN.PF_UNIX',
               'IN.PF_FILE',
               'IN.PF_INET',
               'IN.PF_AX25',
               'IN.PF_IPX',
               'IN.PF_APPLETALK',
               'IN.PF_NETROM',
               'IN.PF_BRIDGE',
               'IN.PF_ATMPVC',
               'IN.PF_X25',
               'IN.PF_INET6',
               'IN.PF_ROSE',
               'IN.PF_DECnet',
               'IN.PF_NETBEUI',
               'IN.PF_SECURITY',
               'IN.PF_KEY',
               'IN.PF_NETLINK',
               'IN.PF_ROUTE',
               'IN.PF_PACKET',
               'IN.PF_ASH',
               'IN.PF_ECONET',
               'IN.PF_ATMSVC',
               'IN.PF_SNA',
               'IN.PF_IRDA',
               'IN.PF_PPPOX',
               'IN.PF_WANPIPE',
               'IN.PF_BLUETOOTH',
               'IN.PF_MAX',
               'IN.AF_UNSPEC',
               'IN.AF_LOCAL',
               'IN.AF_UNIX',
               'IN.AF_FILE',
               'IN.AF_INET',
               'IN.AF_AX25',
               'IN.AF_IPX',
               'IN.AF_APPLETALK',
               'IN.AF_NETROM',
               'IN.AF_BRIDGE',
               'IN.AF_ATMPVC',
               'IN.AF_X25',
               'IN.AF_INET6',
               'IN.AF_ROSE',
               'IN.AF_DECnet',
               'IN.AF_NETBEUI',
               'IN.AF_SECURITY',
               'IN.AF_KEY',
               'IN.AF_NETLINK',
               'IN.AF_ROUTE',
               'IN.AF_PACKET',
               'IN.AF_ASH',
               'IN.AF_ECONET',
               'IN.AF_ATMSVC',
               'IN.AF_SNA',
               'IN.AF_IRDA',
               'IN.AF_PPPOX',
               'IN.AF_WANPIPE',
               'IN.AF_BLUETOOTH',
               'IN.AF_MAX',
               'IN.SOL_RAW',
               'IN.SOL_DECNET',
               'IN.SOL_X25',
               'IN.SOL_PACKET',
               'IN.SOL_ATM',
               'IN.SOL_AAL',
               'IN.SOL_IRDA',
               'IN.SOMAXCONN',
               'IN._BITS_SOCKADDR_H',
               'IN._SS_SIZE',
               'IN.FIOSETOWN',
               'IN.SIOCSPGRP',
               'IN.FIOGETOWN',
               'IN.SIOCGPGRP',
               'IN.SIOCATMARK',
               'IN.SIOCGSTAMP',
               'IN.SOL_SOCKET',
               'IN.SO_DEBUG',
               'IN.SO_REUSEADDR',
               'IN.SO_TYPE',
               'IN.SO_ERROR',
               'IN.SO_DONTROUTE',
               'IN.SO_BROADCAST',
               'IN.SO_SNDBUF',
               'IN.SO_RCVBUF',
               'IN.SO_KEEPALIVE',
               'IN.SO_OOBINLINE',
               'IN.SO_NO_CHECK',
               'IN.SO_PRIORITY',
               'IN.SO_LINGER',
               'IN.SO_BSDCOMPAT',
               'IN.SO_PASSCRED',
               'IN.SO_PEERCRED',
               'IN.SO_RCVLOWAT',
               'IN.SO_SNDLOWAT',
               'IN.SO_RCVTIMEO',
               'IN.SO_SNDTIMEO',
               'IN.SO_SECURITY_AUTHENTICATION',
               'IN.SO_SECURITY_ENCRYPTION_TRANSPORT',
               'IN.SO_SECURITY_ENCRYPTION_NETWORK',
               'IN.SO_BINDTODEVICE',
               'IN.SO_ATTACH_FILTER',
               'IN.SO_DETACH_FILTER',
               'IN.SO_PEERNAME',
               'IN.SO_TIMESTAMP',
               'IN.SCM_TIMESTAMP',
               'IN.SO_ACCEPTCONN',
               'IN.SOCK_STREAM',
               'IN.SOCK_DGRAM',
               'IN.SOCK_RAW',
               'IN.SOCK_RDM',
               'IN.SOCK_SEQPACKET',
               'IN.SOCK_PACKET',
               'IN.SOCK_MAX',
               'IN.IP_TOS',
               'IN.IP_TTL',
               'IN.IP_HDRINCL',
               'IN.IP_OPTIONS',
               'IN.IP_ROUTER_ALERT',
               'IN.IP_RECVOPTS',
               'IN.IP_RETOPTS',
               'IN.IP_PKTINFO',
               'IN.IP_PKTOPTIONS',
               'IN.IP_PMTUDISC',
               'IN.IP_MTU_DISCOVER',
               'IN.IP_RECVERR',
               'IN.IP_RECVTTL',
               'IN.IP_RECVTOS',
               'IN.IP_MULTICAST_IF',
               'IN.IP_MULTICAST_TTL',
               'IN.IP_MULTICAST_LOOP',
               'IN.IP_ADD_MEMBERSHIP',
               'IN.IP_DROP_MEMBERSHIP',
               'IN.IP_RECVRETOPTS',
               'IN.IP_PMTUDISC_DONT',
               'IN.IP_PMTUDISC_WANT',
               'IN.IP_PMTUDISC_DO',
               'IN.SOL_IP',
               'IN.IP_DEFAULT_MULTICAST_TTL',
               'IN.IP_DEFAULT_MULTICAST_LOOP',
               'IN.IP_MAX_MEMBERSHIPS',
               'IN.IPV6_ADDRFORM',
               'IN.IPV6_PKTINFO',
               'IN.IPV6_HOPOPTS',
               'IN.IPV6_DSTOPTS',
               'IN.IPV6_RTHDR',
               'IN.IPV6_PKTOPTIONS',
               'IN.IPV6_CHECKSUM',
               'IN.IPV6_HOPLIMIT',
               'IN.IPV6_NEXTHOP',
               'IN.IPV6_AUTHHDR',
               'IN.IPV6_UNICAST_HOPS',
               'IN.IPV6_MULTICAST_IF',
               'IN.IPV6_MULTICAST_HOPS',
               'IN.IPV6_MULTICAST_LOOP',
               'IN.IPV6_JOIN_GROUP',
               'IN.IPV6_LEAVE_GROUP',
               'IN.IPV6_ROUTER_ALERT',
               'IN.IPV6_MTU_DISCOVER',
               'IN.IPV6_MTU',
               'IN.IPV6_RECVERR',
               'IN.IPV6_RXHOPOPTS',
               'IN.IPV6_RXDSTOPTS',
               'IN.IPV6_ADD_MEMBERSHIP',
               'IN.IPV6_DROP_MEMBERSHIP',
               'IN.IPV6_PMTUDISC_DONT',
               'IN.IPV6_PMTUDISC_WANT',
               'IN.IPV6_PMTUDISC_DO',
               'IN.SOL_IPV6',
               'IN.SOL_ICMPV6',
               'IN.IPV6_RTHDR_LOOSE',
               'IN.IPV6_RTHDR_STRICT',
               'IN.IPV6_RTHDR_TYPE_0',
               'IN._ENDIAN_H',
               'IN.__LITTLE_ENDIAN',
               'IN.__BIG_ENDIAN',
               'IN.__PDP_ENDIAN',
               'IN.__BYTE_ORDER',
               'IN.__FLOAT_WORD_ORDER',
               'IN.LITTLE_ENDIAN',
               'IN.BIG_ENDIAN',
               'IN.PDP_ENDIAN',
               'IN.BYTE_ORDER',
               'IN._BITS_BYTESWAP_H',
               'CDROM.CDROMPAUSE',
               'CDROM.CDROMRESUME',
               'CDROM.CDROMPLAYMSF',
               'CDROM.CDROMPLAYTRKIND',
               'CDROM.CDROMREADTOCHDR',
               'CDROM.CDROMREADTOCENTRY',
               'CDROM.CDROMSTOP',
               'CDROM.CDROMSTART',
               'CDROM.CDROMEJECT',
               'CDROM.CDROMVOLCTRL',
               'CDROM.CDROMSUBCHNL',
               'CDROM.CDROMREADMODE2',
               'CDROM.CDROMREADMODE1',
               'CDROM.CDROMREADAUDIO',
               'CDROM.CDROMEJECT_SW',
               'CDROM.CDROMMULTISESSION',
               'CDROM.CDROM_GET_MCN',
               'CDROM.CDROM_GET_UPC',
               'CDROM.CDROMRESET',
               'CDROM.CDROMVOLREAD',
               'CDROM.CDROMREADRAW',
               'CDROM.CDROMREADCOOKED',
               'CDROM.CDROMSEEK',
               'CDROM.CDROMPLAYBLK',
               'CDROM.CDROMREADALL',
               'CDROM.CDROMGETSPINDOWN',
               'CDROM.CDROMSETSPINDOWN',
               'CDROM.CDROMCLOSETRAY',
               'CDROM.CDROM_SET_OPTIONS',
               'CDROM.CDROM_CLEAR_OPTIONS',
               'CDROM.CDROM_SELECT_SPEED',
               'CDROM.CDROM_SELECT_DISC',
               'CDROM.CDROM_MEDIA_CHANGED',
               'CDROM.CDROM_DRIVE_STATUS',
               'CDROM.CDROM_DISC_STATUS',
               'CDROM.CDROM_CHANGER_NSLOTS',
               'CDROM.CDROM_LOCKDOOR',
               'CDROM.CDROM_DEBUG',
               'CDROM.CDROM_GET_CAPABILITY',
               'CDROM.CDROMAUDIOBUFSIZ',
               'CDROM.DVD_READ_STRUCT',
               'CDROM.DVD_WRITE_STRUCT',
               'CDROM.DVD_AUTH',
               'CDROM.CDROM_SEND_PACKET',
               'CDROM.CDROM_NEXT_WRITABLE',
               'CDROM.CDROM_LAST_WRITTEN',
               'CDROM.CDROM_PACKET_SIZE',
               'CDROM.CGC_DATA_UNKNOWN',
               'CDROM.CGC_DATA_WRITE',
               'CDROM.CGC_DATA_READ',
               'CDROM.CGC_DATA_NONE',
               'CDROM.CD_MINS',
               'CDROM.CD_SECS',
               'CDROM.CD_FRAMES',
               'CDROM.CD_SYNC_SIZE',
               'CDROM.CD_MSF_OFFSET',
               'CDROM.CD_CHUNK_SIZE',
               'CDROM.CD_NUM_OF_CHUNKS',
               'CDROM.CD_FRAMESIZE_SUB',
               'CDROM.CD_HEAD_SIZE',
               'CDROM.CD_SUBHEAD_SIZE',
               'CDROM.CD_EDC_SIZE',
               'CDROM.CD_ZERO_SIZE',
               'CDROM.CD_ECC_SIZE',
               'CDROM.CD_FRAMESIZE',
               'CDROM.CD_FRAMESIZE_RAW',
               'CDROM.CD_FRAMESIZE_RAWER',
               'CDROM.CD_FRAMESIZE_RAW1',
               'CDROM.CD_FRAMESIZE_RAW0',
               'CDROM.CD_XA_HEAD',
               'CDROM.CD_XA_TAIL',
               'CDROM.CD_XA_SYNC_HEAD',
               'CDROM.CDROM_LBA',
               'CDROM.CDROM_MSF',
               'CDROM.CDROM_DATA_TRACK',
               'CDROM.CDROM_LEADOUT',
               'CDROM.CDROM_AUDIO_INVALID',
               'CDROM.CDROM_AUDIO_PLAY',
               'CDROM.CDROM_AUDIO_PAUSED',
               'CDROM.CDROM_AUDIO_COMPLETED',
               'CDROM.CDROM_AUDIO_ERROR',
               'CDROM.CDROM_AUDIO_NO_STATUS',
               'CDROM.CDC_CLOSE_TRAY',
               'CDROM.CDC_OPEN_TRAY',
               'CDROM.CDC_LOCK',
               'CDROM.CDC_SELECT_SPEED',
               'CDROM.CDC_SELECT_DISC',
               'CDROM.CDC_MULTI_SESSION',
               'CDROM.CDC_MCN',
               'CDROM.CDC_MEDIA_CHANGED',
               'CDROM.CDC_PLAY_AUDIO',
               'CDROM.CDC_RESET',
               'CDROM.CDC_IOCTLS',
               'CDROM.CDC_DRIVE_STATUS',
               'CDROM.CDC_GENERIC_PACKET',
               'CDROM.CDC_CD_R',
               'CDROM.CDC_CD_RW',
               'CDROM.CDC_DVD',
               'CDROM.CDC_DVD_R',
               'CDROM.CDC_DVD_RAM',
               'CDROM.CDS_NO_INFO',
               'CDROM.CDS_NO_DISC',
               'CDROM.CDS_TRAY_OPEN',
               'CDROM.CDS_DRIVE_NOT_READY',
               'CDROM.CDS_DISC_OK',
               'CDROM.CDS_AUDIO',
               'CDROM.CDS_DATA_1',
               'CDROM.CDS_DATA_2',
               'CDROM.CDS_XA_2_1',
               'CDROM.CDS_XA_2_2',
               'CDROM.CDS_MIXED',
               'CDROM.CDO_AUTO_CLOSE',
               'CDROM.CDO_AUTO_EJECT',
               'CDROM.CDO_USE_FFLAGS',
               'CDROM.CDO_LOCK',
               'CDROM.CDO_CHECK_TYPE',
               'CDROM.CD_PART_MAX',
               'CDROM.CD_PART_MASK',
               'CDROM.GPCMD_BLANK',
               'CDROM.GPCMD_CLOSE_TRACK',
               'CDROM.GPCMD_FLUSH_CACHE',
               'CDROM.GPCMD_FORMAT_UNIT',
               'CDROM.GPCMD_GET_CONFIGURATION',
               'CDROM.GPCMD_GET_EVENT_STATUS_NOTIFICATION',
               'CDROM.GPCMD_GET_PERFORMANCE',
               'CDROM.GPCMD_INQUIRY',
               'CDROM.GPCMD_LOAD_UNLOAD',
               'CDROM.GPCMD_MECHANISM_STATUS',
               'CDROM.GPCMD_MODE_SELECT_10',
               'CDROM.GPCMD_MODE_SENSE_10',
               'CDROM.GPCMD_PAUSE_RESUME',
               'CDROM.GPCMD_PLAY_AUDIO_10',
               'CDROM.GPCMD_PLAY_AUDIO_MSF',
               'CDROM.GPCMD_PLAY_AUDIO_TI',
               'CDROM.GPCMD_PLAY_CD',
               'CDROM.GPCMD_PREVENT_ALLOW_MEDIUM_REMOVAL',
               'CDROM.GPCMD_READ_10',
               'CDROM.GPCMD_READ_12',
               'CDROM.GPCMD_READ_CDVD_CAPACITY',
               'CDROM.GPCMD_READ_CD',
               'CDROM.GPCMD_READ_CD_MSF',
               'CDROM.GPCMD_READ_DISC_INFO',
               'CDROM.GPCMD_READ_DVD_STRUCTURE',
               'CDROM.GPCMD_READ_FORMAT_CAPACITIES',
               'CDROM.GPCMD_READ_HEADER',
               'CDROM.GPCMD_READ_TRACK_RZONE_INFO',
               'CDROM.GPCMD_READ_SUBCHANNEL',
               'CDROM.GPCMD_READ_TOC_PMA_ATIP',
               'CDROM.GPCMD_REPAIR_RZONE_TRACK',
               'CDROM.GPCMD_REPORT_KEY',
               'CDROM.GPCMD_REQUEST_SENSE',
               'CDROM.GPCMD_RESERVE_RZONE_TRACK',
               'CDROM.GPCMD_SCAN',
               'CDROM.GPCMD_SEEK',
               'CDROM.GPCMD_SEND_DVD_STRUCTURE',
               'CDROM.GPCMD_SEND_EVENT',
               'CDROM.GPCMD_SEND_KEY',
               'CDROM.GPCMD_SEND_OPC',
               'CDROM.GPCMD_SET_READ_AHEAD',
               'CDROM.GPCMD_SET_STREAMING',
               'CDROM.GPCMD_START_STOP_UNIT',
               'CDROM.GPCMD_STOP_PLAY_SCAN',
               'CDROM.GPCMD_TEST_UNIT_READY',
               'CDROM.GPCMD_VERIFY_10',
               'CDROM.GPCMD_WRITE_10',
               'CDROM.GPCMD_WRITE_AND_VERIFY_10',
               'CDROM.GPCMD_SET_SPEED',
               'CDROM.GPCMD_PLAYAUDIO_TI',
               'CDROM.GPCMD_GET_MEDIA_STATUS',
               'CDROM.GPMODE_R_W_ERROR_PAGE',
               'CDROM.GPMODE_WRITE_PARMS_PAGE',
               'CDROM.GPMODE_AUDIO_CTL_PAGE',
               'CDROM.GPMODE_POWER_PAGE',
               'CDROM.GPMODE_FAULT_FAIL_PAGE',
               'CDROM.GPMODE_TO_PROTECT_PAGE',
               'CDROM.GPMODE_CAPABILITIES_PAGE',
               'CDROM.GPMODE_ALL_PAGES',
               'CDROM.GPMODE_CDROM_PAGE',
               'CDROM.DVD_STRUCT_PHYSICAL',
               'CDROM.DVD_STRUCT_COPYRIGHT',
               'CDROM.DVD_STRUCT_DISCKEY',
               'CDROM.DVD_STRUCT_BCA',
               'CDROM.DVD_STRUCT_MANUFACT',
               'CDROM.DVD_LAYERS',
               'CDROM.DVD_LU_SEND_AGID',
               'CDROM.DVD_HOST_SEND_CHALLENGE',
               'CDROM.DVD_LU_SEND_KEY1',
               'CDROM.DVD_LU_SEND_CHALLENGE',
               'CDROM.DVD_HOST_SEND_KEY2',
               'CDROM.DVD_AUTH_ESTABLISHED',
               'CDROM.DVD_AUTH_FAILURE',
               'CDROM.DVD_LU_SEND_TITLE_KEY',
               'CDROM.DVD_LU_SEND_ASF',
               'CDROM.DVD_INVALIDATE_AGID',
               'CDROM.DVD_LU_SEND_RPC_STATE',
               'CDROM.DVD_HOST_SEND_RPC_STATE',
               'CDROM.DVD_CPM_NO_COPYRIGHT',
               'CDROM.DVD_CPM_COPYRIGHTED',
               'CDROM.DVD_CP_SEC_NONE',
               'CDROM.DVD_CP_SEC_EXIST',
               'CDROM.DVD_CGMS_UNRESTRICTED',
               'CDROM.DVD_CGMS_SINGLE',
               'CDROM.DVD_CGMS_RESTRICTED',
               'CDROM.CDROM_MAX_SLOTS',
               'DLFCN._DLFCN_H',
               'DLFCN._FEATURES_H',
               'DLFCN.__USE_ANSI',
               'DLFCN.__FAVOR_BSD',
               'DLFCN._ISOC99_SOURCE',
               'DLFCN._POSIX_SOURCE',
               'DLFCN._POSIX_C_SOURCE',
               'DLFCN._XOPEN_SOURCE',
               'DLFCN._XOPEN_SOURCE_EXTENDED',
               'DLFCN._LARGEFILE64_SOURCE',
               'DLFCN._BSD_SOURCE',
               'DLFCN._SVID_SOURCE',
               'DLFCN._BSD_SOURCE',
               'DLFCN._SVID_SOURCE',
               'DLFCN.__USE_ISOC99',
               'DLFCN._POSIX_SOURCE',
               'DLFCN._POSIX_C_SOURCE',
               'DLFCN._POSIX_C_SOURCE',
               'DLFCN.__USE_POSIX',
               'DLFCN.__USE_POSIX2',
               'DLFCN.__USE_POSIX199309',
               'DLFCN.__USE_POSIX199506',
               'DLFCN.__USE_XOPEN',
               'DLFCN.__USE_XOPEN_EXTENDED',
               'DLFCN.__USE_UNIX98',
               'DLFCN._LARGEFILE_SOURCE',
               'DLFCN.__USE_XOPEN2K',
               'DLFCN.__USE_ISOC99',
               'DLFCN.__USE_XOPEN_EXTENDED',
               'DLFCN.__USE_LARGEFILE',
               'DLFCN.__USE_LARGEFILE64',
               'DLFCN.__USE_FILE_OFFSET64',
               'DLFCN.__USE_MISC',
               'DLFCN.__USE_BSD',
               'DLFCN.__USE_SVID',
               'DLFCN.__USE_GNU',
               'DLFCN.__USE_REENTRANT',
               'DLFCN.__STDC_IEC_559__',
               'DLFCN.__STDC_IEC_559_COMPLEX__',
               'DLFCN.__STDC_ISO_10646__',
               'DLFCN.__GNU_LIBRARY__',
               'DLFCN.__GLIBC__',
               'DLFCN.__GLIBC_MINOR__',
               'DLFCN._SYS_CDEFS_H',
               'DLFCN.__flexarr',
               'DLFCN.__flexarr',
               'DLFCN.__flexarr',
               'DLFCN.__flexarr',
               'DLFCN.__USE_LARGEFILE',
               'DLFCN.__USE_LARGEFILE64',
               'DLFCN.__USE_EXTERN_INLINES',
               'DLFCN.RTLD_LAZY',
               'DLFCN.RTLD_NOW',
               'DLFCN.RTLD_BINDING_MASK',
               'DLFCN.RTLD_NOLOAD',
               'DLFCN.RTLD_GLOBAL',
               'DLFCN.RTLD_LOCAL',
               'DLFCN.RTLD_NODELETE',
               'hotshot.log.__all__',
               'hotshot.log.ENTER',
               'hotshot.log.EXIT',
               'hotshot.log.LINE',
               'hotshot.stats.e',
               'email.charset.__all__',
               'email.charset.QP',
               'email.charset.BASE64',
               'email.charset.SHORTEST',
               'email.charset.MISC_LEN',
               'email.charset.DEFAULT_CHARSET',
               'email.charset.CHARSETS',
               'email.charset.ALIASES',
               'email.charset.CODEC_MAP',
               'email.generator.__all__',
               'email.generator.UNDERSCORE',
               'email.generator.NL',
               'email.generator.fcre',
               'email.generator._FMT',
               'email.generator._width',
               'email.generator._fmt',
               'email.message.__all__',
               'email.message.SEMISPACE',
               'email.message.paramre',
               'email.message.tspecials',
               'email.encoders.__all__',
               'email.__version__',
               'email.__all__',
               'email._LOWERNAMES',
               'email._MIMENAMES',
               'email.lower_map',
               'email._name',
               'email.importer',
               'email._name',
               'email.importer',
               'email.iterators.__all__',
               'email.parser.__all__',
               'email.header.__all__',
               'email.header.NL',
               'email.header.SPACE',
               'email.header.USPACE',
               'email.header.SPACE8',
               'email.header.UEMPTYSTRING',
               'email.header.MAXLINELEN',
               'email.header.USASCII',
               'email.header.UTF8',
               'email.header.ecre',
               'email.header.fcre',
               'email.header._max_append',
               'email._parseaddr.__all__',
               'email._parseaddr.SPACE',
               'email._parseaddr.EMPTYSTRING',
               'email._parseaddr.COMMASPACE',
               'email._parseaddr._monthnames',
               'email._parseaddr._daynames',
               'email._parseaddr._timezones',
               'email.utils.__all__',
               'email.utils.COMMASPACE',
               'email.utils.EMPTYSTRING',
               'email.utils.UEMPTYSTRING',
               'email.utils.CRLF',
               'email.utils.TICK',
               'email.utils.specialsre',
               'email.utils.escapesre',
               'email.utils.ecre',
               'email.utils.rfc2231_continuation',
               'email.feedparser.__all__',
               'email.feedparser.NLCRE',
               'email.feedparser.NLCRE_bol',
               'email.feedparser.NLCRE_eol',
               'email.feedparser.NLCRE_crack',
               'email.feedparser.headerRE',
               'email.feedparser.EMPTYSTRING',
               'email.feedparser.NL',
               'email.feedparser.NeedMoreData',
               'email.base64mime.__all__',
               'email.base64mime.CRLF',
               'email.base64mime.NL',
               'email.base64mime.EMPTYSTRING',
               'email.base64mime.MISC_LEN',
               'email.base64mime.body_encode',
               'email.base64mime.encodestring',
               'email.base64mime.body_decode',
               'email.base64mime.decodestring',
               'email.quoprimime.__all__',
               'email.quoprimime.CRLF',
               'email.quoprimime.NL',
               'email.quoprimime.MISC_LEN',
               'email.quoprimime.hqre',
               'email.quoprimime.bqre',
               'email.quoprimime.body_encode',
               'email.quoprimime.encodestring',
               'email.quoprimime.body_decode',
               'email.quoprimime.decodestring',
               'email.mime.audio.__all__',
               'email.mime.audio._sndhdr_MIMEmap',
               'email.mime.multipart.__all__',
               'email.mime.message.__all__',
               'email.mime.text.__all__',
               'email.mime.base.__all__',
               'email.mime.image.__all__',
               'email.mime.nonmultipart.__all__',
               'email.mime.application.__all__',
               'idlelib.RemoteDebugger.debugging',
               'idlelib.RemoteDebugger.idb_adap_oid',
               'idlelib.RemoteDebugger.gui_adap_oid',
               'idlelib.RemoteDebugger.frametable',
               'idlelib.RemoteDebugger.dicttable',
               'idlelib.RemoteDebugger.codetable',
               'idlelib.RemoteDebugger.tracebacktable',
               'idlelib.PyShell.IDENTCHARS',
               'idlelib.PyShell.LOCALHOST',
               'idlelib.PyShell.SIGTERM',
               'idlelib.PyShell.warning_stream',
               'idlelib.PyShell.usage_msg',
               'idlelib.keybindingDialog.root',
               'idlelib.idlever.IDLE_VERSION',
               'idlelib.CallTips.tc',
               'idlelib.CallTips.tests',
               'idlelib.EditorWindow.TK_TABWIDTH_DEFAULT',
               'idlelib.EditorWindow._tokenize',
               'idlelib.EditorWindow.tokenize',
               'idlelib.EditorWindow.keynames',
               'idlelib.ObjectBrowser.myrepr',
               'idlelib.ObjectBrowser.dispatch',
               'idlelib.tabpage.root',
               'idlelib.tabpage.tabPage',
               'idlelib.tabpage.entryPgName',
               'idlelib.tabpage.buttonAdd',
               'idlelib.tabpage.buttonRemove',
               'idlelib.tabpage.labelPgName',
               'idlelib.CodeContext.BLOCKOPENERS',
               'idlelib.CodeContext.UPDATEINTERVAL',
               'idlelib.CodeContext.FONTUPDATEINTERVAL',
               'idlelib.CodeContext.getspacesfirstword',
               'idlelib.configDialog.root',
               'idlelib.PyParse.C_NONE',
               'idlelib.PyParse.C_BACKSLASH',
               'idlelib.PyParse.C_STRING_FIRST_LINE',
               'idlelib.PyParse.C_STRING_NEXT_LINES',
               'idlelib.PyParse.C_BRACKET',
               'idlelib.PyParse._synchre',
               'idlelib.PyParse._junkre',
               'idlelib.PyParse._match_stringre',
               'idlelib.PyParse._itemre',
               'idlelib.PyParse._closere',
               'idlelib.PyParse._chew_ordinaryre',
               'idlelib.PyParse._tran',
               'idlelib.PyParse.ch',
               'idlelib.PyParse.ch',
               'idlelib.PyParse.ch',
               'idlelib.PyParse._tran',
               'idlelib.PyParse.ch',
               'idlelib.PyParse.UnicodeType',
               'idlelib.PyParse.UnicodeType',
               'idlelib.idle.idledir',
               'idlelib.idle.pypath',
               'idlelib.AutoComplete.FILENAME_CHARS',
               'idlelib.AutoComplete.ID_CHARS',
               'idlelib.AutoComplete.COMPLETE_ATTRIBUTES',
               'idlelib.AutoComplete.COMPLETE_FILES',
               'idlelib.testcode.l',
               'idlelib.ParenMatch._openers',
               'idlelib.ParenMatch.CHECK_DELAY',
               'idlelib.run.LOCALHOST',
               'idlelib.run.exit_now',
               'idlelib.run.quitting',
               'idlelib.textView.root',
               'idlelib.AutoCompleteWindow.HIDE_VIRTUAL_EVENT_NAME',
               'idlelib.AutoCompleteWindow.HIDE_SEQUENCES',
               'idlelib.AutoCompleteWindow.KEYPRESS_VIRTUAL_EVENT_NAME',
               'idlelib.AutoCompleteWindow.KEYPRESS_SEQUENCES',
               'idlelib.AutoCompleteWindow.KEYRELEASE_VIRTUAL_EVENT_NAME',
               'idlelib.AutoCompleteWindow.KEYRELEASE_SEQUENCE',
               'idlelib.AutoCompleteWindow.LISTUPDATE_SEQUENCE',
               'idlelib.AutoCompleteWindow.WINCONFIG_SEQUENCE',
               'idlelib.AutoCompleteWindow.DOUBLECLICK_SEQUENCE',
               'idlelib.MultiCall.MC_KEYPRESS',
               'idlelib.MultiCall.MC_KEYRELEASE',
               'idlelib.MultiCall.MC_BUTTONPRESS',
               'idlelib.MultiCall.MC_BUTTONRELEASE',
               'idlelib.MultiCall.MC_ACTIVATE',
               'idlelib.MultiCall.MC_CIRCULATE',
               'idlelib.MultiCall.MC_COLORMAP',
               'idlelib.MultiCall.MC_CONFIGURE',
               'idlelib.MultiCall.MC_DEACTIVATE',
               'idlelib.MultiCall.MC_DESTROY',
               'idlelib.MultiCall.MC_ENTER',
               'idlelib.MultiCall.MC_EXPOSE',
               'idlelib.MultiCall.MC_FOCUSIN',
               'idlelib.MultiCall.MC_FOCUSOUT',
               'idlelib.MultiCall.MC_GRAVITY',
               'idlelib.MultiCall.MC_LEAVE',
               'idlelib.MultiCall.MC_MAP',
               'idlelib.MultiCall.MC_MOTION',
               'idlelib.MultiCall.MC_MOUSEWHEEL',
               'idlelib.MultiCall.MC_PROPERTY',
               'idlelib.MultiCall.MC_REPARENT',
               'idlelib.MultiCall.MC_UNMAP',
               'idlelib.MultiCall.MC_VISIBILITY',
               'idlelib.MultiCall.MC_SHIFT',
               'idlelib.MultiCall.MC_CONTROL',
               'idlelib.MultiCall.MC_ALT',
               'idlelib.MultiCall.MC_META',
               'idlelib.MultiCall.MC_OPTION',
               'idlelib.MultiCall.MC_COMMAND',
               'idlelib.MultiCall._modifiers',
               'idlelib.MultiCall._modifier_masks',
               'idlelib.MultiCall._modifiers',
               'idlelib.MultiCall._modifier_masks',
               'idlelib.MultiCall._modifier_names',
               'idlelib.MultiCall.number',
               'idlelib.MultiCall.name',
               'idlelib.MultiCall._states',
               'idlelib.MultiCall._state_names',
               'idlelib.MultiCall.i',
               'idlelib.MultiCall.s',
               'idlelib.MultiCall._state_subsets',
               'idlelib.MultiCall.l',
               'idlelib.MultiCall._state_codes',
               'idlelib.MultiCall.i',
               'idlelib.MultiCall.s',
               'idlelib.MultiCall._types',
               'idlelib.MultiCall._binder_classes',
               'idlelib.MultiCall._type_names',
               'idlelib.MultiCall.number',
               'idlelib.MultiCall.name',
               'idlelib.MultiCall._keysym_re',
               'idlelib.MultiCall._button_re',
               'idlelib.MultiCall._multicall_dict',
               'idlelib.MultiCall.root',
               'idlelib.MultiCall.text',
               'idlelib.Bindings.menudefs',
               'idlelib.Bindings.quitItem',
               'idlelib.Bindings.closeItem',
               'idlelib.Bindings.default_keydefs',
               'idlelib.Bindings.sys',
               'idlelib.configHelpSourceEdit.root',
               'idlelib.configSectionNameDialog.root',
               'idlelib.ScriptBinding.IDENTCHARS',
               'idlelib.ScriptBinding.indent_message',
               'idlelib.configHandler.idleConf',
               'idlelib.CallTipWindow.HIDE_VIRTUAL_EVENT_NAME',
               'idlelib.CallTipWindow.HIDE_SEQUENCES',
               'idlelib.CallTipWindow.CHECKHIDE_VIRTUAL_EVENT_NAME',
               'idlelib.CallTipWindow.CHECKHIDE_SEQUENCES',
               'idlelib.CallTipWindow.CHECKHIDE_TIME',
               'idlelib.CallTipWindow.MARK_RIGHT',
               'idlelib.TreeWidget.ICONDIR',
               'idlelib.TreeWidget._icondir',
               'idlelib.TreeWidget._icondir',
               'idlelib.TreeWidget.ICONDIR',
               'idlelib.ColorDelegator.DEBUG',
               'idlelib.ColorDelegator.prog',
               'idlelib.ColorDelegator.idprog',
               'idlelib.ColorDelegator.asprog',
               'idlelib.aboutDialog.root',
               'idlelib.rpc.BUFSIZE',
               'idlelib.rpc.LOCALHOST',
               'idlelib.rpc.objecttable',
               'idlelib.rpc.request_queue',
               'idlelib.rpc.response_queue',
               'idlelib.IOBinding.BOM_UTF8',
               'idlelib.IOBinding.filesystemencoding',
               'idlelib.IOBinding.encoding',
               'idlelib.IOBinding.encoding',
               'idlelib.IOBinding.encoding',
               'idlelib.IOBinding.encoding',
               'idlelib.IOBinding.encoding',
               'idlelib.IOBinding.encoding',
               'idlelib.IOBinding.encoding',
               'idlelib.IOBinding.coding_re',
               'idlelib.WindowList.registry',
               'idlelib.WindowList.add_windows_to_menu',
               'idlelib.WindowList.register_callback',
               'idlelib.WindowList.unregister_callback',
               'sqlite3.dbapi2.paramstyle',
               'sqlite3.dbapi2.threadsafety',
               'sqlite3.dbapi2.apilevel',
               'sqlite3.dbapi2.Date',
               'sqlite3.dbapi2.Time',
               'sqlite3.dbapi2.Timestamp',
               'sqlite3.dbapi2.version_info',
               'sqlite3.dbapi2.x',
               'sqlite3.dbapi2.sqlite_version_info',
               'sqlite3.dbapi2.x',
               'sqlite3.dbapi2.Binary',
               'sqlite3.dbapi2.register_adapters_and_converters',
               'logging.codecs',
               'logging.thread',
               'logging.__author__',
               'logging.__status__',
               'logging.__version__',
               'logging.__date__',
               'logging._srcfile',
               'logging._srcfile',
               'logging._srcfile',
               'logging._srcfile',
               'logging.currentframe',
               'logging._startTime',
               'logging.raiseExceptions',
               'logging.logThreads',
               'logging.logProcesses',
               'logging.CRITICAL',
               'logging.FATAL',
               'logging.ERROR',
               'logging.WARNING',
               'logging.WARN',
               'logging.INFO',
               'logging.DEBUG',
               'logging.NOTSET',
               'logging._levelNames',
               'logging._lock',
               'logging._defaultFormatter',
               'logging._handlers',
               'logging._handlerList',
               'logging._loggerClass',
               'logging._loggerClass',
               'logging.root',
               'logging.BASIC_FORMAT',
               'logging.fatal',
               'logging.warn',
               'logging.handlers.codecs',
               'logging.handlers.DEFAULT_TCP_LOGGING_PORT',
               'logging.handlers.DEFAULT_UDP_LOGGING_PORT',
               'logging.handlers.DEFAULT_HTTP_LOGGING_PORT',
               'logging.handlers.DEFAULT_SOAP_LOGGING_PORT',
               'logging.handlers.SYSLOG_UDP_PORT',
               'logging.handlers._MIDNIGHT',
               'logging.config.thread',
               'logging.config.DEFAULT_LOGGING_CONFIG_PORT',
               'logging.config.RESET_ERROR',
               'logging.config.RESET_ERROR',
               'logging.config._listener',
               'compiler.transformer._doc_nodes',
               'compiler.transformer._cmp_types',
               'compiler.transformer._legal_node_types',
               'compiler.transformer._assign_types',
               'compiler.transformer._names',
               'compiler.transformer.k',
               'compiler.transformer.v',
               'compiler.transformer.k',
               'compiler.transformer.v',
               'compiler.visitor._walker',
               'compiler.pycodegen.VERSION',
               'compiler.pycodegen.VERSION',
               'compiler.pycodegen.callfunc_opcode_info',
               'compiler.pycodegen.LOOP',
               'compiler.pycodegen.EXCEPT',
               'compiler.pycodegen.TRY_FINALLY',
               'compiler.pycodegen.END_FINALLY',
               'compiler.pycodegen.wrapper',
               'compiler.pycodegen.file',
               'compiler.ast.nodes',
               'compiler.ast.name',
               'compiler.ast.obj',
               'compiler.pyassem.RAW',
               'compiler.pyassem.FLAT',
               'compiler.pyassem.CONV',
               'compiler.pyassem.DONE',
               'compiler.pyassem.findDepth',
               'compiler.consts.OP_ASSIGN',
               'compiler.consts.OP_DELETE',
               'compiler.consts.OP_APPLY',
               'compiler.consts.SC_LOCAL',
               'compiler.consts.SC_GLOBAL',
               'compiler.consts.SC_FREE',
               'compiler.consts.SC_CELL',
               'compiler.consts.SC_UNKNOWN',
               'compiler.consts.CO_OPTIMIZED',
               'compiler.consts.CO_NEWLOCALS',
               'compiler.consts.CO_VARARGS',
               'compiler.consts.CO_VARKEYWORDS',
               'compiler.consts.CO_NESTED',
               'compiler.consts.CO_GENERATOR',
               'compiler.consts.CO_GENERATOR_ALLOWED',
               'compiler.consts.CO_FUTURE_DIVISION',
               'compiler.consts.CO_FUTURE_ABSIMPORT',
               'compiler.consts.CO_FUTURE_WITH_STATEMENT',
               'compiler.misc.MANGLE_LEN',
               'compiler.symbols.MANGLE_LEN',
               'compiler.symbols.file',
               'compiler.symbols.f',
               'compiler.symbols.buf',
               'compiler.symbols.syms',
               'compiler.symbols.mod_names',
               'compiler.symbols.tree',
               'compiler.symbols.s',
               'compiler.symbols.names2',
               'compiler.symbols.d',
               'compiler.symbols.scopes',
               'compiler.symbols.d',
               'compiler.symbols.s',
               'compiler.symbols.l',
               'compiler.symbols.sc',
               'compiler.future.file',
               'compiler.future.tree',
               'compiler.future.v',
               'FileDialog.dialogstates',
               'Tkinter.__version__',
               'Tkinter.msg',
               'Tkinter.tkinter',
               'Tkinter.TclError',
               'Tkinter._MacOS',
               'Tkinter.MacOS',
               'Tkinter._MacOS',
               'Tkinter.wantobjects',
               'Tkinter.TkVersion',
               'Tkinter.TclVersion',
               'Tkinter.READABLE',
               'Tkinter.WRITABLE',
               'Tkinter.EXCEPTION',
               'Tkinter._flatten',
               'Tkinter._cnfmerge',
               'Tkinter._support_default_root',
               'Tkinter._default_root',
               'Tkinter._varnum',
               'Tkinter.getint',
               'Tkinter.getdouble',
               'Dialog.DIALOG_ICON',
               'Dialog.DIALOG_ICON',
               'Dialog.t',
               'Dialog.q',
               'turtle.speeds',
               'turtle._root',
               'turtle._canvas',
               'turtle._pen',
               'turtle._width',
               'turtle._height',
               'turtle._startx',
               'turtle._starty',
               'turtle._title',
               'turtle.methodname',
               'Tix.WINDOW',
               'Tix.TEXT',
               'Tix.STATUS',
               'Tix.IMMEDIATE',
               'Tix.IMAGE',
               'Tix.IMAGETEXT',
               'Tix.BALLOON',
               'Tix.AUTO',
               'Tix.ACROSSTOP',
               'Tix.TCL_DONT_WAIT',
               'Tix.TCL_WINDOW_EVENTS',
               'Tix.TCL_FILE_EVENTS',
               'Tix.TCL_TIMER_EVENTS',
               'Tix.TCL_IDLE_EVENTS',
               'Tix.TCL_ALL_EVENTS',
               'tkFont.__version__',
               'tkFont.NORMAL',
               'tkFont.ROMAN',
               'tkFont.BOLD',
               'tkFont.ITALIC',
               'tkFont.root',
               'tkFont.f',
               'tkFont.f',
               'tkFont.w',
               'tkFont.w',
               'tkFont.fb',
               'Tkconstants.NO',
               'Tkconstants.FALSE',
               'Tkconstants.OFF',
               'Tkconstants.YES',
               'Tkconstants.TRUE',
               'Tkconstants.ON',
               'Tkconstants.N',
               'Tkconstants.S',
               'Tkconstants.W',
               'Tkconstants.E',
               'Tkconstants.NW',
               'Tkconstants.SW',
               'Tkconstants.NE',
               'Tkconstants.SE',
               'Tkconstants.NS',
               'Tkconstants.EW',
               'Tkconstants.NSEW',
               'Tkconstants.CENTER',
               'Tkconstants.NONE',
               'Tkconstants.X',
               'Tkconstants.Y',
               'Tkconstants.BOTH',
               'Tkconstants.LEFT',
               'Tkconstants.TOP',
               'Tkconstants.RIGHT',
               'Tkconstants.BOTTOM',
               'Tkconstants.RAISED',
               'Tkconstants.SUNKEN',
               'Tkconstants.FLAT',
               'Tkconstants.RIDGE',
               'Tkconstants.GROOVE',
               'Tkconstants.SOLID',
               'Tkconstants.HORIZONTAL',
               'Tkconstants.VERTICAL',
               'Tkconstants.NUMERIC',
               'Tkconstants.CHAR',
               'Tkconstants.WORD',
               'Tkconstants.BASELINE',
               'Tkconstants.INSIDE',
               'Tkconstants.OUTSIDE',
               'Tkconstants.SEL',
               'Tkconstants.SEL_FIRST',
               'Tkconstants.SEL_LAST',
               'Tkconstants.END',
               'Tkconstants.INSERT',
               'Tkconstants.CURRENT',
               'Tkconstants.ANCHOR',
               'Tkconstants.ALL',
               'Tkconstants.NORMAL',
               'Tkconstants.DISABLED',
               'Tkconstants.ACTIVE',
               'Tkconstants.HIDDEN',
               'Tkconstants.CASCADE',
               'Tkconstants.CHECKBUTTON',
               'Tkconstants.COMMAND',
               'Tkconstants.RADIOBUTTON',
               'Tkconstants.SEPARATOR',
               'Tkconstants.SINGLE',
               'Tkconstants.BROWSE',
               'Tkconstants.MULTIPLE',
               'Tkconstants.EXTENDED',
               'Tkconstants.DOTBOX',
               'Tkconstants.UNDERLINE',
               'Tkconstants.PIESLICE',
               'Tkconstants.CHORD',
               'Tkconstants.ARC',
               'Tkconstants.FIRST',
               'Tkconstants.LAST',
               'Tkconstants.BUTT',
               'Tkconstants.PROJECTING',
               'Tkconstants.ROUND',
               'Tkconstants.BEVEL',
               'Tkconstants.MITER',
               'Tkconstants.MOVETO',
               'Tkconstants.SCROLL',
               'Tkconstants.UNITS',
               'Tkconstants.PAGES',
               'tkMessageBox.ERROR',
               'tkMessageBox.INFO',
               'tkMessageBox.QUESTION',
               'tkMessageBox.WARNING',
               'tkMessageBox.ABORTRETRYIGNORE',
               'tkMessageBox.OK',
               'tkMessageBox.OKCANCEL',
               'tkMessageBox.RETRYCANCEL',
               'tkMessageBox.YESNO',
               'tkMessageBox.YESNOCANCEL',
               'tkMessageBox.ABORT',
               'tkMessageBox.RETRY',
               'tkMessageBox.IGNORE',
               'tkMessageBox.OK',
               'tkMessageBox.CANCEL',
               'tkMessageBox.YES',
               'tkMessageBox.NO',
               'FixTk.prefix',
               'FixTk.name',
               'FixTk.tcldir',
               'FixTk.ver',
               'FixTk.v',
               'FixTk.name',
               'FixTk.tixdir',
               'tkFileDialog.enc',
               'tkFileDialog.enc',
               'tkFileDialog.openfilename',
               'tkFileDialog.fp',
               'tkFileDialog.saveasfilename',
               'tkSimpleDialog.root',
               'xml.__all__',
               'xml.__version__',
               'xml._MINIMUM_XMLPLUS_VERSION',
               'xml.v',
               'xml.v',
               'xml.dom.INDEX_SIZE_ERR',
               'xml.dom.DOMSTRING_SIZE_ERR',
               'xml.dom.HIERARCHY_REQUEST_ERR',
               'xml.dom.WRONG_DOCUMENT_ERR',
               'xml.dom.INVALID_CHARACTER_ERR',
               'xml.dom.NO_DATA_ALLOWED_ERR',
               'xml.dom.NO_MODIFICATION_ALLOWED_ERR',
               'xml.dom.NOT_FOUND_ERR',
               'xml.dom.NOT_SUPPORTED_ERR',
               'xml.dom.INUSE_ATTRIBUTE_ERR',
               'xml.dom.INVALID_STATE_ERR',
               'xml.dom.SYNTAX_ERR',
               'xml.dom.INVALID_MODIFICATION_ERR',
               'xml.dom.NAMESPACE_ERR',
               'xml.dom.INVALID_ACCESS_ERR',
               'xml.dom.VALIDATION_ERR',
               'xml.dom.XML_NAMESPACE',
               'xml.dom.XMLNS_NAMESPACE',
               'xml.dom.XHTML_NAMESPACE',
               'xml.dom.EMPTY_NAMESPACE',
               'xml.dom.EMPTY_PREFIX',
               'xml.dom.xmlbuilder.__all__',
               'xml.dom.xmlbuilder.NodeFilter',
               'xml.dom.domreg.well_known_implementations',
               'xml.dom.domreg.registered',
               'xml.dom.minidom._nodeTypes_with_children',
               'xml.dom.minidom.AttributeList',
               'xml.dom.minidom._no_type',
               'xml.dom.pulldom._StringTypes',
               'xml.dom.pulldom._StringTypes',
               'xml.dom.pulldom.START_ELEMENT',
               'xml.dom.pulldom.END_ELEMENT',
               'xml.dom.pulldom.COMMENT',
               'xml.dom.pulldom.START_DOCUMENT',
               'xml.dom.pulldom.END_DOCUMENT',
               'xml.dom.pulldom.PROCESSING_INSTRUCTION',
               'xml.dom.pulldom.IGNORABLE_WHITESPACE',
               'xml.dom.pulldom.CHARACTERS',
               'xml.dom.pulldom.default_bufsize',
               'xml.dom.minicompat.__all__',
               'xml.dom.minicompat.StringTypes',
               'xml.dom.minicompat.StringTypes',
               'xml.dom.expatbuilder.TEXT_NODE',
               'xml.dom.expatbuilder.CDATA_SECTION_NODE',
               'xml.dom.expatbuilder.DOCUMENT_NODE',
               'xml.dom.expatbuilder.FILTER_ACCEPT',
               'xml.dom.expatbuilder.FILTER_REJECT',
               'xml.dom.expatbuilder.FILTER_SKIP',
               'xml.dom.expatbuilder.FILTER_INTERRUPT',
               'xml.dom.expatbuilder.theDOMImplementation',
               'xml.dom.expatbuilder._typeinfo_map',
               'xml.dom.expatbuilder._ALLOWED_FILTER_RETURNS',
               'xml.dom.expatbuilder._FRAGMENT_BUILDER_INTERNAL_SYSTEM_ID',
               'xml.dom.expatbuilder._FRAGMENT_BUILDER_TEMPLATE',
               'xml.sax.default_parser_list',
               'xml.sax._false',
               'xml.sax.default_parser_list',
               'xml.sax.os',
               'xml.sax._key',
               'xml.sax.default_parser_list',
               'xml.sax.sys',
               'xml.sax._exceptions.sys',
               'xml.sax.expatreader.version',
               'xml.sax.expatreader.sys',
               'xml.sax.expatreader.AttributesImpl',
               'xml.sax.expatreader.AttributesNSImpl',
               'xml.sax.expatreader._mkproxy',
               'xml.sax.expatreader.weakref',
               'xml.sax.expatreader._weakref',
               'xml.sax.expatreader.p',
               'xml.sax.handler.version',
               'xml.sax.handler.feature_namespaces',
               'xml.sax.handler.feature_namespace_prefixes',
               'xml.sax.handler.feature_string_interning',
               'xml.sax.handler.feature_validation',
               'xml.sax.handler.feature_external_ges',
               'xml.sax.handler.feature_external_pes',
               'xml.sax.handler.all_features',
               'xml.sax.handler.property_lexical_handler',
               'xml.sax.handler.property_declaration_handler',
               'xml.sax.handler.property_dom_node',
               'xml.sax.handler.property_xml_string',
               'xml.sax.handler.property_encoding',
               'xml.sax.handler.property_interning_dict',
               'xml.sax.handler.all_properties',
               'xml.sax.saxutils._StringTypes',
               'xml.sax.saxutils._StringTypes',
               'xml.sax.saxutils._error_handling',
               'xml.sax.saxutils.xmlcharrefreplace_errors',
               'xml.sax.saxutils._error_handling',
               'xml.etree.ElementTree.__all__',
               'xml.etree.ElementTree.ElementPath',
               'xml.etree.ElementTree.VERSION',
               'xml.etree.ElementTree._Element',
               'xml.etree.ElementTree.PI',
               'xml.etree.ElementTree._escape',
               'xml.etree.ElementTree._escape',
               'xml.etree.ElementTree._escape_map',
               'xml.etree.ElementTree._namespace_map',
               'xml.etree.ElementTree.fromstring',
               'xml.etree.ElementTree.XMLParser',
               'xml.etree.ElementInclude.XINCLUDE',
               'xml.etree.ElementInclude.XINCLUDE_INCLUDE',
               'xml.etree.ElementInclude.XINCLUDE_FALLBACK',
               'xml.etree.ElementPath.xpath_tokenizer',
               'xml.etree.ElementPath._cache',
               'xml.parsers.expat.__version__',
               'encodings.big5hkscs.codec',
               'encodings.cp949.codec',
               'encodings.mbcs.encode',
               'encodings.cp1255.decoding_table',
               'encodings.cp1255.encoding_table',
               'encodings.mac_croatian.decoding_table',
               'encodings.mac_croatian.encoding_table',
               'encodings.cp775.decoding_map',
               'encodings.cp775.decoding_table',
               'encodings.cp775.encoding_map',
               'encodings.cp1140.decoding_table',
               'encodings.cp1140.encoding_table',
               'encodings.mac_turkish.decoding_table',
               'encodings.mac_turkish.encoding_table',
               'encodings.euc_kr.codec',
               'encodings._cache',
               'encodings._unknown',
               'encodings._import_tail',
               'encodings._norm_encoding_map',
               'encodings._aliases',
               'encodings.cp875.decoding_table',
               'encodings.cp875.encoding_table',
               'encodings.cp861.decoding_map',
               'encodings.cp861.decoding_table',
               'encodings.cp861.encoding_map',
               'encodings.cp866.decoding_map',
               'encodings.cp866.decoding_table',
               'encodings.cp866.encoding_map',
               'encodings.gb2312.codec',
               'encodings.mac_roman.decoding_table',
               'encodings.mac_roman.encoding_table',
               'encodings.big5.codec',
               'encodings.cp1251.decoding_table',
               'encodings.cp1251.encoding_table',
               'encodings.iso8859_3.decoding_table',
               'encodings.iso8859_3.encoding_table',
               'encodings.iso8859_7.decoding_table',
               'encodings.iso8859_7.encoding_table',
               'encodings.ptcp154.decoding_map',
               'encodings.ptcp154.encoding_map',
               'encodings.iso8859_9.decoding_table',
               'encodings.iso8859_9.encoding_table',
               'encodings.iso8859_10.decoding_table',
               'encodings.iso8859_10.encoding_table',
               'encodings.euc_jis_2004.codec',
               'encodings.euc_jisx0213.codec',
               'encodings.idna.dots',
               'encodings.idna.ace_prefix',
               'encodings.idna.uace_prefix',
               'encodings.cp1256.decoding_table',
               'encodings.cp1256.encoding_table',
               'encodings.cp865.decoding_map',
               'encodings.cp865.decoding_table',
               'encodings.cp865.encoding_map',
               'encodings.mac_greek.decoding_table',
               'encodings.mac_greek.encoding_table',
               'encodings.cp855.decoding_map',
               'encodings.cp855.decoding_table',
               'encodings.cp855.encoding_map',
               'encodings.cp424.decoding_table',
               'encodings.cp424.encoding_table',
               'encodings.cp1026.decoding_table',
               'encodings.cp1026.encoding_table',
               'encodings.utf_16_be.encode',
               'encodings.mac_arabic.decoding_map',
               'encodings.mac_arabic.decoding_table',
               'encodings.mac_arabic.encoding_map',
               'encodings.iso2022_jp_1.codec',
               'encodings.cp1258.decoding_table',
               'encodings.cp1258.encoding_table',
               'encodings.iso2022_jp.codec',
               'encodings.cp1252.decoding_table',
               'encodings.cp1252.encoding_table',
               'encodings.iso8859_13.decoding_table',
               'encodings.iso8859_13.encoding_table',
               'encodings.iso2022_jp_3.codec',
               'encodings.utf_16.encode',
               'encodings.shift_jisx0213.codec',
               'encodings.johab.codec',
               'encodings.punycode.digits',
               'encodings.cp950.codec',
               'encodings.iso2022_jp_ext.codec',
               'encodings.iso2022_jp_2004.codec',
               'encodings.mac_centeuro.decoding_table',
               'encodings.mac_centeuro.encoding_table',
               'encodings.cp437.decoding_map',
               'encodings.cp437.decoding_table',
               'encodings.cp437.encoding_map',
               'encodings.gbk.codec',
               'encodings.iso2022_jp_2.codec',
               'encodings.cp1253.decoding_table',
               'encodings.cp1253.encoding_table',
               'encodings.mac_iceland.decoding_table',
               'encodings.mac_iceland.encoding_table',
               'encodings.cp737.decoding_map',
               'encodings.cp737.decoding_table',
               'encodings.cp737.encoding_map',
               'encodings.utf_8.encode',
               'encodings.mac_farsi.decoding_table',
               'encodings.mac_farsi.encoding_table',
               'encodings.iso8859_1.decoding_table',
               'encodings.iso8859_1.encoding_table',
               'encodings.utf_16_le.encode',
               'encodings.palmos.decoding_map',
               'encodings.palmos.encoding_map',
               'encodings.cp850.decoding_map',
               'encodings.cp850.decoding_table',
               'encodings.cp850.encoding_map',
               'encodings.mac_cyrillic.decoding_table',
               'encodings.mac_cyrillic.encoding_table',
               'encodings.iso2022_kr.codec',
               'encodings.gb18030.codec',
               'encodings.iso8859_2.decoding_table',
               'encodings.iso8859_2.encoding_table',
               'encodings.iso8859_15.decoding_table',
               'encodings.iso8859_15.encoding_table',
               'encodings.cp037.decoding_table',
               'encodings.cp037.encoding_table',
               'encodings.cp932.codec',
               'encodings.iso8859_6.decoding_table',
               'encodings.iso8859_6.encoding_table',
               'encodings.koi8_u.decoding_table',
               'encodings.koi8_u.encoding_table',
               'encodings.mac_romanian.decoding_table',
               'encodings.mac_romanian.encoding_table',
               'encodings.shift_jis_2004.codec',
               'encodings.tis_620.decoding_table',
               'encodings.tis_620.encoding_table',
               'encodings.cp869.decoding_map',
               'encodings.cp869.decoding_table',
               'encodings.cp869.encoding_map',
               'encodings.aliases.aliases',
               'encodings.cp1257.decoding_table',
               'encodings.cp1257.encoding_table',
               'encodings.iso8859_5.decoding_table',
               'encodings.iso8859_5.encoding_table',
               'encodings.iso8859_16.decoding_table',
               'encodings.iso8859_16.encoding_table',
               'encodings.rot_13.decoding_map',
               'encodings.rot_13.encoding_map',
               'encodings.euc_jp.codec',
               'encodings.cp1250.decoding_table',
               'encodings.cp1250.encoding_table',
               'encodings.iso8859_14.decoding_table',
               'encodings.iso8859_14.encoding_table',
               'encodings.cp874.decoding_table',
               'encodings.cp874.encoding_table',
               'encodings.cp852.decoding_map',
               'encodings.cp852.decoding_table',
               'encodings.cp852.encoding_map',
               'encodings.shift_jis.codec',
               'encodings.iso8859_11.decoding_table',
               'encodings.iso8859_11.encoding_table',
               'encodings.cp1006.decoding_table',
               'encodings.cp1006.encoding_table',
               'encodings.hp_roman8.decoding_map',
               'encodings.hp_roman8.encoding_map',
               'encodings.cp856.decoding_table',
               'encodings.cp856.encoding_table',
               'encodings.iso8859_8.decoding_table',
               'encodings.iso8859_8.encoding_table',
               'encodings.cp864.decoding_map',
               'encodings.cp864.decoding_table',
               'encodings.cp864.encoding_map',
               'encodings.iso8859_4.decoding_table',
               'encodings.iso8859_4.encoding_table',
               'encodings.cp862.decoding_map',
               'encodings.cp862.decoding_table',
               'encodings.cp862.encoding_map',
               'encodings.mac_latin2.decoding_map',
               'encodings.mac_latin2.encoding_map',
               'encodings.cp863.decoding_map',
               'encodings.cp863.decoding_table',
               'encodings.cp863.encoding_map',
               'encodings.koi8_r.decoding_table',
               'encodings.koi8_r.encoding_table',
               'encodings.cp500.decoding_table',
               'encodings.cp500.encoding_table',
               'encodings.cp1254.decoding_table',
               'encodings.cp1254.encoding_table',
               'encodings.cp857.decoding_map',
               'encodings.cp857.decoding_table',
               'encodings.cp857.encoding_map',
               'encodings.hz.codec',
               'encodings.cp860.decoding_map',
               'encodings.cp860.decoding_table',
               'encodings.cp860.encoding_map',
               'wsgiref.handlers.__all__',
               'wsgiref.handlers.True',
               'wsgiref.handlers.False',
               'wsgiref.handlers._weekdayname',
               'wsgiref.handlers._monthname',
               'wsgiref.headers.tspecials',
               'wsgiref.util.__all__',
               'wsgiref.util._hoppish',
               'wsgiref.simple_server.__version__',
               'wsgiref.simple_server.__all__',
               'wsgiref.simple_server.server_version',
               'wsgiref.simple_server.sys_version',
               'wsgiref.simple_server.software_version',
               'wsgiref.simple_server.httpd',
               'wsgiref.simple_server.sa',
               'wsgiref.validate.__all__',
               'wsgiref.validate.header_re',
               'wsgiref.validate.bad_header_value_re',
               'curses.__revision__',
               'curses.panel.__revision__',
               'curses.textpad.str',
               'curses.has_key._capability_names',
               'curses.has_key.L',
               'curses.has_key.key',
               'curses.has_key.system',
               'curses.has_key.python',
               'curses.has_key.i',
               'curses.ascii.NUL',
               'curses.ascii.SOH',
               'curses.ascii.STX',
               'curses.ascii.ETX',
               'curses.ascii.EOT',
               'curses.ascii.ENQ',
               'curses.ascii.ACK',
               'curses.ascii.BEL',
               'curses.ascii.BS',
               'curses.ascii.TAB',
               'curses.ascii.HT',
               'curses.ascii.LF',
               'curses.ascii.NL',
               'curses.ascii.VT',
               'curses.ascii.FF',
               'curses.ascii.CR',
               'curses.ascii.SO',
               'curses.ascii.SI',
               'curses.ascii.DLE',
               'curses.ascii.DC1',
               'curses.ascii.DC2',
               'curses.ascii.DC3',
               'curses.ascii.DC4',
               'curses.ascii.NAK',
               'curses.ascii.SYN',
               'curses.ascii.ETB',
               'curses.ascii.CAN',
               'curses.ascii.EM',
               'curses.ascii.SUB',
               'curses.ascii.ESC',
               'curses.ascii.FS',
               'curses.ascii.GS',
               'curses.ascii.RS',
               'curses.ascii.US',
               'curses.ascii.SP',
               'curses.ascii.DEL',
               'curses.ascii.controlnames'],
 'FUNCTIONS': [('fnmatch.fnmatch',
                ['name', 'pat'],
                "Test whether FILENAME matches PATTERN.\n\n    Patterns are Unix shell style:\n\n    *       matches everything\n    ?       matches any single character\n    [seq]   matches any character in seq\n    [!seq]  matches any char not in seq\n\n    An initial period in FILENAME is not special.\n    Both FILENAME and PATTERN are first case-normalized\n    if the operating system requires it.\n    If you don't want this, use fnmatchcase(FILENAME, PATTERN).\n    "),
               ('fnmatch.filter',
                ['names', 'pat'],
                'Return the subset of the list NAMES that match PAT'),
               ('fnmatch.fnmatchcase',
                ['name', 'pat'],
                "Test whether FILENAME matches PATTERN, including case.\n\n    This is a version of fnmatch() which doesn't case-normalize\n    its arguments.\n    "),
               ('fnmatch.translate',
                ['pat'],
                'Translate a shell PATTERN to a regular expression.\n\n    There is no way to quote meta-characters.\n    '),
               ('runpy._run_code',
                ['code', 'run_globals', 'init_globals', 'mod_name', 'mod_fname', 'mod_loader'],
                'Helper for _run_module_code'),
               ('runpy._run_module_code',
                ['code',
                 'init_globals=None',
                 'mod_name=None',
                 'mod_fname=None',
                 'mod_loader=None',
                 'alter_sys=False'],
                'Helper for run_module'),
               ('runpy._get_filename', ['loader', 'mod_name'], ''),
               ('runpy.run_module',
                ['mod_name', 'init_globals=None', 'run_name=None', 'alter_sys=False'],
                "Execute a module's code without importing it\n\n       Returns the resulting top level namespace dictionary\n    "),
               ('shutil.copyfileobj',
                ['fsrc', 'fdst', 'length=16*1024'],
                'copy data from file-like object fsrc to file-like object fdst'),
               ('shutil._samefile', ['src', 'dst'], ''),
               ('shutil.copyfile', ['src', 'dst'], 'Copy data from src to dst'),
               ('shutil.copymode', ['src', 'dst'], 'Copy mode bits from src to dst'),
               ('shutil.copystat',
                ['src', 'dst'],
                'Copy all stat info (mode bits, atime and mtime) from src to dst'),
               ('shutil.copy',
                ['src', 'dst'],
                'Copy data and mode bits ("cp src dst").\n\n    The destination may be a directory.\n\n    '),
               ('shutil.copy2',
                ['src', 'dst'],
                'Copy data and all stat info ("cp -p src dst").\n\n    The destination may be a directory.\n\n    '),
               ('shutil.copytree',
                ['src', 'dst', 'symlinks=False'],
                'Recursively copy a directory tree using copy2().\n\n    The destination directory must not already exist.\n    If exception(s) occur, an Error is raised with a list of reasons.\n\n    If the optional symlinks flag is true, symbolic links in the\n    source tree result in symbolic links in the destination tree; if\n    it is false, the contents of the files pointed to by symbolic\n    links are copied.\n\n    XXX Consider this example code rather than the ultimate tool.\n\n    '),
               ('shutil.rmtree',
                ['path', 'ignore_errors=False', 'onerror=None'],
                'Recursively delete a directory tree.\n\n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is os.listdir, os.remove, or os.rmdir;\n    path is the argument to that function that caused it to fail; and\n    exc_info is a tuple returned by sys.exc_info().  If ignore_errors\n    is false and onerror is None, an exception is raised.\n\n    '),
               ('shutil.move',
                ['src', 'dst'],
                'Recursively move a file or directory to another location.\n\n    If the destination is on our current filesystem, then simply use\n    rename.  Otherwise, copy src to the dst and then remove src.\n    A lot more could be done here...  A look at a mv.c shows a lot of\n    the issues this implementation glosses over.\n\n    '),
               ('shutil.destinsrc', ['src', 'dst'], ''),
               ('calendar.isleap', ['year'], 'Return 1 for leap years, 0 for non-leap years.'),
               ('calendar.leapdays',
                ['y1', 'y2'],
                'Return number of leap years in range [y1, y2).\n       Assume y1 <= y2.'),
               ('calendar.weekday',
                ['year', 'month', 'day'],
                'Return weekday (0-6 ~ Mon-Sun) for year (1970-...), month (1-12),\n       day (1-31).'),
               ('calendar.monthrange',
                ['year', 'month'],
                'Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for\n       year, month.'),
               ('calendar.setfirstweekday', ['firstweekday'], ''),
               ('calendar.format',
                ['cols', 'colwidth=_colwidth', 'spacing=_spacing'],
                'Prints multi-column formatting for year calendars'),
               ('calendar.formatstring',
                ['cols', 'colwidth=_colwidth', 'spacing=_spacing'],
                'Returns a string formatted from n strings, centered within n columns.'),
               ('calendar.timegm',
                ['tuple'],
                'Unrelated but handy function to calculate Unix timestamp from GMT.'),
               ('calendar.main', ['args'], ''),
               ('contextlib.contextmanager',
                ['func'],
                '@contextmanager decorator.\n\n    Typical usage:\n\n        @contextmanager\n        def some_generator(<arguments>):\n            <setup>\n            try:\n                yield <value>\n            finally:\n                <cleanup>\n\n    This makes this:\n\n        with some_generator(<arguments>) as <variable>:\n            <body>\n\n    equivalent to this:\n\n        <setup>\n        try:\n            <variable> = <value>\n            <body>\n        finally:\n            <cleanup>\n\n    '),
               ('contextlib.nested',
                ['*managers'],
                'Support multiple context managers in a single with-statement.\n\n    Code like this:\n\n        with nested(A, B, C) as (X, Y, Z):\n            <body>\n\n    is equivalent to this:\n\n        with A as X:\n            with B as Y:\n                with C as Z:\n                    <body>\n\n    '),
               ('compileall.compile_dir',
                ['dir', 'maxlevels=10', 'ddir=None', 'force=0', 'rx=None', 'quiet=0'],
                'Byte-compile all modules in the given directory tree.\n\n    Arguments (only dir is required):\n\n    dir:       the directory to byte-compile\n    maxlevels: maximum recursion level (default 10)\n    ddir:      if given, purported directory name (this is the\n               directory name that will show up in error messages)\n    force:     if 1, force compilation, even if timestamps are up-to-date\n    quiet:     if 1, be quiet during compilation\n\n    '),
               ('compileall.compile_path',
                ['skip_curdir=1', 'maxlevels=0', 'force=0', 'quiet=0'],
                'Byte-compile all module on sys.path.\n\n    Arguments (all optional):\n\n    skip_curdir: if true, skip current directory (default true)\n    maxlevels:   max recursion level (default 0)\n    force: as for compile_dir() (default 0)\n    quiet: as for compile_dir() (default 0)\n\n    '),
               ('compileall.main', [], 'Script main program.'),
               ('platform.libc_ver',
                ['executable=sys.executable', "lib=''", "version=''", 'chunksize=2048'],
                ' Tries to determine the libc version that the file executable\n        (which defaults to the Python interpreter) is linked against.\n\n        Returns a tuple of strings (lib,version) which default to the\n        given parameters in case the lookup fails.\n\n        Note that the function has intimate knowledge of how different\n        libc versions add symbols to the executable and thus is probably\n        only useable for executables compiled using gcc.\n\n        The file is read and scanned in chunks of chunksize bytes.\n\n    '),
               ('platform._dist_try_harder',
                ['distname', 'version', 'id'],
                ' Tries some special tricks to get the distribution\n        information in case the default method fails.\n\n        Currently supports older SuSE Linux, Caldera OpenLinux and\n        Slackware Linux distributions.\n\n    '),
               ('platform.dist',
                ["distname=''",
                 "version=''",
                 "id=''",
                 "supported_dists=('SuSE', 'debian', 'fedora', 'redhat', 'mandrake')"],
                ' Tries to determine the name of the Linux OS distribution name.\n\n        The function first looks for a distribution release file in\n        /etc and then reverts to _dist_try_harder() in case no\n        suitable files are found.\n\n        Returns a tuple (distname,version,id) which default to the\n        args given as parameters.\n\n    '),
               ('platform.popen',
                ['cmd', "mode='r'", 'bufsize=None'],
                ' Portable popen() interface.\n    '),
               ('platform._norm_version',
                ['version', "build=''"],
                ' Normalize the version and build strings and return a single\n        version string using the format major.minor.build (or patchlevel).\n    '),
               ('platform._syscmd_ver',
                ["system=''",
                 "release=''",
                 "version=''",
                 "supported_platforms=('win32', 'win16', 'dos', 'os2')"],
                ' Tries to figure out the OS version used and returns\n        a tuple (system,release,version).\n\n        It uses the "ver" shell command for this which is known\n        to exists on Windows, DOS and OS/2. XXX Others too ?\n\n        In case this fails, the given parameters are used as\n        defaults.\n\n    '),
               ('platform._win32_getvalue',
                ['key', 'name', "default=''"],
                ' Read a value for name from the registry key.\n\n        In case this fails, default is returned.\n\n    '),
               ('platform.win32_ver',
                ["release=''", "version=''", "csd=''", "ptype=''"],
                " Get additional version information from the Windows Registry\n        and return a tuple (version,csd,ptype) referring to version\n        number, CSD level and OS type (multi/single\n        processor).\n\n        As a hint: ptype returns 'Uniprocessor Free' on single\n        processor NT machines and 'Multiprocessor Free' on multi\n        processor machines. The 'Free' refers to the OS version being\n        free of debugging code. It could also state 'Checked' which\n        means the OS version uses debugging code, i.e. code that\n        checks arguments, ranges, etc. (Thomas Heller).\n\n        Note: this function only works if Mark Hammond's win32\n        package is installed and obviously only runs on Win32\n        compatible platforms.\n\n    "),
               ('platform._mac_ver_lookup', ['selectors', 'default=None'], ''),
               ('platform._bcd2str', ['bcd'], ''),
               ('platform.mac_ver',
                ["release=''", "versioninfo=('', '', '')", "machine=''"],
                " Get MacOS version information and return it as tuple (release,\n        versioninfo, machine) with versioninfo being a tuple (version,\n        dev_stage, non_release_version).\n\n        Entries which cannot be determined are set to the paramter values\n        which default to ''. All tuple entries are strings.\n\n        Thanks to Mark R. Levinson for mailing documentation links and\n        code examples for this function. Documentation for the\n        gestalt() API is available online at:\n\n           http://www.rgaros.nl/gestalt/\n\n    "),
               ('platform._java_getprop', ['name', 'default'], ''),
               ('platform.java_ver',
                ["release=''", "vendor=''", "vminfo=('', '', '')", "osinfo=('', '', '')"],
                " Version interface for Jython.\n\n        Returns a tuple (release,vendor,vminfo,osinfo) with vminfo being\n        a tuple (vm_name,vm_release,vm_vendor) and osinfo being a\n        tuple (os_name,os_version,os_arch).\n\n        Values which cannot be determined are set to the defaults\n        given as parameters (which all default to '').\n\n    "),
               ('platform.system_alias',
                ['system', 'release', 'version'],
                ' Returns (system,release,version) aliased to common\n        marketing names used for some systems.\n\n        It also does some reordering of the information in some cases\n        where it would otherwise cause confusion.\n\n    '),
               ('platform._platform',
                ['*args'],
                ' Helper to format the platform string in a filename\n        compatible format e.g. "system-version-machine".\n    '),
               ('platform._node',
                ["default=''"],
                ' Helper to determine the node name of this machine.\n    '),
               ('platform._abspath',
                ['path',
                 'isabs=os.path.isabs',
                 'join=os.path.join',
                 'getcwd=os.getcwd',
                 'normpath=os.path.normpath'],
                ''),
               ('platform._follow_symlinks',
                ['filepath'],
                ' In case filepath is a symlink, follow it until a\n        real file is reached.\n    '),
               ('platform._syscmd_uname',
                ['option', "default=''"],
                " Interface to the system's uname command.\n    "),
               ('platform._syscmd_file',
                ['target', "default=''"],
                " Interface to the system's file command.\n\n        The function uses the -b option of the file command to have it\n        ommit the filename in its output and if possible the -L option\n        to have the command follow symlinks. It returns default in\n        case the command should fail.\n\n    "),
               ('platform.architecture',
                ['executable=sys.executable', "bits=''", "linkage=''"],
                ' Queries the given executable (defaults to the Python interpreter\n        binary) for various architecture information.\n\n        Returns a tuple (bits,linkage) which contains information about\n        the bit architecture and the linkage format used for the\n        executable. Both values are returned as strings.\n\n        Values that cannot be determined are returned as given by the\n        parameter presets. If bits is given as \'\', the sizeof(pointer)\n        (or sizeof(long) on Python version < 1.5.2) is used as\n        indicator for the supported pointer size.\n\n        The function relies on the system\'s "file" command to do the\n        actual work. This is available on most if not all Unix\n        platforms. On some non-Unix platforms where the "file" command\n        does not exist and the executable is set to the Python interpreter\n        binary defaults from _default_architecture are used.\n\n    '),
               ('platform.uname',
                [],
                " Fairly portable uname interface. Returns a tuple\n        of strings (system,node,release,version,machine,processor)\n        identifying the underlying platform.\n\n        Note that unlike the os.uname function this also returns\n        possible processor information as an additional tuple entry.\n\n        Entries which cannot be determined are set to ''.\n\n    "),
               ('platform.system',
                [],
                " Returns the system/OS name, e.g. 'Linux', 'Windows' or 'Java'.\n\n        An empty string is returned if the value cannot be determined.\n\n    "),
               ('platform.node',
                [],
                " Returns the computer's network name (which may not be fully\n        qualified)\n\n        An empty string is returned if the value cannot be determined.\n\n    "),
               ('platform.release',
                [],
                " Returns the system's release, e.g. '2.2.0' or 'NT'\n\n        An empty string is returned if the value cannot be determined.\n\n    "),
               ('platform.version',
                [],
                " Returns the system's release version, e.g. '#3 on degas'\n\n        An empty string is returned if the value cannot be determined.\n\n    "),
               ('platform.machine',
                [],
                " Returns the machine type, e.g. 'i386'\n\n        An empty string is returned if the value cannot be determined.\n\n    "),
               ('platform.processor',
                [],
                " Returns the (true) processor name, e.g. 'amdk6'\n\n        An empty string is returned if the value cannot be\n        determined. Note that many platforms do not provide this\n        information or simply return the same value as for machine(),\n        e.g.  NetBSD does this.\n\n    "),
               ('platform._sys_version',
                [],
                " Returns a parsed version of Python's sys.version as tuple\n        (version, buildno, builddate, compiler) referring to the Python\n        version, build number, build date/time as string and the compiler\n        identification string.\n\n        Note that unlike the Python sys.version, the returned value\n        for the Python version will always include the patchlevel (it\n        defaults to '.0').\n\n    "),
               ('platform.python_version',
                [],
                " Returns the Python version as string 'major.minor.patchlevel'\n\n        Note that unlike the Python sys.version, the returned value\n        will always include the patchlevel (it defaults to 0).\n\n    "),
               ('platform.python_version_tuple',
                [],
                ' Returns the Python version as tuple (major, minor, patchlevel)\n        of strings.\n\n        Note that unlike the Python sys.version, the returned value\n        will always include the patchlevel (it defaults to 0).\n\n    '),
               ('platform.python_build',
                [],
                ' Returns a tuple (buildno, builddate) stating the Python\n        build number and date as strings.\n\n    '),
               ('platform.python_compiler',
                [],
                ' Returns a string identifying the compiler used for compiling\n        Python.\n\n    '),
               ('platform.platform',
                ['aliased=0', 'terse=0'],
                ' Returns a single string identifying the underlying platform\n        with as much useful information as possible (but no more :).\n\n        The output is intended to be human readable rather than\n        machine parseable. It may look different on different\n        platforms and this is intended.\n\n        If "aliased" is true, the function will use aliases for\n        various platforms that report system names which differ from\n        their common names, e.g. SunOS will be reported as\n        Solaris. The system_alias() function is used to implement\n        this.\n\n        Setting terse to true causes the function to return only the\n        absolute minimum information needed to identify the platform.\n\n    '),
               ('repr._possibly_sorted', ['x'], ''),
               ('gzip.U32',
                ['i'],
                "Return i as an unsigned integer, assuming it fits in 32 bits.\n\n    If it's >= 2GB when viewed as a 32-bit unsigned int, return a long.\n    "),
               ('gzip.LOWU32',
                ['i'],
                'Return the low-order 32 bits of an int, as a non-negative int.'),
               ('gzip.write32', ['output', 'value'], ''),
               ('gzip.write32u', ['output', 'value'], ''),
               ('gzip.read32', ['input'], ''),
               ('gzip.open',
                ['filename', "mode='rb'", 'compresslevel=9'],
                "Shorthand for GzipFile(filename, mode, compresslevel).\n\n    The filename argument is required; mode defaults to 'rb'\n    and compresslevel defaults to 9.\n\n    "),
               ('gzip._test', [], ''),
               ('bdb.set_trace', [], ''),
               ('bdb.checkfuncname',
                ['b', 'frame'],
                'Check whether we should break here because of `b.funcname`.'),
               ('bdb.effective',
                ['file', 'line', 'frame'],
                'Determine which breakpoint for this file:line is to be acted upon.\n\n    Called only if we know there is a bpt at this\n    location.  Returns breakpoint that was triggered and a flag\n    that indicates if it is ok to delete a temporary bp.\n\n    '),
               ('bdb.foo', ['n'], ''),
               ('bdb.bar', ['a'], ''),
               ('bdb.test', [], ''),
               ('dis.dis',
                ['x=None'],
                'Disassemble classes, methods, functions, or code.\n\n    With no argument, disassemble the last traceback.\n\n    '),
               ('dis.distb', ['tb=None'], 'Disassemble a traceback (default: last traceback).'),
               ('dis.disassemble', ['co', 'lasti=-1'], 'Disassemble a code object.'),
               ('dis.disassemble_string',
                ['code', 'lasti=-1', 'varnames=None', 'names=None', 'constants=None'],
                ''),
               ('dis.findlabels',
                ['code'],
                'Detect all offsets in a byte code which are jump targets.\n\n    Return the list of offsets.\n\n    '),
               ('dis.findlinestarts',
                ['code'],
                'Find the offsets in a byte code which are start of lines in the source.\n\n    Generate pairs (offset, lineno) as described in Python/compile.c.\n\n    '),
               ('dis._test', [], 'Simple test program to disassemble a file.'),
               ('binhex.getfileinfo', ['name'], ''),
               ('binhex.openrsrc', ['name', '*mode'], ''),
               ('binhex.getfileinfo', ['name'], ''),
               ('binhex.binhex',
                ['inp', 'out'],
                '(infilename, outfilename) - Create binhex-encoded copy of a file'),
               ('binhex.hexbin',
                ['inp', 'out'],
                '(infilename, outfilename) - Decode binhexed file'),
               ('binhex._test', [], ''),
               ('plistlib.readPlist',
                ['pathOrFile'],
                "Read a .plist file. 'pathOrFile' may either be a file name or a\n    (readable) file object. Return the unpacked root object (which\n    usually is a dictionary).\n    "),
               ('plistlib.writePlist',
                ['rootObject', 'pathOrFile'],
                "Write 'rootObject' to a .plist file. 'pathOrFile' may either be a\n    file name or a (writable) file object.\n    "),
               ('plistlib.readPlistFromString',
                ['data'],
                'Read a plist data from a string. Return the root object.\n    '),
               ('plistlib.writePlistToString',
                ['rootObject'],
                "Return 'rootObject' as a plist-formatted string.\n    "),
               ('plistlib.readPlistFromResource',
                ['path', "restype='plst'", 'resid=0'],
                'Read plst resource from the resource fork of path.\n    '),
               ('plistlib.writePlistToResource',
                ['rootObject', 'path', "restype='plst'", 'resid=0'],
                "Write 'rootObject' as a plst resource to the resource fork of path.\n    "),
               ('plistlib._dateFromString', ['s'], ''),
               ('plistlib._dateToString', ['d'], ''),
               ('plistlib._escapeAndEncode', ['text'], ''),
               ('plistlib._encodeBase64', ['s', 'maxlinelength=76'], ''),
               ('linecache.getline', ['filename', 'lineno', 'module_globals=None'], ''),
               ('linecache.clearcache', [], 'Clear the cache entirely.'),
               ('linecache.getlines',
                ['filename', 'module_globals=None'],
                "Get the lines for a file from the cache.\n    Update the cache if it doesn't contain an entry for this file already."),
               ('linecache.checkcache',
                ['filename=None'],
                'Discard cache entries that are out of date.\n    (This is not checked upon each call!)'),
               ('linecache.updatecache',
                ['filename', 'module_globals=None'],
                "Update a cache entry and return its list of lines.\n    If something's wrong, print a message, discard the cache entry,\n    and return an empty list."),
               ('cgi.initlog',
                ['*allargs'],
                'Write a log message, if there is a log file.\n\n    Even though this function is called initlog(), you should always\n    use log(); log is a variable that is set either to initlog\n    (initially), to dolog (once the log file has been opened), or to\n    nolog (when logging is disabled).\n\n    The first argument is a format string; the remaining arguments (if\n    any) are arguments to the % operator, so e.g.\n        log("%s: %s", "a", "b")\n    will write "a: b" to the log file, followed by a newline.\n\n    If the global logfp is not None, it should be a file object to\n    which log data is written.\n\n    If the global logfp is None, the global logfile may be a string\n    giving a filename to open, in append mode.  This file should be\n    world writable!!!  If the file can\'t be opened, logging is\n    silently disabled (since there is no safe place where we could\n    send an error message).\n\n    '),
               ('cgi.dolog',
                ['fmt', '*args'],
                'Write a log message to the log file.  See initlog() for docs.'),
               ('cgi.nolog',
                ['*allargs'],
                'Dummy function, assigned to log when logging is disabled.'),
               ('cgi.parse',
                ['fp=None', 'environ=os.environ', 'keep_blank_values=0', 'strict_parsing=0'],
                'Parse a query in the environment or from a file (default stdin)\n\n        Arguments, all optional:\n\n        fp              : file pointer; default: sys.stdin\n\n        environ         : environment dictionary; default: os.environ\n\n        keep_blank_values: flag indicating whether blank values in\n            URL encoded forms should be treated as blank strings.\n            A true value indicates that blanks should be retained as\n            blank strings.  The default false value indicates that\n            blank values are to be ignored and treated as if they were\n            not included.\n\n        strict_parsing: flag indicating what to do with parsing errors.\n            If false (the default), errors are silently ignored.\n            If true, errors raise a ValueError exception.\n    '),
               ('cgi.parse_qs',
                ['qs', 'keep_blank_values=0', 'strict_parsing=0'],
                'Parse a query given as a string argument.\n\n        Arguments:\n\n        qs: URL-encoded query string to be parsed\n\n        keep_blank_values: flag indicating whether blank values in\n            URL encoded queries should be treated as blank strings.\n            A true value indicates that blanks should be retained as\n            blank strings.  The default false value indicates that\n            blank values are to be ignored and treated as if they were\n            not included.\n\n        strict_parsing: flag indicating what to do with parsing errors.\n            If false (the default), errors are silently ignored.\n            If true, errors raise a ValueError exception.\n    '),
               ('cgi.parse_qsl',
                ['qs', 'keep_blank_values=0', 'strict_parsing=0'],
                'Parse a query given as a string argument.\n\n    Arguments:\n\n    qs: URL-encoded query string to be parsed\n\n    keep_blank_values: flag indicating whether blank values in\n        URL encoded queries should be treated as blank strings.  A\n        true value indicates that blanks should be retained as blank\n        strings.  The default false value indicates that blank values\n        are to be ignored and treated as if they were  not included.\n\n    strict_parsing: flag indicating what to do with parsing errors. If\n        false (the default), errors are silently ignored. If true,\n        errors raise a ValueError exception.\n\n    Returns a list, as G-d intended.\n    '),
               ('cgi.parse_multipart',
                ['fp', 'pdict'],
                'Parse multipart input.\n\n    Arguments:\n    fp   : input file\n    pdict: dictionary containing other parameters of content-type header\n\n    Returns a dictionary just like parse_qs(): keys are the field names, each\n    value is a list of values for that field.  This is easy to use but not\n    much good if you are expecting megabytes to be uploaded -- in that case,\n    use the FieldStorage class instead which is much more flexible.  Note\n    that content-type is the raw, unparsed contents of the content-type\n    header.\n\n    XXX This does not parse nested multipart parts -- use FieldStorage for\n    that.\n\n    XXX This should really be subsumed by FieldStorage altogether -- no\n    point in having two implementations of the same parsing algorithm.\n    Also, FieldStorage protects itself better against certain DoS attacks\n    by limiting the size of the data read in one chunk.  The API here\n    does not support that kind of protection.  This also affects parse()\n    since it can call parse_multipart().\n\n    '),
               ('cgi.parse_header',
                ['line'],
                'Parse a Content-type like header.\n\n    Return the main content-type and a dictionary of options.\n\n    '),
               ('cgi.test',
                ['environ=os.environ'],
                'Robust test CGI script, usable as main program.\n\n    Write minimal HTTP headers and dump all information provided to\n    the script in HTML form.\n\n    '),
               ('cgi.print_exception', ['type=None', 'value=None', 'tb=None', 'limit=None'], ''),
               ('cgi.print_environ',
                ['environ=os.environ'],
                'Dump the shell environment as HTML.'),
               ('cgi.print_form', ['form'], 'Dump the contents of a form as HTML.'),
               ('cgi.print_directory', [], 'Dump the current directory as HTML.'),
               ('cgi.print_arguments', [], ''),
               ('cgi.print_environ_usage',
                [],
                'Dump a list of environment variables used by CGI as HTML.'),
               ('cgi.escape',
                ['s', 'quote=None'],
                'Replace special characters "&", "<" and ">" to HTML-safe sequences.\n    If the optional flag quote is true, the quotation mark character (")\n    is also translated.'),
               ('cgi.valid_boundary', ['s', "_vb_pattern='^[ -~]{0,200}[!-~]$'"], ''),
               ('pty.openpty',
                [],
                'openpty() -> (master_fd, slave_fd)\n    Open a pty master/slave pair, using os.openpty() if possible.'),
               ('pty.master_open',
                [],
                'master_open() -> (master_fd, slave_name)\n    Open a pty master and return the fd, and the filename of the slave end.\n    Deprecated, use openpty() instead.'),
               ('pty._open_terminal',
                [],
                'Open pty master and return (master_fd, tty_name).\n    SGI and generic BSD version, for when openpty() fails.'),
               ('pty.slave_open',
                ['tty_name'],
                'slave_open(tty_name) -> slave_fd\n    Open the pty slave and acquire the controlling terminal, returning\n    opened filedescriptor.\n    Deprecated, use openpty() instead.'),
               ('pty.fork',
                [],
                'fork() -> (pid, master_fd)\n    Fork and make the child a session leader with a controlling terminal.'),
               ('pty._writen', ['fd', 'data'], 'Write all the data to a descriptor.'),
               ('pty._read', ['fd'], 'Default read function.'),
               ('pty._copy',
                ['master_fd', 'master_read=_read', 'stdin_read=_read'],
                'Parent copy loop.\n    Copies\n            pty master -> standard output   (master_read)\n            standard input -> pty master    (stdin_read)'),
               ('pty.spawn',
                ['argv', 'master_read=_read', 'stdin_read=_read'],
                'Create a spawned process.'),
               ('traceback._print', ['file', "str=''", "terminator='\\n'"], ''),
               ('traceback.print_list',
                ['extracted_list', 'file=None'],
                'Print the list of tuples as returned by extract_tb() or\n    extract_stack() as a formatted stack trace to the given file.'),
               ('traceback.format_list',
                ['extracted_list'],
                'Format a list of traceback entry tuples for printing.\n\n    Given a list of tuples as returned by extract_tb() or\n    extract_stack(), return a list of strings ready for printing.\n    Each string in the resulting list corresponds to the item with the\n    same index in the argument list.  Each string ends in a newline;\n    the strings may contain internal newlines as well, for those items\n    whose source text line is not None.\n    '),
               ('traceback.print_tb',
                ['tb', 'limit=None', 'file=None'],
                "Print up to 'limit' stack trace entries from the traceback 'tb'.\n\n    If 'limit' is omitted or None, all entries are printed.  If 'file'\n    is omitted or None, the output goes to sys.stderr; otherwise\n    'file' should be an open file or file-like object with a write()\n    method.\n    "),
               ('traceback.format_tb',
                ['tb', 'limit=None'],
                "A shorthand for 'format_list(extract_stack(f, limit))."),
               ('traceback.extract_tb',
                ['tb', 'limit=None'],
                "Return list of up to limit pre-processed entries from traceback.\n\n    This is useful for alternate formatting of stack traces.  If\n    'limit' is omitted or None, all entries are extracted.  A\n    pre-processed stack trace entry is a quadruple (filename, line\n    number, function name, text) representing the information that is\n    usually printed for a stack trace.  The text is a string with\n    leading and trailing whitespace stripped; if the source is not\n    available it is None.\n    "),
               ('traceback.print_exception',
                ['etype', 'value', 'tb', 'limit=None', 'file=None'],
                'Print exception up to \'limit\' stack trace entries from \'tb\' to \'file\'.\n\n    This differs from print_tb() in the following ways: (1) if\n    traceback is not None, it prints a header "Traceback (most recent\n    call last):"; (2) it prints the exception type and value after the\n    stack trace; (3) if type is SyntaxError and value has the\n    appropriate format, it prints the line where the syntax error\n    occurred with a caret on the next line indicating the approximate\n    position of the error.\n    '),
               ('traceback.format_exception',
                ['etype', 'value', 'tb', 'limit=None'],
                'Format a stack trace and the exception information.\n\n    The arguments have the same meaning as the corresponding arguments\n    to print_exception().  The return value is a list of strings, each\n    ending in a newline and some containing internal newlines.  When\n    these lines are concatenated and printed, exactly the same text is\n    printed as does print_exception().\n    '),
               ('traceback.format_exception_only',
                ['etype', 'value'],
                'Format the exception part of a traceback.\n\n    The arguments are the exception type and value such as given by\n    sys.last_type and sys.last_value. The return value is a list of\n    strings, each ending in a newline.\n\n    Normally, the list contains a single string; however, for\n    SyntaxError exceptions, it contains several lines that (when\n    printed) display detailed information about where the syntax\n    error occurred.\n\n    The message indicating which exception occurred is always the last\n    string in the list.\n\n    '),
               ('traceback._format_final_exc_line',
                ['etype', 'value'],
                'Return a list of a single line -- normal case for format_exception_only'),
               ('traceback._some_str', ['value'], ''),
               ('traceback.print_exc',
                ['limit=None', 'file=None'],
                "Shorthand for 'print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file)'.\n    (In fact, it uses sys.exc_info() to retrieve the same information\n    in a thread-safe way.)"),
               ('traceback.format_exc', ['limit=None'], 'Like print_exc() but return a string.'),
               ('traceback.print_last',
                ['limit=None', 'file=None'],
                "This is a shorthand for 'print_exception(sys.last_type,\n    sys.last_value, sys.last_traceback, limit, file)'."),
               ('traceback.print_stack',
                ['f=None', 'limit=None', 'file=None'],
                "Print a stack trace from its invocation point.\n\n    The optional 'f' argument can be used to specify an alternate\n    stack frame at which to start. The optional 'limit' and 'file'\n    arguments have the same meaning as for print_exception().\n    "),
               ('traceback.format_stack',
                ['f=None', 'limit=None'],
                "Shorthand for 'format_list(extract_stack(f, limit))'."),
               ('traceback.extract_stack',
                ['f=None', 'limit=None'],
                "Extract the raw traceback from the current stack frame.\n\n    The return value has the same format as for extract_tb().  The\n    optional 'f' and 'limit' arguments have the same meaning as for\n    print_stack().  Each item in the list is a quadruple (filename,\n    line number, function name, text), and the entries are in order\n    from oldest to newest stack frame.\n    "),
               ('traceback.tb_lineno',
                ['tb'],
                'Calculate correct line number of traceback given in tb.\n\n    Obsolete in 2.3.\n    '),
               ('httplib.test',
                [],
                'Test this module.\n\n    A hodge podge of tests collected here, because they have too many\n    external dependencies for the regular test suite.\n    '),
               ('locale.localeconv',
                [],
                ' localeconv() -> dict.\n            Returns numeric and monetary locale-specific parameters.\n        '),
               ('locale.setlocale',
                ['category', 'value=None'],
                ' setlocale(integer,string=None) -> string.\n            Activates/queries locale processing.\n        '),
               ('locale.strcoll',
                ['a', 'b'],
                ' strcoll(string,string) -> int.\n            Compares two strings according to the locale.\n        '),
               ('locale.strxfrm',
                ['s'],
                ' strxfrm(string) -> string.\n            Returns a string that behaves for cmp locale-aware.\n        '),
               ('locale._group', ['s', 'monetary=False'], ''),
               ('locale.format',
                ['percent', 'value', 'grouping=False', 'monetary=False', '*additional'],
                "Returns the locale-aware substitution of a %? specifier\n    (percent).\n\n    additional is for format strings which contain one or more\n    '*' modifiers."),
               ('locale.format_string',
                ['f', 'val', 'grouping=False'],
                'Formats a string in the same way that the % formatting would use,\n    but takes the current locale into account.\n    Grouping is applied if the third parameter is true.'),
               ('locale.currency',
                ['val', 'symbol=True', 'grouping=False', 'international=False'],
                'Formats val according to the currency settings\n    in the current locale.'),
               ('locale.str',
                ['val'],
                'Convert float to integer, taking the locale into account.'),
               ('locale.atof',
                ['string', 'func=float'],
                'Parses a string as a float according to the locale settings.'),
               ('locale.atoi',
                ['str'],
                'Converts a string to an integer according to the locale settings.'),
               ('locale._test', [], ''),
               ('locale.normalize',
                ['localename'],
                ' Returns a normalized locale code for the given locale\n        name.\n\n        The returned locale code is formatted for use with\n        setlocale().\n\n        If normalization fails, the original name is returned\n        unchanged.\n\n        If the given encoding is not known, the function defaults to\n        the default encoding for the locale code just like setlocale()\n        does.\n\n    '),
               ('locale._parse_localename',
                ['localename'],
                ' Parses the locale code for localename and returns the\n        result as tuple (language code, encoding).\n\n        The localename is normalized and passed through the locale\n        alias engine. A ValueError is raised in case the locale name\n        cannot be parsed.\n\n        The language code corresponds to RFC 1766.  code and encoding\n        can be None in case the values cannot be determined or are\n        unknown to this implementation.\n\n    '),
               ('locale._build_localename',
                ['localetuple'],
                ' Builds a locale code from the given tuple (language code,\n        encoding).\n\n        No aliasing or normalizing takes place.\n\n    '),
               ('locale.getdefaultlocale',
                ["envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')"],
                ' Tries to determine the default locale settings and returns\n        them as tuple (language code, encoding).\n\n        According to POSIX, a program which has not called\n        setlocale(LC_ALL, "") runs using the portable \'C\' locale.\n        Calling setlocale(LC_ALL, "") lets it use the default locale as\n        defined by the LANG variable. Since we don\'t want to interfere\n        with the current locale setting we thus emulate the behavior\n        in the way described above.\n\n        To maintain compatibility with other platforms, not only the\n        LANG variable is tested, but a list of variables given as\n        envvars parameter. The first found to be defined will be\n        used. envvars defaults to the search path used in GNU gettext;\n        it must always contain the variable name \'LANG\'.\n\n        Except for the code \'C\', the language code corresponds to RFC\n        1766.  code and encoding can be None in case the values cannot\n        be determined.\n\n    '),
               ('locale.getlocale',
                ['category=LC_CTYPE'],
                " Returns the current setting for the given locale category as\n        tuple (language code, encoding).\n\n        category may be one of the LC_* value except LC_ALL. It\n        defaults to LC_CTYPE.\n\n        Except for the code 'C', the language code corresponds to RFC\n        1766.  code and encoding can be None in case the values cannot\n        be determined.\n\n    "),
               ('locale.setlocale',
                ['category', 'locale=None'],
                ' Set the locale for the given category.  The locale can be\n        a string, a locale tuple (language code, encoding), or None.\n\n        Locale tuples are converted to strings the locale aliasing\n        engine.  Locale strings are passed directly to the C lib.\n\n        category may be given as one of the LC_* values.\n\n    '),
               ('locale.resetlocale',
                ['category=LC_ALL'],
                ' Sets the locale for category to the default setting.\n\n        The default setting is determined by calling\n        getdefaultlocale(). category defaults to LC_ALL.\n\n    '),
               ('locale.getpreferredencoding',
                ['do_setlocale=True'],
                'Return the charset that the user is likely using.'),
               ('locale.getpreferredencoding',
                ['do_setlocale=True'],
                'Return the charset that the user is likely using,\n            by looking at environment variables.'),
               ('locale.getpreferredencoding',
                ['do_setlocale=True'],
                'Return the charset that the user is likely using,\n            according to the system configuration.'),
               ('locale._print_locale', [], ' Test function.\n    '),
               ('pipes.makepipeline', ['infile', 'steps', 'outfile'], ''),
               ('pipes.quote', ['file'], ''),
               ('pipes.test', [], ''),
               ('functools.update_wrapper',
                ['wrapper',
                 'wrapped',
                 'assigned=WRAPPER_ASSIGNMENTS',
                 'updated=WRAPPER_UPDATES'],
                'Update a wrapper function to look like the wrapped function\n\n       wrapper is the function to be updated\n       wrapped is the original function\n       assigned is a tuple naming the attributes assigned directly\n       from the wrapped function to the wrapper function (defaults to\n       functools.WRAPPER_ASSIGNMENTS)\n       updated is a tuple naming the attributes off the wrapper that\n       are updated with the corresponding attribute from the wrapped\n       function (defaults to functools.WRAPPER_UPDATES)\n    '),
               ('functools.wraps',
                ['wrapped', 'assigned=WRAPPER_ASSIGNMENTS', 'updated=WRAPPER_UPDATES'],
                'Decorator factory to apply update_wrapper() to a wrapper function\n\n       Returns a decorator that invokes update_wrapper() with the decorated\n       function as the wrapper argument and the arguments to wraps() as the\n       remaining arguments. Default arguments are as for update_wrapper().\n       This is a convenience function to simplify applying partial() to\n       update_wrapper().\n    '),
               ('textwrap.wrap',
                ['text', 'width=70', '**kwargs'],
                "Wrap a single paragraph of text, returning a list of wrapped lines.\n\n    Reformat the single paragraph in 'text' so it fits in lines of no\n    more than 'width' columns, and return a list of wrapped lines.  By\n    default, tabs in 'text' are expanded with string.expandtabs(), and\n    all other whitespace characters (including newline) are converted to\n    space.  See TextWrapper class for available keyword args to customize\n    wrapping behaviour.\n    "),
               ('textwrap.fill',
                ['text', 'width=70', '**kwargs'],
                "Fill a single paragraph of text, returning a new string.\n\n    Reformat the single paragraph in 'text' to fit in lines of no more\n    than 'width' columns, and return a new string containing the entire\n    wrapped paragraph.  As with wrap(), tabs are expanded and other\n    whitespace characters converted to space.  See TextWrapper class for\n    available keyword args to customize wrapping behaviour.\n    "),
               ('textwrap.dedent',
                ['text'],
                'Remove any common leading whitespace from every line in `text`.\n\n    This can be used to make triple-quoted strings line up with the left\n    edge of the display, while still presenting them in the source code\n    in indented form.\n\n    Note that tabs and spaces are both treated as whitespace, but they\n    are not equal: the lines "  hello" and "\thello" are\n    considered to have no common leading whitespace.  (This behaviour is\n    new in Python 2.5; older versions of this module incorrectly\n    expanded tabs before searching for common leading whitespace.)\n    '),
               ('smtpd.usage', ['code', "msg=''"], ''),
               ('smtpd.parseargs', [], ''),
               ('htmllib.test', ['args=None'], ''),
               ('warnings.warn',
                ['message', 'category=None', 'stacklevel=1'],
                'Issue a warning, or maybe ignore it or raise an exception.'),
               ('warnings.warn_explicit',
                ['message',
                 'category',
                 'filename',
                 'lineno',
                 'module=None',
                 'registry=None',
                 'module_globals=None'],
                ''),
               ('warnings.showwarning',
                ['message', 'category', 'filename', 'lineno', 'file=None'],
                'Hook to write a warning to a file; replace if you like.'),
               ('warnings.formatwarning',
                ['message', 'category', 'filename', 'lineno'],
                'Function to format a warning the standard way.'),
               ('warnings.filterwarnings',
                ['action',
                 "message=''",
                 'category=Warning',
                 "module=''",
                 'lineno=0',
                 'append=0'],
                'Insert an entry into the list of warnings filters (at the front).\n\n    Use assertions to check that all arguments have the right type.'),
               ('warnings.simplefilter',
                ['action', 'category=Warning', 'lineno=0', 'append=0'],
                'Insert a simple entry into the list of warnings filters (at the front).\n\n    A simple filter matches all modules and messages.\n    '),
               ('warnings.resetwarnings',
                [],
                'Clear the list of warning filters, so that no filters are active.'),
               ('warnings._processoptions', ['args'], ''),
               ('warnings._setoption', ['arg'], ''),
               ('warnings._getaction', ['action'], ''),
               ('warnings._getcategory', ['category'], ''),
               ('doctest.register_optionflag', ['name'], ''),
               ('doctest._extract_future_flags',
                ['globs'],
                '\n    Return the compiler-flags associated with the future features that\n    have been imported into the given namespace (globs).\n    '),
               ('doctest._normalize_module',
                ['module', 'depth=2'],
                '\n    Return the module specified by `module`.  In particular:\n      - If `module` is a module, then return module.\n      - If `module` is a string, then import and return the\n        module with that name.\n      - If `module` is None, then return the calling module.\n        The calling module is assumed to be the module of\n        the stack frame at the given depth in the call stack.\n    '),
               ('doctest._load_testfile', ['filename', 'package', 'module_relative'], ''),
               ('doctest._indent',
                ['s', 'indent=4'],
                '\n    Add the given number of space characters to the beginning every\n    non-blank line in `s`, and return the result.\n    '),
               ('doctest._exception_traceback',
                ['exc_info'],
                '\n    Return a string containing a traceback message for the given\n    exc_info tuple (as returned by sys.exc_info()).\n    '),
               ('doctest._ellipsis_match',
                ['want', 'got'],
                "\n    Essentially the only subtle case:\n    >>> _ellipsis_match('aa...aa', 'aaa')\n    False\n    "),
               ('doctest._comment_line', ['line'], 'Return a commented form of the given line'),
               ('doctest._module_relative_path', ['module', 'path'], ''),
               ('doctest.testmod',
                ['m=None',
                 'name=None',
                 'globs=None',
                 'verbose=None',
                 'report=True',
                 'optionflags=0',
                 'extraglobs=None',
                 'raise_on_error=False',
                 'exclude_empty=False'],
                'm=None, name=None, globs=None, verbose=None, report=True,\n       optionflags=0, extraglobs=None, raise_on_error=False,\n       exclude_empty=False\n\n    Test examples in docstrings in functions and classes reachable\n    from module m (or the current module if m is not supplied), starting\n    with m.__doc__.\n\n    Also test examples reachable from dict m.__test__ if it exists and is\n    not None.  m.__test__ maps names to functions, classes and strings;\n    function and class docstrings are tested even if the name is private;\n    strings are tested directly, as if they were docstrings.\n\n    Return (#failures, #tests).\n\n    See doctest.__doc__ for an overview.\n\n    Optional keyword arg "name" gives the name of the module; by default\n    use m.__name__.\n\n    Optional keyword arg "globs" gives a dict to be used as the globals\n    when executing examples; by default, use m.__dict__.  A copy of this\n    dict is actually used for each docstring, so that each docstring\'s\n    examples start with a clean slate.\n\n    Optional keyword arg "extraglobs" gives a dictionary that should be\n    merged into the globals that are used to execute examples.  By\n    default, no extra globals are used.  This is new in 2.4.\n\n    Optional keyword arg "verbose" prints lots of stuff if true, prints\n    only failures if false; by default, it\'s true iff "-v" is in sys.argv.\n\n    Optional keyword arg "report" prints a summary at the end when true,\n    else prints nothing at the end.  In verbose mode, the summary is\n    detailed, else very brief (in fact, empty if all tests passed).\n\n    Optional keyword arg "optionflags" or\'s together module constants,\n    and defaults to 0.  This is new in 2.3.  Possible values (see the\n    docs for details):\n\n        DONT_ACCEPT_TRUE_FOR_1\n        DONT_ACCEPT_BLANKLINE\n        NORMALIZE_WHITESPACE\n        ELLIPSIS\n        SKIP\n        IGNORE_EXCEPTION_DETAIL\n        REPORT_UDIFF\n        REPORT_CDIFF\n        REPORT_NDIFF\n        REPORT_ONLY_FIRST_FAILURE\n\n    Optional keyword arg "raise_on_error" raises an exception on the\n    first unexpected exception or failure. This allows failures to be\n    post-mortem debugged.\n\n    Advanced tomfoolery:  testmod runs methods of a local instance of\n    class doctest.Tester, then merges the results into (or creates)\n    global Tester instance doctest.master.  Methods of doctest.master\n    can be called directly too, if you want to do something unusual.\n    Passing report=0 to testmod is especially useful then, to delay\n    displaying a summary.  Invoke doctest.master.summarize(verbose)\n    when you\'re done fiddling.\n    '),
               ('doctest.testfile',
                ['filename',
                 'module_relative=True',
                 'name=None',
                 'package=None',
                 'globs=None',
                 'verbose=None',
                 'report=True',
                 'optionflags=0',
                 'extraglobs=None',
                 'raise_on_error=False',
                 'parser=DocTestParser()',
                 'encoding=None'],
                '\n    Test examples in the given file.  Return (#failures, #tests).\n\n    Optional keyword arg "module_relative" specifies how filenames\n    should be interpreted:\n\n      - If "module_relative" is True (the default), then "filename"\n         specifies a module-relative path.  By default, this path is\n         relative to the calling module\'s directory; but if the\n         "package" argument is specified, then it is relative to that\n         package.  To ensure os-independence, "filename" should use\n         "/" characters to separate path segments, and should not\n         be an absolute path (i.e., it may not begin with "/").\n\n      - If "module_relative" is False, then "filename" specifies an\n        os-specific path.  The path may be absolute or relative (to\n        the current working directory).\n\n    Optional keyword arg "name" gives the name of the test; by default\n    use the file\'s basename.\n\n    Optional keyword argument "package" is a Python package or the\n    name of a Python package whose directory should be used as the\n    base directory for a module relative filename.  If no package is\n    specified, then the calling module\'s directory is used as the base\n    directory for module relative filenames.  It is an error to\n    specify "package" if "module_relative" is False.\n\n    Optional keyword arg "globs" gives a dict to be used as the globals\n    when executing examples; by default, use {}.  A copy of this dict\n    is actually used for each docstring, so that each docstring\'s\n    examples start with a clean slate.\n\n    Optional keyword arg "extraglobs" gives a dictionary that should be\n    merged into the globals that are used to execute examples.  By\n    default, no extra globals are used.\n\n    Optional keyword arg "verbose" prints lots of stuff if true, prints\n    only failures if false; by default, it\'s true iff "-v" is in sys.argv.\n\n    Optional keyword arg "report" prints a summary at the end when true,\n    else prints nothing at the end.  In verbose mode, the summary is\n    detailed, else very brief (in fact, empty if all tests passed).\n\n    Optional keyword arg "optionflags" or\'s together module constants,\n    and defaults to 0.  Possible values (see the docs for details):\n\n        DONT_ACCEPT_TRUE_FOR_1\n        DONT_ACCEPT_BLANKLINE\n        NORMALIZE_WHITESPACE\n        ELLIPSIS\n        SKIP\n        IGNORE_EXCEPTION_DETAIL\n        REPORT_UDIFF\n        REPORT_CDIFF\n        REPORT_NDIFF\n        REPORT_ONLY_FIRST_FAILURE\n\n    Optional keyword arg "raise_on_error" raises an exception on the\n    first unexpected exception or failure. This allows failures to be\n    post-mortem debugged.\n\n    Optional keyword arg "parser" specifies a DocTestParser (or\n    subclass) that should be used to extract tests from the files.\n\n    Optional keyword arg "encoding" specifies an encoding that should\n    be used to convert the file to unicode.\n\n    Advanced tomfoolery:  testmod runs methods of a local instance of\n    class doctest.Tester, then merges the results into (or creates)\n    global Tester instance doctest.master.  Methods of doctest.master\n    can be called directly too, if you want to do something unusual.\n    Passing report=0 to testmod is especially useful then, to delay\n    displaying a summary.  Invoke doctest.master.summarize(verbose)\n    when you\'re done fiddling.\n    '),
               ('doctest.run_docstring_examples',
                ['f',
                 'globs',
                 'verbose=False',
                 "name='NoName'",
                 'compileflags=None',
                 'optionflags=0'],
                "\n    Test examples in the given object's docstring (`f`), using `globs`\n    as globals.  Optional argument `name` is used in failure messages.\n    If the optional argument `verbose` is true, then generate output\n    even if there are no failures.\n\n    `compileflags` gives the set of flags that should be used by the\n    Python compiler when running the examples.  If not specified, then\n    it will default to the set of future-import flags that apply to\n    `globs`.\n\n    Optional keyword arg `optionflags` specifies options for the\n    testing and output.  See the documentation for `testmod` for more\n    information.\n    "),
               ('doctest.set_unittest_reportflags',
                ['flags'],
                "Sets the unittest option flags.\n\n    The old flag is returned so that a runner could restore the old\n    value if it wished to:\n\n      >>> import doctest\n      >>> old = doctest._unittest_reportflags\n      >>> doctest.set_unittest_reportflags(REPORT_NDIFF |\n      ...                          REPORT_ONLY_FIRST_FAILURE) == old\n      True\n\n      >>> doctest._unittest_reportflags == (REPORT_NDIFF |\n      ...                                   REPORT_ONLY_FIRST_FAILURE)\n      True\n\n    Only reporting flags can be set:\n\n      >>> doctest.set_unittest_reportflags(ELLIPSIS)\n      Traceback (most recent call last):\n      ...\n      ValueError: ('Only reporting flags allowed', 8)\n\n      >>> doctest.set_unittest_reportflags(old) == (REPORT_NDIFF |\n      ...                                   REPORT_ONLY_FIRST_FAILURE)\n      True\n    "),
               ('doctest.DocTestSuite',
                ['module=None',
                 'globs=None',
                 'extraglobs=None',
                 'test_finder=None',
                 '**options'],
                '\n    Convert doctest tests for a module to a unittest test suite.\n\n    This converts each documentation string in a module that\n    contains doctest tests to a unittest test case.  If any of the\n    tests in a doc string fail, then the test case fails.  An exception\n    is raised showing the name of the file containing the test and a\n    (sometimes approximate) line number.\n\n    The `module` argument provides the module to be tested.  The argument\n    can be either a module or a module name.\n\n    If no argument is given, the calling module is used.\n\n    A number of options may be provided as keyword arguments:\n\n    setUp\n      A set-up function.  This is called before running the\n      tests in each file. The setUp function will be passed a DocTest\n      object.  The setUp function can access the test globals as the\n      globs attribute of the test passed.\n\n    tearDown\n      A tear-down function.  This is called after running the\n      tests in each file.  The tearDown function will be passed a DocTest\n      object.  The tearDown function can access the test globals as the\n      globs attribute of the test passed.\n\n    globs\n      A dictionary containing initial global variables for the tests.\n\n    optionflags\n       A set of doctest option flags expressed as an integer.\n    '),
               ('doctest.DocFileTest',
                ['path',
                 'module_relative=True',
                 'package=None',
                 'globs=None',
                 'parser=DocTestParser()',
                 'encoding=None',
                 '**options'],
                ''),
               ('doctest.DocFileSuite',
                ['*paths', '**kw'],
                'A unittest suite for one or more doctest files.\n\n    The path to each doctest file is given as a string; the\n    interpretation of that string depends on the keyword argument\n    "module_relative".\n\n    A number of options may be provided as keyword arguments:\n\n    module_relative\n      If "module_relative" is True, then the given file paths are\n      interpreted as os-independent module-relative paths.  By\n      default, these paths are relative to the calling module\'s\n      directory; but if the "package" argument is specified, then\n      they are relative to that package.  To ensure os-independence,\n      "filename" should use "/" characters to separate path\n      segments, and may not be an absolute path (i.e., it may not\n      begin with "/").\n\n      If "module_relative" is False, then the given file paths are\n      interpreted as os-specific paths.  These paths may be absolute\n      or relative (to the current working directory).\n\n    package\n      A Python package or the name of a Python package whose directory\n      should be used as the base directory for module relative paths.\n      If "package" is not specified, then the calling module\'s\n      directory is used as the base directory for module relative\n      filenames.  It is an error to specify "package" if\n      "module_relative" is False.\n\n    setUp\n      A set-up function.  This is called before running the\n      tests in each file. The setUp function will be passed a DocTest\n      object.  The setUp function can access the test globals as the\n      globs attribute of the test passed.\n\n    tearDown\n      A tear-down function.  This is called after running the\n      tests in each file.  The tearDown function will be passed a DocTest\n      object.  The tearDown function can access the test globals as the\n      globs attribute of the test passed.\n\n    globs\n      A dictionary containing initial global variables for the tests.\n\n    optionflags\n      A set of doctest option flags expressed as an integer.\n\n    parser\n      A DocTestParser (or subclass) that should be used to extract\n      tests from the files.\n\n    encoding\n      An encoding that will be used to convert the files to unicode.\n    '),
               ('doctest.script_from_examples',
                ['s'],
                "Extract script from text with examples.\n\n       Converts text with examples to a Python script.  Example input is\n       converted to regular code.  Example output and all other words\n       are converted to comments:\n\n       >>> text = '''\n       ...       Here are examples of simple math.\n       ...\n       ...           Python has super accurate integer addition\n       ...\n       ...           >>> 2 + 2\n       ...           5\n       ...\n       ...           And very friendly error messages:\n       ...\n       ...           >>> 1/0\n       ...           To Infinity\n       ...           And\n       ...           Beyond\n       ...\n       ...           You can use logic if you want:\n       ...\n       ...           >>> if 0:\n       ...           ...    blah\n       ...           ...    blah\n       ...           ...\n       ...\n       ...           Ho hum\n       ...           '''\n\n       >>> print script_from_examples(text)\n       # Here are examples of simple math.\n       #\n       #     Python has super accurate integer addition\n       #\n       2 + 2\n       # Expected:\n       ## 5\n       #\n       #     And very friendly error messages:\n       #\n       1/0\n       # Expected:\n       ## To Infinity\n       ## And\n       ## Beyond\n       #\n       #     You can use logic if you want:\n       #\n       if 0:\n          blah\n          blah\n       #\n       #     Ho hum\n       <BLANKLINE>\n       "),
               ('doctest.testsource',
                ['module', 'name'],
                'Extract the test sources from a doctest docstring as a script.\n\n    Provide the module (or dotted name of the module) containing the\n    test to be debugged and the name (within the module) of the object\n    with the doc string with tests to be debugged.\n    '),
               ('doctest.debug_src',
                ['src', 'pm=False', 'globs=None'],
                "Debug a single doctest docstring, in argument `src`'"),
               ('doctest.debug_script',
                ['src', 'pm=False', 'globs=None'],
                'Debug a test script.  `src` is the script, as a string.'),
               ('doctest.debug',
                ['module', 'name', 'pm=False'],
                'Debug a single doctest docstring.\n\n    Provide the module (or dotted name of the module) containing the\n    test to be debugged and the name (within the module) of the object\n    with the docstring with tests to be debugged.\n    '),
               ('doctest._test', [], ''),
               ('urllib.url2pathname',
                ['pathname'],
                "OS-specific conversion from a relative URL of the 'file' scheme\n        to a file system path; not recommended for general use."),
               ('urllib.pathname2url',
                ['pathname'],
                "OS-specific conversion from a file system path to a relative URL\n        of the 'file' scheme; not recommended for general use."),
               ('urllib.urlopen',
                ['url', 'data=None', 'proxies=None'],
                'urlopen(url [, data]) -> open file-like object'),
               ('urllib.urlretrieve',
                ['url', 'filename=None', 'reporthook=None', 'data=None'],
                ''),
               ('urllib.urlcleanup', [], ''),
               ('urllib.localhost',
                [],
                "Return the IP address of the magic hostname 'localhost'."),
               ('urllib.thishost', [], 'Return the IP address of the current host.'),
               ('urllib.ftperrors', [], 'Return the set of errors raised by the FTP class.'),
               ('urllib.noheaders', [], 'Return an empty mimetools.Message object.'),
               ('urllib._is_unicode', ['x'], ''),
               ('urllib._is_unicode', ['x'], ''),
               ('urllib.toBytes', ['url'], 'toBytes(u"URL") --> \'URL\'.'),
               ('urllib.unwrap',
                ['url'],
                "unwrap('<URL:type://host/path>') --> 'type://host/path'."),
               ('urllib.splittype',
                ['url'],
                "splittype('type:opaquestring') --> 'type', 'opaquestring'."),
               ('urllib.splithost',
                ['url'],
                "splithost('//host[:port]/path') --> 'host[:port]', '/path'."),
               ('urllib.splituser',
                ['host'],
                "splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."),
               ('urllib.splitpasswd',
                ['user'],
                "splitpasswd('user:passwd') -> 'user', 'passwd'."),
               ('urllib.splitport', ['host'], "splitport('host:port') --> 'host', 'port'."),
               ('urllib.splitnport',
                ['host', 'defport=-1'],
                "Split host and port, returning numeric port.\n    Return given default port if no ':' found; defaults to -1.\n    Return numerical port if a valid number are found after ':'.\n    Return None if ':' but not a valid number."),
               ('urllib.splitquery', ['url'], "splitquery('/path?query') --> '/path', 'query'."),
               ('urllib.splittag', ['url'], "splittag('/path#tag') --> '/path', 'tag'."),
               ('urllib.splitattr',
                ['url'],
                "splitattr('/path;attr1=value1;attr2=value2;...') ->\n        '/path', ['attr1=value1', 'attr2=value2', ...]."),
               ('urllib.splitvalue', ['attr'], "splitvalue('attr=value') --> 'attr', 'value'."),
               ('urllib.splitgophertype',
                ['selector'],
                "splitgophertype('/Xselector') --> 'X', 'selector'."),
               ('urllib.unquote', ['s'], "unquote('abc%20def') -> 'abc def'."),
               ('urllib.unquote_plus', ['s'], "unquote('%7e/abc+def') -> '~/abc def'"),
               ('urllib.quote',
                ['s', "safe='/'"],
                'quote(\'abc def\') -> \'abc%20def\'\n\n    Each part of a URL, e.g. the path info, the query, etc., has a\n    different set of reserved characters that must be quoted.\n\n    RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists\n    the following reserved characters.\n\n    reserved    = ";" | "/" | "?" | ":" | "@" | "&" | "=" | "+" |\n                  "$" | ","\n\n    Each of these characters is reserved in some component of a URL,\n    but not necessarily in all of them.\n\n    By default, the quote function is intended for quoting the path\n    section of a URL.  Thus, it will not encode \'/\'.  This character\n    is reserved, but in typical usage the quote function is being\n    called on a path where the existing slash characters are used as\n    reserved characters.\n    '),
               ('urllib.quote_plus',
                ['s', "safe=''"],
                "Quote the query fragment of a URL; replacing ' ' with '+'"),
               ('urllib.urlencode',
                ['query', 'doseq=0'],
                'Encode a sequence of two-element tuples or dictionary into a URL query string.\n\n    If any values in the query arg are sequences and doseq is true, each\n    sequence element is converted to a separate parameter.\n\n    If the query arg is a sequence of two-element tuples, the order of the\n    parameters in the output will match the order of parameters in the\n    input.\n    '),
               ('urllib.getproxies_environment',
                [],
                'Return a dictionary of scheme -> proxy server URL mappings.\n\n    Scan the environment for variables named <scheme>_proxy;\n    this seems to be the standard convention.  If you need a\n    different way, you can pass a proxies dictionary to the\n    [Fancy]URLopener constructor.\n\n    '),
               ('urllib.getproxies_internetconfig',
                [],
                'Return a dictionary of scheme -> proxy server URL mappings.\n\n        By convention the mac uses Internet Config to store\n        proxies.  An HTTP proxy, for instance, is stored under\n        the HttpProxy key.\n\n        '),
               ('urllib.proxy_bypass', ['x'], ''),
               ('urllib.getproxies', [], ''),
               ('urllib.getproxies_registry',
                [],
                'Return a dictionary of scheme -> proxy server URL mappings.\n\n        Win32 uses the registry to store proxies.\n\n        '),
               ('urllib.getproxies',
                [],
                'Return a dictionary of scheme -> proxy server URL mappings.\n\n        Returns settings gathered from the environment, if specified,\n        or the registry.\n\n        '),
               ('urllib.proxy_bypass', ['host'], ''),
               ('urllib.proxy_bypass', ['host'], ''),
               ('urllib.test1', [], ''),
               ('urllib.reporthook', ['blocknum', 'blocksize', 'totalsize'], ''),
               ('urllib.test', ['args=[]'], ''),
               ('urllib.main', [], ''),
               ('webbrowser.register',
                ['name', 'klass', 'instance=None', 'update_tryorder=1'],
                'Register a browser connector and, optionally, connection.'),
               ('webbrowser.get',
                ['using=None'],
                'Return a browser launcher instance appropriate for the environment.'),
               ('webbrowser.open', ['url', 'new=0', 'autoraise=1'], ''),
               ('webbrowser.open_new', ['url'], ''),
               ('webbrowser.open_new_tab', ['url'], ''),
               ('webbrowser._synthesize',
                ['browser', 'update_tryorder=1'],
                "Attempt to synthesize a controller base on existing controllers.\n\n    This is useful to create a controller when a user specifies a path to\n    an entry in the BROWSER environment variable -- we can copy a general\n    controller to operate using a specific installation of the desired\n    browser in this way.\n\n    If we can't create a controller in this way, or if there is no\n    executable for the requested browser, return [None, None].\n\n    "),
               ('webbrowser._isexecutable', ['cmd'], ''),
               ('webbrowser._isexecutable', ['cmd'], ''),
               ('webbrowser._iscommand',
                ['cmd'],
                'Return True if cmd is executable or can be found on the executable\n    search path.'),
               ('webbrowser.register_X_browsers', [], ''),
               ('webbrowser.main', [], ''),
               ('pickle._keep_alive',
                ['x', 'memo'],
                'Keeps a reference to the object x in the memo.\n\n    Because we remember objects by their id, we have\n    to assure that possibly temporary objects are kept\n    alive by referencing them.\n    We store a reference at the id of the memo, which should\n    normally not be used unless someone tries to deepcopy\n    the memo itself...\n    '),
               ('pickle.whichmodule',
                ['func', 'funcname'],
                'Figure out the module in which a function occurs.\n\n    Search sys.modules for the module.\n    Cache in classmap.\n    Return a module name.\n    If the function cannot be found, return "__main__".\n    '),
               ('pickle.encode_long',
                ['x'],
                "Encode a long to a two's complement little-endian binary string.\n    Note that 0L is a special case, returning an empty string, to save a\n    byte in the LONG1 pickling context.\n\n    >>> encode_long(0L)\n    ''\n    >>> encode_long(255L)\n    '\\xff\\x00'\n    >>> encode_long(32767L)\n    '\\xff\\x7f'\n    >>> encode_long(-256L)\n    '\\x00\\xff'\n    >>> encode_long(-32768L)\n    '\\x00\\x80'\n    >>> encode_long(-128L)\n    '\\x80'\n    >>> encode_long(127L)\n    '\\x7f'\n    >>>\n    "),
               ('pickle.decode_long',
                ['data'],
                'Decode a long from a two\'s complement little-endian binary string.\n\n    >>> decode_long(\'\')\n    0L\n    >>> decode_long("\\xff\\x00")\n    255L\n    >>> decode_long("\\xff\\x7f")\n    32767L\n    >>> decode_long("\\x00\\xff")\n    -256L\n    >>> decode_long("\\x00\\x80")\n    -32768L\n    >>> decode_long("\\x80")\n    -128L\n    >>> decode_long("\\x7f")\n    127L\n    '),
               ('pickle.dump', ['obj', 'file', 'protocol=None'], ''),
               ('pickle.dumps', ['obj', 'protocol=None'], ''),
               ('pickle.load', ['file'], ''),
               ('pickle.loads', ['str'], ''),
               ('pickle._test', [], ''),
               ('_threading_local._patch', ['self'], ''),
               ('nturl2path.url2pathname',
                ['url'],
                "OS-specific conversion from a relative URL of the 'file' scheme\n    to a file system path; not recommended for general use."),
               ('nturl2path.pathname2url',
                ['p'],
                "OS-specific conversion from a file system path to a relative URL\n    of the 'file' scheme; not recommended for general use."),
               ('string.capwords',
                ['s', 'sep=None'],
                'capwords(s, [sep]) -> string\n\n    Split the argument into words using split, capitalize each\n    word using capitalize, and join the capitalized words using\n    join. Note that this replaces runs of whitespace characters by\n    a single space.\n\n    '),
               ('string.maketrans',
                ['fromstr', 'tostr'],
                'maketrans(frm, to) -> string\n\n    Return a translation table (a string of 256 bytes long)\n    suitable for use in string.translate.  The strings frm and to\n    must be of the same length.\n\n    '),
               ('string.lower',
                ['s'],
                'lower(s) -> string\n\n    Return a copy of the string s converted to lowercase.\n\n    '),
               ('string.upper',
                ['s'],
                'upper(s) -> string\n\n    Return a copy of the string s converted to uppercase.\n\n    '),
               ('string.swapcase',
                ['s'],
                'swapcase(s) -> string\n\n    Return a copy of the string s with upper case characters\n    converted to lowercase and vice versa.\n\n    '),
               ('string.strip',
                ['s', 'chars=None'],
                'strip(s [,chars]) -> string\n\n    Return a copy of the string s with leading and trailing\n    whitespace removed.\n    If chars is given and not None, remove characters in chars instead.\n    If chars is unicode, S will be converted to unicode before stripping.\n\n    '),
               ('string.lstrip',
                ['s', 'chars=None'],
                'lstrip(s [,chars]) -> string\n\n    Return a copy of the string s with leading whitespace removed.\n    If chars is given and not None, remove characters in chars instead.\n\n    '),
               ('string.rstrip',
                ['s', 'chars=None'],
                'rstrip(s [,chars]) -> string\n\n    Return a copy of the string s with trailing whitespace removed.\n    If chars is given and not None, remove characters in chars instead.\n\n    '),
               ('string.split',
                ['s', 'sep=None', 'maxsplit=-1'],
                'split(s [,sep [,maxsplit]]) -> list of strings\n\n    Return a list of the words in the string s, using sep as the\n    delimiter string.  If maxsplit is given, splits at no more than\n    maxsplit places (resulting in at most maxsplit+1 words).  If sep\n    is not specified or is None, any whitespace string is a separator.\n\n    (split and splitfields are synonymous)\n\n    '),
               ('string.rsplit',
                ['s', 'sep=None', 'maxsplit=-1'],
                'rsplit(s [,sep [,maxsplit]]) -> list of strings\n\n    Return a list of the words in the string s, using sep as the\n    delimiter string, starting at the end of the string and working\n    to the front.  If maxsplit is given, at most maxsplit splits are\n    done. If sep is not specified or is None, any whitespace string\n    is a separator.\n    '),
               ('string.join',
                ['words', "sep=' '"],
                'join(list [,sep]) -> string\n\n    Return a string composed of the words in list, with\n    intervening occurrences of sep.  The default separator is a\n    single space.\n\n    (joinfields and join are synonymous)\n\n    '),
               ('string.index',
                ['s', '*args'],
                'index(s, sub [,start [,end]]) -> int\n\n    Like find but raises ValueError when the substring is not found.\n\n    '),
               ('string.rindex',
                ['s', '*args'],
                'rindex(s, sub [,start [,end]]) -> int\n\n    Like rfind but raises ValueError when the substring is not found.\n\n    '),
               ('string.count',
                ['s', '*args'],
                'count(s, sub[, start[,end]]) -> int\n\n    Return the number of occurrences of substring sub in string\n    s[start:end].  Optional arguments start and end are\n    interpreted as in slice notation.\n\n    '),
               ('string.find',
                ['s', '*args'],
                'find(s, sub [,start [,end]]) -> in\n\n    Return the lowest index in s where substring sub is found,\n    such that sub is contained within s[start,end].  Optional\n    arguments start and end are interpreted as in slice notation.\n\n    Return -1 on failure.\n\n    '),
               ('string.rfind',
                ['s', '*args'],
                'rfind(s, sub [,start [,end]]) -> int\n\n    Return the highest index in s where substring sub is found,\n    such that sub is contained within s[start,end].  Optional\n    arguments start and end are interpreted as in slice notation.\n\n    Return -1 on failure.\n\n    '),
               ('string.atof',
                ['s'],
                'atof(s) -> float\n\n    Return the floating point number represented by the string s.\n\n    '),
               ('string.atoi',
                ['s', 'base=10'],
                'atoi(s [,base]) -> int\n\n    Return the integer represented by the string s in the given\n    base, which defaults to 10.  The string s must consist of one\n    or more digits, possibly preceded by a sign.  If base is 0, it\n    is chosen from the leading characters of s, 0 for octal, 0x or\n    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is\n    accepted.\n\n    '),
               ('string.atol',
                ['s', 'base=10'],
                'atol(s [,base]) -> long\n\n    Return the long integer represented by the string s in the\n    given base, which defaults to 10.  The string s must consist\n    of one or more digits, possibly preceded by a sign.  If base\n    is 0, it is chosen from the leading characters of s, 0 for\n    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding\n    0x or 0X is accepted.  A trailing L or l is not accepted,\n    unless base is 0.\n\n    '),
               ('string.ljust',
                ['s', 'width', '*args'],
                'ljust(s, width[, fillchar]) -> string\n\n    Return a left-justified version of s, in a field of the\n    specified width, padded with spaces as needed.  The string is\n    never truncated.  If specified the fillchar is used instead of spaces.\n\n    '),
               ('string.rjust',
                ['s', 'width', '*args'],
                'rjust(s, width[, fillchar]) -> string\n\n    Return a right-justified version of s, in a field of the\n    specified width, padded with spaces as needed.  The string is\n    never truncated.  If specified the fillchar is used instead of spaces.\n\n    '),
               ('string.center',
                ['s', 'width', '*args'],
                'center(s, width[, fillchar]) -> string\n\n    Return a center version of s, in a field of the specified\n    width. padded with spaces as needed.  The string is never\n    truncated.  If specified the fillchar is used instead of spaces.\n\n    '),
               ('string.zfill',
                ['x', 'width'],
                'zfill(x, width) -> string\n\n    Pad a numeric string x with zeros on the left, to fill a field\n    of the specified width.  The string x is never truncated.\n\n    '),
               ('string.expandtabs',
                ['s', 'tabsize=8'],
                'expandtabs(s [,tabsize]) -> string\n\n    Return a copy of the string s with all tab characters replaced\n    by the appropriate number of spaces, depending on the current\n    column, and the tabsize (default 8).\n\n    '),
               ('string.translate',
                ['s', 'table', "deletions=''"],
                'translate(s,table [,deletions]) -> string\n\n    Return a copy of the string s, where all characters occurring\n    in the optional argument deletions are removed, and the\n    remaining characters have been mapped through the given\n    translation table, which must be a string of length 256.  The\n    deletions argument is not allowed for Unicode strings.\n\n    '),
               ('string.capitalize',
                ['s'],
                'capitalize(s) -> string\n\n    Return a copy of the string s with only its first character\n    capitalized.\n\n    '),
               ('string.replace',
                ['s', 'old', 'new', 'maxsplit=-1'],
                'replace (str, old, new[, maxsplit]) -> string\n\n    Return a copy of string str with all occurrences of substring\n    old replaced by new. If the optional argument maxsplit is\n    given, only the first maxsplit occurrences are replaced.\n\n    '),
               ('telnetlib.test',
                [],
                'Test program for telnetlib.\n\n    Usage: python telnetlib.py [-d] ... [host [port]]\n\n    Default host is localhost; default port is 23.\n\n    '),
               ('pprint.pprint',
                ['object', 'stream=None', 'indent=1', 'width=80', 'depth=None'],
                'Pretty-print a Python object to a stream [default is sys.stdout].'),
               ('pprint.pformat',
                ['object', 'indent=1', 'width=80', 'depth=None'],
                'Format a Python object into a pretty-printed representation.'),
               ('pprint.saferepr',
                ['object'],
                'Version of repr() which can handle recursive data structures.'),
               ('pprint.isreadable',
                ['object'],
                'Determine if saferepr(object) is readable by eval().'),
               ('pprint.isrecursive',
                ['object'],
                'Determine if object requires a recursive representation.'),
               ('pprint._safe_repr', ['object', 'context', 'maxlevels', 'level'], ''),
               ('pprint._recursion', ['object'], ''),
               ('pprint._perfcheck', ['object=None'], ''),
               ('timeit.reindent',
                ['src', 'indent'],
                'Helper to reindent a multi-line statement.'),
               ('timeit.main',
                ['args=None'],
                'Main program, used when run as a script.\n\n    The optional argument specifies the command line to be parsed,\n    defaulting to sys.argv[1:].\n\n    The return value is an exit code to be passed to sys.exit(); it\n    may be None to indicate success.\n\n    When an exception happens during timing, a traceback is printed to\n    stderr and the return value is 1.  Exceptions at other times\n    (including the template compilation) are not caught.\n    '),
               ('threading.setprofile', ['func'], ''),
               ('threading.settrace', ['func'], ''),
               ('threading.RLock', ['*args', '**kwargs'], ''),
               ('threading.Condition', ['*args', '**kwargs'], ''),
               ('threading.Semaphore', ['*args', '**kwargs'], ''),
               ('threading.BoundedSemaphore', ['*args', '**kwargs'], ''),
               ('threading.Event', ['*args', '**kwargs'], ''),
               ('threading._newname', ["template='Thread-%d'"], ''),
               ('threading.Timer', ['*args', '**kwargs'], ''),
               ('threading._pickSomeNonDaemonThread', [], ''),
               ('threading.currentThread', [], ''),
               ('threading.activeCount', [], ''),
               ('threading.enumerate', [], ''),
               ('threading._after_fork', [], ''),
               ('threading._test', [], ''),
               ('gopherlib.type_to_name',
                ['gtype'],
                "Map all file types to strings; unknown types become TYPE='x'."),
               ('gopherlib.send_selector',
                ['selector', 'host', 'port=0'],
                'Send a selector to a given host and port, return a file with the reply.'),
               ('gopherlib.send_query',
                ['selector', 'query', 'host', 'port=0'],
                'Send a selector and a query string.'),
               ('gopherlib.path_to_selector',
                ['path'],
                'Takes a path as returned by urlparse and returns the appropriate selector.'),
               ('gopherlib.path_to_datatype_name',
                ['path'],
                'Takes a path as returned by urlparse and maps it to a string.\n    See section 3.4 of RFC 1738 for details.'),
               ('gopherlib.get_directory',
                ['f'],
                'Get a directory in the form of a list of entries.'),
               ('gopherlib.get_textfile',
                ['f'],
                'Get a text file as a list of lines, with trailing CRLF stripped.'),
               ('gopherlib.get_alt_textfile',
                ['f', 'func'],
                'Get a text file and pass each line to a function, with trailing CRLF stripped.'),
               ('gopherlib.get_binary', ['f'], 'Get a binary file as one solid data block.'),
               ('gopherlib.get_alt_binary',
                ['f', 'func', 'blocksize'],
                'Get a binary file and pass each block to a function.'),
               ('gopherlib.test', [], 'Trivial test program.'),
               ('sgmllib.test', ['args=None'], ''),
               ('Bastion.Bastion',
                ['object',
                 "filter=lambda name: name[:1] != '_'",
                 'name=None',
                 'bastionclass=BastionClass'],
                "Create a bastion for an object, using an optional filter.\n\n    See the Bastion module's documentation for background.\n\n    Arguments:\n\n    object - the original object\n    filter - a predicate that decides whether a function name is OK;\n             by default all names are OK that don't start with '_'\n    name - the name of the object; default repr(object)\n    bastionclass - class used to create the bastion; default BastionClass\n\n    "),
               ('Bastion._test', [], 'Test the Bastion() function.'),
               ('hashlib.__get_builtin_constructor', ['name'], ''),
               ('hashlib.__py_new',
                ['name', "string=''"],
                "new(name, string='') - Return a new hashing object using the named algorithm;\n    optionally initialized with a string.\n    "),
               ('hashlib.__hash_new',
                ['name', "string=''"],
                "new(name, string='') - Return a new hashing object using the named algorithm;\n    optionally initialized with a string.\n    "),
               ('gettext.test',
                ['condition', 'true', 'false'],
                '\n    Implements the C expression:\n\n      condition ? true : false\n\n    Required to correctly interpret plural forms.\n    '),
               ('gettext.c2py',
                ['plural'],
                'Gets a C expression as used in PO files for plural forms and returns a\n    Python lambda function that implements an equivalent expression.\n    '),
               ('gettext._expand_lang', ['locale'], ''),
               ('gettext.find', ['domain', 'localedir=None', 'languages=None', 'all=0'], ''),
               ('gettext.translation',
                ['domain',
                 'localedir=None',
                 'languages=None',
                 'class_=None',
                 'fallback=False',
                 'codeset=None'],
                ''),
               ('gettext.install',
                ['domain', 'localedir=None', 'unicode=False', 'codeset=None', 'names=None'],
                ''),
               ('gettext.textdomain', ['domain=None'], ''),
               ('gettext.bindtextdomain', ['domain', 'localedir=None'], ''),
               ('gettext.bind_textdomain_codeset', ['domain', 'codeset=None'], ''),
               ('gettext.dgettext', ['domain', 'message'], ''),
               ('gettext.ldgettext', ['domain', 'message'], ''),
               ('gettext.dngettext', ['domain', 'msgid1', 'msgid2', 'n'], ''),
               ('gettext.ldngettext', ['domain', 'msgid1', 'msgid2', 'n'], ''),
               ('gettext.gettext', ['message'], ''),
               ('gettext.lgettext', ['message'], ''),
               ('gettext.ngettext', ['msgid1', 'msgid2', 'n'], ''),
               ('gettext.lngettext', ['msgid1', 'msgid2', 'n'], ''),
               ('commands.getstatus', ['file'], 'Return output of "ls -ld <file>" in a string.'),
               ('commands.getoutput',
                ['cmd'],
                'Return output (stdout or stderr) of executing cmd in a shell.'),
               ('commands.getstatusoutput',
                ['cmd'],
                'Return (status, output) of executing cmd in a shell.'),
               ('commands.mk2arg', ['head', 'x'], ''),
               ('commands.mkarg', ['x'], ''),
               ('tabnanny.errprint', ['*args'], ''),
               ('tabnanny.main', [], ''),
               ('tabnanny.check',
                ['file'],
                'check(file_or_dir)\n\n    If file_or_dir is a directory and not a symbolic link, then recursively\n    descend the directory tree named by file_or_dir, checking all .py files\n    along the way. If file_or_dir is an ordinary Python source file, it is\n    checked for whitespace related problems. The diagnostic messages are\n    written to standard output using the print statement.\n    '),
               ('tabnanny.format_witnesses', ['w'], ''),
               ('tabnanny.process_tokens', ['tokens'], ''),
               ('codeop._maybe_compile', ['compiler', 'source', 'filename', 'symbol'], ''),
               ('codeop._compile', ['source', 'filename', 'symbol'], ''),
               ('codeop.compile_command',
                ['source', "filename='<input>'", "symbol='single'"],
                'Compile a command and determine whether it is incomplete.\n\n    Arguments:\n\n    source -- the source string; may contain \\n characters\n    filename -- optional filename from which source was read; default\n                "<input>"\n    symbol -- optional grammar start symbol; "single" (default) or "eval"\n\n    Return value / exceptions raised:\n\n    - Return a code object if the command is complete and valid\n    - Return None if the command is incomplete\n    - Raise SyntaxError, ValueError or OverflowError if the command is a\n      syntax error (OverflowError and ValueError can be produced by\n      malformed literals).\n    '),
               ('uu.encode', ['in_file', 'out_file', 'name=None', 'mode=None'], 'Uuencode file'),
               ('uu.decode',
                ['in_file', 'out_file=None', 'mode=None', 'quiet=0'],
                'Decode uuencoded file'),
               ('uu.test', [], 'uuencode/uudecode main program'),
               ('DocXMLRPCServer.deg_to_rad',
                ['deg'],
                'deg_to_rad(90) => 1.5707963267948966\n\n        Converts an angle in degrees to an angle in radians'),
               ('tarfile.stn',
                ['s', 'length'],
                'Convert a python string to a null-terminated string buffer.\n    '),
               ('tarfile.nts',
                ['s'],
                'Convert a null-terminated string field to a python string.\n    '),
               ('tarfile.nti', ['s'], 'Convert a number field to a python number.\n    '),
               ('tarfile.itn',
                ['n', 'digits=8', 'posix=False'],
                'Convert a python number to a number field.\n    '),
               ('tarfile.calc_chksums',
                ['buf'],
                "Calculate the checksum for a member's header by summing up all\n       characters except for the chksum field which is treated as if\n       it was filled with spaces. According to the GNU tar sources,\n       some tars (Sun and NeXT) calculate chksum with signed char,\n       which will be different if there are chars in the buffer with\n       the high bit set. So we calculate two checksums, unsigned and\n       signed.\n    "),
               ('tarfile.copyfileobj',
                ['src', 'dst', 'length=None'],
                'Copy length bytes from fileobj src to fileobj dst.\n       If length is None, copy the entire content.\n    '),
               ('tarfile.filemode',
                ['mode'],
                "Convert a file's mode to a string of the form\n       -rwxrwxrwx.\n       Used by TarFile.list()\n    "),
               ('tarfile.is_tarfile',
                ['name'],
                'Return True if name points to a tar archive that we\n       are able to handle, else return False.\n    '),
               ('Cookie._quote',
                ['str', 'LegalChars=_LegalChars', 'idmap=_idmap', 'translate=string.translate'],
                ''),
               ('Cookie._unquote', ['str'], ''),
               ('Cookie._getdate',
                ['future=0', 'weekdayname=_weekdayname', 'monthname=_monthname'],
                ''),
               ('Cookie._test', [], ''),
               ('xmlrpclib._decode',
                ['data', 'encoding', "is8bit=re.compile('[\\x80-\\xff]').search"],
                ''),
               ('xmlrpclib.escape', ['s', 'replace=string.replace'], ''),
               ('xmlrpclib._stringify', ['string'], ''),
               ('xmlrpclib._stringify', ['string'], ''),
               ('xmlrpclib.boolean',
                ['value', '_truefalse=(False, True)'],
                "Convert any Python value to XML-RPC 'boolean'."),
               ('xmlrpclib._datetime', ['data'], ''),
               ('xmlrpclib._datetime_type', ['data'], ''),
               ('xmlrpclib._binary', ['data'], ''),
               ('xmlrpclib.getparser',
                ['use_datetime=0'],
                'getparser() -> parser, unmarshaller\n\n    Create an instance of the fastest available parser, and attach it\n    to an unmarshalling object.  Return both objects.\n    '),
               ('xmlrpclib.dumps',
                ['params',
                 'methodname=None',
                 'methodresponse=None',
                 'encoding=None',
                 'allow_none=0'],
                'data [,options] -> marshalled data\n\n    Convert an argument tuple or a Fault instance to an XML-RPC\n    request (or response, if the methodresponse option is used).\n\n    In addition to the data object, the following options can be given\n    as keyword arguments:\n\n        methodname: the method name for a methodCall packet\n\n        methodresponse: true to create a methodResponse packet.\n        If this option is used with a tuple, the tuple must be\n        a singleton (i.e. it can contain only one element).\n\n        encoding: the packet encoding (default is UTF-8)\n\n    All 8-bit strings in the data structure are assumed to use the\n    packet encoding.  Unicode strings are automatically converted,\n    where necessary.\n    '),
               ('xmlrpclib.loads',
                ['data', 'use_datetime=0'],
                'data -> unmarshalled data, method name\n\n    Convert an XML-RPC packet to unmarshalled data plus a method\n    name (None if not present).\n\n    If the XML-RPC packet represents a fault condition, this function\n    raises a Fault exception.\n    '),
               ('ihooks.install', ['importer=None'], ''),
               ('ihooks.uninstall', [], ''),
               ('sre_constants.makedict', ['list'], ''),
               ('sre_constants.dump', ['f', 'd', 'prefix'], ''),
               ('cookielib._debug', ['*args'], ''),
               ('cookielib._warn_unhandled_exception', [], ''),
               ('cookielib._timegm', ['tt'], ''),
               ('cookielib.time2isoz',
                ['t=None'],
                'Return a string representing time in seconds since epoch, t.\n\n    If the function is called without an argument, it will use the current\n    time.\n\n    The format of the returned string is like "YYYY-MM-DD hh:mm:ssZ",\n    representing Universal Time (UTC, aka GMT).  An example of this format is:\n\n    1994-11-24 08:49:37Z\n\n    '),
               ('cookielib.time2netscape',
                ['t=None'],
                'Return a string representing time in seconds since epoch, t.\n\n    If the function is called without an argument, it will use the current\n    time.\n\n    The format of the returned string is like this:\n\n    Wed, DD-Mon-YYYY HH:MM:SS GMT\n\n    '),
               ('cookielib.offset_from_tz_string', ['tz'], ''),
               ('cookielib._str2time', ['day', 'mon', 'yr', 'hr', 'min', 'sec', 'tz'], ''),
               ('cookielib.http2time',
                ['text'],
                'Returns time in seconds since epoch of time represented by a string.\n\n    Return value is an integer.\n\n    None is returned if the format of str is unrecognized, the time is outside\n    the representable range, or the timezone string is not recognized.  If the\n    string contains no timezone, UTC is assumed.\n\n    The timezone in the string may be numerical (like "-0800" or "+0100") or a\n    string timezone (like "UTC", "GMT", "BST" or "EST").  Currently, only the\n    timezone strings equivalent to UTC (zero offset) are known to the function.\n\n    The function loosely parses the following formats:\n\n    Wed, 09 Feb 1994 22:23:32 GMT       -- HTTP format\n    Tuesday, 08-Feb-94 14:15:29 GMT     -- old rfc850 HTTP format\n    Tuesday, 08-Feb-1994 14:15:29 GMT   -- broken rfc850 HTTP format\n    09 Feb 1994 22:23:32 GMT            -- HTTP format (no weekday)\n    08-Feb-94 14:15:29 GMT              -- rfc850 format (no weekday)\n    08-Feb-1994 14:15:29 GMT            -- broken rfc850 format (no weekday)\n\n    The parser ignores leading and trailing whitespace.  The time may be\n    absent.\n\n    If the year is given with only 2 digits, the function will select the\n    century that makes the year closest to the current date.\n\n    '),
               ('cookielib.iso2time',
                ['text'],
                '\n    As for http2time, but parses the ISO 8601 formats:\n\n    1994-02-03 14:15:29 -0100    -- ISO 8601 format\n    1994-02-03 14:15:29          -- zone is optional\n    1994-02-03                   -- only date\n    1994-02-03T14:15:29          -- Use T as separator\n    19940203T141529Z             -- ISO 8601 compact format\n    19940203                     -- only date\n\n    '),
               ('cookielib.unmatched', ['match'], 'Return unmatched part of re.Match object.'),
               ('cookielib.split_header_words',
                ['header_values'],
                'Parse header values into a list of lists containing key,value pairs.\n\n    The function knows how to deal with ",", ";" and "=" as well as quoted\n    values after "=".  A list of space separated tokens are parsed as if they\n    were separated by ";".\n\n    If the header_values passed as argument contains multiple values, then they\n    are treated as if they were a single value separated by comma ",".\n\n    This means that this function is useful for parsing header fields that\n    follow this syntax (BNF as from the HTTP/1.1 specification, but we relax\n    the requirement for tokens).\n\n      headers           = #header\n      header            = (token | parameter) *( [";"] (token | parameter))\n\n      token             = 1*<any CHAR except CTLs or separators>\n      separators        = "(" | ")" | "<" | ">" | "@"\n                        | "," | ";" | ":" | "\\" | <">\n                        | "/" | "[" | "]" | "?" | "="\n                        | "{" | "}" | SP | HT\n\n      quoted-string     = ( <"> *(qdtext | quoted-pair ) <"> )\n      qdtext            = <any TEXT except <">>\n      quoted-pair       = "\\" CHAR\n\n      parameter         = attribute "=" value\n      attribute         = token\n      value             = token | quoted-string\n\n    Each header is represented by a list of key/value pairs.  The value for a\n    simple token (not part of a parameter) is None.  Syntactically incorrect\n    headers will not necessarily be parsed as you would want.\n\n    This is easier to describe with some examples:\n\n    >>> split_header_words([\'foo="bar"; port="80,81"; discard, bar=baz\'])\n    [[(\'foo\', \'bar\'), (\'port\', \'80,81\'), (\'discard\', None)], [(\'bar\', \'baz\')]]\n    >>> split_header_words([\'text/html; charset="iso-8859-1"\'])\n    [[(\'text/html\', None), (\'charset\', \'iso-8859-1\')]]\n    >>> split_header_words([r\'Basic realm="\\"foo\\bar\\""\'])\n    [[(\'Basic\', None), (\'realm\', \'"foobar"\')]]\n\n    '),
               ('cookielib.join_header_words',
                ['lists'],
                'Do the inverse (almost) of the conversion done by split_header_words.\n\n    Takes a list of lists of (key, value) pairs and produces a single header\n    value.  Attribute values are quoted if needed.\n\n    >>> join_header_words([[("text/plain", None), ("charset", "iso-8859/1")]])\n    \'text/plain; charset="iso-8859/1"\'\n    >>> join_header_words([[("text/plain", None)], [("charset", "iso-8859/1")]])\n    \'text/plain, charset="iso-8859/1"\'\n\n    '),
               ('cookielib.parse_ns_headers',
                ['ns_headers'],
                'Ad-hoc parser for Netscape protocol cookie-attributes.\n\n    The old Netscape cookie format for Set-Cookie can for instance contain\n    an unquoted "," in the expires field, so we have to use this ad-hoc\n    parser instead of split_header_words.\n\n    XXX This may not make the best possible effort to parse all the crap\n    that Netscape Cookie headers contain.  Ronald Tschalar\'s HTTPClient\n    parser is probably better, so could do worse than following that if\n    this ever gives any trouble.\n\n    Currently, this is also used for parsing RFC 2109 cookies.\n\n    '),
               ('cookielib.is_HDN', ['text'], 'Return True if text is a host domain name.'),
               ('cookielib.domain_match',
                ['A', 'B'],
                "Return True if domain A domain-matches domain B, according to RFC 2965.\n\n    A and B may be host domain names or IP addresses.\n\n    RFC 2965, section 1:\n\n    Host names can be specified either as an IP address or a HDN string.\n    Sometimes we compare one host name with another.  (Such comparisons SHALL\n    be case-insensitive.)  Host A's name domain-matches host B's if\n\n         *  their host name strings string-compare equal; or\n\n         * A is a HDN string and has the form NB, where N is a non-empty\n            name string, B has the form .B', and B' is a HDN string.  (So,\n            x.y.com domain-matches .Y.com but not Y.com.)\n\n    Note that domain-match is not a commutative operation: a.b.c.com\n    domain-matches .c.com, but not the reverse.\n\n    "),
               ('cookielib.liberal_is_HDN',
                ['text'],
                'Return True if text is a sort-of-like a host domain name.\n\n    For accepting/blocking domains.\n\n    '),
               ('cookielib.user_domain_match',
                ['A', 'B'],
                'For blocking/accepting domains.\n\n    A and B may be host domain names or IP addresses.\n\n    '),
               ('cookielib.request_host',
                ['request'],
                'Return request-host, as defined by RFC 2965.\n\n    Variation from RFC: returned value is lowercased, for convenient\n    comparison.\n\n    '),
               ('cookielib.eff_request_host',
                ['request'],
                'Return a tuple (request-host, effective request-host name).\n\n    As defined by RFC 2965, except both are lowercased.\n\n    '),
               ('cookielib.request_path', ['request'], 'request-URI, as defined by RFC 2965.'),
               ('cookielib.request_port', ['request'], ''),
               ('cookielib.uppercase_escaped_char', ['match'], ''),
               ('cookielib.escape_path',
                ['path'],
                'Escape any invalid characters in HTTP URL, and uppercase all escapes.'),
               ('cookielib.reach',
                ['h'],
                'Return reach of host h, as defined by RFC 2965, section 1.\n\n    The reach R of a host name H is defined as follows:\n\n       *  If\n\n          -  H is the host domain name of a host; and,\n\n          -  H has the form A.B; and\n\n          -  A has no embedded (that is, interior) dots; and\n\n          -  B has at least one embedded dot, or B is the string "local".\n             then the reach of H is .B.\n\n       *  Otherwise, the reach of H is H.\n\n    >>> reach("www.acme.com")\n    \'.acme.com\'\n    >>> reach("acme.com")\n    \'acme.com\'\n    >>> reach("acme.local")\n    \'.local\'\n\n    '),
               ('cookielib.is_third_party',
                ['request'],
                '\n\n    RFC 2965, section 3.3.6:\n\n        An unverifiable transaction is to a third-party host if its request-\n        host U does not domain-match the reach R of the request-host O in the\n        origin transaction.\n\n    '),
               ('cookielib.vals_sorted_by_key', ['adict'], ''),
               ('cookielib.deepvalues',
                ['mapping'],
                'Iterates over nested mapping, depth-first, in sorted order by key.'),
               ('tty.setraw', ['fd', 'when=TCSAFLUSH'], 'Put terminal into a raw mode.'),
               ('tty.setcbreak', ['fd', 'when=TCSAFLUSH'], 'Put terminal into a cbreak mode.'),
               ('posixpath.normcase',
                ['s'],
                'Normalize case of pathname.  Has no effect under Posix'),
               ('posixpath.isabs', ['s'], 'Test whether a path is absolute'),
               ('posixpath.join',
                ['a', '*p'],
                "Join two or more pathname components, inserting '/' as needed"),
               ('posixpath.split',
                ['p'],
                'Split a pathname.  Returns tuple "(head, tail)" where "tail" is\n    everything after the final slash.  Either part may be empty.'),
               ('posixpath.splitext',
                ['p'],
                'Split the extension from a pathname.  Extension is everything from the\n    last dot to the end.  Returns "(root, ext)", either part may be empty.'),
               ('posixpath.splitdrive',
                ['p'],
                'Split a pathname into drive and path. On Posix, drive is always\n    empty.'),
               ('posixpath.basename', ['p'], 'Returns the final component of a pathname'),
               ('posixpath.dirname', ['p'], 'Returns the directory component of a pathname'),
               ('posixpath.commonprefix',
                ['m'],
                'Given a list of pathnames, returns the longest common leading component'),
               ('posixpath.getsize',
                ['filename'],
                'Return the size of a file, reported by os.stat().'),
               ('posixpath.getmtime',
                ['filename'],
                'Return the last modification time of a file, reported by os.stat().'),
               ('posixpath.getatime',
                ['filename'],
                'Return the last access time of a file, reported by os.stat().'),
               ('posixpath.getctime',
                ['filename'],
                'Return the metadata change time of a file, reported by os.stat().'),
               ('posixpath.islink', ['path'], 'Test whether a path is a symbolic link'),
               ('posixpath.exists',
                ['path'],
                'Test whether a path exists.  Returns False for broken symbolic links'),
               ('posixpath.lexists',
                ['path'],
                'Test whether a path exists.  Returns True for broken symbolic links'),
               ('posixpath.isdir', ['path'], 'Test whether a path is a directory'),
               ('posixpath.isfile', ['path'], 'Test whether a path is a regular file'),
               ('posixpath.samefile',
                ['f1', 'f2'],
                'Test whether two pathnames reference the same actual file'),
               ('posixpath.sameopenfile',
                ['fp1', 'fp2'],
                'Test whether two open file objects reference the same file'),
               ('posixpath.samestat',
                ['s1', 's2'],
                'Test whether two stat buffers reference the same file'),
               ('posixpath.ismount', ['path'], 'Test whether a path is a mount point'),
               ('posixpath.walk',
                ['top', 'func', 'arg'],
                "Directory tree walk with callback function.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).\n    dirname is the name of the directory, and fnames a list of the names of\n    the files and subdirectories in dirname (excluding '.' and '..').  func\n    may modify the fnames list in-place (e.g. via del or slice assignment),\n    and walk will only recurse into the subdirectories whose names remain in\n    fnames; this can be used to implement a filter, or to impose a specific\n    order of visiting.  No semantics are defined for, or required of, arg,\n    beyond that arg is always passed to func.  It can be used, e.g., to pass\n    a filename pattern, or a mutable object designed to accumulate\n    statistics.  Passing None for arg is common."),
               ('posixpath.expanduser',
                ['path'],
                'Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing.'),
               ('posixpath.expandvars',
                ['path'],
                'Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.'),
               ('posixpath.normpath',
                ['path'],
                'Normalize path, eliminating double slashes, etc.'),
               ('posixpath.abspath', ['path'], 'Return an absolute path.'),
               ('posixpath.realpath',
                ['filename'],
                'Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.'),
               ('posixpath._resolve_link',
                ['path'],
                "Internal helper function.  Takes a path and follows symlinks\n    until we either arrive at something that isn't a symlink, or\n    encounter a path we've seen before (meaning that there's a loop).\n    "),
               ('dircache.reset', [], 'Reset the cache completely.'),
               ('dircache.listdir', ['path'], 'List directory contents, using cache.'),
               ('dircache.annotate', ['head', 'list'], "Add '/' suffixes to directories."),
               ('stringprep.in_table_a1', ['code'], ''),
               ('stringprep.in_table_b1', ['code'], ''),
               ('stringprep.map_table_b3', ['code'], ''),
               ('stringprep.map_table_b2', ['a'], ''),
               ('stringprep.in_table_c11', ['code'], ''),
               ('stringprep.in_table_c12', ['code'], ''),
               ('stringprep.in_table_c11_c12', ['code'], ''),
               ('stringprep.in_table_c21', ['code'], ''),
               ('stringprep.in_table_c22', ['code'], ''),
               ('stringprep.in_table_c21_c22', ['code'], ''),
               ('stringprep.in_table_c3', ['code'], ''),
               ('stringprep.in_table_c4', ['code'], ''),
               ('stringprep.in_table_c5', ['code'], ''),
               ('stringprep.in_table_c6', ['code'], ''),
               ('stringprep.in_table_c7', ['code'], ''),
               ('stringprep.in_table_c8', ['code'], ''),
               ('stringprep.in_table_c9', ['code'], ''),
               ('stringprep.in_table_d1', ['code'], ''),
               ('stringprep.in_table_d2', ['code'], ''),
               ('code.softspace', ['file', 'newvalue'], ''),
               ('code.interact',
                ['banner=None', 'readfunc=None', 'local=None'],
                'Closely emulate the interactive Python interpreter.\n\n    This is a backwards compatible interface to the InteractiveConsole\n    class.  When readfunc is not specified, it attempts to import the\n    readline module to enable GNU readline if it is available.\n\n    Arguments (all optional, all default to None):\n\n    banner -- passed to InteractiveConsole.interact()\n    readfunc -- if not None, replaces InteractiveConsole.raw_input()\n    local -- passed to InteractiveInterpreter.__init__()\n\n    '),
               ('opcode.def_op', ['name', 'op'], ''),
               ('opcode.name_op', ['name', 'op'], ''),
               ('opcode.jrel_op', ['name', 'op'], ''),
               ('opcode.jabs_op', ['name', 'op'], ''),
               ('urllib2.urlopen', ['url', 'data=None'], ''),
               ('urllib2.install_opener', ['opener'], ''),
               ('urllib2.request_host',
                ['request'],
                'Return request-host, as defined by RFC 2965.\n\n    Variation from RFC: returned value is lowercased, for convenient\n    comparison.\n\n    '),
               ('urllib2.build_opener',
                ['*handlers'],
                'Create an opener object from a list of handlers.\n\n    The opener will use several default handlers, including support\n    for HTTP and FTP.\n\n    If any of the handlers passed as arguments are subclasses of the\n    default handlers, the default handlers will not be used.\n    '),
               ('urllib2._parse_proxy',
                ['proxy'],
                "Return (scheme, user, password, host/port) given a URL or an authority.\n\n    If a URL is supplied, it must have an authority (host:port) component.\n    According to RFC 3986, having an authority component means the URL must\n    have two slashes after the scheme:\n\n    >>> _parse_proxy('file:/ftp.example.com/')\n    Traceback (most recent call last):\n    ValueError: proxy URL with no authority: 'file:/ftp.example.com/'\n\n    The first three items of the returned tuple may be None.\n\n    Examples of authority parsing:\n\n    >>> _parse_proxy('proxy.example.com')\n    (None, None, None, 'proxy.example.com')\n    >>> _parse_proxy('proxy.example.com:3128')\n    (None, None, None, 'proxy.example.com:3128')\n\n    The authority component may optionally include userinfo (assumed to be\n    username:password):\n\n    >>> _parse_proxy('joe:password@proxy.example.com')\n    (None, 'joe', 'password', 'proxy.example.com')\n    >>> _parse_proxy('joe:password@proxy.example.com:3128')\n    (None, 'joe', 'password', 'proxy.example.com:3128')\n\n    Same examples, but with URLs instead:\n\n    >>> _parse_proxy('http://proxy.example.com/')\n    ('http', None, None, 'proxy.example.com')\n    >>> _parse_proxy('http://proxy.example.com:3128/')\n    ('http', None, None, 'proxy.example.com:3128')\n    >>> _parse_proxy('http://joe:password@proxy.example.com/')\n    ('http', 'joe', 'password', 'proxy.example.com')\n    >>> _parse_proxy('http://joe:password@proxy.example.com:3128')\n    ('http', 'joe', 'password', 'proxy.example.com:3128')\n\n    Everything after the authority is ignored:\n\n    >>> _parse_proxy('ftp://joe:password@proxy.example.com/rubbish:3128')\n    ('ftp', 'joe', 'password', 'proxy.example.com')\n\n    Test for no trailing '/' case:\n\n    >>> _parse_proxy('http://joe:password@proxy.example.com')\n    ('http', 'joe', 'password', 'proxy.example.com')\n\n    "),
               ('urllib2.randombytes', ['n'], 'Return n random bytes.'),
               ('urllib2.parse_keqv_list',
                ['l'],
                'Parse list of key=value strings where keys are not duplicated.'),
               ('urllib2.parse_http_list',
                ['s'],
                'Parse lists as described by RFC 2068 Section 2.\n\n    In particular, parse comma-separated lists where the elements of\n    the list may include quoted-strings.  A quoted-string could\n    contain a comma.  A non-quoted string could have quotes in the\n    middle.  Neither commas nor quotes count if they are escaped.\n    Only double-quotes count, not single-quotes.\n    '),
               ('SimpleHTTPServer.test',
                ['HandlerClass=SimpleHTTPRequestHandler',
                 'ServerClass=BaseHTTPServer.HTTPServer'],
                ''),
               ('glob.glob',
                ['pathname'],
                'Return a list of paths matching a pathname pattern.\n\n    The pattern may contain simple shell-style wildcards a la fnmatch.\n\n    '),
               ('glob.iglob',
                ['pathname'],
                'Return a list of paths matching a pathname pattern.\n\n    The pattern may contain simple shell-style wildcards a la fnmatch.\n\n    '),
               ('glob.glob1', ['dirname', 'pattern'], ''),
               ('glob.glob0', ['dirname', 'basename'], ''),
               ('glob.has_magic', ['s'], ''),
               ('trace.usage', ['outfile'], ''),
               ('trace.modname', ['path'], 'Return a plausible module name for the patch.'),
               ('trace.fullmodname', ['path'], 'Return a plausible module name for the path.'),
               ('trace.find_lines_from_code',
                ['code', 'strs'],
                'Return dict where keys are lines in the line number table.'),
               ('trace.find_lines',
                ['code', 'strs'],
                'Return lineno dict for all code objects reachable from code.'),
               ('trace.find_strings',
                ['filename'],
                'Return a dict of possible docstring positions.\n\n    The dict maps line numbers to strings.  There is an entry for\n    line that contains only a string or a part of a triple-quoted\n    string.\n    '),
               ('trace.find_executable_linenos',
                ['filename'],
                'Return dict where keys are line numbers in the line number table.'),
               ('trace._err_exit', ['msg'], ''),
               ('trace.main', ['argv=None'], ''),
               ('py_compile.set_creator_type', ['file'], ''),
               ('py_compile.set_creator_type', ['file'], ''),
               ('py_compile.wr_long',
                ['f', 'x'],
                'Internal; write a 32-bit int to a file in little-endian order.'),
               ('py_compile.compile',
                ['file', 'cfile=None', 'dfile=None', 'doraise=False'],
                "Byte-compile one Python source file to Python bytecode.\n\n    Arguments:\n\n    file:    source filename\n    cfile:   target filename; defaults to source with 'c' or 'o' appended\n             ('c' normally, 'o' in optimizing mode, giving .pyc or .pyo)\n    dfile:   purported filename; defaults to source (this is the filename\n             that will show up in error messages)\n    doraise: flag indicating whether or not an exception should be\n             raised when a compile error is found. If an exception\n             occurs and this flag is set to False, a string\n             indicating the nature of the exception will be printed,\n             and the function will return to the caller. If an\n             exception occurs and this flag is set to True, a\n             PyCompileError exception will be raised.\n\n    Note that it isn't necessary to byte-compile Python modules for\n    execution efficiency -- Python itself byte-compiles a module when\n    it is loaded, and if it can, writes out the bytecode to the\n    corresponding .pyc (or .pyo) file.\n\n    However, if a Python installation is shared between users, it is a\n    good idea to byte-compile all modules upon installation, since\n    other users may not be able to write in the source directories,\n    and thus they won't be able to write the .pyc/.pyo file, and then\n    they would be byte-compiling every module each time it is loaded.\n    This can slow down program start-up considerably.\n\n    See compileall.py for a script/module that uses this module to\n    byte-compile all installed files (or all files in selected\n    directories).\n\n    "),
               ('py_compile.main',
                ['args=None'],
                "Compile several source files.\n\n    The files named in 'args' (or on the command line, if 'args' is\n    not specified) are compiled and the resulting bytecode is cached\n    in the normal manner.  This function does not search a directory\n    structure to locate source files; it only compiles files named\n    explicitly.\n\n    "),
               ('wave.open', ['f', 'mode=None'], ''),
               ('zipfile.is_zipfile',
                ['filename'],
                'Quickly see if file is a ZIP file by checking the magic number.'),
               ('zipfile._EndRecData64',
                ['fpin', 'offset', 'endrec'],
                '\n    Read the ZIP64 end-of-archive records and use that to update endrec\n    '),
               ('zipfile._EndRecData',
                ['fpin'],
                'Return data from the "End of Central Directory" record, or None.\n\n    The data is a list of the nine items in the ZIP "End of central dir"\n    record followed by a tenth item, the file seek offset of this record.'),
               ('zipfile.main', ['args=None'], ''),
               ('os._get_exports_list', ['module'], ''),
               ('os.makedirs',
                ['name', 'mode=511'],
                'makedirs(path [, mode=0777])\n\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n    just the rightmost) will be created if it does not exist.  This is\n    recursive.\n\n    '),
               ('os.removedirs',
                ['name'],
                'removedirs(path)\n\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n\n    '),
               ('os.renames',
                ['old', 'new'],
                'renames(old, new)\n\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned way until either the\n    whole path is consumed or a nonempty directory is found.\n\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or\n    file.\n\n    '),
               ('os.walk',
                ['top', 'topdown=True', 'onerror=None'],
                'Directory tree generator.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding \'.\' and \'..\'), yields a 3-tuple\n\n        dirpath, dirnames, filenames\n\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding \'.\' and \'..\').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in\n    dirpath, do os.path.join(dirpath, name).\n\n    If optional arg \'topdown\' is true or not specified, the triple for a\n    directory is generated before the triples for any of its subdirectories\n    (directories are generated top down).  If topdown is false, the triple\n    for a directory is generated after the triples for all of its\n    subdirectories (directories are generated bottom up).\n\n    When topdown is true, the caller can modify the dirnames list in-place\n    (e.g., via del or slice assignment), and walk will only recurse into the\n    subdirectories whose names remain in dirnames; this can be used to prune\n    the search, or to impose a specific order of visiting.  Modifying\n    dirnames when topdown is false is ineffective, since the directories in\n    dirnames have already been generated by the time dirnames itself is\n    generated.\n\n    By default errors from the os.listdir() call are ignored.  If\n    optional arg \'onerror\' is specified, it should be a function; it\n    will be called with one argument, an os.error instance.  It can\n    report the error to continue with the walk, or raise the exception\n    to abort the walk.  Note that the filename is available as the\n    filename attribute of the exception object.\n\n    Caution:  if you pass a relative pathname for top, don\'t change the\n    current working directory between resumptions of walk.  walk never\n    changes the current directory, and assumes that the client doesn\'t\n    either.\n\n    Example:\n\n    import os\n    from os.path import join, getsize\n    for root, dirs, files in os.walk(\'python/Lib/email\'):\n        print root, "consumes",\n        print sum([getsize(join(root, name)) for name in files]),\n        print "bytes in", len(files), "non-directory files"\n        if \'CVS\' in dirs:\n            dirs.remove(\'CVS\')  # don\'t visit CVS directories\n    '),
               ('os.execl',
                ['file', '*args'],
                'execl(file, *args)\n\n    Execute the executable file with argument list args, replacing the\n    current process. '),
               ('os.execle',
                ['file', '*args'],
                'execle(file, *args, env)\n\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. '),
               ('os.execlp',
                ['file', '*args'],
                'execlp(file, *args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. '),
               ('os.execlpe',
                ['file', '*args'],
                'execlpe(file, *args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. '),
               ('os.execvp',
                ['file', 'args'],
                'execp(file, args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. '),
               ('os.execvpe',
                ['file', 'args', 'env'],
                'execvpe(file, args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the\n    current process.\n    args may be a list or tuple of strings. '),
               ('os._execvpe', ['file', 'args', 'env=None'], ''),
               ('os.unsetenv', ['key'], ''),
               ('os.getenv',
                ['key', 'default=None'],
                "Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default."),
               ('os._exists', ['name'], ''),
               ('os._spawnvef', ['mode', 'file', 'args', 'env', 'func'], ''),
               ('os.spawnv',
                ['mode', 'file', 'args'],
                "spawnv(mode, file, args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnve',
                ['mode', 'file', 'args', 'env'],
                "spawnve(mode, file, args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nspecified environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnvp',
                ['mode', 'file', 'args'],
                "spawnvp(mode, file, args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnvpe',
                ['mode', 'file', 'args', 'env'],
                "spawnvpe(mode, file, args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnl',
                ['mode', 'file', '*args'],
                "spawnl(mode, file, *args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnle',
                ['mode', 'file', '*args'],
                "spawnle(mode, file, *args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nsupplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnlp',
                ['mode', 'file', '*args'],
                "spawnlp(mode, file, *args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnlpe',
                ['mode', 'file', '*args'],
                "spawnlpe(mode, file, *args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.popen2',
                ['cmd', "mode='t'", 'bufsize=-1'],
                "Execute the shell command 'cmd' in a sub-process.  On UNIX, 'cmd'\n            may be a sequence, in which case arguments will be passed directly to\n            the program without shell intervention (as with os.spawnv()).  If 'cmd'\n            is a string it will be passed to the shell (as with os.system()). If\n            'bufsize' is specified, it sets the buffer size for the I/O pipes.  The\n            file objects (child_stdin, child_stdout) are returned."),
               ('os.popen3',
                ['cmd', "mode='t'", 'bufsize=-1'],
                "Execute the shell command 'cmd' in a sub-process.  On UNIX, 'cmd'\n            may be a sequence, in which case arguments will be passed directly to\n            the program without shell intervention (as with os.spawnv()).  If 'cmd'\n            is a string it will be passed to the shell (as with os.system()). If\n            'bufsize' is specified, it sets the buffer size for the I/O pipes.  The\n            file objects (child_stdin, child_stdout, child_stderr) are returned."),
               ('os.popen4',
                ['cmd', "mode='t'", 'bufsize=-1'],
                "Execute the shell command 'cmd' in a sub-process.  On UNIX, 'cmd'\n            may be a sequence, in which case arguments will be passed directly to\n            the program without shell intervention (as with os.spawnv()).  If 'cmd'\n            is a string it will be passed to the shell (as with os.system()). If\n            'bufsize' is specified, it sets the buffer size for the I/O pipes.  The\n            file objects (child_stdin, child_stdout_stderr) are returned."),
               ('os._make_stat_result', ['tup', 'dict'], ''),
               ('os._pickle_stat_result', ['sr'], ''),
               ('os._make_statvfs_result', ['tup', 'dict'], ''),
               ('os._pickle_statvfs_result', ['sr'], ''),
               ('os.urandom',
                ['n'],
                'urandom(n) -> str\n\n        Return a string of n random bytes suitable for cryptographic use.\n\n        '),
               ('StringIO._complain_ifclosed', ['closed'], ''),
               ('StringIO.test', [], ''),
               ('socket.ssl', ['sock', 'keyfile=None', 'certfile=None'], ''),
               ('socket.getfqdn',
                ["name=''"],
                'Get fully qualified domain name from name.\n\n    An empty argument is interpreted as meaning the local host.\n\n    First the hostname returned by gethostbyaddr() is checked, then\n    possibly existing aliases. In case no FQDN is available, hostname\n    from gethostname() is returned.\n    '),
               ('random._test_generator', ['n', 'func', 'args'], ''),
               ('random._test', ['N=2000'], ''),
               ('rlcompleter.get_class_members', ['klass'], ''),
               ('popen2._cleanup', [], ''),
               ('popen2.popen2',
                ['cmd', 'bufsize=-1', "mode='t'"],
                "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin) are returned."),
               ('popen2.popen3',
                ['cmd', 'bufsize=-1', "mode='t'"],
                "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin, child_stderr) are returned."),
               ('popen2.popen4',
                ['cmd', 'bufsize=-1', "mode='t'"],
                "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout_stderr, child_stdin) are returned."),
               ('popen2.popen2',
                ['cmd', 'bufsize=-1', "mode='t'"],
                "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin) are returned."),
               ('popen2.popen3',
                ['cmd', 'bufsize=-1', "mode='t'"],
                "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin, child_stderr) are returned."),
               ('popen2.popen4',
                ['cmd', 'bufsize=-1', "mode='t'"],
                "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout_stderr, child_stdin) are returned."),
               ('popen2._test', [], ''),
               ('hmac._strxor',
                ['s1', 's2'],
                'Utility method. XOR the two strings s1 and s2 (must have same length).\n    '),
               ('hmac.new',
                ['key', 'msg=None', 'digestmod=None'],
                "Create a new hashing object and return it.\n\n    key: The starting key for the hash.\n    msg: if available, will immediately be hashed into the object's starting\n    state.\n\n    You can now feed arbitrary strings into the object using its update()\n    method, and can ask for the hash value at any time by calling its digest()\n    method.\n    "),
               ('copy.copy',
                ['x'],
                "Shallow copy operation on arbitrary Python objects.\n\n    See the module's __doc__ string for more info.\n    "),
               ('copy._copy_immutable', ['x'], ''),
               ('copy._copy_with_constructor', ['x'], ''),
               ('copy._copy_with_copy_method', ['x'], ''),
               ('copy._copy_inst', ['x'], ''),
               ('copy.deepcopy',
                ['x', 'memo=None', '_nil=[]'],
                "Deep copy operation on arbitrary Python objects.\n\n    See the module's __doc__ string for more info.\n    "),
               ('copy._deepcopy_atomic', ['x', 'memo'], ''),
               ('copy._deepcopy_list', ['x', 'memo'], ''),
               ('copy._deepcopy_tuple', ['x', 'memo'], ''),
               ('copy._deepcopy_dict', ['x', 'memo'], ''),
               ('copy._keep_alive',
                ['x', 'memo'],
                'Keeps a reference to the object x in the memo.\n\n    Because we remember objects by their id, we have\n    to assure that possibly temporary objects are kept\n    alive by referencing them.\n    We store a reference at the id of the memo, which should\n    normally not be used unless someone tries to deepcopy\n    the memo itself...\n    '),
               ('copy._deepcopy_inst', ['x', 'memo'], ''),
               ('copy._reconstruct', ['x', 'info', 'deep', 'memo=None'], ''),
               ('copy._test', [], ''),
               ('pdb.find_function', ['funcname', 'filename'], ''),
               ('pdb.run', ['statement', 'globals=None', 'locals=None'], ''),
               ('pdb.runeval', ['expression', 'globals=None', 'locals=None'], ''),
               ('pdb.runctx', ['statement', 'globals', 'locals'], ''),
               ('pdb.runcall', ['*args', '**kwds'], ''),
               ('pdb.set_trace', [], ''),
               ('pdb.post_mortem', ['t'], ''),
               ('pdb.pm', [], ''),
               ('pdb.test', [], ''),
               ('pdb.help', [], ''),
               ('pdb.main', [], ''),
               ('mailbox._lock_file',
                ['f', 'dotlock=True'],
                'Lock file f using lockf and dot locking.'),
               ('mailbox._unlock_file', ['f'], 'Unlock file f using lockf and dot locking.'),
               ('mailbox._create_carefully',
                ['path'],
                "Create a file if it doesn't exist and open for reading and writing."),
               ('mailbox._create_temporary',
                ['path'],
                'Create a temp file based on path and open for reading and writing.'),
               ('mailbox._sync_flush', ['f'], 'Ensure changes to file f are physically on disk.'),
               ('mailbox._sync_close',
                ['f'],
                'Close file f, ensuring all changes are physically on disk.'),
               ('unittest.isinstance', ['obj', 'clsinfo'], ''),
               ('unittest._strclass', ['cls'], ''),
               ('unittest._makeLoader', ['prefix', 'sortUsing', 'suiteClass=None'], ''),
               ('unittest.getTestCaseNames', ['testCaseClass', 'prefix', 'sortUsing=cmp'], ''),
               ('unittest.makeSuite',
                ['testCaseClass', "prefix='test'", 'sortUsing=cmp', 'suiteClass=TestSuite'],
                ''),
               ('unittest.findTestCases',
                ['module', "prefix='test'", 'sortUsing=cmp', 'suiteClass=TestSuite'],
                ''),
               ('site.makepath', ['*paths'], ''),
               ('site.abs__file__', [], "Set all module' __file__ attribute to an absolute path"),
               ('site.removeduppaths',
                [],
                ' Remove duplicate entries from sys.path along with making them\n    absolute'),
               ('site._init_pathinfo',
                [],
                'Return a set containing all existing directory entries from sys.path'),
               ('site.addpackage',
                ['sitedir', 'name', 'known_paths'],
                "Add a new path to known_paths by combining sitedir and 'name' or execute\n    sitedir if it starts with 'import'"),
               ('site.addsitedir',
                ['sitedir', 'known_paths=None'],
                "Add 'sitedir' argument to sys.path if missing and handle .pth files in\n    'sitedir'"),
               ('site.addsitepackages',
                ['known_paths'],
                'Add site-packages (and possibly site-python) to sys.path'),
               ('site.setBEGINLIBPATH',
                [],
                'The OS/2 EMX port has optional extension modules that do double duty\n    as DLLs (and must use the .DLL file extension) for other extensions.\n    The library search path needs to be amended so these will be found\n    during module import.  Use BEGINLIBPATH so that these are at the start\n    of the library search path.\n\n    '),
               ('site.setquit',
                [],
                "Define new built-ins 'quit' and 'exit'.\n    These are simply strings that display a hint on how to exit.\n\n    "),
               ('site.setcopyright', [], "Set 'copyright' and 'credits' in __builtin__"),
               ('site.sethelper', [], ''),
               ('site.aliasmbcs',
                [],
                'On Windows, some default encodings are not provided by Python,\n    while they are always available as "mbcs" in each locale. Make\n    them usable by aliasing to "mbcs" in such a case.'),
               ('site.setencoding',
                [],
                "Set the string encoding used by the Unicode implementation.  The\n    default is 'ascii', but if you're willing to experiment, you can\n    change this."),
               ('site.execsitecustomize', [], 'Run custom site specific code, if available.'),
               ('site.main', [], ''),
               ('site._test', [], ''),
               ('fpformat.extract',
                ['s'],
                "Return (sign, intpart, fraction, expo) or raise an exception:\n    sign is '+' or '-'\n    intpart is 0 or more digits beginning with a nonzero\n    fraction is 0 or more digits\n    expo is an integer"),
               ('fpformat.unexpo',
                ['intpart', 'fraction', 'expo'],
                'Remove the exponent by changing intpart and fraction.'),
               ('fpformat.roundfrac',
                ['intpart', 'fraction', 'digs'],
                'Round or extend the fraction to size digs.'),
               ('fpformat.fix',
                ['x', 'digs'],
                "Format x as [-]ddd.ddd with 'digs' digits after the point\n    and at least one digit before.\n    If digs <= 0, the point is suppressed."),
               ('fpformat.sci',
                ['x', 'digs'],
                "Format x as [-]d.dddE[+-]ddd with 'digs' digits after the point\n    and exactly one digit before.\n    If digs is <= 0, one digit is kept and the point is suppressed."),
               ('fpformat.test', [], 'Interactive test run.'),
               ('optparse._repr', ['self'], ''),
               ('optparse.gettext', ['message'], ''),
               ('optparse._parse_num', ['val', 'type'], ''),
               ('optparse._parse_int', ['val'], ''),
               ('optparse._parse_long', ['val'], ''),
               ('optparse.check_builtin', ['option', 'opt', 'value'], ''),
               ('optparse.check_choice', ['option', 'opt', 'value'], ''),
               ('optparse.isbasestring', ['x'], ''),
               ('optparse.isbasestring', ['x'], ''),
               ('optparse._match_abbrev',
                ['s', 'wordmap'],
                "_match_abbrev(s : string, wordmap : {string : Option}) -> string\n\n    Return the string key in 'wordmap' for which 's' is an unambiguous\n    abbreviation.  If 's' is found to be ambiguous or doesn't match any of\n    'words', raise BadOptionError.\n    "),
               ('token.ISTERMINAL', ['x'], ''),
               ('token.ISNONTERMINAL', ['x'], ''),
               ('token.ISEOF', ['x'], ''),
               ('token.main', [], ''),
               ('subprocess._cleanup', [], ''),
               ('subprocess.call',
                ['*popenargs', '**kwargs'],
                'Run command with arguments.  Wait for command to complete, then\n    return the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    retcode = call(["ls", "-l"])\n    '),
               ('subprocess.check_call',
                ['*popenargs', '**kwargs'],
                'Run command with arguments.  Wait for command to complete.  If\n    the exit code was zero then return, otherwise raise\n    CalledProcessError.  The CalledProcessError object will have the\n    return code in the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    check_call(["ls", "-l"])\n    '),
               ('subprocess.list2cmdline',
                ['seq'],
                '\n    Translate a sequence of arguments into a command line\n    string, using the same rules as the MS C runtime:\n\n    1) Arguments are delimited by white space, which is either a\n       space or a tab.\n\n    2) A string surrounded by double quotation marks is\n       interpreted as a single argument, regardless of white space\n       contained within.  A quoted string can be embedded in an\n       argument.\n\n    3) A double quotation mark preceded by a backslash is\n       interpreted as a literal double quotation mark.\n\n    4) Backslashes are interpreted literally, unless they\n       immediately precede a double quotation mark.\n\n    5) If backslashes immediately precede a double quotation mark,\n       every pair of backslashes is interpreted as a literal\n       backslash.  If the number of backslashes is odd, the last\n       backslash escapes the next double quotation mark as\n       described in rule 3.\n    '),
               ('subprocess._demo_posix', [], ''),
               ('subprocess._demo_windows', [], ''),
               ('mailcap.getcaps',
                [],
                'Return a dictionary containing the mailcap database.\n\n    The dictionary maps a MIME type (in all lowercase, e.g. \'text/plain\')\n    to a list of dictionaries corresponding to mailcap entries.  The list\n    collects all the entries for that MIME type from all available mailcap\n    files.  Each dictionary contains key-value pairs for that MIME type,\n    where the viewing command is stored with the key "view".\n\n    '),
               ('mailcap.listmailcapfiles',
                [],
                'Return a list of all mailcap files found on the system.'),
               ('mailcap.readmailcapfile',
                ['fp'],
                'Read a mailcap file and return a dictionary keyed by MIME type.\n\n    Each MIME type is mapped to an entry consisting of a list of\n    dictionaries; the list will contain more than one such dictionary\n    if a given MIME type appears more than once in the mailcap file.\n    Each dictionary contains key-value pairs for that MIME type, where\n    the viewing command is stored with the key "view".\n    '),
               ('mailcap.parseline',
                ['line'],
                'Parse one entry in a mailcap file and return a dictionary.\n\n    The viewing command is stored as the value with the key "view",\n    and the rest of the fields produce key-value pairs in the dict.\n    '),
               ('mailcap.parsefield',
                ['line', 'i', 'n'],
                'Separate one key-value pair in a mailcap entry.'),
               ('mailcap.findmatch',
                ['caps', 'MIMEtype', "key='view'", "filename='/dev/null'", 'plist=[]'],
                "Find a match for a mailcap entry.\n\n    Return a tuple containing the command line, and the mailcap entry\n    used; (None, None) if no match is found.  This may invoke the\n    'test' command of several matching entries before deciding which\n    entry to use.\n\n    "),
               ('mailcap.lookup', ['caps', 'MIMEtype', 'key=None'], ''),
               ('mailcap.subst', ['field', 'MIMEtype', 'filename', 'plist=[]'], ''),
               ('mailcap.findparam', ['name', 'plist'], ''),
               ('mailcap.test', [], ''),
               ('mailcap.show', ['caps'], ''),
               ('bisect.insort_right',
                ['a', 'x', 'lo=0', 'hi=None'],
                'Insert item x in list a, and keep it sorted assuming a is sorted.\n\n    If x is already in a, insert it to the right of the rightmost x.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    '),
               ('bisect.bisect_right',
                ['a', 'x', 'lo=0', 'hi=None'],
                'Return the index where to insert item x in list a, assuming a is sorted.\n\n    The return value i is such that all e in a[:i] have e <= x, and all e in\n    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will\n    insert just after the rightmost x already there.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    '),
               ('bisect.insort_left',
                ['a', 'x', 'lo=0', 'hi=None'],
                'Insert item x in list a, and keep it sorted assuming a is sorted.\n\n    If x is already in a, insert it to the left of the leftmost x.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    '),
               ('bisect.bisect_left',
                ['a', 'x', 'lo=0', 'hi=None'],
                'Return the index where to insert item x in list a, assuming a is sorted.\n\n    The return value i is such that all e in a[:i] have e < x, and all e in\n    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will\n    insert just before the leftmost x already there.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    '),
               ('toaiff.toaiff', ['filename'], ''),
               ('toaiff._toaiff', ['filename', 'temps'], ''),
               ('pkgutil.read_code', ['stream'], ''),
               ('pkgutil.simplegeneric',
                ['func'],
                'Make a trivial single-dispatch generic function'),
               ('pkgutil.walk_packages',
                ['path=None', "prefix=''", 'onerror=None'],
                "Yields (module_loader, name, ispkg) for all modules recursively\n    on path, or, if path is None, all accessible modules.\n\n    'path' should be either None or a list of paths to look for\n    modules in.\n\n    'prefix' is a string to output on the front of every module name\n    on output.\n\n    Note that this function must import all *packages* (NOT all\n    modules!) on the given path, in order to access the __path__\n    attribute to find submodules.\n\n    'onerror' is a function which gets called with one argument (the\n    name of the package which was being imported) if any exception\n    occurs while trying to import a package.  If no onerror function is\n    supplied, ImportErrors are caught and ignored, while all other\n    exceptions are propagated, terminating the search.\n\n    Examples:\n\n    # list all modules python can access\n    walk_packages()\n\n    # list all submodules of ctypes\n    walk_packages(ctypes.__path__, ctypes.__name__+'.')\n    "),
               ('pkgutil.iter_modules',
                ['path=None', "prefix=''"],
                "Yields (module_loader, name, ispkg) for all submodules on path,\n    or, if path is None, all top-level modules on sys.path.\n\n    'path' should be either None or a list of paths to look for\n    modules in.\n\n    'prefix' is a string to output on the front of every module name\n    on output.\n    "),
               ('pkgutil.iter_importer_modules', ['importer', "prefix=''"], ''),
               ('pkgutil.iter_zipimport_modules', ['importer', "prefix=''"], ''),
               ('pkgutil.get_importer',
                ['path_item'],
                'Retrieve a PEP 302 importer for the given path item\n\n    The returned importer is cached in sys.path_importer_cache\n    if it was newly created by a path hook.\n\n    If there is no importer, a wrapper around the basic import\n    machinery is returned. This wrapper is never inserted into\n    the importer cache (None is inserted instead).\n\n    The cache (or part of it) can be cleared manually if a\n    rescan of sys.path_hooks is necessary.\n    '),
               ('pkgutil.iter_importers',
                ["fullname=''"],
                'Yield PEP 302 importers for the given module name\n\n    If fullname contains a \'.\', the importers will be for the package\n    containing fullname, otherwise they will be importers for sys.meta_path,\n    sys.path, and Python\'s "classic" import machinery, in that order.  If\n    the named module is in a package, that package is imported as a side\n    effect of invoking this function.\n\n    Non PEP 302 mechanisms (e.g. the Windows registry) used by the\n    standard import machinery to find files in alternative locations\n    are partially supported, but are searched AFTER sys.path. Normally,\n    these locations are searched BEFORE sys.path, preventing sys.path\n    entries from shadowing them.\n\n    For this to cause a visible difference in behaviour, there must\n    be a module or package name that is accessible via both sys.path\n    and one of the non PEP 302 file system mechanisms. In this case,\n    the emulation will find the former version, while the builtin\n    import mechanism will find the latter.\n\n    Items of the following types can be affected by this discrepancy:\n        imp.C_EXTENSION, imp.PY_SOURCE, imp.PY_COMPILED, imp.PKG_DIRECTORY\n    '),
               ('pkgutil.get_loader',
                ['module_or_name'],
                'Get a PEP 302 "loader" object for module_or_name\n\n    If the module or package is accessible via the normal import\n    mechanism, a wrapper around the relevant part of that machinery\n    is returned.  Returns None if the module cannot be found or imported.\n    If the named module is not already imported, its containing package\n    (if any) is imported, in order to establish the package __path__.\n\n    This function uses iter_importers(), and is thus subject to the same\n    limitations regarding platform-specific special import locations such\n    as the Windows registry.\n    '),
               ('pkgutil.find_loader',
                ['fullname'],
                'Find a PEP 302 "loader" object for fullname\n\n    If fullname contains dots, path must be the containing package\'s __path__.\n    Returns None if the module cannot be found or imported. This function uses\n    iter_importers(), and is thus subject to the same limitations regarding\n    platform-specific special import locations such as the Windows registry.\n    '),
               ('pkgutil.extend_path',
                ['path', 'name'],
                "Extend a package's path.\n\n    Intended use is to place the following code in a package's __init__.py:\n\n        from pkgutil import extend_path\n        __path__ = extend_path(__path__, __name__)\n\n    This will add to the package's __path__ all subdirectories of\n    directories on sys.path named after the package.  This is useful\n    if one wants to distribute different parts of a single logical\n    package as multiple directories.\n\n    It also looks for *.pkg files beginning where * matches the name\n    argument.  This feature is similar to *.pth files (see site.py),\n    except that it doesn't special-case lines starting with 'import'.\n    A *.pkg file is trusted at face value: apart from checking for\n    duplicates, all entries found in a *.pkg file are added to the\n    path, regardless of whether they are exist the filesystem.  (This\n    is a feature.)\n\n    If the input path is not a list (as is the case for frozen\n    packages) it is returned unchanged.  The input path is not\n    modified; an extended copy is returned.  Items are only appended\n    to the copy at the end.\n\n    It is assumed that sys.path is a sequence.  Items of sys.path that\n    are not (unicode or 8-bit) strings referring to existing\n    directories are ignored.  Unicode items of sys.path that cause\n    errors when used as filenames may cause this function to raise an\n    exception (in line with os.path.isdir() behavior).\n    "),
               ('audiodev.AudioDev', [], ''),
               ('audiodev.test', ['fn=None'], ''),
               ('ntpath.normcase',
                ['s'],
                'Normalize case of pathname.\n\n    Makes all characters lowercase and all slashes into backslashes.'),
               ('ntpath.isabs', ['s'], 'Test whether a path is absolute'),
               ('ntpath.join',
                ['a', '*p'],
                'Join two or more pathname components, inserting "\\" as needed'),
               ('ntpath.splitdrive',
                ['p'],
                'Split a pathname into drive and path specifiers. Returns a 2-tuple\n"(drive,path)";  either part may be empty'),
               ('ntpath.splitunc',
                ['p'],
                "Split a pathname into UNC mount point and relative path specifiers.\n\n    Return a 2-tuple (unc, rest); either part may be empty.\n    If unc is not empty, it has the form '//host/mount' (or similar\n    using backslashes).  unc+rest is always the input path.\n    Paths containing drive letters never have an UNC part.\n    "),
               ('ntpath.split',
                ['p'],
                'Split a pathname.\n\n    Return tuple (head, tail) where tail is everything after the final slash.\n    Either part may be empty.'),
               ('ntpath.splitext',
                ['p'],
                'Split the extension from a pathname.\n\n    Extension is everything from the last dot to the end.\n    Return (root, ext), either part may be empty.'),
               ('ntpath.basename', ['p'], 'Returns the final component of a pathname'),
               ('ntpath.dirname', ['p'], 'Returns the directory component of a pathname'),
               ('ntpath.commonprefix',
                ['m'],
                'Given a list of pathnames, returns the longest common leading component'),
               ('ntpath.getsize',
                ['filename'],
                'Return the size of a file, reported by os.stat()'),
               ('ntpath.getmtime',
                ['filename'],
                'Return the last modification time of a file, reported by os.stat()'),
               ('ntpath.getatime',
                ['filename'],
                'Return the last access time of a file, reported by os.stat()'),
               ('ntpath.getctime',
                ['filename'],
                'Return the creation time of a file, reported by os.stat().'),
               ('ntpath.islink',
                ['path'],
                'Test for symbolic link.  On WindowsNT/95 always returns false'),
               ('ntpath.exists', ['path'], 'Test whether a path exists'),
               ('ntpath.isdir', ['path'], 'Test whether a path is a directory'),
               ('ntpath.isfile', ['path'], 'Test whether a path is a regular file'),
               ('ntpath.ismount',
                ['path'],
                'Test whether a path is a mount point (defined as root of drive)'),
               ('ntpath.walk',
                ['top', 'func', 'arg'],
                "Directory tree walk with callback function.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).\n    dirname is the name of the directory, and fnames a list of the names of\n    the files and subdirectories in dirname (excluding '.' and '..').  func\n    may modify the fnames list in-place (e.g. via del or slice assignment),\n    and walk will only recurse into the subdirectories whose names remain in\n    fnames; this can be used to implement a filter, or to impose a specific\n    order of visiting.  No semantics are defined for, or required of, arg,\n    beyond that arg is always passed to func.  It can be used, e.g., to pass\n    a filename pattern, or a mutable object designed to accumulate\n    statistics.  Passing None for arg is common."),
               ('ntpath.expanduser',
                ['path'],
                'Expand ~ and ~user constructs.\n\n    If user or $HOME is unknown, do nothing.'),
               ('ntpath.expandvars',
                ['path'],
                'Expand shell variables of form $var and ${var}.\n\n    Unknown variables are left unchanged.'),
               ('ntpath.normpath', ['path'], 'Normalize path, eliminating double slashes, etc.'),
               ('ntpath.abspath', ['path'], 'Return the absolute version of a path.'),
               ('ntpath.abspath', ['path'], 'Return the absolute version of a path.'),
               ('difflib._calculate_ratio', ['matches', 'length'], ''),
               ('difflib.get_close_matches',
                ['word', 'possibilities', 'n=3', 'cutoff=0.59999999999999998'],
                'Use SequenceMatcher to return list of the best "good enough" matches.\n\n    word is a sequence for which close matches are desired (typically a\n    string).\n\n    possibilities is a list of sequences against which to match word\n    (typically a list of strings).\n\n    Optional arg n (default 3) is the maximum number of close matches to\n    return.  n must be > 0.\n\n    Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities\n    that don\'t score at least that similar to word are ignored.\n\n    The best (no more than n) matches among the possibilities are returned\n    in a list, sorted by similarity score, most similar first.\n\n    >>> get_close_matches("appel", ["ape", "apple", "peach", "puppy"])\n    [\'apple\', \'ape\']\n    >>> import keyword as _keyword\n    >>> get_close_matches("wheel", _keyword.kwlist)\n    [\'while\']\n    >>> get_close_matches("apple", _keyword.kwlist)\n    []\n    >>> get_close_matches("accept", _keyword.kwlist)\n    [\'except\']\n    '),
               ('difflib._count_leading',
                ['line', 'ch'],
                "\n    Return number of `ch` characters at the start of `line`.\n\n    Example:\n\n    >>> _count_leading('   abc', ' ')\n    3\n    "),
               ('difflib.IS_LINE_JUNK',
                ['line', "pat=re.compile('\\\\s*#?\\\\s*$').match"],
                "\n    Return 1 for ignorable line: iff `line` is blank or contains a single '#'.\n\n    Examples:\n\n    >>> IS_LINE_JUNK('\\n')\n    True\n    >>> IS_LINE_JUNK('  #   \\n')\n    True\n    >>> IS_LINE_JUNK('hello\\n')\n    False\n    "),
               ('difflib.IS_CHARACTER_JUNK',
                ['ch', "ws=' \\t'"],
                "\n    Return 1 for ignorable character: iff `ch` is a space or tab.\n\n    Examples:\n\n    >>> IS_CHARACTER_JUNK(' ')\n    True\n    >>> IS_CHARACTER_JUNK('\\t')\n    True\n    >>> IS_CHARACTER_JUNK('\\n')\n    False\n    >>> IS_CHARACTER_JUNK('x')\n    False\n    "),
               ('difflib.unified_diff',
                ['a',
                 'b',
                 "fromfile=''",
                 "tofile=''",
                 "fromfiledate=''",
                 "tofiledate=''",
                 'n=3',
                 "lineterm='\\n'"],
                '\n    Compare two sequences of lines; generate the delta as a unified diff.\n\n    Unified diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by \'n\' which\n    defaults to three.\n\n    By default, the diff control lines (those with ---, +++, or @@) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to "" so that the output will be uniformly newline free.\n\n    The unidiff format normally has a header for filenames and modification\n    times.  Any or all of these may be specified using strings for\n    \'fromfile\', \'tofile\', \'fromfiledate\', and \'tofiledate\'.  The modification\n    times are normally expressed in the format returned by time.ctime().\n\n    Example:\n\n    >>> for line in unified_diff(\'one two three four\'.split(),\n    ...             \'zero one tree four\'.split(), \'Original\', \'Current\',\n    ...             \'Sat Jan 26 23:30:50 1991\', \'Fri Jun 06 10:20:52 2003\',\n    ...             lineterm=\'\'):\n    ...     print line\n    --- Original Sat Jan 26 23:30:50 1991\n    +++ Current Fri Jun 06 10:20:52 2003\n    @@ -1,4 +1,4 @@\n    +zero\n     one\n    -two\n    -three\n    +tree\n     four\n    '),
               ('difflib.context_diff',
                ['a',
                 'b',
                 "fromfile=''",
                 "tofile=''",
                 "fromfiledate=''",
                 "tofiledate=''",
                 'n=3',
                 "lineterm='\\n'"],
                '\n    Compare two sequences of lines; generate the delta as a context diff.\n\n    Context diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by \'n\' which\n    defaults to three.\n\n    By default, the diff control lines (those with *** or ---) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to "" so that the output will be uniformly newline free.\n\n    The context diff format normally has a header for filenames and\n    modification times.  Any or all of these may be specified using\n    strings for \'fromfile\', \'tofile\', \'fromfiledate\', and \'tofiledate\'.\n    The modification times are normally expressed in the format returned\n    by time.ctime().  If not specified, the strings default to blanks.\n\n    Example:\n\n    >>> print \'\'.join(context_diff(\'one\\ntwo\\nthree\\nfour\\n\'.splitlines(1),\n    ...       \'zero\\none\\ntree\\nfour\\n\'.splitlines(1), \'Original\', \'Current\',\n    ...       \'Sat Jan 26 23:30:50 1991\', \'Fri Jun 06 10:22:46 2003\')),\n    *** Original Sat Jan 26 23:30:50 1991\n    --- Current Fri Jun 06 10:22:46 2003\n    ***************\n    *** 1,4 ****\n      one\n    ! two\n    ! three\n      four\n    --- 1,4 ----\n    + zero\n      one\n    ! tree\n      four\n    '),
               ('difflib.ndiff',
                ['a', 'b', 'linejunk=None', 'charjunk=IS_CHARACTER_JUNK'],
                '\n    Compare `a` and `b` (lists of strings); return a `Differ`-style delta.\n\n    Optional keyword parameters `linejunk` and `charjunk` are for filter\n    functions (or None):\n\n    - linejunk: A function that should accept a single string argument, and\n      return true iff the string is junk.  The default is None, and is\n      recommended; as of Python 2.3, an adaptive notion of "noise" lines is\n      used that does a good job on its own.\n\n    - charjunk: A function that should accept a string of length 1. The\n      default is module-level function IS_CHARACTER_JUNK, which filters out\n      whitespace characters (a blank or tab; note: bad idea to include newline\n      in this!).\n\n    Tools/scripts/ndiff.py is a command-line front-end to this function.\n\n    Example:\n\n    >>> diff = ndiff(\'one\\ntwo\\nthree\\n\'.splitlines(1),\n    ...              \'ore\\ntree\\nemu\\n\'.splitlines(1))\n    >>> print \'\'.join(diff),\n    - one\n    ?  ^\n    + ore\n    ?  ^\n    - two\n    - three\n    ?  -\n    + tree\n    + emu\n    '),
               ('difflib._mdiff',
                ['fromlines',
                 'tolines',
                 'context=None',
                 'linejunk=None',
                 'charjunk=IS_CHARACTER_JUNK'],
                'Returns generator yielding marked up from/to side by side differences.\n\n    Arguments:\n    fromlines -- list of text lines to compared to tolines\n    tolines -- list of text lines to be compared to fromlines\n    context -- number of context lines to display on each side of difference,\n               if None, all from/to text lines will be generated.\n    linejunk -- passed on to ndiff (see ndiff documentation)\n    charjunk -- passed on to ndiff (see ndiff documentation)\n\n    This function returns an interator which returns a tuple:\n    (from line tuple, to line tuple, boolean flag)\n\n    from/to line tuple -- (line num, line text)\n        line num -- integer or None (to indicate a context seperation)\n        line text -- original line text with following markers inserted:\n            \'\\0+\' -- marks start of added text\n            \'\\0-\' -- marks start of deleted text\n            \'\\0^\' -- marks start of changed text\n            \'\\1\' -- marks end of added/deleted/changed text\n\n    boolean flag -- None indicates context separation, True indicates\n        either "from" or "to" line contains a change, otherwise False.\n\n    This function/iterator was originally developed to generate side by side\n    file difference for making HTML pages (see HtmlDiff class for example\n    usage).\n\n    Note, this function utilizes the ndiff function to generate the side by\n    side difference markup.  Optional ndiff arguments may be passed to this\n    function and they in turn will be passed to ndiff.\n    '),
               ('difflib.restore',
                ['delta', 'which'],
                "\n    Generate one of the two sequences that generated a delta.\n\n    Given a `delta` produced by `Differ.compare()` or `ndiff()`, extract\n    lines originating from file 1 or 2 (parameter `which`), stripping off line\n    prefixes.\n\n    Examples:\n\n    >>> diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(1),\n    ...              'ore\\ntree\\nemu\\n'.splitlines(1))\n    >>> diff = list(diff)\n    >>> print ''.join(restore(diff, 1)),\n    one\n    two\n    three\n    >>> print ''.join(restore(diff, 2)),\n    ore\n    tree\n    emu\n    "),
               ('difflib._test', [], ''),
               ('types._f', [], ''),
               ('types._g', [], ''),
               ('pickletools.read_uint1',
                ['f'],
                "\n    >>> import StringIO\n    >>> read_uint1(StringIO.StringIO('\\xff'))\n    255\n    "),
               ('pickletools.read_uint2',
                ['f'],
                "\n    >>> import StringIO\n    >>> read_uint2(StringIO.StringIO('\\xff\\x00'))\n    255\n    >>> read_uint2(StringIO.StringIO('\\xff\\xff'))\n    65535\n    "),
               ('pickletools.read_int4',
                ['f'],
                "\n    >>> import StringIO\n    >>> read_int4(StringIO.StringIO('\\xff\\x00\\x00\\x00'))\n    255\n    >>> read_int4(StringIO.StringIO('\\x00\\x00\\x00\\x80')) == -(2**31)\n    True\n    "),
               ('pickletools.read_stringnl',
                ['f', 'decode=True', 'stripquotes=True'],
                '\n    >>> import StringIO\n    >>> read_stringnl(StringIO.StringIO("\'abcd\'\\nefg\\n"))\n    \'abcd\'\n\n    >>> read_stringnl(StringIO.StringIO("\\n"))\n    Traceback (most recent call last):\n    ...\n    ValueError: no string quotes around \'\'\n\n    >>> read_stringnl(StringIO.StringIO("\\n"), stripquotes=False)\n    \'\'\n\n    >>> read_stringnl(StringIO.StringIO("\'\'\\n"))\n    \'\'\n\n    >>> read_stringnl(StringIO.StringIO(\'"abcd"\'))\n    Traceback (most recent call last):\n    ...\n    ValueError: no newline found when trying to read stringnl\n\n    Embedded escapes are undone in the result.\n    >>> read_stringnl(StringIO.StringIO(r"\'a\\n\\\\b\\x00c\\td\'" + "\\n\'e\'"))\n    \'a\\n\\\\b\\x00c\\td\'\n    '),
               ('pickletools.read_stringnl_noescape', ['f'], ''),
               ('pickletools.read_stringnl_noescape_pair',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_stringnl_noescape_pair(StringIO.StringIO("Queue\\nEmpty\\njunk"))\n    \'Queue Empty\'\n    '),
               ('pickletools.read_string4',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_string4(StringIO.StringIO("\\x00\\x00\\x00\\x00abc"))\n    \'\'\n    >>> read_string4(StringIO.StringIO("\\x03\\x00\\x00\\x00abcdef"))\n    \'abc\'\n    >>> read_string4(StringIO.StringIO("\\x00\\x00\\x00\\x03abcdef"))\n    Traceback (most recent call last):\n    ...\n    ValueError: expected 50331648 bytes in a string4, but only 6 remain\n    '),
               ('pickletools.read_string1',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_string1(StringIO.StringIO("\\x00"))\n    \'\'\n    >>> read_string1(StringIO.StringIO("\\x03abcdef"))\n    \'abc\'\n    '),
               ('pickletools.read_unicodestringnl',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_unicodestringnl(StringIO.StringIO("abc\\uabcd\\njunk"))\n    u\'abc\\uabcd\'\n    '),
               ('pickletools.read_unicodestring4',
                ['f'],
                "\n    >>> import StringIO\n    >>> s = u'abcd\\uabcd'\n    >>> enc = s.encode('utf-8')\n    >>> enc\n    'abcd\\xea\\xaf\\x8d'\n    >>> n = chr(len(enc)) + chr(0) * 3  # little-endian 4-byte length\n    >>> t = read_unicodestring4(StringIO.StringIO(n + enc + 'junk'))\n    >>> s == t\n    True\n\n    >>> read_unicodestring4(StringIO.StringIO(n + enc[:-1]))\n    Traceback (most recent call last):\n    ...\n    ValueError: expected 7 bytes in a unicodestring4, but only 6 remain\n    "),
               ('pickletools.read_decimalnl_short',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_decimalnl_short(StringIO.StringIO("1234\\n56"))\n    1234\n\n    >>> read_decimalnl_short(StringIO.StringIO("1234L\\n56"))\n    Traceback (most recent call last):\n    ...\n    ValueError: trailing \'L\' not allowed in \'1234L\'\n    '),
               ('pickletools.read_decimalnl_long',
                ['f'],
                '\n    >>> import StringIO\n\n    >>> read_decimalnl_long(StringIO.StringIO("1234\\n56"))\n    Traceback (most recent call last):\n    ...\n    ValueError: trailing \'L\' required in \'1234\'\n\n    Someday the trailing \'L\' will probably go away from this output.\n\n    >>> read_decimalnl_long(StringIO.StringIO("1234L\\n56"))\n    1234L\n\n    >>> read_decimalnl_long(StringIO.StringIO("123456789012345678901234L\\n6"))\n    123456789012345678901234L\n    '),
               ('pickletools.read_floatnl',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_floatnl(StringIO.StringIO("-1.25\\n6"))\n    -1.25\n    '),
               ('pickletools.read_float8',
                ['f'],
                '\n    >>> import StringIO, struct\n    >>> raw = struct.pack(">d", -1.25)\n    >>> raw\n    \'\\xbf\\xf4\\x00\\x00\\x00\\x00\\x00\\x00\'\n    >>> read_float8(StringIO.StringIO(raw + "\\n"))\n    -1.25\n    '),
               ('pickletools.read_long1',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_long1(StringIO.StringIO("\\x00"))\n    0L\n    >>> read_long1(StringIO.StringIO("\\x02\\xff\\x00"))\n    255L\n    >>> read_long1(StringIO.StringIO("\\x02\\xff\\x7f"))\n    32767L\n    >>> read_long1(StringIO.StringIO("\\x02\\x00\\xff"))\n    -256L\n    >>> read_long1(StringIO.StringIO("\\x02\\x00\\x80"))\n    -32768L\n    '),
               ('pickletools.read_long4',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_long4(StringIO.StringIO("\\x02\\x00\\x00\\x00\\xff\\x00"))\n    255L\n    >>> read_long4(StringIO.StringIO("\\x02\\x00\\x00\\x00\\xff\\x7f"))\n    32767L\n    >>> read_long4(StringIO.StringIO("\\x02\\x00\\x00\\x00\\x00\\xff"))\n    -256L\n    >>> read_long4(StringIO.StringIO("\\x02\\x00\\x00\\x00\\x00\\x80"))\n    -32768L\n    >>> read_long1(StringIO.StringIO("\\x00\\x00\\x00\\x00"))\n    0L\n    '),
               ('pickletools.assure_pickle_consistency', ['verbose=False'], ''),
               ('pickletools.genops',
                ['pickle'],
                "Generate all the opcodes in a pickle.\n\n    'pickle' is a file-like object, or string, containing the pickle.\n\n    Each opcode in the pickle is generated, from the current pickle position,\n    stopping after a STOP opcode is delivered.  A triple is generated for\n    each opcode:\n\n        opcode, arg, pos\n\n    opcode is an OpcodeInfo record, describing the current opcode.\n\n    If the opcode has an argument embedded in the pickle, arg is its decoded\n    value, as a Python object.  If the opcode doesn't have an argument, arg\n    is None.\n\n    If the pickle has a tell() method, pos was the value of pickle.tell()\n    before reading the current opcode.  If the pickle is a string object,\n    it's wrapped in a StringIO object, and the latter's tell() result is\n    used.  Else (the pickle doesn't have a tell(), and it's not obvious how\n    to query its current position) pos is None.\n    "),
               ('pickletools.dis',
                ['pickle', 'out=None', 'memo=None', 'indentlevel=4'],
                'Produce a symbolic disassembly of a pickle.\n\n    \'pickle\' is a file-like object, or string, containing a (at least one)\n    pickle.  The pickle is disassembled from the current position, through\n    the first STOP opcode encountered.\n\n    Optional arg \'out\' is a file-like object to which the disassembly is\n    printed.  It defaults to sys.stdout.\n\n    Optional arg \'memo\' is a Python dict, used as the pickle\'s memo.  It\n    may be mutated by dis(), if the pickle contains PUT or BINPUT opcodes.\n    Passing the same memo object to another dis() call then allows disassembly\n    to proceed across multiple pickles that were all created by the same\n    pickler with the same memo.  Ordinarily you don\'t need to worry about this.\n\n    Optional arg indentlevel is the number of blanks by which to indent\n    a new MARK level.  It defaults to 4.\n\n    In addition to printing the disassembly, some sanity checks are made:\n\n    + All embedded opcode arguments "make sense".\n\n    + Explicit and implicit pop operations have enough items on the stack.\n\n    + When an opcode implicitly refers to a markobject, a markobject is\n      actually on the stack.\n\n    + A memo entry isn\'t referenced before it\'s defined.\n\n    + The markobject isn\'t stored in the memo.\n\n    + A memo entry isn\'t redefined.\n    '),
               ('pickletools._test', [], ''),
               ('pyclbr.readmodule',
                ['module', 'path=[]'],
                'Backwards compatible interface.\n\n    Call readmodule_ex() and then only keep Class objects from the\n    resulting dictionary.'),
               ('pyclbr.readmodule_ex',
                ['module', 'path=[]'],
                'Read a module file and return a dictionary of classes.\n\n    Search for MODULE in PATH and sys.path, read and parse the\n    module and return a dictionary with one entry for each class\n    found in the module.\n\n    If INPACKAGE is true, it must be the dotted name of the package in\n    which we are searching for a submodule, and then PATH must be the\n    package search path; otherwise, we are searching for a top-level\n    module, and PATH is combined with sys.path.\n    '),
               ('pyclbr._readmodule',
                ['module', 'path', 'inpackage=None'],
                'Do the hard work for readmodule[_ex].'),
               ('pyclbr._getnamelist', ['g'], ''),
               ('pyclbr._getname', ['g'], ''),
               ('pyclbr._main', [], ''),
               ('sndhdr.what', ['filename'], 'Guess the type of a sound file'),
               ('sndhdr.whathdr', ['filename'], 'Recognize sound headers'),
               ('sndhdr.test_aifc', ['h', 'f'], ''),
               ('sndhdr.test_au', ['h', 'f'], ''),
               ('sndhdr.test_hcom', ['h', 'f'], ''),
               ('sndhdr.test_voc', ['h', 'f'], ''),
               ('sndhdr.test_wav', ['h', 'f'], ''),
               ('sndhdr.test_8svx', ['h', 'f'], ''),
               ('sndhdr.test_sndt', ['h', 'f'], ''),
               ('sndhdr.test_sndr', ['h', 'f'], ''),
               ('sndhdr.get_long_be', ['s'], ''),
               ('sndhdr.get_long_le', ['s'], ''),
               ('sndhdr.get_short_be', ['s'], ''),
               ('sndhdr.get_short_le', ['s'], ''),
               ('sndhdr.test', [], ''),
               ('sndhdr.testall', ['list', 'recursive', 'toplevel'], ''),
               ('rexec.test', [], ''),
               ('sets.ifilter', ['predicate', 'iterable'], ''),
               ('sets.ifilterfalse', ['predicate', 'iterable'], ''),
               ('sre_parse.set', ['seq'], ''),
               ('sre_parse.isident', ['char'], ''),
               ('sre_parse.isdigit', ['char'], ''),
               ('sre_parse.isname', ['name'], ''),
               ('sre_parse._class_escape', ['source', 'escape'], ''),
               ('sre_parse._escape', ['source', 'escape', 'state'], ''),
               ('sre_parse._parse_sub', ['source', 'state', 'nested=1'], ''),
               ('sre_parse._parse_sub_cond', ['source', 'state', 'condgroup'], ''),
               ('sre_parse._parse', ['source', 'state'], ''),
               ('sre_parse.parse', ['str', 'flags=0', 'pattern=None'], ''),
               ('sre_parse.parse_template', ['source', 'pattern'], ''),
               ('sre_parse.expand_template', ['template', 'match'], ''),
               ('xmllib.test', ['args=None'], ''),
               ('BaseHTTPServer._quote_html', ['html'], ''),
               ('BaseHTTPServer.test',
                ['HandlerClass=BaseHTTPRequestHandler',
                 'ServerClass=HTTPServer',
                 "protocol='HTTP/1.0'"],
                'Test the HTTP request handler class.\n\n    This runs an HTTP server on port 8000 (or the first command line\n    argument).\n\n    '),
               ('tokenize.group', ['*choices'], ''),
               ('tokenize.any', ['*choices'], ''),
               ('tokenize.maybe', ['*choices'], ''),
               ('tokenize.printtoken',
                ['type', 'token', '(srow, scol)', '(erow, ecol)', 'line'],
                ''),
               ('tokenize.tokenize',
                ['readline', 'tokeneater=printtoken'],
                '\n    The tokenize() function accepts two parameters: one representing the\n    input stream, and one providing an output mechanism for tokenize().\n\n    The first parameter, readline, must be a callable object which provides\n    the same interface as the readline() method of built-in file objects.\n    Each call to the function should return one line of input as a string.\n\n    The second parameter, tokeneater, must also be a callable object. It is\n    called once for each token, with five arguments, corresponding to the\n    tuples generated by generate_tokens().\n    '),
               ('tokenize.tokenize_loop', ['readline', 'tokeneater'], ''),
               ('tokenize.untokenize',
                ['iterable'],
                'Transform tokens back into Python source code.\n\n    Each element returned by the iterable must be a token sequence\n    with at least two elements, a token number and token value.\n\n    Round-trip invariant:\n        # Output text will tokenize the back to the input\n        t1 = [tok[:2] for tok in generate_tokens(f.readline)]\n        newcode = untokenize(t1)\n        readline = iter(newcode.splitlines(1)).next\n        t2 = [tok[:2] for tok in generate_tokens(readline)]\n        assert t1 == t2\n    '),
               ('tokenize.generate_tokens',
                ['readline'],
                '\n    The generate_tokens() generator requires one argment, readline, which\n    must be a callable object which provides the same interface as the\n    readline() method of built-in file objects. Each call to the function\n    should return one line of input as a string.  Alternately, readline\n    can be a callable function terminating with StopIteration:\n        readline = open(myfile).next    # Example of alternate readline\n\n    The generator produces 5-tuples with these members: the token type; the\n    token string; a 2-tuple (srow, scol) of ints specifying the row and\n    column where the token begins in the source; a 2-tuple (erow, ecol) of\n    ints specifying the row and column where the token ends in the source;\n    and the line on which the token was found. The line passed is the\n    logical line; continuation lines are included.\n    '),
               ('cProfile.run',
                ['statement', 'filename=None', 'sort=-1'],
                'Run statement under profiler optionally saving results in filename\n\n    This function takes a single argument that can be passed to the\n    "exec" statement, and an optional file name.  In all cases this\n    routine attempts to "exec" its first argument and gather profiling\n    statistics from the execution. If no file name is present, then this\n    function automatically prints a simple profiling report, sorted by the\n    standard name string (file/line/function-name) that is presented in\n    each line.\n    '),
               ('cProfile.runctx',
                ['statement', 'globals', 'locals', 'filename=None'],
                'Run statement under profiler, supplying your own globals and locals,\n    optionally saving results in filename.\n\n    statement and filename have the same semantics as profile.run\n    '),
               ('cProfile.help', [], ''),
               ('cProfile.label', ['code'], ''),
               ('cProfile.main', [], ''),
               ('posixfile.open',
                ['name', "mode='r'", 'bufsize=-1'],
                'Public routine to open a file as a posixfile object.'),
               ('posixfile.fileopen',
                ['file'],
                'Public routine to get a posixfile object from a Python file object.'),
               ('macpath.normcase', ['path'], ''),
               ('macpath.isabs',
                ['s'],
                'Return true if a path is absolute.\n    On the Mac, relative paths begin with a colon,\n    but as a special case, paths with no colons at all are also relative.\n    Anything else is absolute (the string up to the first colon is the\n    volume name).'),
               ('macpath.join', ['s', '*p'], ''),
               ('macpath.split',
                ['s'],
                'Split a pathname into two parts: the directory leading up to the final\n    bit, and the basename (the filename, without colons, in that directory).\n    The result (s, t) is such that join(s, t) yields the original argument.'),
               ('macpath.splitext',
                ['p'],
                'Split a path into root and extension.\n    The extension is everything starting at the last dot in the last\n    pathname component; the root is everything before that.\n    It is always true that root + ext == p.'),
               ('macpath.splitdrive',
                ['p'],
                "Split a pathname into a drive specification and the rest of the\n    path.  Useful on DOS/Windows/NT; on the Mac, the drive is always\n    empty (don't use the volume name -- it doesn't have the same\n    syntactic and semantic oddities as DOS drive letters, such as there\n    being a separate current directory per drive)."),
               ('macpath.dirname', ['s'], ''),
               ('macpath.basename', ['s'], ''),
               ('macpath.ismount', ['s'], ''),
               ('macpath.isdir',
                ['s'],
                'Return true if the pathname refers to an existing directory.'),
               ('macpath.getsize',
                ['filename'],
                'Return the size of a file, reported by os.stat().'),
               ('macpath.getmtime',
                ['filename'],
                'Return the last modification time of a file, reported by os.stat().'),
               ('macpath.getatime',
                ['filename'],
                'Return the last access time of a file, reported by os.stat().'),
               ('macpath.islink',
                ['s'],
                'Return true if the pathname refers to a symbolic link.'),
               ('macpath.isfile',
                ['s'],
                'Return true if the pathname refers to an existing regular file.'),
               ('macpath.getctime',
                ['filename'],
                'Return the creation time of a file, reported by os.stat().'),
               ('macpath.exists',
                ['s'],
                'Test whether a path exists.  Returns False for broken symbolic links'),
               ('macpath.lexists',
                ['path'],
                'Test whether a path exists.  Returns True for broken symbolic links'),
               ('macpath.commonprefix',
                ['m'],
                'Given a list of pathnames, returns the longest common leading component'),
               ('macpath.expandvars',
                ['path'],
                'Dummy to retain interface-compatibility with other operating systems.'),
               ('macpath.expanduser',
                ['path'],
                'Dummy to retain interface-compatibility with other operating systems.'),
               ('macpath.normpath',
                ['s'],
                'Normalize a pathname.  Will return the same result for\n    equivalent paths.'),
               ('macpath.walk',
                ['top', 'func', 'arg'],
                "Directory tree walk with callback function.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).\n    dirname is the name of the directory, and fnames a list of the names of\n    the files and subdirectories in dirname (excluding '.' and '..').  func\n    may modify the fnames list in-place (e.g. via del or slice assignment),\n    and walk will only recurse into the subdirectories whose names remain in\n    fnames; this can be used to implement a filter, or to impose a specific\n    order of visiting.  No semantics are defined for, or required of, arg,\n    beyond that arg is always passed to func.  It can be used, e.g., to pass\n    a filename pattern, or a mutable object designed to accumulate\n    statistics.  Passing None for arg is common."),
               ('macpath.abspath', ['path'], 'Return an absolute path.'),
               ('macpath.realpath', ['path'], ''),
               ('filecmp.cmp',
                ['f1', 'f2', 'shallow=1'],
                'Compare two files.\n\n    Arguments:\n\n    f1 -- First file name\n\n    f2 -- Second file name\n\n    shallow -- Just check stat signature (do not read the files).\n               defaults to 1.\n\n    Return value:\n\n    True if the files are the same, False otherwise.\n\n    This function uses a cache for past comparisons and the results,\n    with a cache invalidation mechanism relying on stale signatures.\n\n    '),
               ('filecmp._sig', ['st'], ''),
               ('filecmp._do_cmp', ['f1', 'f2'], ''),
               ('filecmp.cmpfiles',
                ['a', 'b', 'common', 'shallow=1'],
                "Compare common files in two directories.\n\n    a, b -- directory names\n    common -- list of file names found in both directories\n    shallow -- if true, do comparison based solely on stat() information\n\n    Returns a tuple of three lists:\n      files that compare equal\n      files that are different\n      filenames that aren't regular files.\n\n    "),
               ('filecmp._cmp', ['a', 'b', 'sh', 'abs=abs', 'cmp=cmp'], ''),
               ('filecmp._filter', ['flist', 'skip'], ''),
               ('filecmp.demo', [], ''),
               ('getopt.getopt',
                ['args', 'shortopts', 'longopts=[]'],
                'getopt(args, options[, long_options]) -> opts, args\n\n    Parses command line options and parameter list.  args is the\n    argument list to be parsed, without the leading reference to the\n    running program.  Typically, this means "sys.argv[1:]".  shortopts\n    is the string of option letters that the script wants to\n    recognize, with options that require an argument followed by a\n    colon (i.e., the same format that Unix getopt() uses).  If\n    specified, longopts is a list of strings with the names of the\n    long options which should be supported.  The leading \'--\'\n    characters should not be included in the option name.  Options\n    which require an argument should be followed by an equal sign\n    (\'=\').\n\n    The return value consists of two elements: the first is a list of\n    (option, value) pairs; the second is the list of program arguments\n    left after the option list was stripped (this is a trailing slice\n    of the first argument).  Each option-and-value pair returned has\n    the option as its first element, prefixed with a hyphen (e.g.,\n    \'-x\'), and the option argument as its second element, or an empty\n    string if the option has no argument.  The options occur in the\n    list in the same order in which they were found, thus allowing\n    multiple occurrences.  Long and short options may be mixed.\n\n    '),
               ('getopt.gnu_getopt',
                ['args', 'shortopts', 'longopts=[]'],
                "getopt(args, options[, long_options]) -> opts, args\n\n    This function works like getopt(), except that GNU style scanning\n    mode is used by default. This means that option and non-option\n    arguments may be intermixed. The getopt() function stops\n    processing options as soon as a non-option argument is\n    encountered.\n\n    If the first character of the option string is `+', or if the\n    environment variable POSIXLY_CORRECT is set, then option\n    processing stops as soon as a non-option argument is encountered.\n\n    "),
               ('getopt.do_longs', ['opts', 'opt', 'longopts', 'args'], ''),
               ('getopt.long_has_args', ['opt', 'longopts'], ''),
               ('getopt.do_shorts', ['opts', 'optstring', 'shortopts', 'args'], ''),
               ('getopt.short_has_arg', ['opt', 'shortopts'], ''),
               ('smtplib.quoteaddr',
                ['addr'],
                'Quote a subset of the email addresses defined by RFC 821.\n\n    Should be able to handle anything rfc822.parseaddr can handle.\n    '),
               ('smtplib.quotedata',
                ['data'],
                "Quote data for email.\n\n    Double leading '.', and change Unix newline '\\n', or Mac '\\r' into\n    Internet CRLF end-of-line.\n    "),
               ('smtplib.prompt', ['prompt'], ''),
               ('aifc._read_long', ['file'], ''),
               ('aifc._read_ulong', ['file'], ''),
               ('aifc._read_short', ['file'], ''),
               ('aifc._read_string', ['file'], ''),
               ('aifc._read_float', ['f'], ''),
               ('aifc._write_short', ['f', 'x'], ''),
               ('aifc._write_long', ['f', 'x'], ''),
               ('aifc._write_string', ['f', 's'], ''),
               ('aifc._write_float', ['f', 'x'], ''),
               ('aifc.open', ['f', 'mode=None'], ''),
               ('CGIHTTPServer.nobody_uid', [], "Internal routine to get nobody's uid"),
               ('CGIHTTPServer.executable', ['path'], 'Test for executable file.'),
               ('CGIHTTPServer.test',
                ['HandlerClass=CGIHTTPRequestHandler', 'ServerClass=BaseHTTPServer.HTTPServer'],
                ''),
               ('cgitb.reset',
                [],
                'Return a string that resets the CGI and browser to a known state.'),
               ('cgitb.small', ['text'], ''),
               ('cgitb.strong', ['text'], ''),
               ('cgitb.grey', ['text'], ''),
               ('cgitb.lookup',
                ['name', 'frame', 'locals'],
                'Find the value for a given name in the given environment.'),
               ('cgitb.scanvars',
                ['reader', 'frame', 'locals'],
                'Scan one logical line of Python and look up values of variables used.'),
               ('cgitb.html',
                ['(etype, evalue, etb)', 'context=5'],
                'Return a nice HTML document describing a given traceback.'),
               ('cgitb.text',
                ['(etype, evalue, etb)', 'context=5'],
                'Return a plain text document describing a given traceback.'),
               ('cgitb.enable',
                ['display=1', 'logdir=None', 'context=5', "format='html'"],
                "Install an exception handler that formats tracebacks as HTML.\n\n    The optional argument 'display' can be set to 0 to suppress sending the\n    traceback to the browser, and 'logdir' can be set to a directory to cause\n    tracebacks to be written to files there."),
               ('ftplib.parse150',
                ['resp'],
                "Parse the '150' response for a RETR request.\n    Returns the expected transfer size or None; size is not guaranteed to\n    be present in the 150 message.\n    "),
               ('ftplib.parse227',
                ['resp'],
                "Parse the '227' response for a PASV request.\n    Raises error_proto if it does not contain '(h1,h2,h3,h4,p1,p2)'\n    Return ('host.addr.as.numbers', port#) tuple."),
               ('ftplib.parse229',
                ['resp', 'peer'],
                "Parse the '229' response for a EPSV request.\n    Raises error_proto if it does not contain '(|||port|)'\n    Return ('host.addr.as.numbers', port#) tuple."),
               ('ftplib.parse257',
                ['resp'],
                "Parse the '257' response for a MKD or PWD request.\n    This is a response to a MKD or PWD request: a directory name.\n    Returns the directoryname in the 257 reply."),
               ('ftplib.print_line', ['line'], 'Default retrlines callback to print a line.'),
               ('ftplib.ftpcp',
                ['source', 'sourcename', 'target', "targetname=''", "type='I'"],
                'Copy file from one FTP-instance to another.'),
               ('ftplib.test',
                [],
                'Test program.\n    Usage: ftp [-d] [-r[file]] host [-l[dir]] [-d[dir]] [-p] [file] ...\n\n    -d dir\n    -l list\n    -p password\n    '),
               ('keyword.main', [], ''),
               ('formatter.test', ['file=None'], ''),
               ('tempfile._set_cloexec', ['fd'], ''),
               ('tempfile._set_cloexec', ['fd'], ''),
               ('tempfile._stat', ['fn'], ''),
               ('tempfile._exists', ['fn'], ''),
               ('tempfile._candidate_tempdir_list',
                [],
                'Generate a list of candidate temporary directories which\n    _get_default_tempdir will try.'),
               ('tempfile._get_default_tempdir',
                [],
                'Calculate the default directory to use for temporary files.\n    This routine should be called exactly once.\n\n    We determine whether or not a candidate temp dir is usable by\n    trying to create and write to a file in that directory.  If this\n    is successful, the test file is deleted.  To prevent denial of\n    service, the name of the test file must be randomized.'),
               ('tempfile._get_candidate_names',
                [],
                'Common setup sequence for all user-callable interfaces.'),
               ('tempfile._mkstemp_inner',
                ['dir', 'pre', 'suf', 'flags'],
                'Code common to mkstemp, TemporaryFile, and NamedTemporaryFile.'),
               ('tempfile.gettempprefix', [], 'Accessor for tempdir.template.'),
               ('tempfile.gettempdir', [], 'Accessor for tempdir.tempdir.'),
               ('tempfile.mkstemp',
                ["suffix=''", 'prefix=template', 'dir=None', 'text=False'],
                "mkstemp([suffix, [prefix, [dir, [text]]]])\n    User-callable function to create and return a unique temporary\n    file.  The return value is a pair (fd, name) where fd is the\n    file descriptor returned by os.open, and name is the filename.\n\n    If 'suffix' is specified, the file name will end with that suffix,\n    otherwise there will be no suffix.\n\n    If 'prefix' is specified, the file name will begin with that prefix,\n    otherwise a default prefix is used.\n\n    If 'dir' is specified, the file will be created in that directory,\n    otherwise a default directory is used.\n\n    If 'text' is specified and true, the file is opened in text\n    mode.  Else (the default) the file is opened in binary mode.  On\n    some operating systems, this makes no difference.\n\n    The file is readable and writable only by the creating user ID.\n    If the operating system uses permission bits to indicate whether a\n    file is executable, the file is executable by no one. The file\n    descriptor is not inherited by children of this process.\n\n    Caller is responsible for deleting the file when done with it.\n    "),
               ('tempfile.mkdtemp',
                ["suffix=''", 'prefix=template', 'dir=None'],
                "mkdtemp([suffix, [prefix, [dir]]])\n    User-callable function to create and return a unique temporary\n    directory.  The return value is the pathname of the directory.\n\n    Arguments are as for mkstemp, except that the 'text' argument is\n    not accepted.\n\n    The directory is readable, writable, and searchable only by the\n    creating user.\n\n    Caller is responsible for deleting the directory when done with it.\n    "),
               ('tempfile.mktemp',
                ["suffix=''", 'prefix=template', 'dir=None'],
                "mktemp([suffix, [prefix, [dir]]])\n    User-callable function to return a unique temporary file name.  The\n    file is not created.\n\n    Arguments are as for mkstemp, except that the 'text' argument is\n    not accepted.\n\n    This function is unsafe and should not be used.  The file name\n    refers to a file that did not exist at some point, but by the time\n    you get around to creating it, someone else may have beaten you to\n    the punch.\n    "),
               ('tempfile.NamedTemporaryFile',
                ["mode='w+b'", 'bufsize=-1', "suffix=''", 'prefix=template', 'dir=None'],
                'Create and return a temporary file.\n    Arguments:\n    \'prefix\', \'suffix\', \'dir\' -- as for mkstemp.\n    \'mode\' -- the mode argument to os.fdopen (default "w+b").\n    \'bufsize\' -- the buffer size argument to os.fdopen (default -1).\n    The file is created as mkstemp() would do it.\n\n    Returns an object with a file-like interface; the name of the file\n    is accessible as file.name.  The file will be automatically deleted\n    when it is closed.\n    '),
               ('tempfile.TemporaryFile',
                ["mode='w+b'", 'bufsize=-1', "suffix=''", 'prefix=template', 'dir=None'],
                'Create and return a temporary file.\n        Arguments:\n        \'prefix\', \'suffix\', \'dir\' -- as for mkstemp.\n        \'mode\' -- the mode argument to os.fdopen (default "w+b").\n        \'bufsize\' -- the buffer size argument to os.fdopen (default -1).\n        The file is created as mkstemp() would do it.\n\n        Returns an object with a file-like interface.  The file has no\n        name, and will cease to exist when it is closed.\n        '),
               ('stringold.lower',
                ['s'],
                'lower(s) -> string\n\n    Return a copy of the string s converted to lowercase.\n\n    '),
               ('stringold.upper',
                ['s'],
                'upper(s) -> string\n\n    Return a copy of the string s converted to uppercase.\n\n    '),
               ('stringold.swapcase',
                ['s'],
                'swapcase(s) -> string\n\n    Return a copy of the string s with upper case characters\n    converted to lowercase and vice versa.\n\n    '),
               ('stringold.strip',
                ['s'],
                'strip(s) -> string\n\n    Return a copy of the string s with leading and trailing\n    whitespace removed.\n\n    '),
               ('stringold.lstrip',
                ['s'],
                'lstrip(s) -> string\n\n    Return a copy of the string s with leading whitespace removed.\n\n    '),
               ('stringold.rstrip',
                ['s'],
                'rstrip(s) -> string\n\n    Return a copy of the string s with trailing whitespace\n    removed.\n\n    '),
               ('stringold.split',
                ['s', 'sep=None', 'maxsplit=0'],
                'split(str [,sep [,maxsplit]]) -> list of strings\n\n    Return a list of the words in the string s, using sep as the\n    delimiter string.  If maxsplit is nonzero, splits into at most\n    maxsplit words If sep is not specified, any whitespace string\n    is a separator.  Maxsplit defaults to 0.\n\n    (split and splitfields are synonymous)\n\n    '),
               ('stringold.join',
                ['words', "sep=' '"],
                'join(list [,sep]) -> string\n\n    Return a string composed of the words in list, with\n    intervening occurrences of sep.  The default separator is a\n    single space.\n\n    (joinfields and join are synonymous)\n\n    '),
               ('stringold.index',
                ['s', '*args'],
                'index(s, sub [,start [,end]]) -> int\n\n    Like find but raises ValueError when the substring is not found.\n\n    '),
               ('stringold.rindex',
                ['s', '*args'],
                'rindex(s, sub [,start [,end]]) -> int\n\n    Like rfind but raises ValueError when the substring is not found.\n\n    '),
               ('stringold.count',
                ['s', '*args'],
                'count(s, sub[, start[,end]]) -> int\n\n    Return the number of occurrences of substring sub in string\n    s[start:end].  Optional arguments start and end are\n    interpreted as in slice notation.\n\n    '),
               ('stringold.find',
                ['s', '*args'],
                'find(s, sub [,start [,end]]) -> in\n\n    Return the lowest index in s where substring sub is found,\n    such that sub is contained within s[start,end].  Optional\n    arguments start and end are interpreted as in slice notation.\n\n    Return -1 on failure.\n\n    '),
               ('stringold.rfind',
                ['s', '*args'],
                'rfind(s, sub [,start [,end]]) -> int\n\n    Return the highest index in s where substring sub is found,\n    such that sub is contained within s[start,end].  Optional\n    arguments start and end are interpreted as in slice notation.\n\n    Return -1 on failure.\n\n    '),
               ('stringold.atof',
                ['s'],
                'atof(s) -> float\n\n    Return the floating point number represented by the string s.\n\n    '),
               ('stringold.atoi',
                ['*args'],
                'atoi(s [,base]) -> int\n\n    Return the integer represented by the string s in the given\n    base, which defaults to 10.  The string s must consist of one\n    or more digits, possibly preceded by a sign.  If base is 0, it\n    is chosen from the leading characters of s, 0 for octal, 0x or\n    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is\n    accepted.\n\n    '),
               ('stringold.atol',
                ['*args'],
                'atol(s [,base]) -> long\n\n    Return the long integer represented by the string s in the\n    given base, which defaults to 10.  The string s must consist\n    of one or more digits, possibly preceded by a sign.  If base\n    is 0, it is chosen from the leading characters of s, 0 for\n    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding\n    0x or 0X is accepted.  A trailing L or l is not accepted,\n    unless base is 0.\n\n    '),
               ('stringold.ljust',
                ['s', 'width'],
                'ljust(s, width) -> string\n\n    Return a left-justified version of s, in a field of the\n    specified width, padded with spaces as needed.  The string is\n    never truncated.\n\n    '),
               ('stringold.rjust',
                ['s', 'width'],
                'rjust(s, width) -> string\n\n    Return a right-justified version of s, in a field of the\n    specified width, padded with spaces as needed.  The string is\n    never truncated.\n\n    '),
               ('stringold.center',
                ['s', 'width'],
                'center(s, width) -> string\n\n    Return a center version of s, in a field of the specified\n    width. padded with spaces as needed.  The string is never\n    truncated.\n\n    '),
               ('stringold.zfill',
                ['x', 'width'],
                'zfill(x, width) -> string\n\n    Pad a numeric string x with zeros on the left, to fill a field\n    of the specified width.  The string x is never truncated.\n\n    '),
               ('stringold.expandtabs',
                ['s', 'tabsize=8'],
                'expandtabs(s [,tabsize]) -> string\n\n    Return a copy of the string s with all tab characters replaced\n    by the appropriate number of spaces, depending on the current\n    column, and the tabsize (default 8).\n\n    '),
               ('stringold.translate',
                ['s', 'table', "deletions=''"],
                'translate(s,table [,deletechars]) -> string\n\n    Return a copy of the string s, where all characters occurring\n    in the optional argument deletechars are removed, and the\n    remaining characters have been mapped through the given\n    translation table, which must be a string of length 256.\n\n    '),
               ('stringold.capitalize',
                ['s'],
                'capitalize(s) -> string\n\n    Return a copy of the string s with only its first character\n    capitalized.\n\n    '),
               ('stringold.capwords',
                ['s', 'sep=None'],
                'capwords(s, [sep]) -> string\n\n    Split the argument into words using split, capitalize each\n    word using capitalize, and join the capitalized words using\n    join. Note that this replaces runs of whitespace characters by\n    a single space.\n\n    '),
               ('stringold.maketrans',
                ['fromstr', 'tostr'],
                'maketrans(frm, to) -> string\n\n    Return a translation table (a string of 256 bytes long)\n    suitable for use in string.translate.  The strings frm and to\n    must be of the same length.\n\n    '),
               ('stringold.replace',
                ['s', 'old', 'new', 'maxsplit=0'],
                'replace (str, old, new[, maxsplit]) -> string\n\n    Return a copy of string str with all occurrences of substring\n    old replaced by new. If the optional argument maxsplit is\n    given, only the first maxsplit occurrences are replaced.\n\n    '),
               ('robotparser._debug', ['msg'], ''),
               ('robotparser._check', ['a', 'b'], ''),
               ('robotparser._test', [], ''),
               ('rfc822.unquote', ['s'], 'Remove quotes from a string.'),
               ('rfc822.quote', ['s'], 'Add quotes around a string.'),
               ('rfc822.parseaddr',
                ['address'],
                'Parse an address into a (realname, mailaddr) tuple.'),
               ('rfc822.dump_address_pair',
                ['pair'],
                'Dump a (name, address) pair in a canonicalized form.'),
               ('rfc822.parsedate_tz',
                ['data'],
                'Convert a date string to a time tuple.\n\n    Accounts for military timezones.\n    '),
               ('rfc822.parsedate', ['data'], 'Convert a time string to a time tuple.'),
               ('rfc822.mktime_tz',
                ['data'],
                'Turn a 10-tuple as returned by parsedate_tz() into a UTC timestamp.'),
               ('rfc822.formatdate',
                ['timeval=None'],
                "Returns time format preferred for Internet standards.\n\n    Sun, 06 Nov 1994 08:49:37 GMT  ; RFC 822, updated by RFC 1123\n\n    According to RFC 1123, day and month names must always be in\n    English.  If not for that, this code could use strftime().  It\n    can't because strftime() honors the locale and could generated\n    non-English names.\n    "),
               ('stat.S_IMODE', ['mode'], ''),
               ('stat.S_IFMT', ['mode'], ''),
               ('stat.S_ISDIR', ['mode'], ''),
               ('stat.S_ISCHR', ['mode'], ''),
               ('stat.S_ISBLK', ['mode'], ''),
               ('stat.S_ISREG', ['mode'], ''),
               ('stat.S_ISFIFO', ['mode'], ''),
               ('stat.S_ISLNK', ['mode'], ''),
               ('stat.S_ISSOCK', ['mode'], ''),
               ('dummy_thread.start_new_thread',
                ['function', 'args', 'kwargs={}'],
                'Dummy implementation of thread.start_new_thread().\n\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised\n    and it is SystemExit (which can be done by thread.exit()) it is\n    caught and nothing is done; all other exceptions are printed out\n    by using traceback.print_exc().\n\n    If the executed function calls interrupt_main the KeyboardInterrupt will be\n    raised when the function returns.\n\n    '),
               ('dummy_thread.exit', [], 'Dummy implementation of thread.exit().'),
               ('dummy_thread.get_ident',
                [],
                'Dummy implementation of thread.get_ident().\n\n    Since this module should only be used when threadmodule is not\n    available, it is safe to assume that the current process is the\n    only thread.  Thus a constant can be safely returned.\n    '),
               ('dummy_thread.allocate_lock',
                [],
                'Dummy implementation of thread.allocate_lock().'),
               ('dummy_thread.stack_size',
                ['size=None'],
                'Dummy implementation of thread.stack_size().'),
               ('dummy_thread.interrupt_main',
                [],
                'Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.'),
               ('struct._compile', ['fmt'], ''),
               ('struct.calcsize',
                ['fmt'],
                '\n    Return size of C struct described by format string fmt.\n    See struct.__doc__ for more on format strings.\n    '),
               ('struct.pack',
                ['fmt', '*args'],
                '\n    Return string containing values v1, v2, ... packed according to fmt.\n    See struct.__doc__ for more on format strings.\n    '),
               ('struct.pack_into',
                ['fmt', 'buf', 'offset', '*args'],
                '\n    Pack the values v1, v2, ... according to fmt, write\n    the packed bytes into the writable buffer buf starting at offset.\n    See struct.__doc__ for more on format strings.\n    '),
               ('struct.unpack',
                ['fmt', 's'],
                '\n    Unpack the string, containing packed C structure data, according\n    to fmt.  Requires len(string)==calcsize(fmt).\n    See struct.__doc__ for more on format strings.\n    '),
               ('struct.unpack_from',
                ['fmt', 'buf', 'offset=0'],
                '\n    Unpack the buffer, containing packed C structure data, according to\n    fmt starting at offset. Requires len(buffer[offset:]) >= calcsize(fmt).\n    See struct.__doc__ for more on format strings.\n    '),
               ('shelve.open',
                ['filename', "flag='c'", 'protocol=None', 'writeback=False'],
                "Open a persistent dictionary for reading and writing.\n\n    The filename parameter is the base filename for the underlying\n    database.  As a side-effect, an extension may be added to the\n    filename and more than one file may be created.  The optional flag\n    parameter has the same interpretation as the flag parameter of\n    anydbm.open(). The optional protocol parameter specifies the\n    version of the pickle protocol (0, 1, or 2).\n\n    See the module's __doc__ string for an overview of the interface.\n    "),
               ('imaplib.Internaldate2tuple',
                ['resp'],
                'Convert IMAP4 INTERNALDATE to UT.\n\n    Returns Python time module tuple.\n    '),
               ('imaplib.Int2AP', ['num'], 'Convert integer to A-P string representation.'),
               ('imaplib.ParseFlags', ['resp'], 'Convert IMAP4 flags response to python tuple.'),
               ('imaplib.Time2Internaldate',
                ['date_time'],
                'Convert \'date_time\' to IMAP4 INTERNALDATE representation.\n\n    Return string in form: \'"DD-Mmm-YYYY HH:MM:SS +HHMM"\'\n    '),
               ('imaplib.run', ['cmd', 'args'], ''),
               ('sre_compile._identityfunction', ['x'], ''),
               ('sre_compile.set', ['seq'], ''),
               ('sre_compile._compile', ['code', 'pattern', 'flags'], ''),
               ('sre_compile._compile_charset', ['charset', 'flags', 'code', 'fixup=None'], ''),
               ('sre_compile._optimize_charset', ['charset', 'fixup'], ''),
               ('sre_compile._mk_bitmap', ['bits'], ''),
               ('sre_compile._optimize_unicode', ['charset', 'fixup'], ''),
               ('sre_compile._simple', ['av'], ''),
               ('sre_compile._compile_info', ['code', 'pattern', 'flags'], ''),
               ('sre_compile.isstring', ['obj'], ''),
               ('sre_compile._code', ['p', 'flags'], ''),
               ('sre_compile.compile', ['p', 'flags=0'], ''),
               ('quopri.needsquoting',
                ['c', 'quotetabs', 'header'],
                "Decide whether a particular character needs to be quoted.\n\n    The 'quotetabs' flag indicates whether embedded tabs and spaces should be\n    quoted.  Note that line-ending tabs and spaces are always encoded, as per\n    RFC 1521.\n    "),
               ('quopri.quote', ['c'], 'Quote a single character.'),
               ('quopri.encode',
                ['input', 'output', 'quotetabs', 'header=0'],
                "Read 'input', apply quoted-printable encoding, and write to 'output'.\n\n    'input' and 'output' are files with readline() and write() methods.\n    The 'quotetabs' flag indicates whether embedded tabs and spaces should be\n    quoted.  Note that line-ending tabs and spaces are always encoded, as per\n    RFC 1521.\n    The 'header' flag indicates whether we are encoding spaces as _ as per\n    RFC 1522.\n    "),
               ('quopri.encodestring', ['s', 'quotetabs=0', 'header=0'], ''),
               ('quopri.decode',
                ['input', 'output', 'header=0'],
                "Read 'input', apply quoted-printable decoding, and write to 'output'.\n    'input' and 'output' are files with readline() and write() methods.\n    If 'header' is true, decode underscore as space (per RFC 1522)."),
               ('quopri.decodestring', ['s', 'header=0'], ''),
               ('quopri.ishex',
                ['c'],
                "Return true if the character 'c' is a hexadecimal digit."),
               ('quopri.unhex', ['s'], 'Get the integer value of a hexadecimal number.'),
               ('quopri.main', [], ''),
               ('mimetypes.guess_type',
                ['url', 'strict=True'],
                'Guess the type of a file based on its URL.\n\n    Return value is a tuple (type, encoding) where type is None if the\n    type can\'t be guessed (no or unknown suffix) or a string of the\n    form type/subtype, usable for a MIME Content-type header; and\n    encoding is None for no encoding or the name of the program used\n    to encode (e.g. compress or gzip).  The mappings are table\n    driven.  Encoding suffixes are case sensitive; type suffixes are\n    first tried case sensitive, then case insensitive.\n\n    The suffixes .tgz, .taz and .tz (case sensitive!) are all mapped\n    to ".tar.gz".  (This is table-driven too, using the dictionary\n    suffix_map).\n\n    Optional `strict\' argument when false adds a bunch of commonly found, but\n    non-standard types.\n    '),
               ('mimetypes.guess_all_extensions',
                ['type', 'strict=True'],
                "Guess the extensions for a file based on its MIME type.\n\n    Return value is a list of strings giving the possible filename\n    extensions, including the leading dot ('.').  The extension is not\n    guaranteed to have been associated with any particular data\n    stream, but would be mapped to the MIME type `type' by\n    guess_type().  If no extension can be guessed for `type', None\n    is returned.\n\n    Optional `strict' argument when false adds a bunch of commonly found,\n    but non-standard types.\n    "),
               ('mimetypes.guess_extension',
                ['type', 'strict=True'],
                "Guess the extension for a file based on its MIME type.\n\n    Return value is a string giving a filename extension, including the\n    leading dot ('.').  The extension is not guaranteed to have been\n    associated with any particular data stream, but would be mapped to the\n    MIME type `type' by guess_type().  If no extension can be guessed for\n    `type', None is returned.\n\n    Optional `strict' argument when false adds a bunch of commonly found,\n    but non-standard types.\n    "),
               ('mimetypes.add_type',
                ['type', 'ext', 'strict=True'],
                'Add a mapping between a type and an extension.\n\n    When the extension is already known, the new\n    type will replace the old one. When the type\n    is already known the extension will be added\n    to the list of known extensions.\n\n    If strict is true, information will be added to\n    list of standard types, else to the list of non-standard\n    types.\n    '),
               ('mimetypes.init', ['files=None'], ''),
               ('mimetypes.read_mime_types', ['file'], ''),
               ('mimetypes._default_mime_types', [], ''),
               ('mimetypes.usage', ['code', "msg=''"], ''),
               ('symbol.main', [], ''),
               ('fileinput.input',
                ['files=None',
                 'inplace=0',
                 "backup=''",
                 'bufsize=0',
                 "mode='r'",
                 'openhook=None'],
                'input([files[, inplace[, backup[, mode[, openhook]]]]])\n\n    Create an instance of the FileInput class. The instance will be used\n    as global state for the functions of this module, and is also returned\n    to use during iteration. The parameters to this function will be passed\n    along to the constructor of the FileInput class.\n    '),
               ('fileinput.close', [], 'Close the sequence.'),
               ('fileinput.nextfile',
                [],
                '\n    Close the current file so that the next iteration will read the first\n    line from the next file (if any); lines not read from the file will\n    not count towards the cumulative line count. The filename is not\n    changed until after the first line of the next file has been read.\n    Before the first line has been read, this function has no effect;\n    it cannot be used to skip the first file. After the last line of the\n    last file has been read, this function has no effect.\n    '),
               ('fileinput.filename',
                [],
                '\n    Return the name of the file currently being read.\n    Before the first line has been read, returns None.\n    '),
               ('fileinput.lineno',
                [],
                '\n    Return the cumulative line number of the line that has just been read.\n    Before the first line has been read, returns 0. After the last line\n    of the last file has been read, returns the line number of that line.\n    '),
               ('fileinput.filelineno',
                [],
                '\n    Return the line number in the current file. Before the first line\n    has been read, returns 0. After the last line of the last file has\n    been read, returns the line number of that line within the file.\n    '),
               ('fileinput.fileno',
                [],
                '\n    Return the file number of the current file. When no file is currently\n    opened, returns -1.\n    '),
               ('fileinput.isfirstline',
                [],
                '\n    Returns true the line just read is the first line of its file,\n    otherwise returns false.\n    '),
               ('fileinput.isstdin',
                [],
                '\n    Returns true if the last line was read from sys.stdin,\n    otherwise returns false.\n    '),
               ('fileinput.hook_compressed', ['filename', 'mode'], ''),
               ('fileinput.hook_encoded', ['encoding'], ''),
               ('fileinput._test', [], ''),
               ('urlparse.clear_cache', [], 'Clear the parse cache.'),
               ('urlparse.urlparse',
                ['url', "scheme=''", 'allow_fragments=True'],
                "Parse a URL into 6 components:\n    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>\n    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).\n    Note that we don't break the components up in smaller bits\n    (e.g. netloc is a single string) and we don't expand % escapes."),
               ('urlparse._splitparams', ['url'], ''),
               ('urlparse._splitnetloc', ['url', 'start=0'], ''),
               ('urlparse.urlsplit',
                ['url', "scheme=''", 'allow_fragments=True'],
                "Parse a URL into 5 components:\n    <scheme>://<netloc>/<path>?<query>#<fragment>\n    Return a 5-tuple: (scheme, netloc, path, query, fragment).\n    Note that we don't break the components up in smaller bits\n    (e.g. netloc is a single string) and we don't expand % escapes."),
               ('urlparse.urlunparse',
                ['(scheme, netloc, url, params, query, fragment)'],
                'Put a parsed URL back together again.  This may result in a\n    slightly different, but equivalent URL, if the URL that was parsed\n    originally had redundant delimiters, e.g. a ? with an empty query\n    (the draft states that these are equivalent).'),
               ('urlparse.urlunsplit', ['(scheme, netloc, url, query, fragment)'], ''),
               ('urlparse.urljoin',
                ['base', 'url', 'allow_fragments=True'],
                'Join a base URL and a possibly relative URL to form an absolute\n    interpretation of the latter.'),
               ('urlparse.urldefrag',
                ['url'],
                'Removes any existing fragment from URL.\n\n    Returns a tuple of the defragmented URL and the fragment.  If\n    the URL contained no fragments, the second element is the\n    empty string.\n    '),
               ('urlparse.test', [], ''),
               ('xdrlib._test', [], ''),
               ('os2emxpath.normcase',
                ['s'],
                'Normalize case of pathname.\n\n    Makes all characters lowercase and all altseps into seps.'),
               ('os2emxpath.isabs', ['s'], 'Test whether a path is absolute'),
               ('os2emxpath.join',
                ['a', '*p'],
                'Join two or more pathname components, inserting sep as needed'),
               ('os2emxpath.splitdrive',
                ['p'],
                'Split a pathname into drive and path specifiers. Returns a 2-tuple\n"(drive,path)";  either part may be empty'),
               ('os2emxpath.splitunc',
                ['p'],
                "Split a pathname into UNC mount point and relative path specifiers.\n\n    Return a 2-tuple (unc, rest); either part may be empty.\n    If unc is not empty, it has the form '//host/mount' (or similar\n    using backslashes).  unc+rest is always the input path.\n    Paths containing drive letters never have an UNC part.\n    "),
               ('os2emxpath.split',
                ['p'],
                'Split a pathname.\n\n    Return tuple (head, tail) where tail is everything after the final slash.\n    Either part may be empty.'),
               ('os2emxpath.splitext',
                ['p'],
                'Split the extension from a pathname.\n\n    Extension is everything from the last dot to the end.\n    Return (root, ext), either part may be empty.'),
               ('os2emxpath.basename', ['p'], 'Returns the final component of a pathname'),
               ('os2emxpath.dirname', ['p'], 'Returns the directory component of a pathname'),
               ('os2emxpath.commonprefix',
                ['m'],
                'Given a list of pathnames, returns the longest common leading component'),
               ('os2emxpath.getsize',
                ['filename'],
                'Return the size of a file, reported by os.stat()'),
               ('os2emxpath.getmtime',
                ['filename'],
                'Return the last modification time of a file, reported by os.stat()'),
               ('os2emxpath.getatime',
                ['filename'],
                'Return the last access time of a file, reported by os.stat()'),
               ('os2emxpath.getctime',
                ['filename'],
                'Return the creation time of a file, reported by os.stat().'),
               ('os2emxpath.islink',
                ['path'],
                'Test for symbolic link.  On OS/2 always returns false'),
               ('os2emxpath.exists', ['path'], 'Test whether a path exists'),
               ('os2emxpath.isdir', ['path'], 'Test whether a path is a directory'),
               ('os2emxpath.isfile', ['path'], 'Test whether a path is a regular file'),
               ('os2emxpath.ismount',
                ['path'],
                'Test whether a path is a mount point (defined as root of drive)'),
               ('os2emxpath.walk',
                ['top', 'func', 'arg'],
                'Directory tree walk whth callback function.\n\n    walk(top, func, arg) calls func(arg, d, files) for each directory d\n    in the tree rooted at top (including top itself); files is a list\n    of all the files and subdirs in directory d.'),
               ('os2emxpath.expanduser',
                ['path'],
                'Expand ~ and ~user constructs.\n\n    If user or $HOME is unknown, do nothing.'),
               ('os2emxpath.expandvars',
                ['path'],
                'Expand shell variables of form $var and ${var}.\n\n    Unknown variables are left unchanged.'),
               ('os2emxpath.normpath',
                ['path'],
                'Normalize path, eliminating double slashes, etc.'),
               ('os2emxpath.abspath', ['path'], 'Return the absolute version of a path'),
               ('symtable.symtable', ['code', 'filename', 'compile_type'], ''),
               ('symtable.is_free', ['flags'], ''),
               ('imputil._compile',
                ['pathname', 'timestamp'],
                "Compile (and cache) a Python source file.\n\n    The file specified by <pathname> is compiled to a code object and\n    returned.\n\n    Presuming the appropriate privileges exist, the bytecodes will be\n    saved back to the filesystem for future imports. The source file's\n    modification timestamp must be provided as a Long value.\n    "),
               ('imputil._os_bootstrap',
                [],
                "Set up 'os' module replacement functions for use during import bootstrap."),
               ('imputil._os_path_isdir', ['pathname'], 'Local replacement for os.path.isdir().'),
               ('imputil._timestamp',
                ['pathname'],
                'Return the file modification time as a Long.'),
               ('imputil.py_suffix_importer', ['filename', 'finfo', 'fqname'], ''),
               ('imputil._print_importers', [], ''),
               ('imputil._test_revamp', [], ''),
               ('_strptime._getlang', [], ''),
               ('_strptime._calc_julian_from_U_or_W',
                ['year', 'week_of_year', 'day_of_week', 'week_starts_Mon'],
                'Calculate the Julian day based on the year, week of the year, and day of\n    the week, with week_start_day representing whether the week of the year\n    assumes the week starts on Sunday or Monday (6 or 0).'),
               ('_strptime.strptime',
                ['data_string', "format='%a %b %d %H:%M:%S %Y'"],
                'Return a time struct based on the input string and the format string.'),
               ('colorsys.rgb_to_yiq', ['r', 'g', 'b'], ''),
               ('colorsys.yiq_to_rgb', ['y', 'i', 'q'], ''),
               ('colorsys.rgb_to_hls', ['r', 'g', 'b'], ''),
               ('colorsys.hls_to_rgb', ['h', 'l', 's'], ''),
               ('colorsys._v', ['m1', 'm2', 'hue'], ''),
               ('colorsys.rgb_to_hsv', ['r', 'g', 'b'], ''),
               ('colorsys.hsv_to_rgb', ['h', 's', 'v'], ''),
               ('mhlib.isnumeric', ['str'], ''),
               ('mhlib.pickline', ['file', 'key', 'casefold=1'], ''),
               ('mhlib.updateline', ['file', 'key', 'value', 'casefold=1'], ''),
               ('mhlib.test', [], ''),
               ('getpass.unix_getpass',
                ["prompt='Password: '", 'stream=None'],
                'Prompt for a password, with echo turned off.\n    The prompt is written on stream, by default stdout.\n\n    Restore terminal settings at end.\n    '),
               ('getpass.win_getpass',
                ["prompt='Password: '", 'stream=None'],
                'Prompt for password with echo off, using Windows getch().'),
               ('getpass.default_getpass', ["prompt='Password: '", 'stream=None'], ''),
               ('getpass._raw_input', ["prompt=''", 'stream=None'], ''),
               ('getpass.getuser',
                [],
                'Get the username from the environment or password database.\n\n    First try various environment variables, then the password\n    database.  This works on Windows as long as USERNAME is set.\n\n    '),
               ('shlex.split', ['s', 'comments=False'], ''),
               ('modulefinder.AddPackagePath', ['packagename', 'path'], ''),
               ('modulefinder.ReplacePackage', ['oldname', 'newname'], ''),
               ('modulefinder.test', [], ''),
               ('dumbdbm.open',
                ['file', 'flag=None', 'mode=438'],
                'Open the database file, filename, and return corresponding object.\n\n    The flag argument, used to control how the database is opened in the\n    other DBM implementations, is ignored in the dumbdbm module; the\n    database is always opened for update, and will be created if it does\n    not exist.\n\n    The optional mode argument is the UNIX mode of the file, used only when\n    the database has to be created.  It defaults to octal code 0666 (and\n    will be modified by the prevailing umask).\n\n    '),
               ('re.match',
                ['pattern', 'string', 'flags=0'],
                'Try to apply the pattern at the start of the string, returning\n    a match object, or None if no match was found.'),
               ('re.search',
                ['pattern', 'string', 'flags=0'],
                'Scan through string looking for a match to the pattern, returning\n    a match object, or None if no match was found.'),
               ('re.sub',
                ['pattern', 'repl', 'string', 'count=0'],
                "Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a callable, it's passed the match object and must return\n    a replacement string to be used."),
               ('re.subn',
                ['pattern', 'repl', 'string', 'count=0'],
                "Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a callable, it's passed the match object and must\n    return a replacement string to be used."),
               ('re.split',
                ['pattern', 'string', 'maxsplit=0'],
                'Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.'),
               ('re.findall',
                ['pattern', 'string', 'flags=0'],
                'Return a list of all non-overlapping matches in the string.\n\n    If one or more groups are present in the pattern, return a\n    list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n\n    Empty matches are included in the result.'),
               ('re.finditer',
                ['pattern', 'string', 'flags=0'],
                'Return an iterator over all non-overlapping matches in the\n        string.  For each match, the iterator returns a match object.\n\n        Empty matches are included in the result.'),
               ('re.compile',
                ['pattern', 'flags=0'],
                'Compile a regular expression pattern, returning a pattern object.'),
               ('re.purge', [], 'Clear the regular expression cache'),
               ('re.template',
                ['pattern', 'flags=0'],
                'Compile a template pattern, returning a pattern object'),
               ('re.escape', ['pattern'], 'Escape all non-alphanumeric characters in pattern.'),
               ('re._compile', ['*key'], ''),
               ('re._compile_repl', ['*key'], ''),
               ('re._expand', ['pattern', 'match', 'template'], ''),
               ('re._subx', ['pattern', 'template'], ''),
               ('re._pickle', ['p'], ''),
               ('decimal.ascii_upper', ['s'], ''),
               ('decimal.setcontext', ['context'], "Set this thread's context to context."),
               ('decimal.getcontext',
                [],
                "Returns this thread's context.\n\n        If this thread does not yet have a context, returns\n        a new context and sets this thread's context.\n        New contexts are copies of DefaultContext.\n        "),
               ('decimal.getcontext',
                ['_local=local'],
                "Returns this thread's context.\n\n        If this thread does not yet have a context, returns\n        a new context and sets this thread's context.\n        New contexts are copies of DefaultContext.\n        "),
               ('decimal.setcontext',
                ['context', '_local=local'],
                "Set this thread's context to context."),
               ('decimal.localcontext',
                ['ctx=None'],
                'Return a context manager for a copy of the supplied context\n\n    Uses a copy of the current context if no context is specified\n    The returned context manager creates a local decimal context\n    in a with statement:\n        def sin(x):\n             with localcontext() as ctx:\n                 ctx.prec += 2\n                 # Rest of sin calculation algorithm\n                 # uses a precision 2 greater than normal\n             return +s  # Convert result to normal precision\n\n         def sin(x):\n             with localcontext(ExtendedContext):\n                 # Rest of sin calculation algorithm\n                 # uses the Extended Context from the\n                 # General Decimal Arithmetic Specification\n             return +s  # Convert result to normal context\n\n    '),
               ('decimal._dec_from_triple',
                ['sign', 'coefficient', 'exponent', 'special=False'],
                'Create a decimal instance directly, without any validation,\n    normalization (e.g. removal of leading zeros) or argument\n    conversion.\n\n    This function is for *internal use only*.\n    '),
               ('decimal._normalize',
                ['op1', 'op2', 'prec=0'],
                'Normalizes op1, op2 to have the same exp and length of coefficient.\n\n    Done during addition.\n    '),
               ('decimal._nbits',
                ['n',
                 "correction={0: 4, 1: 3, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 0, 9: 0, 'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0}"],
                'Number of bits in binary representation of the positive integer n,\n    or 0 if n == 0.\n    '),
               ('decimal._sqrt_nearest',
                ['n', 'a'],
                'Closest integer to the square root of the positive integer n.  a is\n    an initial approximation to the square root.  Any positive integer\n    will do for a, but the closer a is to the square root of n the\n    faster convergence will be.\n\n    '),
               ('decimal._rshift_nearest',
                ['x', 'shift'],
                'Given an integer x and a nonnegative integer shift, return closest\n    integer to x / 2**shift; use round-to-even in case of a tie.\n\n    '),
               ('decimal._div_nearest',
                ['a', 'b'],
                'Closest integer to a/b, a and b positive integers; rounds to even\n    in the case of a tie.\n\n    '),
               ('decimal._ilog',
                ['x', 'M', 'L=8'],
                'Integer approximation to M*log(x/M), with absolute error boundable\n    in terms only of x/M.\n\n    Given positive integers x and M, return an integer approximation to\n    M * log(x/M).  For L = 8 and 0.1 <= x/M <= 10 the difference\n    between the approximation and the exact result is at most 22.  For\n    L = 8 and 1.0 <= x/M <= 10.0 the difference is at most 15.  In\n    both cases these are upper bounds on the error; it will usually be\n    much smaller.'),
               ('decimal._dlog10',
                ['c', 'e', 'p'],
                'Given integers c, e and p with c > 0, p >= 0, compute an integer\n    approximation to 10**p * log10(c*10**e), with an absolute error of\n    at most 1.  Assumes that c*10**e is not exactly 1.'),
               ('decimal._dlog',
                ['c', 'e', 'p'],
                'Given integers c, e and p with c > 0, compute an integer\n    approximation to 10**p * log(c*10**e), with an absolute error of\n    at most 1.  Assumes that c*10**e is not exactly 1.'),
               ('decimal._iexp',
                ['x', 'M', 'L=8'],
                'Given integers x and M, M > 0, such that x/M is small in absolute\n    value, compute an integer approximation to M*exp(x/M).  For 0 <=\n    x/M <= 2.4, the absolute error in the result is bounded by 60 (and\n    is usually much smaller).'),
               ('decimal._dexp',
                ['c', 'e', 'p'],
                'Compute an approximation to exp(c*10**e), with p decimal places of\n    precision.\n\n    Returns integers d, f such that:\n\n      10**(p-1) <= d <= 10**p, and\n      (d-1)*10**f < exp(c*10**e) < (d+1)*10**f\n\n    In other words, d*10**f is an approximation to exp(c*10**e) with p\n    digits of precision, and with an error in d of at most 1.  This is\n    almost, but not quite, the same as the error being < 1ulp: when d\n    = 10**(p-1) the error could be up to 10 ulp.'),
               ('decimal._dpower',
                ['xc', 'xe', 'yc', 'ye', 'p'],
                'Given integers xc, xe, yc and ye representing Decimals x = xc*10**xe and\n    y = yc*10**ye, compute x**y.  Returns a pair of integers (c, e) such that:\n\n      10**(p-1) <= c <= 10**p, and\n      (c-1)*10**e < x**y < (c+1)*10**e\n\n    in other words, c*10**e is an approximation to x**y with p digits\n    of precision, and with an error in c of at most 1.  (This is\n    almost, but not quite, the same as the error being < 1ulp: when c\n    == 10**(p-1) we can only guarantee error < 10ulp.)\n\n    We assume that: x is positive and not equal to 1, and y is nonzero.\n    '),
               ('decimal._log10_lb',
                ['c',
                 'correction={1: 100, 2: 70, 3: 53, 4: 40, 5: 31, 6: 23, 7: 16, 8: 10, 9: 5}'],
                'Compute a lower bound for 100*log10(c) for a positive integer c.'),
               ('decimal._convert_other',
                ['other', 'raiseit=False'],
                "Convert other to Decimal.\n\n    Verifies that it's ok to use in an implicit construction.\n    "),
               ('pydoc.pathdirs',
                [],
                'Convert sys.path into a list of absolute, existing, unique paths.'),
               ('pydoc.getdoc', ['object'], 'Get the doc string or comments for an object.'),
               ('pydoc.splitdoc',
                ['doc'],
                'Split a doc string into a synopsis line (if any) and the rest.'),
               ('pydoc.classname',
                ['object', 'modname'],
                'Get a class name and qualify it with a module name if necessary.'),
               ('pydoc.isdata',
                ['object'],
                "Check if an object is of a type that probably means it's data."),
               ('pydoc.replace',
                ['text', '*pairs'],
                'Do a series of global replacements on a string.'),
               ('pydoc.cram',
                ['text', 'maxlen'],
                'Omit part of a string if needed to make it fit in a maximum length.'),
               ('pydoc.stripid',
                ['text'],
                'Remove the hexadecimal id from a Python object representation.'),
               ('pydoc._is_some_method', ['obj'], ''),
               ('pydoc.allmethods', ['cl'], ''),
               ('pydoc._split_list',
                ['s', 'predicate'],
                'Split sequence s via predicate, and return pair ([true], [false]).\n\n    The return value is a 2-tuple of lists,\n        ([x for x in s if predicate(x)],\n         [x for x in s if not predicate(x)])\n    '),
               ('pydoc.visiblename',
                ['name', 'all=None'],
                'Decide whether to show documentation on a variable.'),
               ('pydoc.classify_class_attrs',
                ['object'],
                'Wrap inspect.classify_class_attrs, with fixup for data descriptors.'),
               ('pydoc.ispackage',
                ['path'],
                'Guess whether a path refers to a package directory.'),
               ('pydoc.source_synopsis', ['file'], ''),
               ('pydoc.synopsis',
                ['filename', 'cache={}'],
                'Get the one-line summary out of a module file.'),
               ('pydoc.importfile',
                ['path'],
                'Import a Python source file or compiled file given its path.'),
               ('pydoc.safeimport',
                ['path', 'forceload=0', 'cache={}'],
                "Import a module; handle errors; return None if the module isn't found.\n\n    If the module *is* found but an exception occurs, it's wrapped in an\n    ErrorDuringImport exception and reraised.  Unlike __import__, if a\n    package path is specified, the module at the end of the path is returned,\n    not the package at the beginning.  If the optional 'forceload' argument\n    is 1, we reload the module from disk (unless it's a dynamic extension)."),
               ('pydoc.pager',
                ['text'],
                'The first time this is called, determine what kind of pager to use.'),
               ('pydoc.getpager', [], 'Decide what method to use for paging through text.'),
               ('pydoc.plain', ['text'], 'Remove boldface formatting from text.'),
               ('pydoc.pipepager',
                ['text', 'cmd'],
                'Page through text by feeding it to another program.'),
               ('pydoc.tempfilepager',
                ['text', 'cmd'],
                'Page through text by invoking a program on a temporary file.'),
               ('pydoc.ttypager', ['text'], 'Page through text on a text terminal.'),
               ('pydoc.plainpager',
                ['text'],
                'Simply print unformatted text.  This is the ultimate fallback.'),
               ('pydoc.describe', ['thing'], 'Produce a short description of the given thing.'),
               ('pydoc.locate',
                ['path', 'forceload=0'],
                'Locate an object by name or dotted path, importing as necessary.'),
               ('pydoc.resolve',
                ['thing', 'forceload=0'],
                'Given an object or a path to an object, get the object and its name.'),
               ('pydoc.doc',
                ['thing', "title='Python Library Documentation: %s'", 'forceload=0'],
                'Display text documentation, given an object or a path to an object.'),
               ('pydoc.writedoc',
                ['thing', 'forceload=0'],
                'Write HTML documentation to a file in the current directory.'),
               ('pydoc.writedocs',
                ['dir', "pkgpath=''", 'done=None'],
                'Write out HTML documentation for all modules in a directory tree.'),
               ('pydoc.apropos',
                ['key'],
                'Print all the one-line module summaries that contain a substring.'),
               ('pydoc.serve', ['port', 'callback=None', 'completer=None'], ''),
               ('pydoc.gui',
                [],
                'Graphical interface (starts web server and pops up a control window).'),
               ('pydoc.ispath', ['x'], ''),
               ('pydoc.cli',
                [],
                'Command-line interface (looks at sys.argv to decide what to do).'),
               ('atexit._run_exitfuncs',
                [],
                'run any registered exit functions\n\n    _exithandlers is traversed in reverse order so functions are executed\n    last in, first out.\n    '),
               ('atexit.register',
                ['func', '*targs', '**kargs'],
                'register a function to be executed upon normal program termination\n\n    func - function to be called at exit\n    targs - optional arguments to pass to func\n    kargs - optional keyword arguments to pass to func\n    '),
               ('atexit.x1', [], ''),
               ('atexit.x2', ['n'], ''),
               ('atexit.x3', ['n', 'kwd=None'], ''),
               ('_LWPCookieJar.lwp_cookie_str',
                ['cookie'],
                'Return string representation of Cookie in an the LWP cookie file format.\n\n    Actually, the format is extended a bit -- see module docstring.\n\n    '),
               ('copy_reg.pickle', ['ob_type', 'pickle_function', 'constructor_ob=None'], ''),
               ('copy_reg.constructor', ['object'], ''),
               ('copy_reg.pickle_complex', ['c'], ''),
               ('copy_reg._reconstructor', ['cls', 'base', 'state'], ''),
               ('copy_reg._reduce_ex', ['self', 'proto'], ''),
               ('copy_reg.__newobj__', ['cls', '*args'], ''),
               ('copy_reg._slotnames',
                ['cls'],
                "Return a list of slot names for a given class.\n\n    This needs to find slots defined by the class and its bases, so we\n    can't simply return the __slots__ attribute.  We must walk down\n    the Method Resolution Order and concatenate the __slots__ of each\n    class found there.  (This assumes classes don't modify their\n    __slots__ attribute to misrepresent their slots after the class is\n    defined.)\n    "),
               ('copy_reg.add_extension',
                ['module', 'name', 'code'],
                'Register an extension code.'),
               ('copy_reg.remove_extension',
                ['module', 'name', 'code'],
                'Unregister an extension code.  For testing only.'),
               ('copy_reg.clear_extension_cache', [], ''),
               ('codecs.open',
                ['filename', "mode='rb'", 'encoding=None', "errors='strict'", 'buffering=1'],
                " Open an encoded file using the given mode and return\n        a wrapped version providing transparent encoding/decoding.\n\n        Note: The wrapped version will only accept the object format\n        defined by the codecs, i.e. Unicode objects for most builtin\n        codecs. Output is also codec dependent and will usually be\n        Unicode as well.\n\n        Files are always opened in binary mode, even if no binary mode\n        was specified. This is done to avoid data loss due to encodings\n        using 8-bit values. The default file mode is 'rb' meaning to\n        open the file in binary read mode.\n\n        encoding specifies the encoding which is to be used for the\n        file.\n\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        buffering has the same meaning as for the builtin open() API.\n        It defaults to line buffered.\n\n        The returned wrapped file object provides an extra attribute\n        .encoding which allows querying the used encoding. This\n        attribute is only available if an encoding was specified as\n        parameter.\n\n    "),
               ('codecs.EncodedFile',
                ['file', 'data_encoding', 'file_encoding=None', "errors='strict'"],
                " Return a wrapped version of file which provides transparent\n        encoding translation.\n\n        Strings written to the wrapped file are interpreted according\n        to the given data_encoding and then written to the original\n        file as string using file_encoding. The intermediate encoding\n        will usually be Unicode but depends on the specified codecs.\n\n        Strings are read from the file using file_encoding and then\n        passed back to the caller as string using data_encoding.\n\n        If file_encoding is not given, it defaults to data_encoding.\n\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        The returned wrapped file object provides two extra attributes\n        .data_encoding and .file_encoding which reflect the given\n        parameters of the same name. The attributes can be used for\n        introspection by Python programs.\n\n    "),
               ('codecs.getencoder',
                ['encoding'],
                ' Lookup up the codec for the given encoding and return\n        its encoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    '),
               ('codecs.getdecoder',
                ['encoding'],
                ' Lookup up the codec for the given encoding and return\n        its decoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    '),
               ('codecs.getincrementalencoder',
                ['encoding'],
                " Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental encoder.\n\n    "),
               ('codecs.getincrementaldecoder',
                ['encoding'],
                " Lookup up the codec for the given encoding and return\n        its IncrementalDecoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental decoder.\n\n    "),
               ('codecs.getreader',
                ['encoding'],
                ' Lookup up the codec for the given encoding and return\n        its StreamReader class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    '),
               ('codecs.getwriter',
                ['encoding'],
                ' Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    '),
               ('codecs.iterencode',
                ['iterator', 'encoding', "errors='strict'", '**kwargs'],
                '\n    Encoding iterator.\n\n    Encodes the input strings from the iterator using a IncrementalEncoder.\n\n    errors and kwargs are passed through to the IncrementalEncoder\n    constructor.\n    '),
               ('codecs.iterdecode',
                ['iterator', 'encoding', "errors='strict'", '**kwargs'],
                '\n    Decoding iterator.\n\n    Decodes the input strings from the iterator using a IncrementalDecoder.\n\n    errors and kwargs are passed through to the IncrementalDecoder\n    constructor.\n    '),
               ('codecs.make_identity_dict',
                ['rng'],
                ' make_identity_dict(rng) -> dict\n\n        Return a dictionary where elements of the rng sequence are\n        mapped to themselves.\n\n    '),
               ('codecs.make_encoding_map',
                ['decoding_map'],
                ' Creates an encoding map from a decoding map.\n\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n        causing an exception when encountered by the charmap codec\n        during translation.\n\n        One example where this happens is cp875.py which decodes\n        multiple character to \\u001a.\n\n    '),
               ('dbhash.open', ['file', "flag='r'", 'mode=438'], ''),
               ('uuid._find_mac', ['command', 'args', 'hw_identifiers', 'get_index'], ''),
               ('uuid._ifconfig_getnode',
                [],
                'Get the hardware address on Unix by running ifconfig.'),
               ('uuid._ipconfig_getnode',
                [],
                'Get the hardware address on Windows by running ipconfig.exe.'),
               ('uuid._netbios_getnode',
                [],
                'Get the hardware address on Windows using NetBIOS calls.\n    See http://support.microsoft.com/kb/118623 for details.'),
               ('uuid._unixdll_getnode', [], 'Get the hardware address on Unix using ctypes.'),
               ('uuid._windll_getnode', [], 'Get the hardware address on Windows using ctypes.'),
               ('uuid._random_getnode',
                [],
                'Get a random node ID, with eighth bit set as suggested by RFC 4122.'),
               ('uuid.getnode',
                [],
                'Get the hardware address as a 48-bit positive integer.\n\n    The first time this runs, it may launch a separate program, which could\n    be quite slow.  If all attempts to obtain the hardware address fail, we\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\n    in RFC 4122.\n    '),
               ('uuid.uuid1',
                ['node=None', 'clock_seq=None'],
                "Generate a UUID from a host ID, sequence number, and the current time.\n    If 'node' is not given, getnode() is used to obtain the hardware\n    address.  If 'clock_seq' is given, it is used as the sequence number;\n    otherwise a random 14-bit sequence number is chosen."),
               ('uuid.uuid3',
                ['namespace', 'name'],
                'Generate a UUID from the MD5 hash of a namespace UUID and a name.'),
               ('uuid.uuid4', [], 'Generate a random UUID.'),
               ('uuid.uuid5',
                ['namespace', 'name'],
                'Generate a UUID from the SHA-1 hash of a namespace UUID and a name.'),
               ('whichdb.whichdb',
                ['filename'],
                'Guess which db package to use to open a db file.\n\n    Return values:\n\n    - None if the database file can\'t be read;\n    - empty string if the file can be read but can\'t be recognized\n    - the module name (e.g. "dbm" or "gdbm") if recognized.\n\n    Importing the given module may still fail, and opening the\n    database using that module may still fail.\n    '),
               ('mimetools._get_next_counter', [], ''),
               ('mimetools.choose_boundary',
                [],
                "Return a string usable as a multipart boundary.\n\n    The string chosen is unique within a single program run, and\n    incorporates the user id (if available), process id (if available),\n    and current time.  So it's very unlikely the returned string appears\n    in message text, but there's no guarantee.\n\n    The boundary contains dots so you have to quote it in the header."),
               ('mimetools.decode',
                ['input', 'output', 'encoding'],
                'Decode common content-transfer-encodings (base64, quopri, uuencode).'),
               ('mimetools.encode',
                ['input', 'output', 'encoding'],
                'Encode common content-transfer-encodings (base64, quopri, uuencode).'),
               ('mimetools.pipeto', ['input', 'command'], ''),
               ('mimetools.pipethrough', ['input', 'command', 'output'], ''),
               ('mimetools.copyliteral', ['input', 'output'], ''),
               ('mimetools.copybinary', ['input', 'output'], ''),
               ('inspect.ismodule',
                ['object'],
                'Return true if the object is a module.\n\n    Module objects provide these attributes:\n        __doc__         documentation string\n        __file__        filename (missing for built-in modules)'),
               ('inspect.isclass',
                ['object'],
                'Return true if the object is a class.\n\n    Class objects provide these attributes:\n        __doc__         documentation string\n        __module__      name of module in which this class was defined'),
               ('inspect.ismethod',
                ['object'],
                'Return true if the object is an instance method.\n\n    Instance method objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this method was defined\n        im_class        class object in which this method belongs\n        im_func         function object containing implementation of method\n        im_self         instance to which this method is bound, or None'),
               ('inspect.ismethoddescriptor',
                ['object'],
                'Return true if the object is a method descriptor.\n\n    But not if ismethod() or isclass() or isfunction() are true.\n\n    This is new in Python 2.2, and, for example, is true of int.__add__.\n    An object passing this test has a __get__ attribute but not a __set__\n    attribute, but beyond that the set of attributes varies.  __name__ is\n    usually sensible, and __doc__ often is.\n\n    Methods implemented via descriptors that also pass one of the other\n    tests return false from the ismethoddescriptor() test, simply because\n    the other tests promise more -- you can, e.g., count on having the\n    im_func attribute (etc) when an object passes ismethod().'),
               ('inspect.isdatadescriptor',
                ['object'],
                'Return true if the object is a data descriptor.\n\n    Data descriptors have both a __get__ and a __set__ attribute.  Examples are\n    properties (defined in Python) and getsets and members (defined in C).\n    Typically, data descriptors will also have __name__ and __doc__ attributes\n    (properties, getsets, and members have both of these attributes), but this\n    is not guaranteed.'),
               ('inspect.ismemberdescriptor',
                ['object'],
                'Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.'),
               ('inspect.ismemberdescriptor',
                ['object'],
                'Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.'),
               ('inspect.isgetsetdescriptor',
                ['object'],
                'Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.'),
               ('inspect.isgetsetdescriptor',
                ['object'],
                'Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.'),
               ('inspect.isfunction',
                ['object'],
                'Return true if the object is a user-defined function.\n\n    Function objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this function was defined\n        func_code       code object containing compiled function bytecode\n        func_defaults   tuple of any default values for arguments\n        func_doc        (same as __doc__)\n        func_globals    global namespace in which this function was defined\n        func_name       (same as __name__)'),
               ('inspect.istraceback',
                ['object'],
                'Return true if the object is a traceback.\n\n    Traceback objects provide these attributes:\n        tb_frame        frame object at this level\n        tb_lasti        index of last attempted instruction in bytecode\n        tb_lineno       current line number in Python source code\n        tb_next         next inner traceback object (called by this level)'),
               ('inspect.isframe',
                ['object'],
                "Return true if the object is a frame object.\n\n    Frame objects provide these attributes:\n        f_back          next outer frame object (this frame's caller)\n        f_builtins      built-in namespace seen by this frame\n        f_code          code object being executed in this frame\n        f_exc_traceback traceback if raised in this frame, or None\n        f_exc_type      exception type if raised in this frame, or None\n        f_exc_value     exception value if raised in this frame, or None\n        f_globals       global namespace seen by this frame\n        f_lasti         index of last attempted instruction in bytecode\n        f_lineno        current line number in Python source code\n        f_locals        local namespace seen by this frame\n        f_restricted    0 or 1 if frame is in restricted execution mode\n        f_trace         tracing function for this frame, or None"),
               ('inspect.iscode',
                ['object'],
                'Return true if the object is a code object.\n\n    Code objects provide these attributes:\n        co_argcount     number of arguments (not including * or ** args)\n        co_code         string of raw compiled bytecode\n        co_consts       tuple of constants used in the bytecode\n        co_filename     name of file in which this code object was created\n        co_firstlineno  number of first line in Python source code\n        co_flags        bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg\n        co_lnotab       encoded mapping of line numbers to bytecode indices\n        co_name         name with which this code object was defined\n        co_names        tuple of names of local variables\n        co_nlocals      number of local variables\n        co_stacksize    virtual machine stack space required\n        co_varnames     tuple of names of arguments and local variables'),
               ('inspect.isbuiltin',
                ['object'],
                'Return true if the object is a built-in function or method.\n\n    Built-in functions and methods provide these attributes:\n        __doc__         documentation string\n        __name__        original name of this function or method\n        __self__        instance to which a method is bound, or None'),
               ('inspect.isroutine',
                ['object'],
                'Return true if the object is any kind of function or method.'),
               ('inspect.getmembers',
                ['object', 'predicate=None'],
                'Return all members of an object as (name, value) pairs sorted by name.\n    Optionally, only return members that satisfy a given predicate.'),
               ('inspect.classify_class_attrs',
                ['cls'],
                "Return list of attribute-descriptor tuples.\n\n    For each name in dir(cls), the return list contains a 4-tuple\n    with these elements:\n\n        0. The name (a string).\n\n        1. The kind of attribute this is, one of these strings:\n               'class method'    created via classmethod()\n               'static method'   created via staticmethod()\n               'property'        created via property()\n               'method'          any other flavor of method\n               'data'            not a method\n\n        2. The class which defined this attribute (a class).\n\n        3. The object as obtained directly from the defining class's\n           __dict__, not via getattr.  This is especially important for\n           data attributes:  C.data is just a data object, but\n           C.__dict__['data'] may be a data descriptor with additional\n           info, like a __doc__ string.\n    "),
               ('inspect._searchbases', ['cls', 'accum'], ''),
               ('inspect.getmro',
                ['cls'],
                'Return tuple of base classes (including cls) in method resolution order.'),
               ('inspect.indentsize',
                ['line'],
                'Return the indent size, in spaces, at the start of a line of text.'),
               ('inspect.getdoc',
                ['object'],
                'Get the documentation string for an object.\n\n    All tabs are expanded to spaces.  To clean up docstrings that are\n    indented to line up with blocks of code, any whitespace than can be\n    uniformly removed from the second line onwards is removed.'),
               ('inspect.getfile',
                ['object'],
                'Work out which source or compiled file an object was defined in.'),
               ('inspect.getmoduleinfo',
                ['path'],
                'Get the module name, suffix, mode, and module type for a given file.'),
               ('inspect.getmodulename',
                ['path'],
                'Return the module name for a given file, or None.'),
               ('inspect.getsourcefile',
                ['object'],
                'Return the Python source file an object was defined in, if it exists.'),
               ('inspect.getabsfile',
                ['object', '_filename=None'],
                'Return an absolute path to the source or compiled file for an object.\n\n    The idea is for each object to have a unique origin, so this routine\n    normalizes the result as much as possible.'),
               ('inspect.getmodule',
                ['object', '_filename=None'],
                'Return the module an object was defined in, or None if not found.'),
               ('inspect.findsource',
                ['object'],
                'Return the entire source file and starting line number for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of all the lines\n    in the file and the line number indexes a line in that list.  An IOError\n    is raised if the source code cannot be retrieved.'),
               ('inspect.getcomments',
                ['object'],
                "Get lines of comments immediately preceding an object's source code.\n\n    Returns None when source can't be found.\n    "),
               ('inspect.getblock',
                ['lines'],
                'Extract the block of code at the top of the given list of lines.'),
               ('inspect.getsourcelines',
                ['object'],
                'Return a list of source lines and starting line number for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of the lines\n    corresponding to the object and the line number indicates where in the\n    original source file the first line of code was found.  An IOError is\n    raised if the source code cannot be retrieved.'),
               ('inspect.getsource',
                ['object'],
                'Return the text of the source code for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a single string.  An\n    IOError is raised if the source code cannot be retrieved.'),
               ('inspect.walktree',
                ['classes', 'children', 'parent'],
                'Recursive helper function for getclasstree().'),
               ('inspect.getclasstree',
                ['classes', 'unique=0'],
                "Arrange the given list of classes into a hierarchy of nested lists.\n\n    Where a nested list appears, it contains classes derived from the class\n    whose entry immediately precedes the list.  Each entry is a 2-tuple\n    containing a class and a tuple of its base classes.  If the 'unique'\n    argument is true, exactly one entry appears in the returned structure\n    for each class in the given list.  Otherwise, classes using multiple\n    inheritance and their descendants will appear multiple times."),
               ('inspect.getargs',
                ['co'],
                "Get information about the arguments accepted by a code object.\n\n    Three things are returned: (args, varargs, varkw), where 'args' is\n    a list of argument names (possibly containing nested lists), and\n    'varargs' and 'varkw' are the names of the * and ** arguments or None."),
               ('inspect.getargspec',
                ['func'],
                "Get the names and default values of a function's arguments.\n\n    A tuple of four things is returned: (args, varargs, varkw, defaults).\n    'args' is a list of the argument names (it may contain nested lists).\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'defaults' is an n-tuple of the default values of the last n arguments.\n    "),
               ('inspect.getargvalues',
                ['frame'],
                "Get information about arguments passed into a particular frame.\n\n    A tuple of four things is returned: (args, varargs, varkw, locals).\n    'args' is a list of the argument names (it may contain nested lists).\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'locals' is the locals dictionary of the given frame."),
               ('inspect.joinseq', ['seq'], ''),
               ('inspect.strseq',
                ['object', 'convert', 'join=joinseq'],
                'Recursively walk a sequence, stringifying each element.'),
               ('inspect.formatargspec',
                ['args',
                 'varargs=None',
                 'varkw=None',
                 'defaults=None',
                 'formatarg=str',
                 "formatvarargs=lambda name: '*'+name",
                 "formatvarkw=lambda name: '**'+name",
                 "formatvalue=lambda value: '='+repr(value)",
                 'join=joinseq'],
                'Format an argument spec from the 4 values returned by getargspec.\n\n    The first four arguments are (args, varargs, varkw, defaults).  The\n    other four arguments are the corresponding optional formatting functions\n    that are called to turn names and values into strings.  The ninth\n    argument is an optional function to format the sequence of arguments.'),
               ('inspect.formatargvalues',
                ['args',
                 'varargs',
                 'varkw',
                 'locals',
                 'formatarg=str',
                 "formatvarargs=lambda name: '*'+name",
                 "formatvarkw=lambda name: '**'+name",
                 "formatvalue=lambda value: '='+repr(value)",
                 'join=joinseq'],
                'Format an argument spec from the 4 values returned by getargvalues.\n\n    The first four arguments are (args, varargs, varkw, locals).  The\n    next four arguments are the corresponding optional formatting functions\n    that are called to turn names and values into strings.  The ninth\n    argument is an optional function to format the sequence of arguments.'),
               ('inspect.getframeinfo',
                ['frame', 'context=1'],
                'Get information about a frame or traceback object.\n\n    A tuple of five things is returned: the filename, the line number of\n    the current line, the function name, a list of lines of context from\n    the source code, and the index of the current line within that list.\n    The optional second argument specifies the number of lines of context\n    to return, which are centered around the current line.'),
               ('inspect.getlineno',
                ['frame'],
                'Get the line number from a frame object, allowing for optimization.'),
               ('inspect.getouterframes',
                ['frame', 'context=1'],
                'Get a list of records for a frame and all higher (calling) frames.\n\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context.'),
               ('inspect.getinnerframes',
                ['tb', 'context=1'],
                "Get a list of records for a traceback's frame and all lower frames.\n\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context."),
               ('inspect.stack',
                ['context=1'],
                "Return a list of records for the stack above the caller's frame."),
               ('inspect.trace',
                ['context=1'],
                'Return a list of records for the stack below the current exception.'),
               ('macurl2path.url2pathname',
                ['pathname'],
                "OS-specific conversion from a relative URL of the 'file' scheme\n    to a file system path; not recommended for general use."),
               ('macurl2path.pathname2url',
                ['pathname'],
                "OS-specific conversion from a file system path to a relative URL\n    of the 'file' scheme; not recommended for general use."),
               ('macurl2path._pncomp2url', ['component'], ''),
               ('macurl2path.test', [], ''),
               ('mimify.mime_decode',
                ['line'],
                'Decode a single line of quoted-printable text to 8bit.'),
               ('mimify.mime_decode_header', ['line'], 'Decode a header line to 8bit.'),
               ('mimify.unmimify_part',
                ['ifile', 'ofile', 'decode_base64=0'],
                'Convert a quoted-printable part of a MIME mail message to 8bit.'),
               ('mimify.unmimify',
                ['infile', 'outfile', 'decode_base64=0'],
                'Convert quoted-printable parts of a MIME mail message to 8bit.'),
               ('mimify.mime_encode',
                ['line', 'header'],
                'Code a single line as quoted-printable.\n    If header is set, quote some extra characters.'),
               ('mimify.mime_encode_header',
                ['line'],
                'Code a single header line as quoted-printable.'),
               ('mimify.mimify_part',
                ['ifile', 'ofile', 'is_mime'],
                'Convert an 8bit part of a MIME mail message to quoted-printable.'),
               ('mimify.mimify',
                ['infile', 'outfile'],
                'Convert 8bit parts of a MIME mail message to quoted-printable.'),
               ('heapq.heappush',
                ['heap', 'item'],
                'Push item onto heap, maintaining the heap invariant.'),
               ('heapq.heappop',
                ['heap'],
                'Pop the smallest item off the heap, maintaining the heap invariant.'),
               ('heapq.heapreplace',
                ['heap', 'item'],
                'Pop and return the current smallest value, and add the new item.\n\n    This is more efficient than heappop() followed by heappush(), and can be\n    more appropriate when using a fixed-size heap.  Note that the value\n    returned may be larger than item!  That constrains reasonable uses of\n    this routine unless written as part of a conditional replacement:\n\n        if item > heap[0]:\n            item = heapreplace(heap, item)\n    '),
               ('heapq.heapify',
                ['x'],
                'Transform list into a heap, in-place, in O(len(heap)) time.'),
               ('heapq.nlargest',
                ['n', 'iterable'],
                'Find the n largest elements in a dataset.\n\n    Equivalent to:  sorted(iterable, reverse=True)[:n]\n    '),
               ('heapq.nsmallest',
                ['n', 'iterable'],
                'Find the n smallest elements in a dataset.\n\n    Equivalent to:  sorted(iterable)[:n]\n    '),
               ('heapq._siftdown', ['heap', 'startpos', 'pos'], ''),
               ('heapq._siftup', ['heap', 'pos'], ''),
               ('heapq.nsmallest',
                ['n', 'iterable', 'key=None'],
                'Find the n smallest elements in a dataset.\n\n    Equivalent to:  sorted(iterable, key=key)[:n]\n    '),
               ('heapq.nlargest',
                ['n', 'iterable', 'key=None'],
                'Find the n largest elements in a dataset.\n\n    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]\n    '),
               ('asynchat.find_prefix_at_end', ['haystack', 'needle'], ''),
               ('SimpleXMLRPCServer.resolve_dotted_attribute',
                ['obj', 'attr', 'allow_dotted_names=True'],
                "resolve_dotted_attribute(a, 'b.c.d') => a.b.c.d\n\n    Resolves a dotted attribute name to an object.  Raises\n    an AttributeError if any attribute in the chain starts with a '_'.\n\n    If the optional allow_dotted_names argument is false, dots are not\n    supported and this function operates similar to getattr(obj, attr).\n    "),
               ('SimpleXMLRPCServer.list_public_methods',
                ['obj'],
                'Returns a list of attribute strings, found in the specified\n    object, which represent callable attributes'),
               ('SimpleXMLRPCServer.remove_duplicates',
                ['lst'],
                'remove_duplicates([2,2,2,1,3,3]) => [3,1,2]\n\n    Returns a copy of a list without duplicates. Every list\n    item must be hashable and the order of the items in the\n    resulting list is not defined.\n    '),
               ('base64._translate', ['s', 'altchars'], ''),
               ('base64.b64encode',
                ['s', 'altchars=None'],
                "Encode a string using Base64.\n\n    s is the string to encode.  Optional altchars must be a string of at least\n    length 2 (additional characters are ignored) which specifies an\n    alternative alphabet for the '+' and '/' characters.  This allows an\n    application to e.g. generate url or filesystem safe Base64 strings.\n\n    The encoded string is returned.\n    "),
               ('base64.b64decode',
                ['s', 'altchars=None'],
                "Decode a Base64 encoded string.\n\n    s is the string to decode.  Optional altchars must be a string of at least\n    length 2 (additional characters are ignored) which specifies the\n    alternative alphabet used instead of the '+' and '/' characters.\n\n    The decoded string is returned.  A TypeError is raised if s were\n    incorrectly padded or if there are non-alphabet characters present in the\n    string.\n    "),
               ('base64.standard_b64encode',
                ['s'],
                'Encode a string using the standard Base64 alphabet.\n\n    s is the string to encode.  The encoded string is returned.\n    '),
               ('base64.standard_b64decode',
                ['s'],
                'Decode a string encoded with the standard Base64 alphabet.\n\n    s is the string to decode.  The decoded string is returned.  A TypeError\n    is raised if the string is incorrectly padded or if there are non-alphabet\n    characters present in the string.\n    '),
               ('base64.urlsafe_b64encode',
                ['s'],
                "Encode a string using a url-safe Base64 alphabet.\n\n    s is the string to encode.  The encoded string is returned.  The alphabet\n    uses '-' instead of '+' and '_' instead of '/'.\n    "),
               ('base64.urlsafe_b64decode',
                ['s'],
                "Decode a string encoded with the standard Base64 alphabet.\n\n    s is the string to decode.  The decoded string is returned.  A TypeError\n    is raised if the string is incorrectly padded or if there are non-alphabet\n    characters present in the string.\n\n    The alphabet uses '-' instead of '+' and '_' instead of '/'.\n    "),
               ('base64.b32encode',
                ['s'],
                'Encode a string using Base32.\n\n    s is the string to encode.  The encoded string is returned.\n    '),
               ('base64.b32decode',
                ['s', 'casefold=False', 'map01=None'],
                'Decode a Base32 encoded string.\n\n    s is the string to decode.  Optional casefold is a flag specifying whether\n    a lowercase alphabet is acceptable as input.  For security purposes, the\n    default is False.\n\n    RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O\n    (oh), and for optional mapping of the digit 1 (one) to either the letter I\n    (eye) or letter L (el).  The optional argument map01 when not None,\n    specifies which letter the digit 1 should be mapped to (when map01 is not\n    None, the digit 0 is always mapped to the letter O).  For security\n    purposes the default is None, so that 0 and 1 are not allowed in the\n    input.\n\n    The decoded string is returned.  A TypeError is raised if s were\n    incorrectly padded or if there are non-alphabet characters present in the\n    string.\n    '),
               ('base64.b16encode',
                ['s'],
                'Encode a string using Base16.\n\n    s is the string to encode.  The encoded string is returned.\n    '),
               ('base64.b16decode',
                ['s', 'casefold=False'],
                'Decode a Base16 encoded string.\n\n    s is the string to decode.  Optional casefold is a flag specifying whether\n    a lowercase alphabet is acceptable as input.  For security purposes, the\n    default is False.\n\n    The decoded string is returned.  A TypeError is raised if s were\n    incorrectly padded or if there are non-alphabet characters present in the\n    string.\n    '),
               ('base64.encode', ['input', 'output'], 'Encode a file.'),
               ('base64.decode', ['input', 'output'], 'Decode a file.'),
               ('base64.encodestring', ['s'], 'Encode a string.'),
               ('base64.decodestring', ['s'], 'Decode a string.'),
               ('base64.test', [], 'Small test program'),
               ('base64.test1', [], ''),
               ('asyncore.read', ['obj'], ''),
               ('asyncore.write', ['obj'], ''),
               ('asyncore._exception', ['obj'], ''),
               ('asyncore.readwrite', ['obj', 'flags'], ''),
               ('asyncore.poll', ['timeout=0.0', 'map=None'], ''),
               ('asyncore.poll2', ['timeout=0.0', 'map=None'], ''),
               ('asyncore.loop',
                ['timeout=30.0', 'use_poll=False', 'map=None', 'count=None'],
                ''),
               ('asyncore.compact_traceback', [], ''),
               ('asyncore.close_all', ['map=None'], ''),
               ('sunaudio.get_long_be', ['s'], 'Convert a 4-char value to integer.'),
               ('sunaudio.gethdr', ['fp'], 'Read a sound header from an open file.'),
               ('sunaudio.printhdr',
                ['file'],
                'Read and print the sound header of a named file.'),
               ('imghdr.what', ['file', 'h=None'], ''),
               ('imghdr.test_rgb', ['h', 'f'], 'SGI image library'),
               ('imghdr.test_gif', ['h', 'f'], "GIF ('87 and '89 variants)"),
               ('imghdr.test_pbm', ['h', 'f'], 'PBM (portable bitmap)'),
               ('imghdr.test_pgm', ['h', 'f'], 'PGM (portable graymap)'),
               ('imghdr.test_ppm', ['h', 'f'], 'PPM (portable pixmap)'),
               ('imghdr.test_tiff', ['h', 'f'], 'TIFF (can be in Motorola or Intel byte order)'),
               ('imghdr.test_rast', ['h', 'f'], 'Sun raster file'),
               ('imghdr.test_xbm', ['h', 'f'], 'X bitmap (X10 or X11)'),
               ('imghdr.test_jpeg', ['h', 'f'], 'JPEG data in JFIF format'),
               ('imghdr.test_exif', ['h', 'f'], 'JPEG data in Exif format'),
               ('imghdr.test_bmp', ['h', 'f'], ''),
               ('imghdr.test_png', ['h', 'f'], ''),
               ('imghdr.test', [], ''),
               ('imghdr.testall', ['list', 'recursive', 'toplevel'], ''),
               ('sunau._read_u32', ['file'], ''),
               ('sunau._write_u32', ['file', 'x'], ''),
               ('sunau.open', ['f', 'mode=None'], ''),
               ('anydbm.open', ['file', "flag='r'", 'mode=438'], ''),
               ('ctypes._endian._other_endian',
                ['typ'],
                "Return the type with the 'other' byte order.  Simple types like\n    c_int and so on already have __ctype_be__ and __ctype_le__\n    attributes which contain the types, for more complicated types\n    only arrays are supported.\n    "),
               ('ctypes.create_string_buffer',
                ['init', 'size=None'],
                'create_string_buffer(aString) -> character array\n    create_string_buffer(anInteger) -> character array\n    create_string_buffer(aString, anInteger) -> character array\n    '),
               ('ctypes.c_buffer', ['init', 'size=None'], ''),
               ('ctypes.CFUNCTYPE',
                ['restype', '*argtypes'],
                'CFUNCTYPE(restype, *argtypes) -> function prototype.\n\n    restype: the result type\n    argtypes: a sequence specifying the argument types\n\n    The function prototype can be called in different ways to create a\n    callable object:\n\n    prototype(integer address) -> foreign function\n    prototype(callable) -> create and return a C callable function from callable\n    prototype(integer index, method name[, paramflags]) -> foreign function calling a COM method\n    prototype((ordinal number, dll object)[, paramflags]) -> foreign function exported by ordinal\n    prototype((function name, dll object)[, paramflags]) -> foreign function exported by name\n    '),
               ('ctypes.WINFUNCTYPE', ['restype', '*argtypes'], ''),
               ('ctypes._check_size', ['typ', 'typecode=None'], ''),
               ('ctypes.POINTER', ['cls'], ''),
               ('ctypes.create_unicode_buffer',
                ['init', 'size=None'],
                'create_unicode_buffer(aString) -> character array\n        create_unicode_buffer(anInteger) -> character array\n        create_unicode_buffer(aString, anInteger) -> character array\n        '),
               ('ctypes.SetPointerType', ['pointer', 'cls'], ''),
               ('ctypes.pointer', ['inst'], ''),
               ('ctypes.ARRAY', ['typ', 'len'], ''),
               ('ctypes.WinError', ['code=None', 'descr=None'], ''),
               ('ctypes.PYFUNCTYPE', ['restype', '*argtypes'], ''),
               ('ctypes.cast', ['obj', 'typ'], ''),
               ('ctypes.string_at',
                ['ptr', 'size=-1'],
                'string_at(addr[, size]) -> string\n\n    Return the string at addr.'),
               ('ctypes.wstring_at',
                ['ptr', 'size=-1'],
                'wstring_at(addr[, size]) -> string\n\n        Return the string at addr.'),
               ('ctypes.DllGetClassObject', ['rclsid', 'riid', 'ppv'], ''),
               ('ctypes.DllCanUnloadNow', [], ''),
               ('ctypes.wintypes.RGB', ['red', 'green', 'blue'], ''),
               ('ctypes.util.find_library', ['name'], ''),
               ('ctypes.util.find_library', ['name'], ''),
               ('ctypes.util.find_library', ['name'], ''),
               ('ctypes.util._findLib_gcc', ['name'], ''),
               ('ctypes.util._get_soname', ['f'], ''),
               ('ctypes.util._get_soname', ['f'], ''),
               ('ctypes.util._num_version', ['libname'], ''),
               ('ctypes.util.find_library', ['name'], ''),
               ('ctypes.util._findLib_ldconfig', ['name'], ''),
               ('ctypes.util.find_library', ['name'], ''),
               ('ctypes.util.test', [], ''),
               ('ctypes.macholib.dyld.ensure_utf8',
                ['s'],
                'Not all of PyObjC and Python understand unicode paths very well yet'),
               ('ctypes.macholib.dyld.dyld_env', ['env', 'var'], ''),
               ('ctypes.macholib.dyld.dyld_image_suffix', ['env=None'], ''),
               ('ctypes.macholib.dyld.dyld_framework_path', ['env=None'], ''),
               ('ctypes.macholib.dyld.dyld_library_path', ['env=None'], ''),
               ('ctypes.macholib.dyld.dyld_fallback_framework_path', ['env=None'], ''),
               ('ctypes.macholib.dyld.dyld_fallback_library_path', ['env=None'], ''),
               ('ctypes.macholib.dyld.dyld_image_suffix_search',
                ['iterator', 'env=None'],
                'For a potential path iterator, add DYLD_IMAGE_SUFFIX semantics'),
               ('ctypes.macholib.dyld.dyld_override_search', ['name', 'env=None'], ''),
               ('ctypes.macholib.dyld.dyld_executable_path_search',
                ['name', 'executable_path=None'],
                ''),
               ('ctypes.macholib.dyld.dyld_default_search', ['name', 'env=None'], ''),
               ('ctypes.macholib.dyld.dyld_find',
                ['name', 'executable_path=None', 'env=None'],
                '\n    Find a library or framework using dyld semantics\n    '),
               ('ctypes.macholib.dyld.framework_find',
                ['fn', 'executable_path=None', 'env=None'],
                '\n    Find a framework using dyld semantics in a very loose manner.\n\n    Will take input such as:\n        Python\n        Python.framework\n        Python.framework/Versions/Current\n    '),
               ('ctypes.macholib.dyld.test_dyld_find', [], ''),
               ('ctypes.macholib.dylib.dylib_info',
                ['filename'],
                "\n    A dylib name can take one of the following four forms:\n        Location/Name.SomeVersion_Suffix.dylib\n        Location/Name.SomeVersion.dylib\n        Location/Name_Suffix.dylib\n        Location/Name.dylib\n\n    returns None if not found or a mapping equivalent to:\n        dict(\n            location='Location',\n            name='Name.SomeVersion_Suffix.dylib',\n            shortname='Name',\n            version='SomeVersion',\n            suffix='Suffix',\n        )\n\n    Note that SomeVersion and Suffix are optional and may be None\n    if not present.\n    "),
               ('ctypes.macholib.dylib.test_dylib_info', [], ''),
               ('ctypes.macholib.framework.framework_info',
                ['filename'],
                "\n    A framework name can take one of the following four forms:\n        Location/Name.framework/Versions/SomeVersion/Name_Suffix\n        Location/Name.framework/Versions/SomeVersion/Name\n        Location/Name.framework/Name_Suffix\n        Location/Name.framework/Name\n\n    returns None if not found, or a mapping equivalent to:\n        dict(\n            location='Location',\n            name='Name.framework/Versions/SomeVersion/Name_Suffix',\n            shortname='Name',\n            version='SomeVersion',\n            suffix='Suffix',\n        )\n\n    Note that SomeVersion and Suffix are optional and may be None\n    if not present\n    "),
               ('ctypes.macholib.framework.test_framework_info', [], ''),
               ('distutils.spawn.spawn',
                ['cmd', 'search_path=1', 'verbose=0', 'dry_run=0'],
                "Run another program, specified as a command list 'cmd', in a new\n    process.  'cmd' is just the argument list for the new process, ie.\n    cmd[0] is the program to run and cmd[1:] are the rest of its arguments.\n    There is no way to run a program with a name different from that of its\n    executable.\n\n    If 'search_path' is true (the default), the system's executable\n    search path will be used to find the program; otherwise, cmd[0]\n    must be the exact path to the executable.  If 'dry_run' is true,\n    the command will not actually be run.\n\n    Raise DistutilsExecError if running the program fails in any way; just\n    return on success.\n    "),
               ('distutils.spawn._nt_quote_args',
                ['args'],
                'Quote command-line arguments for DOS/Windows conventions: just\n    wraps every argument which contains blanks in double quotes, and\n    returns a new argument list.\n    '),
               ('distutils.spawn._spawn_nt',
                ['cmd', 'search_path=1', 'verbose=0', 'dry_run=0'],
                ''),
               ('distutils.spawn._spawn_os2',
                ['cmd', 'search_path=1', 'verbose=0', 'dry_run=0'],
                ''),
               ('distutils.spawn._spawn_posix',
                ['cmd', 'search_path=1', 'verbose=0', 'dry_run=0'],
                ''),
               ('distutils.spawn.find_executable',
                ['executable', 'path=None'],
                "Try to find 'executable' in the directories listed in 'path' (a\n    string listing directories separated by 'os.pathsep'; defaults to\n    os.environ['PATH']).  Returns the complete filename or None if not\n    found.\n    "),
               ('distutils.core.gen_usage', ['script_name'], ''),
               ('distutils.core.setup',
                ['**attrs'],
                "The gateway to the Distutils: do everything your setup script needs\n    to do, in a highly flexible and user-driven way.  Briefly: create a\n    Distribution instance; find and parse config files; parse the command\n    line; run each Distutils command found there, customized by the options\n    supplied to 'setup()' (as keyword arguments), in config files, and on\n    the command line.\n\n    The Distribution instance might be an instance of a class supplied via\n    the 'distclass' keyword argument to 'setup'; if no such class is\n    supplied, then the Distribution class (in dist.py) is instantiated.\n    All other arguments to 'setup' (except for 'cmdclass') are used to set\n    attributes of the Distribution instance.\n\n    The 'cmdclass' argument, if supplied, is a dictionary mapping command\n    names to command classes.  Each command encountered on the command line\n    will be turned into a command class, which is in turn instantiated; any\n    class found in 'cmdclass' is used in place of the default, which is\n    (for command 'foo_bar') class 'foo_bar' in module\n    'distutils.command.foo_bar'.  The command class must provide a\n    'user_options' attribute which is a list of option specifiers for\n    'distutils.fancy_getopt'.  Any command-line options between the current\n    and the next command are used to set attributes of the current command\n    object.\n\n    When the entire command-line has been successfully parsed, calls the\n    'run()' method on each command object in turn.  This method will be\n    driven entirely by the Distribution object (which each command object\n    has a reference to, thanks to its constructor), and the\n    command-specific options that became attributes of each command\n    object.\n    "),
               ('distutils.core.run_setup',
                ['script_name', 'script_args=None', "stop_after='run'"],
                "Run a setup script in a somewhat controlled environment, and\n    return the Distribution instance that drives things.  This is useful\n    if you need to find out the distribution meta-data (passed as\n    keyword args from 'script' to 'setup()', or the contents of the\n    config files or command-line.\n\n    'script_name' is a file that will be run with 'execfile()';\n    'sys.argv[0]' will be replaced with 'script' for the duration of the\n    call.  'script_args' is a list of strings; if supplied,\n    'sys.argv[1:]' will be replaced by 'script_args' for the duration of\n    the call.\n\n    'stop_after' tells 'setup()' when to stop processing; possible\n    values:\n      init\n        stop after the Distribution instance has been created and\n        populated with the keyword arguments to 'setup()'\n      config\n        stop after config files have been parsed (and their data\n        stored in the Distribution instance)\n      commandline\n        stop after the command-line ('sys.argv[1:]' or 'script_args')\n        have been parsed (and the data stored in the Distribution)\n      run [default]\n        stop after all commands have been run (the same as if 'setup()'\n        had been called in the usual way\n\n    Returns the Distribution instance, which provides all information\n    used to drive the Distutils.\n    "),
               ('distutils.text_file.test_input',
                ['count', 'description', 'file', 'expected_result'],
                ''),
               ('distutils.sysconfig.get_python_version',
                [],
                "Return a string containing the major and minor Python version,\n    leaving off the patchlevel.  Sample return values could be '1.5'\n    or '2.2'.\n    "),
               ('distutils.sysconfig.get_python_inc',
                ['plat_specific=0', 'prefix=None'],
                "Return the directory containing installed Python header files.\n\n    If 'plat_specific' is false (the default), this is the path to the\n    non-platform-specific header files, i.e. Python.h and so on;\n    otherwise, this is the path to platform-specific header files\n    (namely pyconfig.h).\n\n    If 'prefix' is supplied, use it instead of sys.prefix or\n    sys.exec_prefix -- i.e., ignore 'plat_specific'.\n    "),
               ('distutils.sysconfig.get_python_lib',
                ['plat_specific=0', 'standard_lib=0', 'prefix=None'],
                "Return the directory containing the Python library (standard or\n    site additions).\n\n    If 'plat_specific' is true, return the directory containing\n    platform-specific modules, i.e. any module from a non-pure-Python\n    module distribution; otherwise, return the platform-shared library\n    directory.  If 'standard_lib' is true, return the directory\n    containing standard Python library modules; otherwise, return the\n    directory for site-specific modules.\n\n    If 'prefix' is supplied, use it instead of sys.prefix or\n    sys.exec_prefix -- i.e., ignore 'plat_specific'.\n    "),
               ('distutils.sysconfig.customize_compiler',
                ['compiler'],
                "Do any platform-specific customization of a CCompiler instance.\n\n    Mainly needed on Unix, so we can plug in the information that\n    varies across Unices and is stored in Python's Makefile.\n    "),
               ('distutils.sysconfig.get_config_h_filename',
                [],
                'Return full pathname of installed pyconfig.h file.'),
               ('distutils.sysconfig.get_makefile_filename',
                [],
                'Return full pathname of installed Makefile from the Python build.'),
               ('distutils.sysconfig.parse_config_h',
                ['fp', 'g=None'],
                'Parse a config.h-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    '),
               ('distutils.sysconfig.parse_makefile',
                ['fn', 'g=None'],
                'Parse a Makefile-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    '),
               ('distutils.sysconfig.expand_makefile_vars',
                ['s', 'vars'],
                'Expand Makefile-style variables -- "${foo}" or "$(foo)" -- in\n    \'string\' according to \'vars\' (a dictionary mapping variable names to\n    values).  Variables not present in \'vars\' are silently expanded to the\n    empty string.  The variable values in \'vars\' should not contain further\n    variable expansions; if \'vars\' is the output of \'parse_makefile()\',\n    you\'re fine.  Returns a variable-expanded version of \'s\'.\n    '),
               ('distutils.sysconfig._init_posix',
                [],
                'Initialize the module as appropriate for POSIX systems.'),
               ('distutils.sysconfig._init_nt',
                [],
                'Initialize the module as appropriate for NT'),
               ('distutils.sysconfig._init_mac',
                [],
                'Initialize the module as appropriate for Macintosh systems'),
               ('distutils.sysconfig._init_os2',
                [],
                'Initialize the module as appropriate for OS/2'),
               ('distutils.sysconfig.get_config_vars',
                ['*args'],
                "With no arguments, return a dictionary of all configuration\n    variables relevant for the current platform.  Generally this includes\n    everything needed to build extensions and install both pure modules and\n    extensions.  On Unix, this means every variable defined in Python's\n    installed Makefile; on Windows and Mac OS it's a much smaller set.\n\n    With arguments, return a list of values that result from looking up\n    each argument in the configuration variable dictionary.\n    "),
               ('distutils.sysconfig.get_config_var',
                ['name'],
                "Return the value of a single variable using the dictionary\n    returned by 'get_config_vars()'.  Equivalent to\n    get_config_vars().get(name)\n    "),
               ('distutils.extension.read_setup_file', ['filename'], ''),
               ('distutils.dist.fix_help_options',
                ['options'],
                "Convert a 4-tuple 'help_options' list as found in various command\n    classes to the 3-tuple form required by FancyGetopt.\n    "),
               ('distutils.versionpredicate.splitUp',
                ['pred'],
                'Parse a single version comparison.\n\n    Return (comparison string, StrictVersion)\n    '),
               ('distutils.versionpredicate.split_provision',
                ['value'],
                "Return the name and optional version number of a provision.\n\n    The version number, if given, will be returned as a `StrictVersion`\n    instance, otherwise it will be `None`.\n\n    >>> split_provision('mypkg')\n    ('mypkg', None)\n    >>> split_provision(' mypkg( 1.2 ) ')\n    ('mypkg', StrictVersion ('1.2'))\n    "),
               ('distutils.cygwinccompiler.check_config_h',
                [],
                'Check if the current Python installation (specifically, pyconfig.h)\n    appears amenable to building extensions with GCC.  Returns a tuple\n    (status, details), where \'status\' is one of the following constants:\n      CONFIG_H_OK\n        all is well, go ahead and compile\n      CONFIG_H_NOTOK\n        doesn\'t look good\n      CONFIG_H_UNCERTAIN\n        not sure -- unable to read pyconfig.h\n    \'details\' is a human-readable string explaining the situation.\n\n    Note there are two ways to conclude "OK": either \'sys.version\' contains\n    the string "GCC" (implying that this Python was built with GCC), or the\n    installed "pyconfig.h" contains the string "__GNUC__".\n    '),
               ('distutils.cygwinccompiler.get_versions',
                [],
                ' Try to find out the versions of gcc, ld and dllwrap.\n        If not possible it returns None for it.\n    '),
               ('distutils.archive_util.make_tarball',
                ['base_name', 'base_dir', "compress='gzip'", 'verbose=0', 'dry_run=0'],
                'Create a (possibly compressed) tar file from all the files under\n    \'base_dir\'.  \'compress\' must be "gzip" (the default), "compress",\n    "bzip2", or None.  Both "tar" and the compression utility named by\n    \'compress\' must be on the default program search path, so this is\n    probably Unix-specific.  The output tar file will be named \'base_dir\' +\n    ".tar", possibly plus the appropriate compression extension (".gz",\n    ".bz2" or ".Z").  Return the output filename.\n    '),
               ('distutils.archive_util.make_zipfile',
                ['base_name', 'base_dir', 'verbose=0', 'dry_run=0'],
                'Create a zip file from all the files under \'base_dir\'.  The output\n    zip file will be named \'base_dir\' + ".zip".  Uses either the "zipfile"\n    Python module (if available) or the InfoZIP "zip" utility (if installed\n    and found on the default search path).  If neither tool is available,\n    raises DistutilsExecError.  Returns the name of the output zip file.\n    '),
               ('distutils.archive_util.check_archive_formats', ['formats'], ''),
               ('distutils.archive_util.make_archive',
                ['base_name',
                 'format',
                 'root_dir=None',
                 'base_dir=None',
                 'verbose=0',
                 'dry_run=0'],
                'Create an archive file (eg. zip or tar).  \'base_name\' is the name\n    of the file to create, minus any format-specific extension; \'format\'\n    is the archive format: one of "zip", "tar", "ztar", or "gztar".\n    \'root_dir\' is a directory that will be the root directory of the\n    archive; ie. we typically chdir into \'root_dir\' before creating the\n    archive.  \'base_dir\' is the directory where we start archiving from;\n    ie. \'base_dir\' will be the common prefix of all files and\n    directories in the archive.  \'root_dir\' and \'base_dir\' both default\n    to the current directory.  Returns the name of the archive file.\n    '),
               ('distutils.util.get_platform',
                [],
                "Return a string that identifies the current platform.  This is used\n    mainly to distinguish platform-specific build directories and\n    platform-specific built distributions.  Typically includes the OS name\n    and version and the architecture (as supplied by 'os.uname()'),\n    although the exact information included depends on the OS; eg. for IRIX\n    the architecture isn't particularly important (IRIX only runs on SGI\n    hardware), but for Linux the kernel version isn't particularly\n    important.\n\n    Examples of returned values:\n       linux-i586\n       linux-alpha (?)\n       solaris-2.6-sun4u\n       irix-5.3\n       irix64-6.2\n\n    For non-POSIX platforms, currently just returns 'sys.platform'.\n    "),
               ('distutils.util.convert_path',
                ['pathname'],
                "Return 'pathname' as a name that will work on the native filesystem,\n    i.e. split it on '/' and put it back together again using the current\n    directory separator.  Needed because filenames in the setup script are\n    always supplied in Unix style, and have to be converted to the local\n    convention before we can actually use them in the filesystem.  Raises\n    ValueError on non-Unix-ish systems if 'pathname' either starts or\n    ends with a slash.\n    "),
               ('distutils.util.change_root',
                ['new_root', 'pathname'],
                'Return \'pathname\' with \'new_root\' prepended.  If \'pathname\' is\n    relative, this is equivalent to "os.path.join(new_root,pathname)".\n    Otherwise, it requires making \'pathname\' relative and then joining the\n    two, which is tricky on DOS/Windows and Mac OS.\n    '),
               ('distutils.util.check_environ',
                [],
                "Ensure that 'os.environ' has all the environment variables we\n    guarantee that users can use in config files, command-line options,\n    etc.  Currently this includes:\n      HOME - user's home directory (Unix only)\n      PLAT - description of the current platform, including hardware\n             and OS (see 'get_platform()')\n    "),
               ('distutils.util.subst_vars',
                ['s', 'local_vars'],
                "Perform shell/Perl-style variable substitution on 'string'.  Every\n    occurrence of '$' followed by a name is considered a variable, and\n    variable is substituted by the value found in the 'local_vars'\n    dictionary, or in 'os.environ' if it's not in 'local_vars'.\n    'os.environ' is first checked/augmented to guarantee that it contains\n    certain values: see 'check_environ()'.  Raise ValueError for any\n    variables not found in either 'local_vars' or 'os.environ'.\n    "),
               ('distutils.util.grok_environment_error',
                ['exc', "prefix='error: '"],
                "Generate a useful error message from an EnvironmentError (IOError or\n    OSError) exception object.  Handles Python 1.5.1 and 1.5.2 styles, and\n    does what it can to deal with exception objects that don't have a\n    filename (which happens when the error is due to a two-file operation,\n    such as 'rename()' or 'link()'.  Returns the error message as a string\n    prefixed with 'prefix'.\n    "),
               ('distutils.util._init_regex', [], ''),
               ('distutils.util.split_quoted',
                ['s'],
                'Split a string up according to Unix shell-like rules for quotes and\n    backslashes.  In short: words are delimited by spaces, as long as those\n    spaces are not escaped by a backslash, or inside a quoted string.\n    Single and double quotes are equivalent, and the quote characters can\n    be backslash-escaped.  The backslash is stripped from any two-character\n    escape sequence, leaving only the escaped character.  The quote\n    characters are stripped from any quoted string.  Returns a list of\n    words.\n    '),
               ('distutils.util.execute',
                ['func', 'args', 'msg=None', 'verbose=0', 'dry_run=0'],
                'Perform some action that affects the outside world (eg.  by\n    writing to the filesystem).  Such actions are special because they\n    are disabled by the \'dry_run\' flag.  This method takes care of all\n    that bureaucracy for you; all you have to do is supply the\n    function to call and an argument tuple for it (to embody the\n    "external action" being performed), and an optional message to\n    print.\n    '),
               ('distutils.util.strtobool',
                ['val'],
                "Convert a string representation of truth to true (1) or false (0).\n\n    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\n    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n    'val' is anything else.\n    "),
               ('distutils.util.byte_compile',
                ['py_files',
                 'optimize=0',
                 'force=0',
                 'prefix=None',
                 'base_dir=None',
                 'verbose=1',
                 'dry_run=0',
                 'direct=None'],
                'Byte-compile a collection of Python source files to either .pyc\n    or .pyo files in the same directory.  \'py_files\' is a list of files\n    to compile; any files that don\'t end in ".py" are silently skipped.\n    \'optimize\' must be one of the following:\n      0 - don\'t optimize (generate .pyc)\n      1 - normal optimization (like "python -O")\n      2 - extra optimization (like "python -OO")\n    If \'force\' is true, all files are recompiled regardless of\n    timestamps.\n\n    The source filename encoded in each bytecode file defaults to the\n    filenames listed in \'py_files\'; you can modify these with \'prefix\' and\n    \'basedir\'.  \'prefix\' is a string that will be stripped off of each\n    source filename, and \'base_dir\' is a directory name that will be\n    prepended (after \'prefix\' is stripped).  You can supply either or both\n    (or neither) of \'prefix\' and \'base_dir\', as you wish.\n\n    If \'dry_run\' is true, doesn\'t actually do anything that would\n    affect the filesystem.\n\n    Byte-compilation is either done directly in this interpreter process\n    with the standard py_compile module, or indirectly by writing a\n    temporary script and executing it.  Normally, you should let\n    \'byte_compile()\' figure out to use direct compilation or not (see\n    the source for details).  The \'direct\' flag is used by the script\n    generated in indirect mode; unless you know what you\'re doing, leave\n    it set to None.\n    '),
               ('distutils.util.rfc822_escape',
                ['header'],
                'Return a version of the string escaped for inclusion in an\n    RFC-822 header, by ensuring there are 8 spaces space after each newline.\n    '),
               ('distutils.fancy_getopt.fancy_getopt',
                ['options', 'negative_opt', 'object', 'args'],
                ''),
               ('distutils.fancy_getopt.wrap_text',
                ['text', 'width'],
                "wrap_text(text : string, width : int) -> [string]\n\n    Split 'text' into multiple lines of no more than 'width' characters\n    each, and return the list of strings that results.\n    "),
               ('distutils.fancy_getopt.translate_longopt',
                ['opt'],
                'Convert a long option name to a valid Python identifier by\n    changing "-" to "_".\n    '),
               ('distutils.emxccompiler.check_config_h',
                [],
                'Check if the current Python installation (specifically, pyconfig.h)\n    appears amenable to building extensions with GCC.  Returns a tuple\n    (status, details), where \'status\' is one of the following constants:\n      CONFIG_H_OK\n        all is well, go ahead and compile\n      CONFIG_H_NOTOK\n        doesn\'t look good\n      CONFIG_H_UNCERTAIN\n        not sure -- unable to read pyconfig.h\n    \'details\' is a human-readable string explaining the situation.\n\n    Note there are two ways to conclude "OK": either \'sys.version\' contains\n    the string "GCC" (implying that this Python was built with GCC), or the\n    installed "pyconfig.h" contains the string "__GNUC__".\n    '),
               ('distutils.emxccompiler.get_versions',
                [],
                ' Try to find out the versions of gcc and ld.\n        If not possible it returns None for it.\n    '),
               ('distutils.file_util._copy_file_contents',
                ['src', 'dst', 'buffer_size=16*1024'],
                "Copy the file 'src' to 'dst'; both must be filenames.  Any error\n    opening either file, reading from 'src', or writing to 'dst', raises\n    DistutilsFileError.  Data is read/written in chunks of 'buffer_size'\n    bytes (default 16k).  No attempt is made to handle anything apart from\n    regular files.\n    "),
               ('distutils.file_util.copy_file',
                ['src',
                 'dst',
                 'preserve_mode=1',
                 'preserve_times=1',
                 'update=0',
                 'link=None',
                 'verbose=0',
                 'dry_run=0'],
                'Copy a file \'src\' to \'dst\'.  If \'dst\' is a directory, then \'src\' is\n    copied there with the same name; otherwise, it must be a filename.  (If\n    the file exists, it will be ruthlessly clobbered.)  If \'preserve_mode\'\n    is true (the default), the file\'s mode (type and permission bits, or\n    whatever is analogous on the current platform) is copied.  If\n    \'preserve_times\' is true (the default), the last-modified and\n    last-access times are copied as well.  If \'update\' is true, \'src\' will\n    only be copied if \'dst\' does not exist, or if \'dst\' does exist but is\n    older than \'src\'.\n\n    \'link\' allows you to make hard links (os.link) or symbolic links\n    (os.symlink) instead of copying: set it to "hard" or "sym"; if it is\n    None (the default), files are copied.  Don\'t set \'link\' on systems that\n    don\'t support it: \'copy_file()\' doesn\'t check if hard or symbolic\n    linking is available.\n\n    Under Mac OS, uses the native file copy function in macostools; on\n    other systems, uses \'_copy_file_contents()\' to copy file contents.\n\n    Return a tuple (dest_name, copied): \'dest_name\' is the actual name of\n    the output file, and \'copied\' is true if the file was copied (or would\n    have been copied, if \'dry_run\' true).\n    '),
               ('distutils.file_util.move_file',
                ['src', 'dst', 'verbose=0', 'dry_run=0'],
                "Move a file 'src' to 'dst'.  If 'dst' is a directory, the file will\n    be moved into it with the same name; otherwise, 'src' is just renamed\n    to 'dst'.  Return the new full name of the file.\n\n    Handles cross-device moves on Unix using 'copy_file()'.  What about\n    other systems???\n    "),
               ('distutils.file_util.write_file',
                ['filename', 'contents'],
                "Create a file with the specified name and write 'contents' (a\n    sequence of strings without line terminators) to it.\n    "),
               ('distutils.dir_util.mkpath',
                ['name', 'mode=511', 'verbose=0', 'dry_run=0'],
                "Create a directory and any missing ancestor directories.  If the\n       directory already exists (or if 'name' is the empty string, which\n       means the current directory, which of course exists), then do\n       nothing.  Raise DistutilsFileError if unable to create some\n       directory along the way (eg. some sub-path exists, but is a file\n       rather than a directory).  If 'verbose' is true, print a one-line\n       summary of each mkdir to stdout.  Return the list of directories\n       actually created."),
               ('distutils.dir_util.create_tree',
                ['base_dir', 'files', 'mode=511', 'verbose=0', 'dry_run=0'],
                "Create all the empty directories under 'base_dir' needed to\n       put 'files' there.  'base_dir' is just the a name of a directory\n       which doesn't necessarily exist yet; 'files' is a list of filenames\n       to be interpreted relative to 'base_dir'.  'base_dir' + the\n       directory portion of every file in 'files' will be created if it\n       doesn't already exist.  'mode', 'verbose' and 'dry_run' flags are as\n       for 'mkpath()'."),
               ('distutils.dir_util.copy_tree',
                ['src',
                 'dst',
                 'preserve_mode=1',
                 'preserve_times=1',
                 'preserve_symlinks=0',
                 'update=0',
                 'verbose=0',
                 'dry_run=0'],
                "Copy an entire directory tree 'src' to a new location 'dst'.  Both\n       'src' and 'dst' must be directory names.  If 'src' is not a\n       directory, raise DistutilsFileError.  If 'dst' does not exist, it is\n       created with 'mkpath()'.  The end result of the copy is that every\n       file in 'src' is copied to 'dst', and directories under 'src' are\n       recursively copied to 'dst'.  Return the list of files that were\n       copied or might have been copied, using their output name.  The\n       return value is unaffected by 'update' or 'dry_run': it is simply\n       the list of all files under 'src', with the names changed to be\n       under 'dst'.\n\n       'preserve_mode' and 'preserve_times' are the same as for\n       'copy_file'; note that they only apply to regular files, not to\n       directories.  If 'preserve_symlinks' is true, symlinks will be\n       copied as symlinks (on platforms that support them!); otherwise\n       (the default), the destination of the symlink will be copied.\n       'update' and 'verbose' are the same as for 'copy_file'."),
               ('distutils.dir_util._build_cmdtuple', ['path', 'cmdtuples'], ''),
               ('distutils.dir_util.remove_tree',
                ['directory', 'verbose=0', 'dry_run=0'],
                "Recursively remove an entire directory tree.  Any errors are ignored\n    (apart from being reported to stdout if 'verbose' is true).\n    "),
               ('distutils.dir_util.ensure_relative',
                ['path'],
                "Take the full path 'path', and make it a relative path so\n    it can be the second argument to os.path.join().\n    "),
               ('distutils.filelist.findall',
                ['dir=os.curdir'],
                "Find all files under 'dir' and return the list of full filenames\n    (relative to 'dir').\n    "),
               ('distutils.filelist.glob_to_re',
                ['pattern'],
                'Translate a shell-like glob pattern to a regular expression; return\n    a string containing the regex.  Differs from \'fnmatch.translate()\' in\n    that \'*\' does not match "special characters" (which are\n    platform-specific).\n    '),
               ('distutils.filelist.translate_pattern',
                ['pattern', 'anchor=1', 'prefix=None', 'is_regex=0'],
                "Translate a shell-like wildcard pattern to a compiled regular\n    expression.  Return the compiled regex.  If 'is_regex' true,\n    then 'pattern' is directly compiled to a regex (if it's a string)\n    or just returned as-is (assumes it's a regex object).\n    "),
               ('distutils.unixccompiler._darwin_compiler_fixup',
                ['compiler_so', 'cc_args'],
                "\n    This function will strip '-isysroot PATH' and '-arch ARCH' from the\n    compile flags if the user has specified one them in extra_compile_flags.\n\n    This is needed because '-arch ARCH' adds another architecture to the\n    build, without a way to remove an architecture. Furthermore GCC will\n    barf if multiple '-isysroot' arguments are present.\n    "),
               ('distutils.ccompiler.get_default_compiler',
                ['osname=None', 'platform=None'],
                ' Determine the default compiler to use for the given platform.\n\n        osname should be one of the standard Python OS names (i.e. the\n        ones returned by os.name) and platform the common value\n        returned by sys.platform for the platform in question.\n\n        The default values are os.name and sys.platform in case the\n        parameters are not given.\n\n    '),
               ('distutils.ccompiler.show_compilers',
                [],
                'Print list of available compilers (used by the "--help-compiler"\n    options to "build", "build_ext", "build_clib").\n    '),
               ('distutils.ccompiler.new_compiler',
                ['plat=None', 'compiler=None', 'verbose=0', 'dry_run=0', 'force=0'],
                'Generate an instance of some CCompiler subclass for the supplied\n    platform/compiler combination.  \'plat\' defaults to \'os.name\'\n    (eg. \'posix\', \'nt\'), and \'compiler\' defaults to the default compiler\n    for that platform.  Currently only \'posix\' and \'nt\' are supported, and\n    the default compilers are "traditional Unix interface" (UnixCCompiler\n    class) and Visual C++ (MSVCCompiler class).  Note that it\'s perfectly\n    possible to ask for a Unix compiler object under Windows, and a\n    Microsoft compiler object under Unix -- if you supply a value for\n    \'compiler\', \'plat\' is ignored.\n    '),
               ('distutils.ccompiler.gen_preprocess_options',
                ['macros', 'include_dirs'],
                "Generate C pre-processor options (-D, -U, -I) as used by at least\n    two types of compilers: the typical Unix compiler and Visual C++.\n    'macros' is the usual thing, a list of 1- or 2-tuples, where (name,)\n    means undefine (-U) macro 'name', and (name,value) means define (-D)\n    macro 'name' to 'value'.  'include_dirs' is just a list of directory\n    names to be added to the header file search path (-I).  Returns a list\n    of command-line options suitable for either Unix compilers or Visual\n    C++.\n    "),
               ('distutils.ccompiler.gen_lib_options',
                ['compiler', 'library_dirs', 'runtime_library_dirs', 'libraries'],
                "Generate linker options for searching library directories and\n    linking with specific libraries.  'libraries' and 'library_dirs' are,\n    respectively, lists of library names (not filenames!) and search\n    directories.  Returns a list of command-line options suitable for use\n    with some compiler (depending on the two format strings passed in).\n    "),
               ('distutils.msvccompiler.read_keys',
                ['base', 'key'],
                'Return list of registry keys.'),
               ('distutils.msvccompiler.read_values',
                ['base', 'key'],
                'Return dict of registry keys and values.\n\n    All names are converted to lowercase.\n    '),
               ('distutils.msvccompiler.convert_mbcs', ['s'], ''),
               ('distutils.msvccompiler.get_build_version',
                [],
                'Return the version of MSVC that was used to build Python.\n\n    For Python 2.3 and up, the version number is included in\n    sys.version.  For earlier versions, assume the compiler is MSVC 6.\n    '),
               ('distutils.msvccompiler.get_build_architecture',
                [],
                'Return the processor architecture.\n\n    Possible results are "Intel", "Itanium", or "AMD64".\n    '),
               ('distutils.msvccompiler.normalize_and_reduce_paths',
                ['paths'],
                'Return a list of normalized paths with duplicates removed.\n\n    The current order of paths is maintained.\n    '),
               ('distutils.log.set_threshold', ['level'], ''),
               ('distutils.log.set_verbosity', ['v'], ''),
               ('distutils.dep_util.newer',
                ['source', 'target'],
                "Return true if 'source' exists and is more recently modified than\n    'target', or if 'source' exists and 'target' doesn't.  Return false if\n    both exist and 'target' is the same age or younger than 'source'.\n    Raise DistutilsFileError if 'source' does not exist.\n    "),
               ('distutils.dep_util.newer_pairwise',
                ['sources', 'targets'],
                "Walk two filename lists in parallel, testing if each source is newer\n    than its corresponding target.  Return a pair of lists (sources,\n    targets) where source is newer than target, according to the semantics\n    of 'newer()'.\n    "),
               ('distutils.dep_util.newer_group',
                ['sources', 'target', "missing='error'"],
                'Return true if \'target\' is out-of-date with respect to any file\n    listed in \'sources\'.  In other words, if \'target\' exists and is newer\n    than every file in \'sources\', return false; otherwise return true.\n    \'missing\' controls what we do when a source file is missing; the\n    default ("error") is to blow up with an OSError from inside \'stat()\';\n    if it is "ignore", we silently drop any missing source files; if it is\n    "newer", any missing source files make us assume that \'target\' is\n    out-of-date (this is handy in "dry-run" mode: it\'ll make you pretend to\n    carry out commands that wouldn\'t work because inputs are missing, but\n    that doesn\'t matter because you\'re not actually going to run the\n    commands).\n    '),
               ('distutils.command.build_ext.show_compilers', [], ''),
               ('distutils.command.build.show_compilers', [], ''),
               ('distutils.command.build_clib.show_compilers', [], ''),
               ('distutils.command.bdist.show_formats',
                [],
                'Print list of available formats (arguments to "--format" option).\n    '),
               ('distutils.command.install_egg_info.safe_name',
                ['name'],
                "Convert an arbitrary string to a standard distribution name\n\n    Any runs of non-alphanumeric/. characters are replaced with a single '-'.\n    "),
               ('distutils.command.install_egg_info.safe_version',
                ['version'],
                'Convert an arbitrary string to a standard version string\n\n    Spaces become dots, and all other non-alphanumeric characters become\n    dashes, with runs of multiple dashes condensed to a single dash.\n    '),
               ('distutils.command.install_egg_info.to_filename',
                ['name'],
                "Convert a project or version name to its filename-escaped form\n\n    Any '-' characters are currently replaced with '_'.\n    "),
               ('distutils.command.config.dump_file', ['filename', 'head=None'], ''),
               ('distutils.command.sdist.show_formats',
                [],
                'Print all possible values for the \'formats\' option (used by\n    the "--help-formats" command-line option).\n    '),
               ('distutils.tests.test_suite', [], ''),
               ('distutils.tests.test_dist.test_suite', [], ''),
               ('distutils.tests.test_versionpredicate.test_suite', [], ''),
               ('distutils.tests.test_install.test_suite', [], ''),
               ('distutils.tests.test_install_scripts.test_suite', [], ''),
               ('distutils.tests.test_build_scripts.test_suite', [], ''),
               ('distutils.tests.test_build_py.test_suite', [], ''),
               ('bsddb.hashopen',
                ['file',
                 "flag='c'",
                 'mode=438',
                 'pgsize=None',
                 'ffactor=None',
                 'nelem=None',
                 'cachesize=None',
                 'lorder=None',
                 'hflags=0'],
                ''),
               ('bsddb.btopen',
                ['file',
                 "flag='c'",
                 'mode=438',
                 'btflags=0',
                 'cachesize=None',
                 'maxkeypage=None',
                 'minkeypage=None',
                 'pgsize=None',
                 'lorder=None'],
                ''),
               ('bsddb.rnopen',
                ['file',
                 "flag='c'",
                 'mode=438',
                 'rnflags=0',
                 'cachesize=None',
                 'pgsize=None',
                 'lorder=None',
                 'rlen=None',
                 'delim=None',
                 'source=None',
                 'pad=None'],
                ''),
               ('bsddb._openDBEnv', ['cachesize'], ''),
               ('bsddb._checkflag', ['flag', 'file'], ''),
               ('bsddb.dbtables._columns_key', ['table'], ''),
               ('bsddb.dbtables._data_key', ['table', 'col', 'rowid'], ''),
               ('bsddb.dbtables._search_col_data_key', ['table', 'col'], ''),
               ('bsddb.dbtables._search_all_data_key', ['table'], ''),
               ('bsddb.dbtables._rowid_key', ['table', 'rowid'], ''),
               ('bsddb.dbtables._search_rowid_key', ['table'], ''),
               ('bsddb.dbtables.contains_metastrings',
                ['s'],
                'Verify that the given string does not contain any\n    metadata strings that might interfere with dbtables database operation.\n    '),
               ('bsddb.dbutils.DeadlockWrap',
                ['function', '*_args', '**_kwargs'],
                'DeadlockWrap(function, *_args, **_kwargs) - automatically retries\n    function in case of a database deadlock.\n\n    This is a function intended to be used to wrap database calls such\n    that they perform retrys with exponentially backing off sleeps in\n    between when a DBLockDeadlockError exception is raised.\n\n    A \'max_retries\' parameter may optionally be passed to prevent it\n    from retrying forever (in which case the exception will be reraised).\n\n        d = DB(...)\n        d.open(...)\n        DeadlockWrap(d.put, "foo", data="bar")  # set key "foo" to "bar"\n    '),
               ('bsddb.dbshelve.open',
                ['filename',
                 'flags=db.DB_CREATE',
                 'mode=432',
                 'filetype=db.DB_HASH',
                 'dbenv=None',
                 'dbname=None'],
                '\n    A simple factory function for compatibility with the standard\n    shleve.py module.  It can be used like this, where key is a string\n    and data is a pickleable object:\n\n        from bsddb import dbshelve\n        db = dbshelve.open(filename)\n\n        db[key] = data\n\n        db.close()\n    '),
               ('TYPES.__PMT', ['args'], ''),
               ('TYPES.__P', ['args'], ''),
               ('TYPES.__PMT', ['args'], ''),
               ('TYPES.__STRING', ['x'], ''),
               ('TYPES.__ASMNAME', ['cname'], ''),
               ('TYPES.__attribute__', ['xyz'], ''),
               ('TYPES.__attribute_format_arg__', ['x'], ''),
               ('TYPES.__attribute_format_arg__', ['x'], ''),
               ('TYPES.__isleap', ['year'], ''),
               ('TYPES.__FD_ZERO', ['fdsp'], ''),
               ('TYPES.__FD_ZERO', ['set'], ''),
               ('TYPES.__sigmask', ['sig'], ''),
               ('TYPES.__sigemptyset', ['set'], ''),
               ('TYPES.__sigfillset', ['set'], ''),
               ('TYPES.__sigisemptyset', ['set'], ''),
               ('TYPES.__FDELT', ['d'], ''),
               ('TYPES.FD_ZERO', ['fdsetp'], ''),
               ('TYPES.major', ['dev'], ''),
               ('TYPES.minor', ['dev'], ''),
               ('TYPES.major', ['dev'], ''),
               ('TYPES.minor', ['dev'], ''),
               ('TYPES.major', ['dev'], ''),
               ('TYPES.minor', ['dev'], ''),
               ('IN.__PMT', ['args'], ''),
               ('IN.__P', ['args'], ''),
               ('IN.__PMT', ['args'], ''),
               ('IN.__STRING', ['x'], ''),
               ('IN.__ASMNAME', ['cname'], ''),
               ('IN.__attribute__', ['xyz'], ''),
               ('IN.__attribute_format_arg__', ['x'], ''),
               ('IN.__attribute_format_arg__', ['x'], ''),
               ('IN.__INT64_C', ['c'], ''),
               ('IN.__UINT64_C', ['c'], ''),
               ('IN.__INT64_C', ['c'], ''),
               ('IN.__UINT64_C', ['c'], ''),
               ('IN.INT8_C', ['c'], ''),
               ('IN.INT16_C', ['c'], ''),
               ('IN.INT32_C', ['c'], ''),
               ('IN.INT64_C', ['c'], ''),
               ('IN.INT64_C', ['c'], ''),
               ('IN.UINT8_C', ['c'], ''),
               ('IN.UINT16_C', ['c'], ''),
               ('IN.UINT32_C', ['c'], ''),
               ('IN.UINT64_C', ['c'], ''),
               ('IN.UINT64_C', ['c'], ''),
               ('IN.INTMAX_C', ['c'], ''),
               ('IN.UINTMAX_C', ['c'], ''),
               ('IN.INTMAX_C', ['c'], ''),
               ('IN.UINTMAX_C', ['c'], ''),
               ('IN.IN_CLASSA', ['a'], ''),
               ('IN.IN_CLASSB', ['a'], ''),
               ('IN.IN_CLASSC', ['a'], ''),
               ('IN.IN_CLASSD', ['a'], ''),
               ('IN.IN_MULTICAST', ['a'], ''),
               ('IN.IN_EXPERIMENTAL', ['a'], ''),
               ('IN.IN_BADCLASS', ['a'], ''),
               ('IN.__SOCKADDR_COMMON', ['sa_prefix'], ''),
               ('IN.CMSG_FIRSTHDR', ['mhdr'], ''),
               ('IN.__bswap_constant_16', ['x'], ''),
               ('IN.__bswap_16', ['x'], ''),
               ('IN.__bswap_16', ['x'], ''),
               ('IN.__bswap_constant_32', ['x'], ''),
               ('IN.__bswap_32', ['x'], ''),
               ('IN.__bswap_32', ['x'], ''),
               ('IN.__bswap_32', ['x'], ''),
               ('IN.__bswap_constant_64', ['x'], ''),
               ('IN.__bswap_64', ['x'], ''),
               ('IN.ntohl', ['x'], ''),
               ('IN.ntohs', ['x'], ''),
               ('IN.htonl', ['x'], ''),
               ('IN.htons', ['x'], ''),
               ('IN.ntohl', ['x'], ''),
               ('IN.ntohs', ['x'], ''),
               ('IN.htonl', ['x'], ''),
               ('IN.htons', ['x'], ''),
               ('IN.IN6_IS_ADDR_UNSPECIFIED', ['a'], ''),
               ('IN.IN6_IS_ADDR_LOOPBACK', ['a'], ''),
               ('IN.IN6_IS_ADDR_LINKLOCAL', ['a'], ''),
               ('IN.IN6_IS_ADDR_SITELOCAL', ['a'], ''),
               ('IN.IN6_IS_ADDR_V4MAPPED', ['a'], ''),
               ('IN.IN6_IS_ADDR_V4COMPAT', ['a'], ''),
               ('IN.IN6_IS_ADDR_MC_NODELOCAL', ['a'], ''),
               ('IN.IN6_IS_ADDR_MC_LINKLOCAL', ['a'], ''),
               ('IN.IN6_IS_ADDR_MC_SITELOCAL', ['a'], ''),
               ('IN.IN6_IS_ADDR_MC_ORGLOCAL', ['a'], ''),
               ('IN.IN6_IS_ADDR_MC_GLOBAL', ['a'], ''),
               ('DLFCN.__PMT', ['args'], ''),
               ('DLFCN.__P', ['args'], ''),
               ('DLFCN.__PMT', ['args'], ''),
               ('DLFCN.__STRING', ['x'], ''),
               ('DLFCN.__ASMNAME', ['cname'], ''),
               ('DLFCN.__attribute__', ['xyz'], ''),
               ('DLFCN.__attribute_format_arg__', ['x'], ''),
               ('DLFCN.__attribute_format_arg__', ['x'], ''),
               ('hotshot.stats.load', ['filename'], ''),
               ('hotshot.stats._brokentimer', [], ''),
               ('hotshot.stones.main', ['logfile'], ''),
               ('email.charset.add_charset',
                ['charset', 'header_enc=None', 'body_enc=None', 'output_charset=None'],
                "Add character set properties to the global registry.\n\n    charset is the input character set, and must be the canonical name of a\n    character set.\n\n    Optional header_enc and body_enc is either Charset.QP for\n    quoted-printable, Charset.BASE64 for base64 encoding, Charset.SHORTEST for\n    the shortest of qp or base64 encoding, or None for no encoding.  SHORTEST\n    is only valid for header_enc.  It describes how message headers and\n    message bodies in the input charset are to be encoded.  Default is no\n    encoding.\n\n    Optional output_charset is the character set that the output should be\n    in.  Conversions will proceed from input charset, to Unicode, to the\n    output charset when the method Charset.convert() is called.  The default\n    is to output in the same character set as the input.\n\n    Both input_charset and output_charset must have Unicode codec entries in\n    the module's charset-to-codec mapping; use add_codec(charset, codecname)\n    to add codecs the module does not know about.  See the codecs module's\n    documentation for more information.\n    "),
               ('email.charset.add_alias',
                ['alias', 'canonical'],
                "Add a character set alias.\n\n    alias is the alias name, e.g. latin-1\n    canonical is the character set's canonical name, e.g. iso-8859-1\n    "),
               ('email.charset.add_codec',
                ['charset', 'codecname'],
                'Add a codec that map characters in the given charset to/from Unicode.\n\n    charset is the canonical name of a character set.  codecname is the name\n    of a Python codec, as appropriate for the second argument to the unicode()\n    built-in, or to the encode() method of a Unicode string.\n    '),
               ('email.generator._is8bitstring', ['s'], ''),
               ('email.generator._make_boundary', ['text=None'], ''),
               ('email.message._formatparam',
                ['param', 'value=None', 'quote=True'],
                'Convenience function to format and return a key=value pair.\n\n    This will quote the value if needed or if quote is true.\n    '),
               ('email.message._parseparam', ['s'], ''),
               ('email.message._unquotevalue', ['value'], ''),
               ('email.encoders._qencode', ['s'], ''),
               ('email.encoders._bencode', ['s'], ''),
               ('email.encoders.encode_base64',
                ['msg'],
                "Encode the message's payload in Base64.\n\n    Also, add an appropriate Content-Transfer-Encoding header.\n    "),
               ('email.encoders.encode_quopri',
                ['msg'],
                "Encode the message's payload in quoted-printable.\n\n    Also, add an appropriate Content-Transfer-Encoding header.\n    "),
               ('email.encoders.encode_7or8bit',
                ['msg'],
                'Set the Content-Transfer-Encoding header to 7bit or 8bit.'),
               ('email.encoders.encode_noop', ['msg'], 'Do nothing.'),
               ('email.message_from_string',
                ['s', '*args', '**kws'],
                'Parse a string into a Message object model.\n\n    Optional _class and strict are passed to the Parser constructor.\n    '),
               ('email.message_from_file',
                ['fp', '*args', '**kws'],
                'Read a file and parse its contents into a Message object model.\n\n    Optional _class and strict are passed to the Parser constructor.\n    '),
               ('email.iterators.walk',
                ['self'],
                'Walk over the message tree, yielding each subpart.\n\n    The walk is performed in depth-first order.  This method is a\n    generator.\n    '),
               ('email.iterators.body_line_iterator',
                ['msg', 'decode=False'],
                'Iterate over the parts, returning string payloads line-by-line.\n\n    Optional decode (default False) is passed through to .get_payload().\n    '),
               ('email.iterators.typed_subpart_iterator',
                ['msg', "maintype='text'", 'subtype=None'],
                'Iterate over the subparts with a given MIME type.\n\n    Use `maintype\' as the main MIME type to match against; this defaults to\n    "text".  Optional `subtype\' is the MIME subtype to match against; if\n    omitted, only the main type is matched.\n    '),
               ('email.iterators._structure',
                ['msg', 'fp=None', 'level=0', 'include_default=False'],
                'A handy debugging aid'),
               ('email.header.decode_header',
                ['header'],
                'Decode a message header value without converting charset.\n\n    Returns a list of (decoded_string, charset) pairs containing each of the\n    decoded parts of the header.  Charset is None for non-encoded parts of the\n    header, otherwise a lower-case string containing the name of the character\n    set specified in the encoded string.\n\n    An email.Errors.HeaderParseError may be raised when certain decoding error\n    occurs (e.g. a base64 decoding exception).\n    '),
               ('email.header.make_header',
                ['decoded_seq', 'maxlinelen=None', 'header_name=None', "continuation_ws=' '"],
                'Create a Header from a sequence of pairs as returned by decode_header()\n\n    decode_header() takes a header value string and returns a sequence of\n    pairs of the format (decoded_string, charset) where charset is the string\n    name of the character set.\n\n    This function takes one of those sequence of pairs and returns a Header\n    instance.  Optional maxlinelen, header_name, and continuation_ws are as in\n    the Header constructor.\n    '),
               ('email.header._split_ascii',
                ['s', 'firstlen', 'restlen', 'continuation_ws', 'splitchars'],
                ''),
               ('email.header._binsplit', ['splittable', 'charset', 'maxlinelen'], ''),
               ('email._parseaddr.parsedate_tz',
                ['data'],
                'Convert a date string to a time tuple.\n\n    Accounts for military timezones.\n    '),
               ('email._parseaddr.parsedate', ['data'], 'Convert a time string to a time tuple.'),
               ('email._parseaddr.mktime_tz',
                ['data'],
                'Turn a 10-tuple as returned by parsedate_tz() into a UTC timestamp.'),
               ('email._parseaddr.quote', ['str'], 'Add quotes around a string.'),
               ('email.utils._identity', ['s'], ''),
               ('email.utils._bdecode', ['s'], ''),
               ('email.utils.fix_eols', ['s'], 'Replace all line-ending characters with \r\n.'),
               ('email.utils.formataddr',
                ['pair'],
                'The inverse of parseaddr(), this takes a 2-tuple of the form\n    (realname, email_address) and returns the string value suitable\n    for an RFC 2822 From, To or Cc header.\n\n    If the first element of pair is false, then the second element is\n    returned unmodified.\n    '),
               ('email.utils.getaddresses',
                ['fieldvalues'],
                'Return a list of (REALNAME, EMAIL) for each fieldvalue.'),
               ('email.utils.formatdate',
                ['timeval=None', 'localtime=False', 'usegmt=False'],
                'Returns a date string as specified by RFC 2822, e.g.:\n\n    Fri, 09 Nov 2001 01:08:47 -0000\n\n    Optional timeval if given is a floating point time value as accepted by\n    gmtime() and localtime(), otherwise the current time is used.\n\n    Optional localtime is a flag that when True, interprets timeval, and\n    returns a date relative to the local timezone instead of UTC, properly\n    taking daylight savings time into account.\n\n    Optional argument usegmt means that the timezone is written out as\n    an ascii string, not numeric one (so "GMT" instead of "+0000"). This\n    is needed for HTTP, and is only used when localtime==False.\n    '),
               ('email.utils.make_msgid',
                ['idstring=None'],
                'Returns a string suitable for RFC 2822 compliant Message-ID, e.g:\n\n    <20020201195627.33539.96671@nightshade.la.mastaler.com>\n\n    Optional idstring if given is a string used to strengthen the\n    uniqueness of the message id.\n    '),
               ('email.utils.parsedate', ['data'], ''),
               ('email.utils.parsedate_tz', ['data'], ''),
               ('email.utils.parseaddr', ['addr'], ''),
               ('email.utils.unquote', ['str'], 'Remove quotes from a string.'),
               ('email.utils.decode_rfc2231', ['s'], 'Decode string according to RFC 2231'),
               ('email.utils.encode_rfc2231',
                ['s', 'charset=None', 'language=None'],
                'Encode string according to RFC 2231.\n\n    If neither charset nor language is given, then s is returned as-is.  If\n    charset is given but not language, the string is encoded using the empty\n    string for language.\n    '),
               ('email.utils.decode_params',
                ['params'],
                'Decode parameters list according to RFC 2231.\n\n    params is a sequence of 2-tuples containing (param name, string value).\n    '),
               ('email.utils.collapse_rfc2231_value',
                ['value', "errors='replace'", "fallback_charset='us-ascii'"],
                ''),
               ('email.base64mime.base64_len',
                ['s'],
                'Return the length of s when it is encoded with base64.'),
               ('email.base64mime.header_encode',
                ['header', "charset='iso-8859-1'", 'keep_eols=False', 'maxlinelen=76', 'eol=NL'],
                'Encode a single header line with Base64 encoding in a given charset.\n\n    Defined in RFC 2045, this Base64 encoding is identical to normal Base64\n    encoding, except that each line must be intelligently wrapped (respecting\n    the Base64 encoding), and subsequent lines must start with a space.\n\n    charset names the character set to use to encode the header.  It defaults\n    to iso-8859-1.\n\n    End-of-line characters (\\r, \\n, \\r\\n) will be automatically converted\n    to the canonical email line separator \\r\\n unless the keep_eols\n    parameter is True (the default is False).\n\n    Each line of the header will be terminated in the value of eol, which\n    defaults to "\\n".  Set this to "\\r\\n" if you are using the result of\n    this function directly in email.\n\n    The resulting string will be in the form:\n\n    "=?charset?b?WW/5ciBtYXp66XLrIHf8eiBhIGhhbXBzdGHuciBBIFlv+XIgbWF6euly?=\\n\n      =?charset?b?6yB3/HogYSBoYW1wc3Rh7nIgQkMgWW/5ciBtYXp66XLrIHf8eiBhIGhh?="\n\n    with each line wrapped at, at most, maxlinelen characters (defaults to 76\n    characters).\n    '),
               ('email.base64mime.encode',
                ['s', 'binary=True', 'maxlinelen=76', 'eol=NL'],
                'Encode a string with base64.\n\n    Each line will be wrapped at, at most, maxlinelen characters (defaults to\n    76 characters).\n\n    If binary is False, end-of-line characters will be converted to the\n    canonical email end-of-line sequence \\r\\n.  Otherwise they will be left\n    verbatim (this is the default).\n\n    Each line of encoded text will end with eol, which defaults to "\\n".  Set\n    this to "\r\n" if you will be using the result of this function directly\n    in an email.\n    '),
               ('email.base64mime.decode',
                ['s', 'convert_eols=None'],
                'Decode a raw base64 string.\n\n    If convert_eols is set to a string value, all canonical email linefeeds,\n    e.g. "\\r\\n", in the decoded text will be converted to the value of\n    convert_eols.  os.linesep is a good choice for convert_eols if you are\n    decoding a text attachment.\n\n    This function does not parse a full MIME header value encoded with\n    base64 (like =?iso-8895-1?b?bmloISBuaWgh?=) -- please use the high\n    level email.Header class for that functionality.\n    '),
               ('email.quoprimime.header_quopri_check',
                ['c'],
                'Return True if the character should be escaped with header quopri.'),
               ('email.quoprimime.body_quopri_check',
                ['c'],
                'Return True if the character should be escaped with body quopri.'),
               ('email.quoprimime.header_quopri_len',
                ['s'],
                'Return the length of str when it is encoded with header quopri.'),
               ('email.quoprimime.body_quopri_len',
                ['str'],
                'Return the length of str when it is encoded with body quopri.'),
               ('email.quoprimime._max_append', ['L', 's', 'maxlen', "extra=''"], ''),
               ('email.quoprimime.unquote',
                ['s'],
                'Turn a string in the form =AB to the ASCII character with value 0xab'),
               ('email.quoprimime.quote', ['c'], ''),
               ('email.quoprimime.header_encode',
                ['header', "charset='iso-8859-1'", 'keep_eols=False', 'maxlinelen=76', 'eol=NL'],
                'Encode a single header line with quoted-printable (like) encoding.\n\n    Defined in RFC 2045, this `Q\' encoding is similar to quoted-printable, but\n    used specifically for email header fields to allow charsets with mostly 7\n    bit characters (and some 8 bit) to remain more or less readable in non-RFC\n    2045 aware mail clients.\n\n    charset names the character set to use to encode the header.  It defaults\n    to iso-8859-1.\n\n    The resulting string will be in the form:\n\n    "=?charset?q?I_f=E2rt_in_your_g=E8n=E8ral_dire=E7tion?\\n\n      =?charset?q?Silly_=C8nglish_Kn=EEghts?="\n\n    with each line wrapped safely at, at most, maxlinelen characters (defaults\n    to 76 characters).  If maxlinelen is None, the entire string is encoded in\n    one chunk with no splitting.\n\n    End-of-line characters (\\r, \\n, \\r\\n) will be automatically converted\n    to the canonical email line separator \\r\\n unless the keep_eols\n    parameter is True (the default is False).\n\n    Each line of the header will be terminated in the value of eol, which\n    defaults to "\\n".  Set this to "\\r\\n" if you are using the result of\n    this function directly in email.\n    '),
               ('email.quoprimime.encode',
                ['body', 'binary=False', 'maxlinelen=76', 'eol=NL'],
                'Encode with quoted-printable, wrapping at maxlinelen characters.\n\n    If binary is False (the default), end-of-line characters will be converted\n    to the canonical email end-of-line sequence \\r\\n.  Otherwise they will\n    be left verbatim.\n\n    Each line of encoded text will end with eol, which defaults to "\\n".  Set\n    this to "\\r\\n" if you will be using the result of this function directly\n    in an email.\n\n    Each line will be wrapped at, at most, maxlinelen characters (defaults to\n    76 characters).  Long lines will have the `soft linefeed\' quoted-printable\n    character "=" appended to them, so the decoded text will be identical to\n    the original text.\n    '),
               ('email.quoprimime.decode',
                ['encoded', 'eol=NL'],
                'Decode a quoted-printable string.\n\n    Lines are separated with eol, which defaults to \\n.\n    '),
               ('email.quoprimime._unquote_match',
                ['match'],
                'Turn a match in the form =AB to the ASCII character with value 0xab'),
               ('email.quoprimime.header_decode',
                ['s'],
                "Decode a string encoded with RFC 2045 MIME header `Q' encoding.\n\n    This function does not parse a full MIME header value encoded with\n    quoted-printable (like =?iso-8895-1?q?Hello_World?=) -- please use\n    the high level email.Header class for that functionality.\n    "),
               ('email.mime.audio._whatsnd',
                ['data'],
                "Try to identify a sound file type.\n\n    sndhdr.what() has a pretty cruddy interface, unfortunately.  This is why\n    we re-do it here.  It would be easier to reverse engineer the Unix 'file'\n    command and use the standard 'magic' file, as shipped with a modern Unix.\n    "),
               ('idlelib.PathBrowser.main', [], ''),
               ('idlelib.RemoteDebugger.wrap_frame', ['frame'], ''),
               ('idlelib.RemoteDebugger.wrap_info',
                ['info'],
                'replace info[2], a traceback instance, by its ID'),
               ('idlelib.RemoteDebugger.start_debugger',
                ['rpchandler', 'gui_adap_oid'],
                'Start the debugger and its RPC link in the Python subprocess\n\n    Start the subprocess side of the split debugger and set up that side of the\n    RPC link by instantiating the GUIProxy, Idb debugger, and IdbAdapter\n    objects and linking them together.  Register the IdbAdapter with the\n    RPCServer to handle RPC requests from the split debugger GUI via the\n    IdbProxy.\n\n    '),
               ('idlelib.RemoteDebugger.start_remote_debugger',
                ['rpcclt', 'pyshell'],
                'Start the subprocess debugger, initialize the debugger GUI and RPC link\n\n    Request the RPCServer start the Python subprocess debugger and link.  Set\n    up the Idle side of the split debugger by instantiating the IdbProxy,\n    debugger GUI, and debugger GUIAdapter objects and linking them together.\n\n    Register the GUIAdapter with the RPCClient to handle debugger GUI\n    interaction requests coming from the subprocess debugger via the GUIProxy.\n\n    The IdbAdapter will pass execution and environment requests coming from the\n    Idle debugger GUI to the subprocess debugger via the IdbProxy.\n\n    '),
               ('idlelib.RemoteDebugger.close_remote_debugger',
                ['rpcclt'],
                'Shut down subprocess debugger and Idle side of debugger RPC link\n\n    Request that the RPCServer shut down the subprocess debugger and link.\n    Unregister the GUIAdapter, which will cause a GC on the Idle process\n    debugger and RPC link objects.  (The second reference to the debugger GUI\n    is deleted in PyShell.close_remote_debugger().)\n\n    '),
               ('idlelib.RemoteDebugger.close_subprocess_debugger', ['rpcclt'], ''),
               ('idlelib.RemoteDebugger.restart_subprocess_debugger', ['rpcclt'], ''),
               ('idlelib.PyShell.idle_showwarning',
                ['message', 'category', 'filename', 'lineno'],
                ''),
               ('idlelib.PyShell.idle_formatwarning',
                ['message', 'category', 'filename', 'lineno'],
                'Format warnings the IDLE way'),
               ('idlelib.PyShell.extended_linecache_checkcache',
                ['filename=None', 'orig_checkcache=linecache.checkcache'],
                'Extend linecache.checkcache to preserve the <pyshell#...> entries\n\n    Rather than repeating the linecache code, patch it to save the\n    <pyshell#...> entries, call the original linecache.checkcache()\n    (which destroys them), and then restore the saved entries.\n\n    orig_checkcache is bound at definition time to the original\n    method, allowing it to be patched.\n\n    '),
               ('idlelib.PyShell.main', [], ''),
               ('idlelib.keybindingDialog.run', [], ''),
               ('idlelib.CallTips._find_constructor', ['class_ob'], ''),
               ('idlelib.CallTips.get_arg_text',
                ['ob'],
                'Get a string describing the arguments for the given object'),
               ('idlelib.CallTips.t1', [], '()'),
               ('idlelib.CallTips.t2', ['a', 'b=None'], '(a, b=None)'),
               ('idlelib.CallTips.t3', ['a', '*args'], '(a, ...)'),
               ('idlelib.CallTips.t4', ['*args'], '(...)'),
               ('idlelib.CallTips.t5', ['a', '*args'], '(a, ...)'),
               ('idlelib.CallTips.t6', ['a', 'b=None', '*args', '**kw'], '(a, b=None, ..., ***)'),
               ('idlelib.CallTips.test', ['tests'], ''),
               ('idlelib.EditorWindow._find_module',
                ['fullname', 'path=None'],
                'Version of imp.find_module() that handles hierarchical module names'),
               ('idlelib.EditorWindow.index2line', ['index'], ''),
               ('idlelib.EditorWindow.classifyws', ['s', 'tabwidth'], ''),
               ('idlelib.EditorWindow.prepstr', ['s'], ''),
               ('idlelib.EditorWindow.get_accelerator', ['keydefs', 'eventname'], ''),
               ('idlelib.EditorWindow.fixwordbreaks', ['root'], ''),
               ('idlelib.EditorWindow.test', [], ''),
               ('idlelib.WidgetRedirector.main', [], ''),
               ('idlelib.ObjectBrowser.make_objecttreeitem',
                ['labeltext', 'object', 'setfunction=None'],
                ''),
               ('idlelib.ObjectBrowser._test', [], ''),
               ('idlelib.ZoomHeight.zoom_height', ['top'], ''),
               ('idlelib.SearchDialog._setup', ['text'], ''),
               ('idlelib.SearchDialog.find', ['text'], ''),
               ('idlelib.SearchDialog.find_again', ['text'], ''),
               ('idlelib.SearchDialog.find_selection', ['text'], ''),
               ('idlelib.ScrolledList.test', [], ''),
               ('idlelib.ScrolledList.main', [], ''),
               ('idlelib.PyParse.dump', ['*stuff'], ''),
               ('idlelib.testcode.f', [], ''),
               ('idlelib.testcode.g', [], ''),
               ('idlelib.testcode.h', [], ''),
               ('idlelib.testcode.i', [], ''),
               ('idlelib.testcode.j', [], ''),
               ('idlelib.testcode.k', [], ''),
               ('idlelib.testcode.test', [], ''),
               ('idlelib.SearchEngine.get', ['root'], ''),
               ('idlelib.SearchEngine.search_reverse', ['prog', 'chars', 'col'], ''),
               ('idlelib.SearchEngine.get_selection', ['text'], ''),
               ('idlelib.SearchEngine.get_line_col', ['index'], ''),
               ('idlelib.RemoteObjectBrowser.remote_object_tree_item', ['item'], ''),
               ('idlelib.Percolator.main', [], ''),
               ('idlelib.MultiStatusBar._test', [], ''),
               ('idlelib.ToolTip.main', [], ''),
               ('idlelib.run.idle_formatwarning_subproc',
                ['message', 'category', 'filename', 'lineno'],
                'Format warnings the IDLE way'),
               ('idlelib.run.main',
                ['del_exitfunc=False'],
                "Start the Python execution server in a subprocess\n\n    In the Python subprocess, RPCServer is instantiated with handlerclass\n    MyHandler, which inherits register/unregister methods from RPCHandler via\n    the mix-in class SocketIO.\n\n    When the RPCServer 'server' is instantiated, the TCPServer initialization\n    creates an instance of run.MyHandler and calls its handle() method.\n    handle() instantiates a run.Executive object, passing it a reference to the\n    MyHandler object.  That reference is saved as attribute rpchandler of the\n    Executive instance.  The Executive methods have access to the reference and\n    can pass it on to entities that they command\n    (e.g. RemoteDebugger.Debugger.start_debugger()).  The latter, in turn, can\n    call MyHandler(SocketIO) register/unregister methods via the reference to\n    register and unregister themselves.\n\n    "),
               ('idlelib.run.manage_socket', ['address'], ''),
               ('idlelib.run.show_socket_error', ['err', 'address'], ''),
               ('idlelib.run.print_exception', [], ''),
               ('idlelib.run.cleanup_traceback',
                ['tb', 'exclude'],
                'Remove excluded traces from beginning/end of tb; get cached lines'),
               ('idlelib.run.flush_stdout', [], ''),
               ('idlelib.run.exit',
                [],
                "Exit subprocess, possibly after first deleting sys.exitfunc\n\n    If config-main.cfg/.def 'General' 'delete-exitfunc' is True, then any\n    sys.exitfunc will be removed before exiting.  (VPython support)\n\n    "),
               ('idlelib.MultiCall._parse_sequence',
                ['sequence'],
                'Get a string which should describe an event sequence. If it is\n    successfully parsed as one, return a tuple containing the state (as an int),\n    the event type (as an index of _types), and the detail - None if none, or a\n    string if there is one. If the parsing is unsuccessful, return None.\n    '),
               ('idlelib.MultiCall._triplet_to_sequence', ['triplet'], ''),
               ('idlelib.MultiCall.MultiCallCreator',
                ['widget'],
                'Return a MultiCall class which inherits its methods from the\n    given widget class (for example, Tkinter.Text). This is used\n    instead of a templating mechanism.\n    '),
               ('idlelib.MultiCall.bindseq', ['seq', 'n=[0]'], ''),
               ('idlelib.UndoDelegator.main', [], ''),
               ('idlelib.configHelpSourceEdit.run', [], ''),
               ('idlelib.ClassBrowser.main', [], ''),
               ('idlelib.configSectionNameDialog.run', [], ''),
               ('idlelib.GrepDialog.grep', ['text', 'io=None', 'flist=None'], ''),
               ('idlelib.FormatParagraph.find_paragraph', ['text', 'mark'], ''),
               ('idlelib.FormatParagraph.reformat_paragraph', ['data', 'limit'], ''),
               ('idlelib.FormatParagraph.is_all_white', ['line'], ''),
               ('idlelib.FormatParagraph.get_indent', ['line'], ''),
               ('idlelib.FormatParagraph.get_comment_header', ['line'], ''),
               ('idlelib.configHandler.dumpCfg', ['cfg'], ''),
               ('idlelib.CallTipWindow.main', [], ''),
               ('idlelib.TreeWidget.listicons',
                ['icondir=ICONDIR'],
                'Utility to display the available icons.'),
               ('idlelib.TreeWidget.test', [], ''),
               ('idlelib.TreeWidget.test2', [], ''),
               ('idlelib.ColorDelegator.any',
                ['name', 'alternates'],
                'Return a named group pattern matching list of alternates.'),
               ('idlelib.ColorDelegator.make_pat', [], ''),
               ('idlelib.ColorDelegator.main', [], ''),
               ('idlelib.aboutDialog.run', [], ''),
               ('idlelib.FileList._test', [], ''),
               ('idlelib.rpc.unpickle_code', ['ms'], ''),
               ('idlelib.rpc.pickle_code', ['co'], ''),
               ('idlelib.rpc.remoteref', ['obj'], ''),
               ('idlelib.rpc._getmethods', ['obj', 'methods'], ''),
               ('idlelib.rpc._getattributes', ['obj', 'attributes'], ''),
               ('idlelib.IOBinding.coding_spec',
                ['str'],
                'Return the encoding declaration according to PEP 263.\n\n    Raise LookupError if the encoding is declared but unknown.\n    '),
               ('idlelib.IOBinding.test', [], ''),
               ('idlelib.StackViewer.StackBrowser',
                ['root', 'flist=None', 'tb=None', 'top=None'],
                ''),
               ('idlelib.StackViewer._test', [], ''),
               ('idlelib.ReplaceDialog.replace', ['text'], ''),
               ('idlelib.macosxSupport.runningAsOSXApp',
                [],
                ' Returns True iff running from the IDLE.app bundle on OSX '),
               ('idlelib.macosxSupport.addOpenEventSupport',
                ['root', 'flist'],
                '\n    This ensures that the application will respont to open AppleEvents, which\n    makes is feaseable to use IDLE as the default application for python files.\n    '),
               ('idlelib.macosxSupport.hideTkConsole', ['root'], ''),
               ('idlelib.macosxSupport.overrideRootMenu',
                ['root', 'flist'],
                "\n    Replace the Tk root menu by something that's more appropriate for\n    IDLE.\n    "),
               ('idlelib.macosxSupport.setupApp',
                ['root', 'flist'],
                '\n    Perform setup for the OSX application bundle.\n    '),
               ('sqlite3.dbapi2.DateFromTicks', ['ticks'], ''),
               ('sqlite3.dbapi2.TimeFromTicks', ['ticks'], ''),
               ('sqlite3.dbapi2.TimestampFromTicks', ['ticks'], ''),
               ('sqlite3.dbapi2.register_adapters_and_converters', [], ''),
               ('logging.currentframe',
                [],
                "Return the frame object for the caller's stack frame."),
               ('logging.getLevelName',
                ['level'],
                '\n    Return the textual representation of logging level \'level\'.\n\n    If the level is one of the predefined levels (CRITICAL, ERROR, WARNING,\n    INFO, DEBUG) then you get the corresponding string. If you have\n    associated levels with names using addLevelName then the name you have\n    associated with \'level\' is returned.\n\n    If a numeric value corresponding to one of the defined levels is passed\n    in, the corresponding string representation is returned.\n\n    Otherwise, the string "Level %s" % level is returned.\n    '),
               ('logging.addLevelName',
                ['level', 'levelName'],
                "\n    Associate 'levelName' with 'level'.\n\n    This is used when converting levels to text during message formatting.\n    "),
               ('logging._acquireLock',
                [],
                '\n    Acquire the module-level lock for serializing access to shared data.\n\n    This should be released with _releaseLock().\n    '),
               ('logging._releaseLock',
                [],
                '\n    Release the module-level lock acquired by calling _acquireLock().\n    '),
               ('logging.makeLogRecord',
                ['dict'],
                '\n    Make a LogRecord whose attributes are defined by the specified dictionary,\n    This function is useful for converting a logging event received over\n    a socket connection (which is sent as a dictionary) into a LogRecord\n    instance.\n    '),
               ('logging.setLoggerClass',
                ['klass'],
                '\n    Set the class to be used when instantiating a logger. The class should\n    define __init__() such that only a name argument is required, and the\n    __init__() should call Logger.__init__()\n    '),
               ('logging.getLoggerClass',
                [],
                '\n    Return the class to be used when instantiating a logger.\n    '),
               ('logging.basicConfig',
                ['**kwargs'],
                "\n    Do basic configuration for the logging system.\n\n    This function does nothing if the root logger already has handlers\n    configured. It is a convenience method intended for use by simple scripts\n    to do one-shot configuration of the logging package.\n\n    The default behaviour is to create a StreamHandler which writes to\n    sys.stderr, set a formatter using the BASIC_FORMAT format string, and\n    add the handler to the root logger.\n\n    A number of optional keyword arguments may be specified, which can alter\n    the default behaviour.\n\n    filename  Specifies that a FileHandler be created, using the specified\n              filename, rather than a StreamHandler.\n    filemode  Specifies the mode to open the file, if filename is specified\n              (if filemode is unspecified, it defaults to 'a').\n    format    Use the specified format string for the handler.\n    datefmt   Use the specified date/time format.\n    level     Set the root logger level to the specified level.\n    stream    Use the specified stream to initialize the StreamHandler. Note\n              that this argument is incompatible with 'filename' - if both\n              are present, 'stream' is ignored.\n\n    Note that you could specify a stream created using open(filename, mode)\n    rather than passing the filename and mode in. However, it should be\n    remembered that StreamHandler does not close its stream (since it may be\n    using sys.stdout or sys.stderr), whereas FileHandler closes its stream\n    when the handler is closed.\n    "),
               ('logging.getLogger',
                ['name=None'],
                '\n    Return a logger with the specified name, creating it if necessary.\n\n    If no name is specified, return the root logger.\n    '),
               ('logging.critical',
                ['msg', '*args', '**kwargs'],
                "\n    Log a message with severity 'CRITICAL' on the root logger.\n    "),
               ('logging.error',
                ['msg', '*args', '**kwargs'],
                "\n    Log a message with severity 'ERROR' on the root logger.\n    "),
               ('logging.exception',
                ['msg', '*args'],
                "\n    Log a message with severity 'ERROR' on the root logger,\n    with exception information.\n    "),
               ('logging.warning',
                ['msg', '*args', '**kwargs'],
                "\n    Log a message with severity 'WARNING' on the root logger.\n    "),
               ('logging.info',
                ['msg', '*args', '**kwargs'],
                "\n    Log a message with severity 'INFO' on the root logger.\n    "),
               ('logging.debug',
                ['msg', '*args', '**kwargs'],
                "\n    Log a message with severity 'DEBUG' on the root logger.\n    "),
               ('logging.log',
                ['level', 'msg', '*args', '**kwargs'],
                "\n    Log 'msg % args' with the integer severity 'level' on the root logger.\n    "),
               ('logging.disable',
                ['level'],
                "\n    Disable all logging calls less severe than 'level'.\n    "),
               ('logging.shutdown',
                ['handlerList=_handlerList'],
                '\n    Perform any cleanup actions in the logging system (e.g. flushing\n    buffers).\n\n    Should be called at application exit.\n    '),
               ('logging.exithook', ['status', 'old_exit=sys.exit'], ''),
               ('logging.config.fileConfig',
                ['fname', 'defaults=None'],
                '\n    Read the logging configuration from a ConfigParser-format file.\n\n    This can be called several times from an application, allowing an end user\n    the ability to select from various pre-canned configurations (if the\n    developer provides a mechanism to present the choices and load the chosen\n    configuration).\n    In versions of ConfigParser which have the readfp method [typically\n    shipped in 2.x versions of Python], you can pass in a file-like object\n    rather than a filename, in which case the file-like object will be read\n    using readfp.\n    '),
               ('logging.config._resolve', ['name'], 'Resolve a dotted name to a global object.'),
               ('logging.config._create_formatters', ['cp'], 'Create and return formatters'),
               ('logging.config._install_handlers',
                ['cp', 'formatters'],
                'Install and return handlers'),
               ('logging.config._install_loggers',
                ['cp', 'handlers'],
                'Create and install loggers'),
               ('logging.config.listen',
                ['port=DEFAULT_LOGGING_CONFIG_PORT'],
                '\n    Start up a socket server on the specified port, and listen for new\n    configurations.\n\n    These will be sent as a file suitable for processing by fileConfig().\n    Returns a Thread object on which you can call start() to start the server,\n    and which you can join() when appropriate. To stop the server, call\n    stopListening().\n    '),
               ('logging.config.stopListening',
                [],
                '\n    Stop the listening server which was created with a call to listen().\n    '),
               ('compiler.transformer.parseFile', ['path'], ''),
               ('compiler.transformer.parse', ['buf', "mode='exec'"], ''),
               ('compiler.transformer.asList', ['nodes'], ''),
               ('compiler.transformer.extractLineNo', ['ast'], ''),
               ('compiler.transformer.Node', ['*args'], ''),
               ('compiler.transformer.debug_tree', ['tree'], ''),
               ('compiler.syntax.check', ['tree', 'multi=None'], ''),
               ('compiler.visitor.walk', ['tree', 'visitor', 'walker=None', 'verbose=None'], ''),
               ('compiler.visitor.dumpNode', ['node'], ''),
               ('compiler.pycodegen.compileFile', ['filename', 'display=0'], ''),
               ('compiler.pycodegen.compile',
                ['source', 'filename', 'mode', 'flags=None', 'dont_inherit=None'],
                'Replacement for builtin compile() function'),
               ('compiler.pycodegen.is_constant_false', ['node'], ''),
               ('compiler.pycodegen.generateArgList',
                ['arglist'],
                'Generate an arg list marking TupleArgs'),
               ('compiler.pycodegen.findOp',
                ['node'],
                'Find the op (DELETE, LOAD, STORE) in an AssTuple tree'),
               ('compiler.pycodegen.wrap_aug', ['node'], ''),
               ('compiler.ast.flatten', ['seq'], ''),
               ('compiler.ast.flatten_nodes', ['seq'], ''),
               ('compiler.pyassem.dfs_postorder',
                ['b', 'seen'],
                'Depth-first search of tree rooted at b, return in postorder'),
               ('compiler.pyassem.isJump', ['opname'], ''),
               ('compiler.pyassem.getArgCount', ['args'], ''),
               ('compiler.pyassem.twobyte',
                ['val'],
                'Convert an int argument into high and low bytes'),
               ('compiler.misc.flatten', ['tup'], ''),
               ('compiler.misc.mangle', ['name', 'klass'], ''),
               ('compiler.misc.set_filename',
                ['filename', 'tree'],
                'Set the filename attribute to filename on every node in tree'),
               ('compiler.symbols.list_eq', ['l1', 'l2'], ''),
               ('compiler.symbols.get_names', ['syms'], ''),
               ('compiler.future.is_future',
                ['stmt'],
                'Return true if statement is a well-formed future statement'),
               ('compiler.future.find_futures', ['node'], ''),
               ('FileDialog.test', [], 'Simple test program.'),
               ('Tkinter._flatten', ['tuple'], 'Internal function.'),
               ('Tkinter._cnfmerge', ['cnfs'], 'Internal function.'),
               ('Tkinter.NoDefaultRoot',
                [],
                'Inhibit setting of default root window.\n\n    Call this function to inhibit that the first instance of\n    Tk is used for windows without an explicit parent window.\n    '),
               ('Tkinter._tkerror', ['err'], 'Internal function.'),
               ('Tkinter._exit',
                ["code='0'"],
                'Internal function. Calling it will throw the exception SystemExit.'),
               ('Tkinter.mainloop', ['n=0'], 'Run the main loop of Tcl.'),
               ('Tkinter.getboolean', ['s'], 'Convert true and false to integer values 1 and 0.'),
               ('Tkinter.Tcl',
                ['screenName=None', 'baseName=None', "className='Tk'", 'useTk=0'],
                ''),
               ('Tkinter.AtEnd', [], ''),
               ('Tkinter.AtInsert', ['*args'], ''),
               ('Tkinter.AtSelFirst', [], ''),
               ('Tkinter.AtSelLast', [], ''),
               ('Tkinter.At', ['x', 'y=None'], ''),
               ('Tkinter.image_names', [], ''),
               ('Tkinter.image_types', [], ''),
               ('Tkinter._test', [], ''),
               ('tkColorChooser.askcolor', ['color=None', '**options'], 'Ask for a color'),
               ('Dialog._test', [], ''),
               ('turtle._getpen', [], ''),
               ('turtle.degrees', [], ''),
               ('turtle.radians', [], ''),
               ('turtle.reset', [], ''),
               ('turtle.clear', [], ''),
               ('turtle.tracer', ['flag'], ''),
               ('turtle.forward', ['distance'], ''),
               ('turtle.backward', ['distance'], ''),
               ('turtle.left', ['angle'], ''),
               ('turtle.right', ['angle'], ''),
               ('turtle.up', [], ''),
               ('turtle.down', [], ''),
               ('turtle.width', ['width'], ''),
               ('turtle.color', ['*args'], ''),
               ('turtle.write', ['arg', 'move=0'], ''),
               ('turtle.fill', ['flag'], ''),
               ('turtle.begin_fill', [], ''),
               ('turtle.end_fill', [], ''),
               ('turtle.circle', ['radius', 'extent=None'], ''),
               ('turtle.goto', ['*args'], ''),
               ('turtle.heading', [], ''),
               ('turtle.setheading', ['angle'], ''),
               ('turtle.position', [], ''),
               ('turtle.window_width', [], ''),
               ('turtle.window_height', [], ''),
               ('turtle.setx', ['xpos'], ''),
               ('turtle.sety', ['ypos'], ''),
               ('turtle.towards', ['*args'], ''),
               ('turtle.done', [], ''),
               ('turtle.delay', ['delay'], ''),
               ('turtle.speed', ['speed'], ''),
               ('turtle.setup',
                ['**geometry'],
                ' Sets the size and position of the main window.\n\n    Keywords are width, height, startx and starty:\n\n    width: either a size in pixels or a fraction of the screen.\n      Default is 50% of screen.\n    height: either the height in pixels or a fraction of the screen.\n      Default is 75% of screen.\n\n    Setting either width or height to None before drawing will force\n      use of default geometry as in older versions of turtle.py\n\n    startx: starting position in pixels from the left edge of the screen.\n      Default is to center window. Setting startx to None is the default\n      and centers window horizontally on screen.\n\n    starty: starting position in pixels from the top edge of the screen.\n      Default is to center window. Setting starty to None is the default\n      and centers window vertically on screen.\n\n    Examples:\n    >>> setup (width=200, height=200, startx=0, starty=0)\n\n    sets window to 200x200 pixels, in upper left of screen\n\n    >>> setup(width=.75, height=0.5, startx=None, starty=None)\n\n    sets window to 75% of screen by 50% of screen and centers\n\n    >>> setup(width=None)\n\n    forces use of default geometry as in older versions of turtle.py\n    '),
               ('turtle.title',
                ['title'],
                'Set the window title.\n\n    By default this is set to \'Turtle Graphics\'\n\n    Example:\n    >>> title("My Window")\n    '),
               ('turtle.demo', [], ''),
               ('turtle.demo2', [], ''),
               ('Tix._lst2dict', ['lst'], ''),
               ('Tix.OptionName',
                ['widget'],
                'Returns the qualified path name for the widget. Normally used to set\n    default options for subwidgets. See tixwidgets.py'),
               ('Tix.FileTypeList', ['dict'], ''),
               ('tkFont.nametofont',
                ['name'],
                'Given the name of a tk named font, returns a Font representation.\n    '),
               ('tkFont.families', ['root=None'], 'Get font families (as a tuple)'),
               ('tkFont.names', ['root=None'], 'Get names of defined fonts (as a tuple)'),
               ('tkMessageBox._show',
                ['title=None', 'message=None', '_icon=None', '_type=None', '**options'],
                ''),
               ('tkMessageBox.showinfo',
                ['title=None', 'message=None', '**options'],
                'Show an info message'),
               ('tkMessageBox.showwarning',
                ['title=None', 'message=None', '**options'],
                'Show a warning message'),
               ('tkMessageBox.showerror',
                ['title=None', 'message=None', '**options'],
                'Show an error message'),
               ('tkMessageBox.askquestion',
                ['title=None', 'message=None', '**options'],
                'Ask a question'),
               ('tkMessageBox.askokcancel',
                ['title=None', 'message=None', '**options'],
                'Ask if operation should proceed; return true if the answer is ok'),
               ('tkMessageBox.askyesno',
                ['title=None', 'message=None', '**options'],
                'Ask a question; return true if the answer is yes'),
               ('tkMessageBox.askretrycancel',
                ['title=None', 'message=None', '**options'],
                'Ask if operation should be retried; return true if the answer is yes'),
               ('SimpleDialog.test', [], ''),
               ('Tkdnd.dnd_start', ['source', 'event'], ''),
               ('Tkdnd.test', [], ''),
               ('tkFileDialog.askopenfilename', ['**options'], 'Ask for a filename to open'),
               ('tkFileDialog.asksaveasfilename', ['**options'], 'Ask for a filename to save as'),
               ('tkFileDialog.askopenfilenames',
                ['**options'],
                'Ask for multiple filenames to open\n\n    Returns a list of filenames or empty list if\n    cancel button selected\n    '),
               ('tkFileDialog.askopenfile',
                ["mode='r'", '**options'],
                'Ask for a filename to open, and returned the opened file'),
               ('tkFileDialog.askopenfiles',
                ["mode='r'", '**options'],
                'Ask for multiple filenames and return the open file\n    objects\n\n    returns a list of open file objects or an empty list if\n    cancel selected\n    '),
               ('tkFileDialog.asksaveasfile',
                ["mode='w'", '**options'],
                'Ask for a filename to save as, and returned the opened file'),
               ('tkFileDialog.askdirectory',
                ['**options'],
                'Ask for a directory, and return the file name'),
               ('tkSimpleDialog.askinteger',
                ['title', 'prompt', '**kw'],
                'get an integer from the user\n\n    Arguments:\n\n        title -- the dialog title\n        prompt -- the label text\n        **kw -- see SimpleDialog class\n\n    Return value is an integer\n    '),
               ('tkSimpleDialog.askfloat',
                ['title', 'prompt', '**kw'],
                'get a float from the user\n\n    Arguments:\n\n        title -- the dialog title\n        prompt -- the label text\n        **kw -- see SimpleDialog class\n\n    Return value is a float\n    '),
               ('tkSimpleDialog.askstring',
                ['title', 'prompt', '**kw'],
                'get a string from the user\n\n    Arguments:\n\n        title -- the dialog title\n        prompt -- the label text\n        **kw -- see SimpleDialog class\n\n    Return value is a string\n    '),
               ('xml.dom.xmlbuilder._name_xform', ['name'], ''),
               ('xml.dom.domreg.registerDOMImplementation',
                ['name', 'factory'],
                'registerDOMImplementation(name, factory)\n\n    Register the factory function with the name. The factory function\n    should return an object which implements the DOMImplementation\n    interface. The factory function can either return the same object,\n    or a new one (e.g. if that implementation supports some\n    customization).'),
               ('xml.dom.domreg._good_enough',
                ['dom', 'features'],
                '_good_enough(dom, features) -> Return 1 if the dom offers the features'),
               ('xml.dom.domreg.getDOMImplementation',
                ['name=None', 'features=()'],
                'getDOMImplementation(name = None, features = ()) -> DOM implementation.\n\n    Return a suitable DOM implementation. The name is either\n    well-known, the module name of a DOM implementation, or None. If\n    it is not None, imports the corresponding module and returns\n    DOMImplementation object if the import succeeds.\n\n    If name is not given, consider the available implementations to\n    find one with the required feature set. If no implementation can\n    be found, raise an ImportError. The features list must be a sequence\n    of (feature, version) pairs which are passed to hasFeature.'),
               ('xml.dom.domreg._parse_feature_string', ['s'], ''),
               ('xml.dom.minidom._append_child', ['self', 'node'], ''),
               ('xml.dom.minidom._in_document', ['node'], ''),
               ('xml.dom.minidom._write_data', ['writer', 'data'], 'Writes datachars to writer.'),
               ('xml.dom.minidom._get_elements_by_tagName_helper', ['parent', 'name', 'rc'], ''),
               ('xml.dom.minidom._get_elements_by_tagName_ns_helper',
                ['parent', 'nsURI', 'localName', 'rc'],
                ''),
               ('xml.dom.minidom._set_attribute_node', ['element', 'attr'], ''),
               ('xml.dom.minidom._get_containing_element', ['node'], ''),
               ('xml.dom.minidom._get_containing_entref', ['node'], ''),
               ('xml.dom.minidom._clear_id_cache', ['node'], ''),
               ('xml.dom.minidom._clone_node',
                ['node', 'deep', 'newOwnerDocument'],
                '\n    Clone a node and give it the new owner document.\n    Called by Node.cloneNode and Document.importNode\n    '),
               ('xml.dom.minidom._nssplit', ['qualifiedName'], ''),
               ('xml.dom.minidom._get_StringIO', [], ''),
               ('xml.dom.minidom._do_pulldom_parse', ['func', 'args', 'kwargs'], ''),
               ('xml.dom.minidom.parse',
                ['file', 'parser=None', 'bufsize=None'],
                'Parse a file into a DOM by filename or file object.'),
               ('xml.dom.minidom.parseString',
                ['string', 'parser=None'],
                'Parse a file into a DOM from a string.'),
               ('xml.dom.minidom.getDOMImplementation', ['features=None'], ''),
               ('xml.dom.pulldom.parse', ['stream_or_string', 'parser=None', 'bufsize=None'], ''),
               ('xml.dom.pulldom.parseString', ['string', 'parser=None'], ''),
               ('xml.dom.minicompat.defproperty', ['klass', 'name', 'doc'], ''),
               ('xml.dom.expatbuilder._intern', ['builder', 's'], ''),
               ('xml.dom.expatbuilder._parse_ns_name', ['builder', 'name'], ''),
               ('xml.dom.expatbuilder.parse',
                ['file', 'namespaces=True'],
                "Parse a document, returning the resulting Document node.\n\n    'file' may be either a file name or an open file object.\n    "),
               ('xml.dom.expatbuilder.parseString',
                ['string', 'namespaces=True'],
                'Parse a document from a string, returning the resulting\n    Document node.\n    '),
               ('xml.dom.expatbuilder.parseFragment',
                ['file', 'context', 'namespaces=True'],
                "Parse a fragment of a document, given the context from which it\n    was originally extracted.  context should be the parent of the\n    node(s) which are in the fragment.\n\n    'file' may be either a file name or an open file object.\n    "),
               ('xml.dom.expatbuilder.parseFragmentString',
                ['string', 'context', 'namespaces=True'],
                'Parse a fragment of a document from a string, given the context\n    from which it was originally extracted.  context should be the\n    parent of the node(s) which are in the fragment.\n    '),
               ('xml.dom.expatbuilder.makeBuilder',
                ['options'],
                'Create a builder based on an Options object.'),
               ('xml.sax.parse', ['source', 'handler', 'errorHandler=ErrorHandler()'], ''),
               ('xml.sax.parseString', ['string', 'handler', 'errorHandler=ErrorHandler()'], ''),
               ('xml.sax.make_parser',
                ['parser_list=[]'],
                'Creates and returns a SAX parser.\n\n    Creates the first parser it is able to instantiate of the ones\n    given in the list created by doing parser_list +\n    default_parser_list.  The lists must contain the names of Python\n    modules containing both a SAX parser and a create_parser function.'),
               ('xml.sax._create_parser', ['parser_name'], ''),
               ('xml.sax._create_parser', ['parser_name'], ''),
               ('xml.sax.expatreader._mkproxy', ['o'], ''),
               ('xml.sax.expatreader.create_parser', ['*args', '**kwargs'], ''),
               ('xml.sax.xmlreader._test', [], ''),
               ('xml.sax.saxutils.__dict_replace',
                ['s', 'd'],
                'Replace substrings of a string using a dictionary.'),
               ('xml.sax.saxutils.escape',
                ['data', 'entities={}'],
                'Escape &, <, and > in a string of data.\n\n    You can escape other strings of data by passing a dictionary as\n    the optional entities parameter.  The keys and values must all be\n    strings; each key will be replaced with its corresponding value.\n    '),
               ('xml.sax.saxutils.unescape',
                ['data', 'entities={}'],
                'Unescape &amp;, &lt;, and &gt; in a string of data.\n\n    You can unescape other strings of data by passing a dictionary as\n    the optional entities parameter.  The keys and values must all be\n    strings; each key will be replaced with its corresponding value.\n    '),
               ('xml.sax.saxutils.quoteattr',
                ['data', 'entities={}'],
                'Escape and quote an attribute value.\n\n    Escape &, <, and > in a string of data, then quote it for use as\n    an attribute value.  The " character will be escaped as well, if\n    necessary.\n\n    You can escape other strings of data by passing a dictionary as\n    the optional entities parameter.  The keys and values must all be\n    strings; each key will be replaced with its corresponding value.\n    '),
               ('xml.sax.saxutils.prepare_input_source',
                ['source', "base=''"],
                'This function takes an InputSource and an optional base URL and\n    returns a fully resolved InputSource object ready for reading.'),
               ('xml.etree.ElementTree.Element', ['tag', 'attrib={}', '**extra'], ''),
               ('xml.etree.ElementTree.SubElement',
                ['parent', 'tag', 'attrib={}', '**extra'],
                ''),
               ('xml.etree.ElementTree.Comment', ['text=None'], ''),
               ('xml.etree.ElementTree.ProcessingInstruction', ['target', 'text=None'], ''),
               ('xml.etree.ElementTree.iselement', ['element'], ''),
               ('xml.etree.ElementTree.dump', ['elem'], ''),
               ('xml.etree.ElementTree._encode', ['s', 'encoding'], ''),
               ('xml.etree.ElementTree._raise_serialization_error', ['text'], ''),
               ('xml.etree.ElementTree._encode_entity', ['text', 'pattern=_escape'], ''),
               ('xml.etree.ElementTree._escape_cdata',
                ['text', 'encoding=None', 'replace=string.replace'],
                ''),
               ('xml.etree.ElementTree._escape_attrib',
                ['text', 'encoding=None', 'replace=string.replace'],
                ''),
               ('xml.etree.ElementTree.fixtag', ['tag', 'namespaces'], ''),
               ('xml.etree.ElementTree.parse', ['source', 'parser=None'], ''),
               ('xml.etree.ElementTree.XML', ['text'], ''),
               ('xml.etree.ElementTree.XMLID', ['text'], ''),
               ('xml.etree.ElementTree.tostring', ['element', 'encoding=None'], ''),
               ('xml.etree.ElementInclude.default_loader',
                ['href', 'parse', 'encoding=None'],
                ''),
               ('xml.etree.ElementInclude.include', ['elem', 'loader=None'], ''),
               ('xml.etree.ElementPath._compile', ['path'], ''),
               ('xml.etree.ElementPath.find', ['element', 'path'], ''),
               ('xml.etree.ElementPath.findtext', ['element', 'path', 'default=None'], ''),
               ('xml.etree.ElementPath.findall', ['element', 'path'], ''),
               ('encodings.big5hkscs.getregentry', [], ''),
               ('encodings.cp949.getregentry', [], ''),
               ('encodings.mbcs.decode', ['input', "errors='strict'"], ''),
               ('encodings.mbcs.getregentry', [], ''),
               ('encodings.bz2_codec.bz2_encode',
                ['input', "errors='strict'"],
                " Encodes the object input and returns a tuple (output\n        object, length consumed).\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    "),
               ('encodings.bz2_codec.bz2_decode',
                ['input', "errors='strict'"],
                " Decodes the object input and returns a tuple (output\n        object, length consumed).\n\n        input must be an object which provides the bf_getreadbuf\n        buffer slot. Python strings, buffer objects and memory\n        mapped files are examples of objects providing this slot.\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    "),
               ('encodings.bz2_codec.getregentry', [], ''),
               ('encodings.cp1255.getregentry', [], ''),
               ('encodings.mac_croatian.getregentry', [], ''),
               ('encodings.uu_codec.uu_encode',
                ['input', "errors='strict'", "filename='<data>'", 'mode=438'],
                " Encodes the object input and returns a tuple (output\n        object, length consumed).\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    "),
               ('encodings.uu_codec.uu_decode',
                ['input', "errors='strict'"],
                " Decodes the object input and returns a tuple (output\n        object, length consumed).\n\n        input must be an object which provides the bf_getreadbuf\n        buffer slot. Python strings, buffer objects and memory\n        mapped files are examples of objects providing this slot.\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n        Note: filename and file mode information in the input data is\n        ignored.\n\n    "),
               ('encodings.uu_codec.getregentry', [], ''),
               ('encodings.zlib_codec.zlib_encode',
                ['input', "errors='strict'"],
                " Encodes the object input and returns a tuple (output\n        object, length consumed).\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    "),
               ('encodings.zlib_codec.zlib_decode',
                ['input', "errors='strict'"],
                " Decodes the object input and returns a tuple (output\n        object, length consumed).\n\n        input must be an object which provides the bf_getreadbuf\n        buffer slot. Python strings, buffer objects and memory\n        mapped files are examples of objects providing this slot.\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    "),
               ('encodings.zlib_codec.getregentry', [], ''),
               ('encodings.cp775.getregentry', [], ''),
               ('encodings.cp1140.getregentry', [], ''),
               ('encodings.mac_turkish.getregentry', [], ''),
               ('encodings.euc_kr.getregentry', [], ''),
               ('encodings.normalize_encoding',
                ['encoding'],
                " Normalize an encoding name.\n\n        Normalization works as follows: all non-alphanumeric\n        characters except the dot used for Python package names are\n        collapsed and replaced with a single underscore, e.g. '  -;#'\n        becomes '_'. Leading and trailing underscores are removed.\n\n        Note that encoding names should be ASCII only; if they do use\n        non-ASCII characters, these must be Latin-1 compatible.\n\n    "),
               ('encodings.search_function', ['encoding'], ''),
               ('encodings.cp875.getregentry', [], ''),
               ('encodings.utf_7.getregentry', [], ''),
               ('encodings.cp861.getregentry', [], ''),
               ('encodings.unicode_escape.getregentry', [], ''),
               ('encodings.cp866.getregentry', [], ''),
               ('encodings.gb2312.getregentry', [], ''),
               ('encodings.mac_roman.getregentry', [], ''),
               ('encodings.big5.getregentry', [], ''),
               ('encodings.cp1251.getregentry', [], ''),
               ('encodings.iso8859_3.getregentry', [], ''),
               ('encodings.iso8859_7.getregentry', [], ''),
               ('encodings.ptcp154.getregentry', [], ''),
               ('encodings.iso8859_9.getregentry', [], ''),
               ('encodings.iso8859_10.getregentry', [], ''),
               ('encodings.euc_jis_2004.getregentry', [], ''),
               ('encodings.euc_jisx0213.getregentry', [], ''),
               ('encodings.charmap.getregentry', [], ''),
               ('encodings.idna.nameprep', ['label'], ''),
               ('encodings.idna.ToASCII', ['label'], ''),
               ('encodings.idna.ToUnicode', ['label'], ''),
               ('encodings.idna.getregentry', [], ''),
               ('encodings.cp1256.getregentry', [], ''),
               ('encodings.cp865.getregentry', [], ''),
               ('encodings.mac_greek.getregentry', [], ''),
               ('encodings.cp855.getregentry', [], ''),
               ('encodings.utf_8_sig.encode', ['input', "errors='strict'"], ''),
               ('encodings.utf_8_sig.decode', ['input', "errors='strict'"], ''),
               ('encodings.utf_8_sig.getregentry', [], ''),
               ('encodings.cp424.getregentry', [], ''),
               ('encodings.cp1026.getregentry', [], ''),
               ('encodings.quopri_codec.quopri_encode',
                ['input', "errors='strict'"],
                "Encode the input, returning a tuple (output object, length consumed).\n\n    errors defines the error handling to apply. It defaults to\n    'strict' handling which is the only currently supported\n    error handling for this codec.\n\n    "),
               ('encodings.quopri_codec.quopri_decode',
                ['input', "errors='strict'"],
                "Decode the input, returning a tuple (output object, length consumed).\n\n    errors defines the error handling to apply. It defaults to\n    'strict' handling which is the only currently supported\n    error handling for this codec.\n\n    "),
               ('encodings.quopri_codec.getregentry', [], ''),
               ('encodings.base64_codec.base64_encode',
                ['input', "errors='strict'"],
                " Encodes the object input and returns a tuple (output\n        object, length consumed).\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    "),
               ('encodings.base64_codec.base64_decode',
                ['input', "errors='strict'"],
                " Decodes the object input and returns a tuple (output\n        object, length consumed).\n\n        input must be an object which provides the bf_getreadbuf\n        buffer slot. Python strings, buffer objects and memory\n        mapped files are examples of objects providing this slot.\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    "),
               ('encodings.base64_codec.getregentry', [], ''),
               ('encodings.utf_16_be.decode', ['input', "errors='strict'"], ''),
               ('encodings.utf_16_be.getregentry', [], ''),
               ('encodings.mac_arabic.getregentry', [], ''),
               ('encodings.iso2022_jp_1.getregentry', [], ''),
               ('encodings.cp1258.getregentry', [], ''),
               ('encodings.iso2022_jp.getregentry', [], ''),
               ('encodings.cp1252.getregentry', [], ''),
               ('encodings.iso8859_13.getregentry', [], ''),
               ('encodings.unicode_internal.getregentry', [], ''),
               ('encodings.iso2022_jp_3.getregentry', [], ''),
               ('encodings.utf_16.decode', ['input', "errors='strict'"], ''),
               ('encodings.utf_16.getregentry', [], ''),
               ('encodings.raw_unicode_escape.getregentry', [], ''),
               ('encodings.shift_jisx0213.getregentry', [], ''),
               ('encodings.johab.getregentry', [], ''),
               ('encodings.punycode.segregate', ['str'], '3.1 Basic code point segregation'),
               ('encodings.punycode.selective_len',
                ['str', 'max'],
                'Return the length of str, considering only characters below max.'),
               ('encodings.punycode.selective_find',
                ['str', 'char', 'index', 'pos'],
                'Return a pair (index, pos), indicating the next occurrence of\n    char in str. index is the position of the character considering\n    only ordinals up to and including char, and pos is the position in\n    the full string. index/pos is the starting position in the full\n    string.'),
               ('encodings.punycode.insertion_unsort',
                ['str', 'extended'],
                '3.2 Insertion unsort coding'),
               ('encodings.punycode.T', ['j', 'bias'], ''),
               ('encodings.punycode.generate_generalized_integer',
                ['N', 'bias'],
                '3.3 Generalized variable-length integers'),
               ('encodings.punycode.adapt', ['delta', 'first', 'numchars'], ''),
               ('encodings.punycode.generate_integers',
                ['baselen', 'deltas'],
                '3.4 Bias adaptation'),
               ('encodings.punycode.punycode_encode', ['text'], ''),
               ('encodings.punycode.decode_generalized_number',
                ['extended', 'extpos', 'bias', 'errors'],
                '3.3 Generalized variable-length integers'),
               ('encodings.punycode.insertion_sort',
                ['base', 'extended', 'errors'],
                '3.2 Insertion unsort coding'),
               ('encodings.punycode.punycode_decode', ['text', 'errors'], ''),
               ('encodings.punycode.getregentry', [], ''),
               ('encodings.cp950.getregentry', [], ''),
               ('encodings.iso2022_jp_ext.getregentry', [], ''),
               ('encodings.iso2022_jp_2004.getregentry', [], ''),
               ('encodings.mac_centeuro.getregentry', [], ''),
               ('encodings.cp437.getregentry', [], ''),
               ('encodings.gbk.getregentry', [], ''),
               ('encodings.iso2022_jp_2.getregentry', [], ''),
               ('encodings.cp1253.getregentry', [], ''),
               ('encodings.mac_iceland.getregentry', [], ''),
               ('encodings.cp737.getregentry', [], ''),
               ('encodings.utf_8.decode', ['input', "errors='strict'"], ''),
               ('encodings.utf_8.getregentry', [], ''),
               ('encodings.mac_farsi.getregentry', [], ''),
               ('encodings.iso8859_1.getregentry', [], ''),
               ('encodings.utf_16_le.decode', ['input', "errors='strict'"], ''),
               ('encodings.utf_16_le.getregentry', [], ''),
               ('encodings.palmos.getregentry', [], ''),
               ('encodings.cp850.getregentry', [], ''),
               ('encodings.mac_cyrillic.getregentry', [], ''),
               ('encodings.iso2022_kr.getregentry', [], ''),
               ('encodings.gb18030.getregentry', [], ''),
               ('encodings.iso8859_2.getregentry', [], ''),
               ('encodings.iso8859_15.getregentry', [], ''),
               ('encodings.cp037.getregentry', [], ''),
               ('encodings.latin_1.getregentry', [], ''),
               ('encodings.cp932.getregentry', [], ''),
               ('encodings.iso8859_6.getregentry', [], ''),
               ('encodings.koi8_u.getregentry', [], ''),
               ('encodings.mac_romanian.getregentry', [], ''),
               ('encodings.hex_codec.hex_encode',
                ['input', "errors='strict'"],
                " Encodes the object input and returns a tuple (output\n        object, length consumed).\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    "),
               ('encodings.hex_codec.hex_decode',
                ['input', "errors='strict'"],
                " Decodes the object input and returns a tuple (output\n        object, length consumed).\n\n        input must be an object which provides the bf_getreadbuf\n        buffer slot. Python strings, buffer objects and memory\n        mapped files are examples of objects providing this slot.\n\n        errors defines the error handling to apply. It defaults to\n        'strict' handling which is the only currently supported\n        error handling for this codec.\n\n    "),
               ('encodings.hex_codec.getregentry', [], ''),
               ('encodings.undefined.getregentry', [], ''),
               ('encodings.shift_jis_2004.getregentry', [], ''),
               ('encodings.tis_620.getregentry', [], ''),
               ('encodings.cp869.getregentry', [], ''),
               ('encodings.cp1257.getregentry', [], ''),
               ('encodings.iso8859_5.getregentry', [], ''),
               ('encodings.iso8859_16.getregentry', [], ''),
               ('encodings.rot_13.getregentry', [], ''),
               ('encodings.rot_13.rot13', ['infile', 'outfile'], ''),
               ('encodings.euc_jp.getregentry', [], ''),
               ('encodings.cp1250.getregentry', [], ''),
               ('encodings.iso8859_14.getregentry', [], ''),
               ('encodings.cp874.getregentry', [], ''),
               ('encodings.cp852.getregentry', [], ''),
               ('encodings.shift_jis.getregentry', [], ''),
               ('encodings.iso8859_11.getregentry', [], ''),
               ('encodings.cp1006.getregentry', [], ''),
               ('encodings.ascii.getregentry', [], ''),
               ('encodings.hp_roman8.getregentry', [], ''),
               ('encodings.cp856.getregentry', [], ''),
               ('encodings.iso8859_8.getregentry', [], ''),
               ('encodings.cp864.getregentry', [], ''),
               ('encodings.iso8859_4.getregentry', [], ''),
               ('encodings.cp862.getregentry', [], ''),
               ('encodings.mac_latin2.getregentry', [], ''),
               ('encodings.cp863.getregentry', [], ''),
               ('encodings.koi8_r.getregentry', [], ''),
               ('encodings.cp500.getregentry', [], ''),
               ('encodings.string_escape.getregentry', [], ''),
               ('encodings.cp1254.getregentry', [], ''),
               ('encodings.cp857.getregentry', [], ''),
               ('encodings.hz.getregentry', [], ''),
               ('encodings.cp860.getregentry', [], ''),
               ('wsgiref.handlers.dict', ['items'], ''),
               ('wsgiref.handlers.format_date_time', ['timestamp'], ''),
               ('wsgiref.headers._formatparam',
                ['param', 'value=None', 'quote=1'],
                'Convenience function to format and return a key=value pair.\n\n    This will quote the value if needed or if quote is true.\n    '),
               ('wsgiref.util.guess_scheme',
                ['environ'],
                "Return a guess for whether 'wsgi.url_scheme' should be 'http' or 'https'\n    "),
               ('wsgiref.util.application_uri',
                ['environ'],
                "Return the application's base URI (no PATH_INFO or QUERY_STRING)"),
               ('wsgiref.util.request_uri',
                ['environ', 'include_query=1'],
                'Return the full request URI, optionally including the query string'),
               ('wsgiref.util.shift_path_info',
                ['environ'],
                "Shift a name from PATH_INFO to SCRIPT_NAME, returning it\n\n    If there are no remaining path segments in PATH_INFO, return None.\n    Note: 'environ' is modified in-place; use a copy if you need to keep\n    the original PATH_INFO or SCRIPT_NAME.\n\n    Note: when PATH_INFO is just a '/', this returns '' and appends a trailing\n    '/' to SCRIPT_NAME, even though empty path segments are normally ignored,\n    and SCRIPT_NAME doesn't normally end in a '/'.  This is intentional\n    behavior, to ensure that an application can tell the difference between\n    '/x' and '/x/' when traversing to objects.\n    "),
               ('wsgiref.util.setup_testing_defaults',
                ['environ'],
                "Update 'environ' with trivial defaults for testing purposes\n\n    This adds various parameters required for WSGI, including HTTP_HOST,\n    SERVER_NAME, SERVER_PORT, REQUEST_METHOD, SCRIPT_NAME, PATH_INFO,\n    and all of the wsgi.* variables.  It only supplies default values,\n    and does not replace any existing settings for these variables.\n\n    This routine is intended to make it easier for unit tests of WSGI\n    servers and applications to set up dummy environments.  It should *not*\n    be used by actual WSGI servers or applications, since the data is fake!\n    "),
               ('wsgiref.util.is_hop_by_hop',
                ['header_name'],
                'Return true if \'header_name\' is an HTTP/1.1 "Hop-by-Hop" header'),
               ('wsgiref.simple_server.demo_app', ['environ', 'start_response'], ''),
               ('wsgiref.simple_server.make_server',
                ['host',
                 'port',
                 'app',
                 'server_class=WSGIServer',
                 'handler_class=WSGIRequestHandler'],
                'Create a new WSGI server listening on `host` and `port` for `app`'),
               ('wsgiref.validate.assert_', ['cond', '*args'], ''),
               ('wsgiref.validate.validator',
                ['application'],
                "\n    When applied between a WSGI server and a WSGI application, this\n    middleware will check for WSGI compliancy on a number of levels.\n    This middleware does not modify the request or response in any\n    way, but will throw an AssertionError if anything seems off\n    (except for a failure to close the application iterator, which\n    will be printed to stderr -- there's no way to throw an exception\n    at that point).\n    "),
               ('wsgiref.validate.check_environ', ['environ'], ''),
               ('wsgiref.validate.check_input', ['wsgi_input'], ''),
               ('wsgiref.validate.check_errors', ['wsgi_errors'], ''),
               ('wsgiref.validate.check_status', ['status'], ''),
               ('wsgiref.validate.check_headers', ['headers'], ''),
               ('wsgiref.validate.check_content_type', ['status', 'headers'], ''),
               ('wsgiref.validate.check_exc_info', ['exc_info'], ''),
               ('wsgiref.validate.check_iterator', ['iterator'], ''),
               ('curses.initscr', [], ''),
               ('curses.start_color', [], ''),
               ('curses.textpad.rectangle',
                ['win', 'uly', 'ulx', 'lry', 'lrx'],
                'Draw a rectangle with corners at the provided upper-left\n    and lower-right coordinates.\n    '),
               ('curses.textpad.test_editbox', ['stdscr'], ''),
               ('curses.has_key.has_key', ['ch'], ''),
               ('curses.wrapper.wrapper',
                ['func', '*args', '**kwds'],
                "Wrapper function that initializes curses and calls another function,\n    restoring normal keyboard/screen behavior on error.\n    The callable object 'func' is then passed the main window 'stdscr'\n    as its first argument, followed by any other arguments passed to\n    wrapper().\n    "),
               ('curses.ascii._ctoi', ['c'], ''),
               ('curses.ascii.isalnum', ['c'], ''),
               ('curses.ascii.isalpha', ['c'], ''),
               ('curses.ascii.isascii', ['c'], ''),
               ('curses.ascii.isblank', ['c'], ''),
               ('curses.ascii.iscntrl', ['c'], ''),
               ('curses.ascii.isdigit', ['c'], ''),
               ('curses.ascii.isgraph', ['c'], ''),
               ('curses.ascii.islower', ['c'], ''),
               ('curses.ascii.isprint', ['c'], ''),
               ('curses.ascii.ispunct', ['c'], ''),
               ('curses.ascii.isspace', ['c'], ''),
               ('curses.ascii.isupper', ['c'], ''),
               ('curses.ascii.isxdigit', ['c'], ''),
               ('curses.ascii.isctrl', ['c'], ''),
               ('curses.ascii.ismeta', ['c'], ''),
               ('curses.ascii.ascii', ['c'], ''),
               ('curses.ascii.ctrl', ['c'], ''),
               ('curses.ascii.alt', ['c'], ''),
               ('curses.ascii.unctrl', ['c'], '')],
 'HIERARCHY': ['fnmatch',
               'runpy',
               'shutil',
               'calendar',
               'md5',
               'contextlib',
               'compileall',
               'poplib',
               'platform',
               'Queue',
               'repr',
               'gzip',
               'bdb',
               'dis',
               'markupbase',
               'binhex',
               'plistlib',
               'linecache',
               'cgi',
               'pty',
               'UserDict',
               'traceback',
               'httplib',
               'MimeWriter',
               'locale',
               'pipes',
               'functools',
               'textwrap',
               'user',
               'smtpd',
               'htmllib',
               'warnings',
               'doctest',
               'urllib',
               'webbrowser',
               'pickle',
               '_threading_local',
               'nturl2path',
               'string',
               'chunk',
               'telnetlib',
               'pprint',
               'timeit',
               'threading',
               'gopherlib',
               'sgmllib',
               'Bastion',
               'hashlib',
               'gettext',
               '__phello__.foo',
               'commands',
               'tabnanny',
               'codeop',
               'uu',
               'DocXMLRPCServer',
               'tarfile',
               'Cookie',
               'xmlrpclib',
               'statvfs',
               'ihooks',
               'sre_constants',
               'ConfigParser',
               'cookielib',
               'tty',
               'posixpath',
               'dircache',
               'stringprep',
               'cmd',
               'code',
               'opcode',
               'urllib2',
               'SimpleHTTPServer',
               'glob',
               'trace',
               'py_compile',
               'wave',
               'zipfile',
               'os',
               'StringIO',
               'UserList',
               'HTMLParser',
               'socket',
               'random',
               'dummy_threading',
               'SocketServer',
               'rlcompleter',
               'popen2',
               'hmac',
               'copy',
               'pdb',
               'mutex',
               'sched',
               'mailbox',
               'unittest',
               'site',
               'fpformat',
               'optparse',
               'token',
               'netrc',
               'multifile',
               'subprocess',
               'mailcap',
               'bisect',
               'toaiff',
               'pkgutil',
               'audiodev',
               'ntpath',
               'difflib',
               'types',
               'pickletools',
               'pyclbr',
               'sndhdr',
               'rexec',
               'sets',
               'sre_parse',
               'xmllib',
               'BaseHTTPServer',
               'tokenize',
               'cProfile',
               'posixfile',
               'macpath',
               'filecmp',
               'getopt',
               'smtplib',
               'aifc',
               'CGIHTTPServer',
               'cgitb',
               'ftplib',
               'UserString',
               'keyword',
               'formatter',
               'tempfile',
               'nntplib',
               'stringold',
               'robotparser',
               'rfc822',
               'stat',
               'dummy_thread',
               '__future__',
               'struct',
               'shelve',
               'imaplib',
               'sre_compile',
               'new',
               'quopri',
               'mimetypes',
               'sha',
               'symbol',
               'csv',
               'fileinput',
               'urlparse',
               'xdrlib',
               'this',
               'os2emxpath',
               'symtable',
               'imputil',
               '_strptime',
               'colorsys',
               'sitecustomize',
               'mhlib',
               'getpass',
               'sre',
               'shlex',
               'weakref',
               'modulefinder',
               'dumbdbm',
               're',
               'decimal',
               'pydoc',
               'atexit',
               '_LWPCookieJar',
               'copy_reg',
               'codecs',
               'dbhash',
               'uuid',
               'whichdb',
               'htmlentitydefs',
               'mimetools',
               'inspect',
               'macurl2path',
               'mimify',
               'heapq',
               'asynchat',
               'SimpleXMLRPCServer',
               '_MozillaCookieJar',
               'base64',
               'asyncore',
               'sunaudio',
               'imghdr',
               'sunau',
               'anydbm',
               'ctypes._endian',
               'ctypes',
               'ctypes.wintypes',
               'ctypes.util',
               'ctypes.macholib',
               'ctypes.macholib.dyld',
               'ctypes.macholib.dylib',
               'ctypes.macholib.framework',
               'distutils.debug',
               'distutils',
               'distutils.spawn',
               'distutils.core',
               'distutils.text_file',
               'distutils.sysconfig',
               'distutils.cmd',
               'distutils.extension',
               'distutils.dist',
               'distutils.versionpredicate',
               'distutils.cygwinccompiler',
               'distutils.bcppcompiler',
               'distutils.archive_util',
               'distutils.errors',
               'distutils.mwerkscompiler',
               'distutils.util',
               'distutils.fancy_getopt',
               'distutils.emxccompiler',
               'distutils.file_util',
               'distutils.dir_util',
               'distutils.version',
               'distutils.filelist',
               'distutils.unixccompiler',
               'distutils.ccompiler',
               'distutils.msvccompiler',
               'distutils.log',
               'distutils.dep_util',
               'distutils.command.build_py',
               'distutils.command.register',
               'distutils.command',
               'distutils.command.bdist_msi',
               'distutils.command.install_lib',
               'distutils.command.bdist_rpm',
               'distutils.command.install_headers',
               'distutils.command.build_ext',
               'distutils.command.install',
               'distutils.command.build',
               'distutils.command.build_clib',
               'distutils.command.upload',
               'distutils.command.build_scripts',
               'distutils.command.bdist_dumb',
               'distutils.command.bdist',
               'distutils.command.install_egg_info',
               'distutils.command.config',
               'distutils.command.bdist_wininst',
               'distutils.command.install_scripts',
               'distutils.command.install_data',
               'distutils.command.sdist',
               'distutils.command.clean',
               'distutils.tests',
               'distutils.tests.test_dist',
               'distutils.tests.test_versionpredicate',
               'distutils.tests.test_install',
               'distutils.tests.test_install_scripts',
               'distutils.tests.test_build_scripts',
               'distutils.tests.support',
               'distutils.tests.test_build_py',
               'bsddb.dbobj',
               'bsddb',
               'bsddb.db',
               'bsddb.dbrecio',
               'bsddb.dbtables',
               'bsddb.dbutils',
               'bsddb.dbshelve',
               'TYPES',
               'IN',
               'CDROM',
               'DLFCN',
               'hotshot',
               'hotshot.log',
               'hotshot.stats',
               'hotshot.stones',
               'email.charset',
               'email.generator',
               'email.message',
               'email.encoders',
               'email',
               'email.iterators',
               'email.parser',
               'email.errors',
               'email.header',
               'email._parseaddr',
               'email.utils',
               'email.feedparser',
               'email.base64mime',
               'email.quoprimime',
               'email.mime.audio',
               'email.mime.multipart',
               'email.mime.message',
               'email.mime',
               'email.mime.text',
               'email.mime.base',
               'email.mime.image',
               'email.mime.nonmultipart',
               'email.mime.application',
               'idlelib.PathBrowser',
               'idlelib.RemoteDebugger',
               'idlelib',
               'idlelib.PyShell',
               'idlelib.keybindingDialog',
               'idlelib.SearchDialogBase',
               'idlelib.idlever',
               'idlelib.dynOptionMenuWidget',
               'idlelib.CallTips',
               'idlelib.EditorWindow',
               'idlelib.WidgetRedirector',
               'idlelib.ObjectBrowser',
               'idlelib.ZoomHeight',
               'idlelib.SearchDialog',
               'idlelib.tabpage',
               'idlelib.CodeContext',
               'idlelib.IdleHistory',
               'idlelib.ScrolledList',
               'idlelib.configDialog',
               'idlelib.PyParse',
               'idlelib.Delegator',
               'idlelib.idle',
               'idlelib.AutoExpand',
               'idlelib.AutoComplete',
               'idlelib.testcode',
               'idlelib.OutputWindow',
               'idlelib.SearchEngine',
               'idlelib.ParenMatch',
               'idlelib.RemoteObjectBrowser',
               'idlelib.Percolator',
               'idlelib.MultiStatusBar',
               'idlelib.ToolTip',
               'idlelib.run',
               'idlelib.textView',
               'idlelib.AutoCompleteWindow',
               'idlelib.MultiCall',
               'idlelib.Debugger',
               'idlelib.UndoDelegator',
               'idlelib.Bindings',
               'idlelib.configHelpSourceEdit',
               'idlelib.ClassBrowser',
               'idlelib.configSectionNameDialog',
               'idlelib.GrepDialog',
               'idlelib.ScriptBinding',
               'idlelib.FormatParagraph',
               'idlelib.configHandler',
               'idlelib.CallTipWindow',
               'idlelib.TreeWidget',
               'idlelib.ColorDelegator',
               'idlelib.aboutDialog',
               'idlelib.HyperParser',
               'idlelib.FileList',
               'idlelib.rpc',
               'idlelib.IOBinding',
               'idlelib.WindowList',
               'idlelib.StackViewer',
               'idlelib.ReplaceDialog',
               'idlelib.macosxSupport',
               'sqlite3.dbapi2',
               'sqlite3',
               'logging',
               'logging.handlers',
               'logging.config',
               'compiler.transformer',
               'compiler',
               'compiler.syntax',
               'compiler.visitor',
               'compiler.pycodegen',
               'compiler.ast',
               'compiler.pyassem',
               'compiler.consts',
               'compiler.misc',
               'compiler.symbols',
               'compiler.future',
               'FileDialog',
               'Tkinter',
               'tkColorChooser',
               'Dialog',
               'turtle',
               'ScrolledText',
               'Tix',
               'tkFont',
               'tkCommonDialog',
               'Tkconstants',
               'tkMessageBox',
               'FixTk',
               'Canvas',
               'SimpleDialog',
               'Tkdnd',
               'tkFileDialog',
               'tkSimpleDialog',
               'xml',
               'xml.dom',
               'xml.dom.xmlbuilder',
               'xml.dom.domreg',
               'xml.dom.minidom',
               'xml.dom.pulldom',
               'xml.dom.NodeFilter',
               'xml.dom.minicompat',
               'xml.dom.expatbuilder',
               'xml.sax',
               'xml.sax._exceptions',
               'xml.sax.expatreader',
               'xml.sax.handler',
               'xml.sax.xmlreader',
               'xml.sax.saxutils',
               'xml.etree.ElementTree',
               'xml.etree',
               'xml.etree.ElementInclude',
               'xml.etree.cElementTree',
               'xml.etree.ElementPath',
               'xml.parsers',
               'xml.parsers.expat',
               'encodings.big5hkscs',
               'encodings.cp949',
               'encodings.mbcs',
               'encodings.bz2_codec',
               'encodings.cp1255',
               'encodings.mac_croatian',
               'encodings.uu_codec',
               'encodings.zlib_codec',
               'encodings.cp775',
               'encodings.cp1140',
               'encodings.mac_turkish',
               'encodings.euc_kr',
               'encodings',
               'encodings.cp875',
               'encodings.utf_7',
               'encodings.cp861',
               'encodings.unicode_escape',
               'encodings.cp866',
               'encodings.gb2312',
               'encodings.mac_roman',
               'encodings.big5',
               'encodings.cp1251',
               'encodings.iso8859_3',
               'encodings.iso8859_7',
               'encodings.ptcp154',
               'encodings.iso8859_9',
               'encodings.iso8859_10',
               'encodings.euc_jis_2004',
               'encodings.euc_jisx0213',
               'encodings.charmap',
               'encodings.idna',
               'encodings.cp1256',
               'encodings.cp865',
               'encodings.mac_greek',
               'encodings.cp855',
               'encodings.utf_8_sig',
               'encodings.cp424',
               'encodings.cp1026',
               'encodings.quopri_codec',
               'encodings.base64_codec',
               'encodings.utf_16_be',
               'encodings.mac_arabic',
               'encodings.iso2022_jp_1',
               'encodings.cp1258',
               'encodings.iso2022_jp',
               'encodings.cp1252',
               'encodings.iso8859_13',
               'encodings.unicode_internal',
               'encodings.iso2022_jp_3',
               'encodings.utf_16',
               'encodings.raw_unicode_escape',
               'encodings.shift_jisx0213',
               'encodings.johab',
               'encodings.punycode',
               'encodings.cp950',
               'encodings.iso2022_jp_ext',
               'encodings.iso2022_jp_2004',
               'encodings.mac_centeuro',
               'encodings.cp437',
               'encodings.gbk',
               'encodings.iso2022_jp_2',
               'encodings.cp1253',
               'encodings.mac_iceland',
               'encodings.cp737',
               'encodings.utf_8',
               'encodings.mac_farsi',
               'encodings.iso8859_1',
               'encodings.utf_16_le',
               'encodings.palmos',
               'encodings.cp850',
               'encodings.mac_cyrillic',
               'encodings.iso2022_kr',
               'encodings.gb18030',
               'encodings.iso8859_2',
               'encodings.iso8859_15',
               'encodings.cp037',
               'encodings.latin_1',
               'encodings.cp932',
               'encodings.iso8859_6',
               'encodings.koi8_u',
               'encodings.mac_romanian',
               'encodings.hex_codec',
               'encodings.undefined',
               'encodings.shift_jis_2004',
               'encodings.tis_620',
               'encodings.cp869',
               'encodings.aliases',
               'encodings.cp1257',
               'encodings.iso8859_5',
               'encodings.iso8859_16',
               'encodings.rot_13',
               'encodings.euc_jp',
               'encodings.cp1250',
               'encodings.iso8859_14',
               'encodings.cp874',
               'encodings.cp852',
               'encodings.shift_jis',
               'encodings.iso8859_11',
               'encodings.cp1006',
               'encodings.ascii',
               'encodings.hp_roman8',
               'encodings.cp856',
               'encodings.iso8859_8',
               'encodings.cp864',
               'encodings.iso8859_4',
               'encodings.cp862',
               'encodings.mac_latin2',
               'encodings.cp863',
               'encodings.koi8_r',
               'encodings.cp500',
               'encodings.string_escape',
               'encodings.cp1254',
               'encodings.cp857',
               'encodings.hz',
               'encodings.cp860',
               'wsgiref',
               'wsgiref.handlers',
               'wsgiref.headers',
               'wsgiref.util',
               'wsgiref.simple_server',
               'wsgiref.validate',
               'curses',
               'curses.panel',
               'curses.textpad',
               'curses.has_key',
               'curses.wrapper',
               'curses.ascii'],
 'POINTERS': {'BaseHTTPServer.SocketServer': 'SocketServer',
              'BaseHTTPServer.mimetools': 'mimetools',
              'BaseHTTPServer.socket': 'socket',
              'BaseHTTPServer.sys': 'sys',
              'BaseHTTPServer.time': 'time',
              'Bastion.MethodType': 'types.MethodType',
              'Bastion.rexec': 'rexec',
              'CGIHTTPServer.BaseHTTPServer': 'BaseHTTPServer',
              'CGIHTTPServer.SimpleHTTPServer': 'SimpleHTTPServer',
              'CGIHTTPServer.base64': 'base64',
              'CGIHTTPServer.binascii': 'binascii',
              'CGIHTTPServer.os': 'os',
              'CGIHTTPServer.pwd': 'pwd',
              'CGIHTTPServer.select': 'select',
              'CGIHTTPServer.shutil': 'shutil',
              'CGIHTTPServer.sys': 'sys',
              'CGIHTTPServer.urllib': 'urllib',
              'Canvas.Canvas': 'Tkinter.Canvas',
              'Canvas._cnfmerge': 'Tkinter._cnfmerge',
              'Canvas._flatten': 'Tkinter._flatten',
              'ConfigParser.re': 're',
              'Cookie.Cookie': 'Cookie',
              'Cookie.doctest': 'doctest',
              'Cookie.dumps': 'pickle.dumps',
              'Cookie.gmtime': 'time.gmtime',
              'Cookie.loads': 'pickle.loads',
              'Cookie.re': 're',
              'Cookie.string': 'string',
              'Cookie.time': 'time.time',
              'Cookie.warnings': 'warnings',
              'Dialog.*': 'Tkinter.*',
              'Dialog._cnfmerge': 'Tkinter._cnfmerge',
              'DocXMLRPCServer.CGIXMLRPCRequestHandler': 'SimpleXMLRPCServer.CGIXMLRPCRequestHandler',
              'DocXMLRPCServer.SimpleXMLRPCRequestHandler': 'SimpleXMLRPCServer.SimpleXMLRPCRequestHandler',
              'DocXMLRPCServer.SimpleXMLRPCServer': 'SimpleXMLRPCServer.SimpleXMLRPCServer',
              'DocXMLRPCServer.inspect': 'inspect',
              'DocXMLRPCServer.math': 'math',
              'DocXMLRPCServer.pydoc': 'pydoc',
              'DocXMLRPCServer.re': 're',
              'DocXMLRPCServer.resolve_dotted_attribute': 'SimpleXMLRPCServer.resolve_dotted_attribute',
              'DocXMLRPCServer.sys': 'sys',
              'FileDialog.*': 'Tkinter.*',
              'FileDialog.Dialog': 'Dialog.Dialog',
              'FileDialog.fnmatch': 'fnmatch',
              'FileDialog.os': 'os',
              'FixTk._tkinter': '_tkinter',
              'FixTk.os': 'os',
              'FixTk.sys': 'sys',
              'HTMLParser.markupbase': 'markupbase',
              'HTMLParser.re': 're',
              'IN.*': 'TYPES.*',
              'MimeWriter.mimetools': 'mimetools',
              'MimeWriter.test.test_MimeWriter': 'test.test_MimeWriter',
              'Queue._time': 'time.time',
              'Queue.deque': 'collections.deque',
              'Queue.threading': 'dummy_threading',
              'ScrolledText.*': 'Tkinter.*',
              'ScrolledText._cnfmerge': 'Tkinter._cnfmerge',
              'SimpleDialog.*': 'Tkinter.*',
              'SimpleHTTPServer.BaseHTTPServer': 'BaseHTTPServer',
              'SimpleHTTPServer.StringIO': 'StringIO.StringIO',
              'SimpleHTTPServer.cgi': 'cgi',
              'SimpleHTTPServer.mimetypes': 'mimetypes',
              'SimpleHTTPServer.os': 'os',
              'SimpleHTTPServer.posixpath': 'posixpath',
              'SimpleHTTPServer.shutil': 'shutil',
              'SimpleHTTPServer.urllib': 'urllib',
              'SimpleHTTPServer.urlparse': 'urlparse',
              'SimpleXMLRPCServer.BaseHTTPServer': 'BaseHTTPServer',
              'SimpleXMLRPCServer.Fault': 'xmlrpclib.Fault',
              'SimpleXMLRPCServer.SocketServer': 'SocketServer',
              'SimpleXMLRPCServer.fcntl': 'fcntl',
              'SimpleXMLRPCServer.os': 'os',
              'SimpleXMLRPCServer.pydoc': 'pydoc',
              'SimpleXMLRPCServer.sys': 'sys',
              'SimpleXMLRPCServer.xmlrpclib': 'xmlrpclib',
              'SocketServer.StringIO': 'StringIO.StringIO',
              'SocketServer.os': 'os',
              'SocketServer.socket': 'socket',
              'SocketServer.sys': 'sys',
              'SocketServer.threading': 'threading',
              'SocketServer.traceback': 'traceback',
              'StringIO.EINVAL': 'errno.EINVAL',
              'StringIO.sys': 'sys',
              'Tix.*': 'Tkinter.*',
              'Tix.Tkinter': 'Tkinter',
              'Tix._cnfmerge': 'Tkinter._cnfmerge',
              'Tix._default_root': 'Tkinter._default_root',
              'Tix._flatten': 'Tkinter._flatten',
              'Tix._tkinter': '_tkinter',
              'Tix.os': 'os',
              'Tkdnd.Tkinter': 'Tkinter',
              'Tkinter.*': 'Tkconstants.*',
              'Tkinter.FixTk': 'FixTk',
              'Tkinter.MacOS': 'MacOS',
              'Tkinter._tkinter': '_tkinter',
              'Tkinter.os': 'os',
              'Tkinter.sys': 'sys',
              'Tkinter.traceback': 'traceback',
              'UserDict.copy': 'copy',
              'UserString.os': 'os',
              'UserString.sys': 'sys',
              'UserString.test_support': 'test.test_support',
              '_LWPCookieJar.Cookie': 'cookielib.Cookie',
              '_LWPCookieJar.FileCookieJar': 'cookielib.FileCookieJar',
              '_LWPCookieJar.LoadError': 'cookielib.LoadError',
              '_LWPCookieJar.MISSING_FILENAME_TEXT': 'cookielib.MISSING_FILENAME_TEXT',
              '_LWPCookieJar._warn_unhandled_exception': 'cookielib._warn_unhandled_exception',
              '_LWPCookieJar.iso2time': 'cookielib.iso2time',
              '_LWPCookieJar.join_header_words': 'cookielib.join_header_words',
              '_LWPCookieJar.re': 're',
              '_LWPCookieJar.split_header_words': 'cookielib.split_header_words',
              '_LWPCookieJar.time': 'time',
              '_LWPCookieJar.time2isoz': 'cookielib.time2isoz',
              '_MozillaCookieJar.Cookie': 'cookielib.Cookie',
              '_MozillaCookieJar.FileCookieJar': 'cookielib.FileCookieJar',
              '_MozillaCookieJar.LoadError': 'cookielib.LoadError',
              '_MozillaCookieJar.MISSING_FILENAME_TEXT': 'cookielib.MISSING_FILENAME_TEXT',
              '_MozillaCookieJar._warn_unhandled_exception': 'cookielib._warn_unhandled_exception',
              '_MozillaCookieJar.re': 're',
              '_MozillaCookieJar.time': 'time',
              '_strptime.IGNORECASE': 're.IGNORECASE',
              '_strptime._thread_allocate_lock': 'dummy_thread.allocate_lock',
              '_strptime.calendar': 'calendar',
              '_strptime.datetime_date': 'datetime.date',
              '_strptime.locale': 'locale',
              '_strptime.re_compile': 're.compile',
              '_strptime.re_escape': 're.escape',
              '_strptime.time': 'time',
              '_threading_local.RLock': 'threading.RLock',
              '_threading_local.currentThread': 'threading.currentThread',
              '_threading_local.threading': 'threading',
              'aifc.Chunk': 'chunk.Chunk',
              'aifc.__builtin__': '__builtin__',
              'aifc.audioop': 'audioop',
              'aifc.cl': 'cl',
              'aifc.math': 'math',
              'aifc.struct': 'struct',
              'aifc.sys': 'sys',
              'anydbm.whichdb': 'whichdb.whichdb',
              'asynchat.asyncore': 'asyncore',
              'asynchat.deque': 'collections.deque',
              'asynchat.socket': 'socket',
              'asyncore.EALREADY': 'errno.EALREADY',
              'asyncore.ECONNRESET': 'errno.ECONNRESET',
              'asyncore.EINPROGRESS': 'errno.EINPROGRESS',
              'asyncore.EINTR': 'errno.EINTR',
              'asyncore.EISCONN': 'errno.EISCONN',
              'asyncore.ENOTCONN': 'errno.ENOTCONN',
              'asyncore.ESHUTDOWN': 'errno.ESHUTDOWN',
              'asyncore.EWOULDBLOCK': 'errno.EWOULDBLOCK',
              'asyncore.errorcode': 'errno.errorcode',
              'asyncore.fcntl': 'fcntl',
              'asyncore.os': 'os',
              'asyncore.select': 'select',
              'asyncore.socket': 'socket',
              'asyncore.sys': 'sys',
              'asyncore.time': 'time',
              'atexit.sys': 'sys',
              'atexit.traceback': 'traceback',
              'audiodev.AL': 'AL',
              'audiodev.Audio_mac': 'Audio_mac',
              'audiodev.SUNAUDIODEV': 'SUNAUDIODEV',
              'audiodev.aifc': 'aifc',
              'audiodev.al': 'al',
              'audiodev.audioop': 'audioop',
              'audiodev.sunaudiodev': 'sunaudiodev',
              'audiodev.sys': 'sys',
              'audiodev.time': 'time',
              'base64.binascii': 'binascii',
              'base64.getopt': 'getopt',
              'base64.re': 're',
              'base64.struct': 'struct',
              'base64.sys': 'sys',
              'bdb.__main__': '__main__',
              'bdb.linecache': 'linecache',
              'bdb.os': 'os',
              'bdb.repr': 'repr',
              'bdb.sys': 'sys',
              'bdb.types': 'types',
              'binhex.FInfo': 'Carbon.File.FInfo',
              'binhex.FSSpec': 'Carbon.File.FSSpec',
              'binhex.binascii': 'binascii',
              'binhex.macfs': 'macfs',
              'binhex.openrf': 'MacOS.openrf',
              'binhex.os': 'os',
              'binhex.struct': 'struct',
              'binhex.sys': 'sys',
              'bisect.bisect': '_bisect.bisect',
              'bisect.bisect_left': '_bisect.bisect_left',
              'bisect.bisect_right': '_bisect.bisect_right',
              'bisect.insort': '_bisect.insort',
              'bisect.insort_left': '_bisect.insort_left',
              'bisect.insort_right': '_bisect.insort_right',
              'bsddb.UserDict': 'UserDict',
              'bsddb._DeadlockWrap': 'bsddb.dbutils.DeadlockWrap',
              'bsddb._bsddb': '_bsddb',
              'bsddb._pybsddb': '_pybsddb',
              'bsddb.db.*': '_bsddb.*',
              'bsddb.db.__version__': '_bsddb.__version__',
              'bsddb.dbobj.DictMixin': 'UserDict.DictMixin',
              'bsddb.dbobj.db': 'bsddb.db',
              'bsddb.dbrecio.errno': 'errno',
              'bsddb.dbrecio.string': 'string',
              'bsddb.dbshelve.DictMixin': 'UserDict.DictMixin',
              'bsddb.dbshelve.cPickle': 'cPickle',
              'bsddb.dbshelve.db': 'bsddb.db',
              'bsddb.dbtables.*': 'bsddb.db.*',
              'bsddb.dbtables.ListType': 'types.ListType',
              'bsddb.dbtables.StringType': 'types.StringType',
              'bsddb.dbtables.copy': 'copy',
              'bsddb.dbtables.pickle': 'cPickle',
              'bsddb.dbtables.random': 'random',
              'bsddb.dbtables.re': 're',
              'bsddb.dbtables.struct': 'struct',
              'bsddb.dbtables.sys': 'sys',
              'bsddb.dbutils._sleep': 'time.sleep',
              'bsddb.dbutils.db': 'bsddb.db',
              'bsddb.os': 'os',
              'bsddb.ref': 'weakref.ref',
              'bsddb.sys': 'sys',
              'bsddb.thread': 'thread',
              'cProfile.OptionParser': 'optparse.OptionParser',
              'cProfile.__main__': '__main__',
              'cProfile._lsprof': '_lsprof',
              'cProfile.marshal': 'marshal',
              'cProfile.os': 'os',
              'cProfile.pstats': 'pstats',
              'cProfile.sys': 'sys',
              'calendar._locale': 'locale',
              'calendar.datetime': 'datetime',
              'calendar.optparse': 'optparse',
              'calendar.sys': 'sys',
              'calendar.with_statement': '__future__.with_statement',
              'cgi.StringIO': 'StringIO.StringIO',
              'cgi.UserDict': 'UserDict',
              'cgi.attrgetter': 'operator.attrgetter',
              'cgi.mimetools': 'mimetools',
              'cgi.os': 'os',
              'cgi.re': 're',
              'cgi.rfc822': 'rfc822',
              'cgi.sys': 'sys',
              'cgi.tempfile': 'tempfile',
              'cgi.traceback': 'traceback',
              'cgi.urllib': 'urllib',
              'cgitb.inspect': 'inspect',
              'cgitb.keyword': 'keyword',
              'cgitb.linecache': 'linecache',
              'cgitb.os': 'os',
              'cgitb.pydoc': 'pydoc',
              'cgitb.sys': 'sys',
              'cgitb.tempfile': 'tempfile',
              'cgitb.time': 'time',
              'cgitb.tokenize': 'tokenize',
              'cgitb.traceback': 'traceback',
              'cgitb.types': 'types',
              'chunk.struct': 'struct',
              'cmd.readline': 'readline',
              'cmd.string': 'string',
              'cmd.sys': 'sys',
              'code.CommandCompiler': 'codeop.CommandCompiler',
              'code.compile_command': 'codeop.compile_command',
              'code.pdb': 'pdb',
              'code.readline': 'readline',
              'code.sys': 'sys',
              'code.traceback': 'traceback',
              'codecs.*': '_codecs.*',
              'codecs.__builtin__': '__builtin__',
              'codecs.encodings': 'encodings',
              'codecs.sys': 'sys',
              'codeop.__future__': '__future__',
              'commands.os': 'os',
              'compileall.getopt': 'getopt',
              'compileall.os': 'os',
              'compileall.py_compile': 'py_compile',
              'compileall.re': 're',
              'compileall.sys': 'sys',
              'compiler.ast.CO_VARARGS': 'compiler.consts.CO_VARARGS',
              'compiler.ast.CO_VARKEYWORDS': 'compiler.consts.CO_VARKEYWORDS',
              'compiler.compile': 'compiler.pycodegen.compile',
              'compiler.compileFile': 'compiler.pycodegen.compileFile',
              'compiler.future.ast': 'compiler.ast',
              'compiler.future.parseFile': 'compiler.parseFile',
              'compiler.future.sys': 'sys',
              'compiler.future.walk': 'compiler.walk',
              'compiler.parse': 'compiler.transformer.parse',
              'compiler.parseFile': 'compiler.transformer.parseFile',
              'compiler.pyassem.CO_NEWLOCALS': 'compiler.consts.CO_NEWLOCALS',
              'compiler.pyassem.CO_OPTIMIZED': 'compiler.consts.CO_OPTIMIZED',
              'compiler.pyassem.CO_VARARGS': 'compiler.consts.CO_VARARGS',
              'compiler.pyassem.CO_VARKEYWORDS': 'compiler.consts.CO_VARKEYWORDS',
              'compiler.pyassem.dis': 'dis',
              'compiler.pyassem.misc': 'compiler.misc',
              'compiler.pyassem.new': 'new',
              'compiler.pyassem.sys': 'sys',
              'compiler.pycodegen.CO_FUTURE_ABSIMPORT': 'compiler.consts.CO_FUTURE_ABSIMPORT',
              'compiler.pycodegen.CO_FUTURE_DIVISION': 'compiler.consts.CO_FUTURE_DIVISION',
              'compiler.pycodegen.CO_FUTURE_WITH_STATEMENT': 'compiler.consts.CO_FUTURE_WITH_STATEMENT',
              'compiler.pycodegen.CO_GENERATOR': 'compiler.consts.CO_GENERATOR',
              'compiler.pycodegen.CO_NESTED': 'compiler.consts.CO_NESTED',
              'compiler.pycodegen.CO_NEWLOCALS': 'compiler.consts.CO_NEWLOCALS',
              'compiler.pycodegen.CO_VARARGS': 'compiler.consts.CO_VARARGS',
              'compiler.pycodegen.CO_VARKEYWORDS': 'compiler.consts.CO_VARKEYWORDS',
              'compiler.pycodegen.SC_CELL': 'compiler.consts.SC_CELL',
              'compiler.pycodegen.SC_FREE': 'compiler.consts.SC_FREE',
              'compiler.pycodegen.SC_GLOBAL': 'compiler.consts.SC_GLOBAL',
              'compiler.pycodegen.SC_LOCAL': 'compiler.consts.SC_LOCAL',
              'compiler.pycodegen.StringIO': 'cStringIO.StringIO',
              'compiler.pycodegen.TupleArg': 'compiler.pyassem.TupleArg',
              'compiler.pycodegen.ast': 'compiler.ast',
              'compiler.pycodegen.future': 'compiler.future',
              'compiler.pycodegen.imp': 'imp',
              'compiler.pycodegen.marshal': 'marshal',
              'compiler.pycodegen.misc': 'compiler.misc',
              'compiler.pycodegen.os': 'os',
              'compiler.pycodegen.parse': 'compiler.parse',
              'compiler.pycodegen.pprint': 'pprint',
              'compiler.pycodegen.pyassem': 'compiler.pyassem',
              'compiler.pycodegen.struct': 'struct',
              'compiler.pycodegen.symbols': 'compiler.symbols',
              'compiler.pycodegen.syntax': 'compiler.syntax',
              'compiler.pycodegen.sys': 'sys',
              'compiler.pycodegen.walk': 'compiler.walk',
              'compiler.symbols.SC_CELL': 'compiler.consts.SC_CELL',
              'compiler.symbols.SC_FREE': 'compiler.consts.SC_FREE',
              'compiler.symbols.SC_GLOBAL': 'compiler.consts.SC_GLOBAL',
              'compiler.symbols.SC_LOCAL': 'compiler.consts.SC_LOCAL',
              'compiler.symbols.SC_UNKNOWN': 'compiler.consts.SC_UNKNOWN',
              'compiler.symbols.ast': 'compiler.ast',
              'compiler.symbols.mangle': 'compiler.misc.mangle',
              'compiler.symbols.parseFile': 'compiler.parseFile',
              'compiler.symbols.symtable': 'symtable',
              'compiler.symbols.sys': 'sys',
              'compiler.symbols.types': 'types',
              'compiler.symbols.walk': 'compiler.walk',
              'compiler.syntax.ast': 'compiler.ast',
              'compiler.syntax.walk': 'compiler.walk',
              'compiler.transformer.*': 'compiler.ast.*',
              'compiler.transformer.CO_VARARGS': 'compiler.consts.CO_VARARGS',
              'compiler.transformer.CO_VARKEYWORDS': 'compiler.consts.CO_VARKEYWORDS',
              'compiler.transformer.OP_APPLY': 'compiler.consts.OP_APPLY',
              'compiler.transformer.OP_ASSIGN': 'compiler.consts.OP_ASSIGN',
              'compiler.transformer.OP_DELETE': 'compiler.consts.OP_DELETE',
              'compiler.transformer.parser': 'parser',
              'compiler.transformer.symbol': 'symbol',
              'compiler.transformer.sys': 'sys',
              'compiler.transformer.token': 'token',
              'compiler.visitor.ast': 'compiler.ast',
              'compiler.walk': 'compiler.visitor.walk',
              'contextlib.sys': 'sys',
              'cookielib.LWPCookieJar': '_LWPCookieJar.LWPCookieJar',
              'cookielib.MozillaCookieJar': '_MozillaCookieJar.MozillaCookieJar',
              'cookielib.StringIO': 'StringIO',
              'cookielib._threading': 'dummy_threading',
              'cookielib.copy': 'copy',
              'cookielib.httplib': 'httplib',
              'cookielib.logging': 'logging',
              'cookielib.lwp_cookie_str': '_LWPCookieJar.lwp_cookie_str',
              'cookielib.re': 're',
              'cookielib.time': 'time',
              'cookielib.timegm': 'calendar.timegm',
              'cookielib.traceback': 'traceback',
              'cookielib.urllib': 'urllib',
              'cookielib.urlparse': 'urlparse',
              'cookielib.warnings': 'warnings',
              'copy.PyStringMap': 'org.python.core.PyStringMap',
              'copy.dispatch_table': 'copy_reg.dispatch_table',
              'copy.repr': 'repr',
              'copy.sys': 'sys',
              'copy.types': 'types',
              'copy_reg._ClassType': 'types.ClassType',
              'csv.Error': '_csv.Error',
              'csv.QUOTE_ALL': '_csv.QUOTE_ALL',
              'csv.QUOTE_MINIMAL': '_csv.QUOTE_MINIMAL',
              'csv.QUOTE_NONE': '_csv.QUOTE_NONE',
              'csv.QUOTE_NONNUMERIC': '_csv.QUOTE_NONNUMERIC',
              'csv.StringIO': 'StringIO.StringIO',
              'csv._Dialect': '_csv.Dialect',
              'csv.__doc__': '_csv.__doc__',
              'csv.__version__': '_csv.__version__',
              'csv.field_size_limit': '_csv.field_size_limit',
              'csv.get_dialect': '_csv.get_dialect',
              'csv.list_dialects': '_csv.list_dialects',
              'csv.re': 're',
              'csv.reader': '_csv.reader',
              'csv.register_dialect': '_csv.register_dialect',
              'csv.unregister_dialect': '_csv.unregister_dialect',
              'csv.writer': '_csv.writer',
              'ctypes.ArgumentError': '_ctypes.ArgumentError',
              'ctypes.Array': '_ctypes.Array',
              'ctypes.BigEndianStructure': 'ctypes._endian.BigEndianStructure',
              'ctypes.FormatError': '_ctypes.FormatError',
              'ctypes.LittleEndianStructure': 'ctypes._endian.LittleEndianStructure',
              'ctypes.RTLD_GLOBAL': '_ctypes.RTLD_GLOBAL',
              'ctypes.RTLD_LOCAL': '_ctypes.RTLD_LOCAL',
              'ctypes.Structure': '_ctypes.Structure',
              'ctypes.Union': '_ctypes.Union',
              'ctypes._CFuncPtr': '_ctypes.CFuncPtr',
              'ctypes._FUNCFLAG_CDECL': '_ctypes.FUNCFLAG_CDECL',
              'ctypes._FUNCFLAG_PYTHONAPI': '_ctypes.FUNCFLAG_PYTHONAPI',
              'ctypes._FUNCFLAG_STDCALL': '_ctypes.FUNCFLAG_STDCALL',
              'ctypes._Pointer': '_ctypes._Pointer',
              'ctypes._SimpleCData': '_ctypes._SimpleCData',
              'ctypes._calcsize': 'struct.calcsize',
              'ctypes._cast_addr': '_ctypes._cast_addr',
              'ctypes._check_HRESULT': '_ctypes._check_HRESULT',
              'ctypes._ctypes_version': '_ctypes.__version__',
              'ctypes._dlopen': '_ctypes.dlopen',
              'ctypes._endian.*': 'ctypes.*',
              'ctypes._endian.sys': 'sys',
              'ctypes._memmove_addr': '_ctypes._memmove_addr',
              'ctypes._memset_addr': '_ctypes._memset_addr',
              'ctypes._os': 'os',
              'ctypes._string_at_addr': '_ctypes._string_at_addr',
              'ctypes._sys': 'sys',
              'ctypes._wstring_at_addr': '_ctypes._wstring_at_addr',
              'ctypes.addressof': '_ctypes.addressof',
              'ctypes.alignment': '_ctypes.alignment',
              'ctypes.byref': '_ctypes.byref',
              'ctypes.calcsize': 'struct.calcsize',
              'ctypes.gestalt': 'gestalt',
              'ctypes.macholib.dyld.*': 'itertools.*',
              'ctypes.macholib.dyld.dylib_info': 'ctypes.macholib.dylib.dylib_info',
              'ctypes.macholib.dyld.framework_info': 'ctypes.macholib.framework.framework_info',
              'ctypes.macholib.dyld.os': 'os',
              'ctypes.macholib.dylib.re': 're',
              'ctypes.macholib.framework.re': 're',
              'ctypes.resize': '_ctypes.resize',
              'ctypes.set_conversion_mode': '_ctypes.set_conversion_mode',
              'ctypes.sizeof': '_ctypes.sizeof',
              'ctypes.util._dyld_find': 'ctypes.macholib.dyld.dyld_find',
              'ctypes.util.cdll': 'ctypes.cdll',
              'ctypes.util.errno': 'errno',
              'ctypes.util.os': 'os',
              'ctypes.util.re': 're',
              'ctypes.util.sys': 'sys',
              'ctypes.util.tempfile': 'tempfile',
              'ctypes.wintypes.*': 'ctypes.*',
              'ctypes.wintypes._SimpleCData': 'ctypes._SimpleCData',
              'curses.*': '_curses.*',
              'curses._curses': '_curses',
              'curses.curses': 'curses',
              'curses.has_key': 'curses.has_key.has_key',
              'curses.has_key._curses': '_curses',
              'curses.panel.*': '_curses_panel.*',
              'curses.textpad.ascii': 'curses.ascii',
              'curses.textpad.curses': 'curses',
              'curses.wrapper': 'curses.wrapper.wrapper',
              'curses.wrapper.curses': 'curses',
              'curses.wrapper.sys': 'sys',
              'dbhash.bsddb': 'bsddb',
              'dbhash.sys': 'sys',
              'decimal._copy': 'copy',
              'decimal.doctest': 'doctest',
              'decimal.re': 're',
              'decimal.string': 'string',
              'decimal.sys': 'sys',
              'decimal.threading': 'threading',
              'difflib.difflib': 'difflib',
              'difflib.doctest': 'doctest',
              'difflib.heapq': 'heapq',
              'difflib.re': 're',
              'dircache.os': 'os',
              'dis.*': 'opcode.*',
              'dis._opcodes_all': 'opcode.__all__',
              'dis.sys': 'sys',
              'dis.types': 'types',
              'distutils.archive_util.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'distutils.archive_util.log': 'distutils.log',
              'distutils.archive_util.mkpath': 'distutils.dir_util.mkpath',
              'distutils.archive_util.os': 'os',
              'distutils.archive_util.spawn': 'distutils.spawn.spawn',
              'distutils.archive_util.zipfile': 'zipfile',
              'distutils.bcppcompiler.CCompiler': 'distutils.ccompiler.CCompiler',
              'distutils.bcppcompiler.CompileError': 'distutils.errors.CompileError',
              'distutils.bcppcompiler.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'distutils.bcppcompiler.DistutilsPlatformError': 'distutils.errors.DistutilsPlatformError',
              'distutils.bcppcompiler.LibError': 'distutils.errors.LibError',
              'distutils.bcppcompiler.LinkError': 'distutils.errors.LinkError',
              'distutils.bcppcompiler.UnknownFileError': 'distutils.errors.UnknownFileError',
              'distutils.bcppcompiler.gen_lib_options': 'distutils.ccompiler.gen_lib_options',
              'distutils.bcppcompiler.gen_preprocess_options': 'distutils.ccompiler.gen_preprocess_options',
              'distutils.bcppcompiler.log': 'distutils.log',
              'distutils.bcppcompiler.newer': 'distutils.dep_util.newer',
              'distutils.bcppcompiler.os': 'os',
              'distutils.bcppcompiler.sys': 'sys',
              'distutils.bcppcompiler.write_file': 'distutils.file_util.write_file',
              'distutils.ccompiler.*': 'distutils.errors.*',
              'distutils.ccompiler.DEBUG': 'distutils.debug.DEBUG',
              'distutils.ccompiler.FancyGetopt': 'distutils.fancy_getopt.FancyGetopt',
              'distutils.ccompiler.copy': 'copy.copy',
              'distutils.ccompiler.execute': 'distutils.util.execute',
              'distutils.ccompiler.log': 'distutils.log',
              'distutils.ccompiler.mkpath': 'distutils.dir_util.mkpath',
              'distutils.ccompiler.move_file': 'distutils.file_util.move_file',
              'distutils.ccompiler.newer_group': 'distutils.dep_util.newer_group',
              'distutils.ccompiler.newer_pairwise': 'distutils.dep_util.newer_pairwise',
              'distutils.ccompiler.os': 'os',
              'distutils.ccompiler.re': 're',
              'distutils.ccompiler.spawn': 'distutils.spawn.spawn',
              'distutils.ccompiler.split_quoted': 'distutils.util.split_quoted',
              'distutils.ccompiler.sys': 'sys',
              'distutils.ccompiler.tempfile': 'tempfile',
              'distutils.cmd.*': 'distutils.errors.*',
              'distutils.cmd.DEBUG': 'distutils.debug.DEBUG',
              'distutils.cmd.Distribution': 'distutils.dist.Distribution',
              'distutils.cmd.archive_util': 'distutils.archive_util',
              'distutils.cmd.dep_util': 'distutils.dep_util',
              'distutils.cmd.dir_util': 'distutils.dir_util',
              'distutils.cmd.file_util': 'distutils.file_util',
              'distutils.cmd.log': 'distutils.log',
              'distutils.cmd.longopt_xlate': 'distutils.fancy_getopt.longopt_xlate',
              'distutils.cmd.os': 'os',
              'distutils.cmd.re': 're',
              'distutils.cmd.spawn': 'distutils.spawn.spawn',
              'distutils.cmd.string': 'string',
              'distutils.cmd.sys': 'sys',
              'distutils.cmd.util': 'distutils.util',
              'distutils.command.bdist.*': 'distutils.errors.*',
              'distutils.command.bdist.Command': 'distutils.core.Command',
              'distutils.command.bdist.FancyGetopt': 'distutils.fancy_getopt.FancyGetopt',
              'distutils.command.bdist.get_platform': 'distutils.util.get_platform',
              'distutils.command.bdist.os': 'os',
              'distutils.command.bdist.string': 'string',
              'distutils.command.bdist_dumb.*': 'distutils.errors.*',
              'distutils.command.bdist_dumb.Command': 'distutils.core.Command',
              'distutils.command.bdist_dumb.create_tree': 'distutils.dir_util.create_tree',
              'distutils.command.bdist_dumb.ensure_relative': 'distutils.dir_util.ensure_relative',
              'distutils.command.bdist_dumb.get_platform': 'distutils.util.get_platform',
              'distutils.command.bdist_dumb.get_python_version': 'distutils.sysconfig.get_python_version',
              'distutils.command.bdist_dumb.log': 'distutils.log',
              'distutils.command.bdist_dumb.os': 'os',
              'distutils.command.bdist_dumb.remove_tree': 'distutils.dir_util.remove_tree',
              'distutils.command.bdist_msi.Command': 'distutils.core.Command',
              'distutils.command.bdist_msi.Dialog': 'msilib.Dialog',
              'distutils.command.bdist_msi.Directory': 'msilib.Directory',
              'distutils.command.bdist_msi.DistutilsOptionError': 'distutils.errors.DistutilsOptionError',
              'distutils.command.bdist_msi.Feature': 'msilib.Feature',
              'distutils.command.bdist_msi.StrictVersion': 'distutils.version.StrictVersion',
              'distutils.command.bdist_msi.add_data': 'msilib.add_data',
              'distutils.command.bdist_msi.get_platform': 'distutils.util.get_platform',
              'distutils.command.bdist_msi.get_python_version': 'distutils.sysconfig.get_python_version',
              'distutils.command.bdist_msi.log': 'distutils.log',
              'distutils.command.bdist_msi.msilib': 'msilib',
              'distutils.command.bdist_msi.os': 'os',
              'distutils.command.bdist_msi.remove_tree': 'distutils.dir_util.remove_tree',
              'distutils.command.bdist_msi.schema': 'msilib.schema',
              'distutils.command.bdist_msi.sequence': 'msilib.sequence',
              'distutils.command.bdist_msi.string': 'string',
              'distutils.command.bdist_msi.sys': 'sys',
              'distutils.command.bdist_msi.text': 'msilib.text',
              'distutils.command.bdist_rpm.*': 'distutils.errors.*',
              'distutils.command.bdist_rpm.Command': 'distutils.core.Command',
              'distutils.command.bdist_rpm.DEBUG': 'distutils.debug.DEBUG',
              'distutils.command.bdist_rpm.get_platform': 'distutils.util.get_platform',
              'distutils.command.bdist_rpm.get_python_version': 'distutils.sysconfig.get_python_version',
              'distutils.command.bdist_rpm.glob': 'glob',
              'distutils.command.bdist_rpm.log': 'distutils.log',
              'distutils.command.bdist_rpm.os': 'os',
              'distutils.command.bdist_rpm.string': 'string',
              'distutils.command.bdist_rpm.sys': 'sys',
              'distutils.command.bdist_rpm.write_file': 'distutils.file_util.write_file',
              'distutils.command.bdist_wininst.*': 'distutils.errors.*',
              'distutils.command.bdist_wininst.Command': 'distutils.core.Command',
              'distutils.command.bdist_wininst.create_tree': 'distutils.dir_util.create_tree',
              'distutils.command.bdist_wininst.distutils': 'distutils',
              'distutils.command.bdist_wininst.get_build_version': 'distutils.msvccompiler.get_build_version',
              'distutils.command.bdist_wininst.get_platform': 'distutils.util.get_platform',
              'distutils.command.bdist_wininst.get_python_version': 'distutils.sysconfig.get_python_version',
              'distutils.command.bdist_wininst.log': 'distutils.log',
              'distutils.command.bdist_wininst.mktemp': 'tempfile.mktemp',
              'distutils.command.bdist_wininst.os': 'os',
              'distutils.command.bdist_wininst.remove_tree': 'distutils.dir_util.remove_tree',
              'distutils.command.bdist_wininst.string': 'string',
              'distutils.command.bdist_wininst.struct': 'struct',
              'distutils.command.bdist_wininst.sys': 'sys',
              'distutils.command.bdist_wininst.time': 'time',
              'distutils.command.build.Command': 'distutils.core.Command',
              'distutils.command.build.get_platform': 'distutils.util.get_platform',
              'distutils.command.build.os': 'os',
              'distutils.command.build.show_compilers': 'distutils.ccompiler.show_compilers',
              'distutils.command.build.sys': 'sys',
              'distutils.command.build_clib.*': 'distutils.errors.*',
              'distutils.command.build_clib.Command': 'distutils.core.Command',
              'distutils.command.build_clib.customize_compiler': 'distutils.sysconfig.customize_compiler',
              'distutils.command.build_clib.log': 'distutils.log',
              'distutils.command.build_clib.new_compiler': 'distutils.ccompiler.new_compiler',
              'distutils.command.build_clib.os': 'os',
              'distutils.command.build_clib.show_compilers': 'distutils.ccompiler.show_compilers',
              'distutils.command.build_clib.string': 'string',
              'distutils.command.build_ext.*': 'distutils.errors.*',
              'distutils.command.build_ext.Command': 'distutils.core.Command',
              'distutils.command.build_ext.Extension': 'distutils.extension.Extension',
              'distutils.command.build_ext.MSVCCompiler': 'distutils.msvccompiler.MSVCCompiler',
              'distutils.command.build_ext.customize_compiler': 'distutils.sysconfig.customize_compiler',
              'distutils.command.build_ext.get_config_var': 'distutils.sysconfig.get_config_var',
              'distutils.command.build_ext.get_python_version': 'distutils.sysconfig.get_python_version',
              'distutils.command.build_ext.log': 'distutils.log',
              'distutils.command.build_ext.new_compiler': 'distutils.ccompiler.new_compiler',
              'distutils.command.build_ext.newer_group': 'distutils.dep_util.newer_group',
              'distutils.command.build_ext.os': 'os',
              'distutils.command.build_ext.re': 're',
              'distutils.command.build_ext.show_compilers': 'distutils.ccompiler.show_compilers',
              'distutils.command.build_ext.string': 'string',
              'distutils.command.build_ext.sys': 'sys',
              'distutils.command.build_ext.sysconfig': 'distutils.sysconfig',
              'distutils.command.build_py.*': 'distutils.errors.*',
              'distutils.command.build_py.Command': 'distutils.core.Command',
              'distutils.command.build_py.byte_compile': 'distutils.util.byte_compile',
              'distutils.command.build_py.convert_path': 'distutils.util.convert_path',
              'distutils.command.build_py.glob': 'glob.glob',
              'distutils.command.build_py.log': 'distutils.log',
              'distutils.command.build_py.os': 'os',
              'distutils.command.build_py.string': 'string',
              'distutils.command.build_py.sys': 'sys',
              'distutils.command.build_scripts.Command': 'distutils.core.Command',
              'distutils.command.build_scripts.ST_MODE': 'stat.ST_MODE',
              'distutils.command.build_scripts.convert_path': 'distutils.util.convert_path',
              'distutils.command.build_scripts.log': 'distutils.log',
              'distutils.command.build_scripts.newer': 'distutils.dep_util.newer',
              'distutils.command.build_scripts.os': 'os',
              'distutils.command.build_scripts.re': 're',
              'distutils.command.build_scripts.sys': 'sys',
              'distutils.command.build_scripts.sysconfig': 'distutils.sysconfig',
              'distutils.command.clean.Command': 'distutils.core.Command',
              'distutils.command.clean.log': 'distutils.log',
              'distutils.command.clean.os': 'os',
              'distutils.command.clean.remove_tree': 'distutils.dir_util.remove_tree',
              'distutils.command.config.*': 'types.*',
              'distutils.command.config.CCompiler': 'distutils.ccompiler.CCompiler',
              'distutils.command.config.Command': 'distutils.core.Command',
              'distutils.command.config.CompileError': 'distutils.ccompiler.CompileError',
              'distutils.command.config.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'distutils.command.config.LinkError': 'distutils.ccompiler.LinkError',
              'distutils.command.config.customize_compiler': 'distutils.sysconfig.customize_compiler',
              'distutils.command.config.log': 'distutils.log',
              'distutils.command.config.new_compiler': 'distutils.ccompiler.new_compiler',
              'distutils.command.config.os': 'os',
              'distutils.command.config.re': 're',
              'distutils.command.config.string': 'string',
              'distutils.command.config.sys': 'sys',
              'distutils.command.install.*': 'types.*',
              'distutils.command.install.Command': 'distutils.core.Command',
              'distutils.command.install.DEBUG': 'distutils.debug.DEBUG',
              'distutils.command.install.DistutilsOptionError': 'distutils.errors.DistutilsOptionError',
              'distutils.command.install.DistutilsPlatformError': 'distutils.errors.DistutilsPlatformError',
              'distutils.command.install.change_root': 'distutils.util.change_root',
              'distutils.command.install.convert_path': 'distutils.util.convert_path',
              'distutils.command.install.get_config_vars': 'distutils.sysconfig.get_config_vars',
              'distutils.command.install.glob': 'glob.glob',
              'distutils.command.install.log': 'distutils.log',
              'distutils.command.install.longopt_xlate': 'distutils.fancy_getopt.longopt_xlate',
              'distutils.command.install.os': 'os',
              'distutils.command.install.pprint': 'pprint.pprint',
              'distutils.command.install.string': 'string',
              'distutils.command.install.subst_vars': 'distutils.util.subst_vars',
              'distutils.command.install.sys': 'sys',
              'distutils.command.install.write_file': 'distutils.file_util.write_file',
              'distutils.command.install_data.Command': 'distutils.core.Command',
              'distutils.command.install_data.StringType': 'types.StringType',
              'distutils.command.install_data.change_root': 'distutils.util.change_root',
              'distutils.command.install_data.convert_path': 'distutils.util.convert_path',
              'distutils.command.install_data.os': 'os',
              'distutils.command.install_egg_info.Command': 'distutils.cmd.Command',
              'distutils.command.install_egg_info.dir_util': 'distutils.dir_util',
              'distutils.command.install_egg_info.log': 'distutils.log',
              'distutils.command.install_egg_info.os': 'os',
              'distutils.command.install_egg_info.re': 're',
              'distutils.command.install_egg_info.sys': 'sys',
              'distutils.command.install_headers.Command': 'distutils.core.Command',
              'distutils.command.install_headers.os': 'os',
              'distutils.command.install_lib.Command': 'distutils.core.Command',
              'distutils.command.install_lib.DistutilsOptionError': 'distutils.errors.DistutilsOptionError',
              'distutils.command.install_lib.IntType': 'types.IntType',
              'distutils.command.install_lib.byte_compile': 'distutils.util.byte_compile',
              'distutils.command.install_lib.os': 'os',
              'distutils.command.install_lib.string': 'string',
              'distutils.command.install_lib.sys': 'sys',
              'distutils.command.install_scripts.Command': 'distutils.core.Command',
              'distutils.command.install_scripts.ST_MODE': 'stat.ST_MODE',
              'distutils.command.install_scripts.log': 'distutils.log',
              'distutils.command.install_scripts.os': 'os',
              'distutils.command.register.*': 'distutils.errors.*',
              'distutils.command.register.Command': 'distutils.core.Command',
              'distutils.command.register.ConfigParser': 'ConfigParser',
              'distutils.command.register.StringIO': 'StringIO',
              'distutils.command.register.getpass': 'getpass',
              'distutils.command.register.os': 'os',
              'distutils.command.register.string': 'string',
              'distutils.command.register.sys': 'sys',
              'distutils.command.register.urllib2': 'urllib2',
              'distutils.command.register.urlparse': 'urlparse',
              'distutils.command.sdist.*': 'distutils.errors.*',
              'distutils.command.sdist.ARCHIVE_FORMATS': 'distutils.archive_util.ARCHIVE_FORMATS',
              'distutils.command.sdist.Command': 'distutils.core.Command',
              'distutils.command.sdist.FancyGetopt': 'distutils.fancy_getopt.FancyGetopt',
              'distutils.command.sdist.FileList': 'distutils.filelist.FileList',
              'distutils.command.sdist.TextFile': 'distutils.text_file.TextFile',
              'distutils.command.sdist.archive_util': 'distutils.archive_util',
              'distutils.command.sdist.dep_util': 'distutils.dep_util',
              'distutils.command.sdist.dir_util': 'distutils.dir_util',
              'distutils.command.sdist.file_util': 'distutils.file_util',
              'distutils.command.sdist.glob': 'glob.glob',
              'distutils.command.sdist.log': 'distutils.log',
              'distutils.command.sdist.os': 'os',
              'distutils.command.sdist.string': 'string',
              'distutils.command.sdist.sys': 'sys',
              'distutils.command.upload.*': 'distutils.errors.*',
              'distutils.command.upload.Command': 'distutils.core.Command',
              'distutils.command.upload.ConfigParser': 'ConfigParser',
              'distutils.command.upload.StringIO': 'cStringIO',
              'distutils.command.upload.base64': 'base64',
              'distutils.command.upload.httplib': 'httplib',
              'distutils.command.upload.log': 'distutils.log',
              'distutils.command.upload.md5': 'hashlib.md5',
              'distutils.command.upload.os': 'os',
              'distutils.command.upload.platform': 'platform',
              'distutils.command.upload.socket': 'socket',
              'distutils.command.upload.spawn': 'distutils.spawn.spawn',
              'distutils.command.upload.urlparse': 'urlparse',
              'distutils.core.*': 'distutils.errors.*',
              'distutils.core.Command': 'distutils.cmd.Command',
              'distutils.core.DEBUG': 'distutils.debug.DEBUG',
              'distutils.core.Distribution': 'distutils.dist.Distribution',
              'distutils.core.Extension': 'distutils.extension.Extension',
              'distutils.core.grok_environment_error': 'distutils.util.grok_environment_error',
              'distutils.core.os': 'os',
              'distutils.core.sys': 'sys',
              'distutils.cygwinccompiler.CompileError': 'distutils.errors.CompileError',
              'distutils.cygwinccompiler.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'distutils.cygwinccompiler.LooseVersion': 'distutils.version.LooseVersion',
              'distutils.cygwinccompiler.UnixCCompiler': 'distutils.unixccompiler.UnixCCompiler',
              'distutils.cygwinccompiler.UnknownFileError': 'distutils.errors.UnknownFileError',
              'distutils.cygwinccompiler.copy': 'copy',
              'distutils.cygwinccompiler.find_executable': 'distutils.spawn.find_executable',
              'distutils.cygwinccompiler.gen_lib_options': 'distutils.ccompiler.gen_lib_options',
              'distutils.cygwinccompiler.gen_preprocess_options': 'distutils.ccompiler.gen_preprocess_options',
              'distutils.cygwinccompiler.log': 'distutils.log',
              'distutils.cygwinccompiler.os': 'os',
              'distutils.cygwinccompiler.re': 're',
              'distutils.cygwinccompiler.string': 'string',
              'distutils.cygwinccompiler.sys': 'sys',
              'distutils.cygwinccompiler.sysconfig': 'distutils.sysconfig',
              'distutils.cygwinccompiler.write_file': 'distutils.file_util.write_file',
              'distutils.debug.os': 'os',
              'distutils.dep_util.DistutilsFileError': 'distutils.errors.DistutilsFileError',
              'distutils.dep_util.ST_MTIME': 'stat.ST_MTIME',
              'distutils.dep_util.os': 'os',
              'distutils.dir_util.*': 'types.*',
              'distutils.dir_util.DistutilsFileError': 'distutils.errors.DistutilsFileError',
              'distutils.dir_util.DistutilsInternalError': 'distutils.errors.DistutilsInternalError',
              'distutils.dir_util.copy_file': 'distutils.file_util.copy_file',
              'distutils.dir_util.grok_environment_error': 'distutils.util.grok_environment_error',
              'distutils.dir_util.log': 'distutils.log',
              'distutils.dir_util.os': 'os',
              'distutils.dir_util.sys': 'sys',
              'distutils.dist.*': 'distutils.errors.*',
              'distutils.dist.Command': 'distutils.cmd.Command',
              'distutils.dist.ConfigParser': 'ConfigParser.ConfigParser',
              'distutils.dist.DEBUG': 'distutils.debug.DEBUG',
              'distutils.dist.EasyDialogs': 'EasyDialogs',
              'distutils.dist.FancyGetopt': 'distutils.fancy_getopt.FancyGetopt',
              'distutils.dist.check_environ': 'distutils.util.check_environ',
              'distutils.dist.copy': 'copy.copy',
              'distutils.dist.distutils.command': 'distutils.command',
              'distutils.dist.distutils.versionpredicate': 'distutils.versionpredicate',
              'distutils.dist.gen_usage': 'distutils.core.gen_usage',
              'distutils.dist.log': 'distutils.log',
              'distutils.dist.os': 'os',
              'distutils.dist.pformat': 'pprint.pformat',
              'distutils.dist.re': 're',
              'distutils.dist.rfc822_escape': 'distutils.util.rfc822_escape',
              'distutils.dist.string': 'string',
              'distutils.dist.strtobool': 'distutils.util.strtobool',
              'distutils.dist.sys': 'sys',
              'distutils.dist.translate_longopt': 'distutils.fancy_getopt.translate_longopt',
              'distutils.dist.warnings': 'warnings',
              'distutils.emxccompiler.CompileError': 'distutils.errors.CompileError',
              'distutils.emxccompiler.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'distutils.emxccompiler.StrictVersion': 'distutils.version.StrictVersion',
              'distutils.emxccompiler.UnixCCompiler': 'distutils.unixccompiler.UnixCCompiler',
              'distutils.emxccompiler.UnknownFileError': 'distutils.errors.UnknownFileError',
              'distutils.emxccompiler.copy': 'copy',
              'distutils.emxccompiler.find_executable': 'distutils.spawn.find_executable',
              'distutils.emxccompiler.gen_lib_options': 'distutils.ccompiler.gen_lib_options',
              'distutils.emxccompiler.gen_preprocess_options': 'distutils.ccompiler.gen_preprocess_options',
              'distutils.emxccompiler.log': 'distutils.log',
              'distutils.emxccompiler.os': 'os',
              'distutils.emxccompiler.re': 're',
              'distutils.emxccompiler.string': 'string',
              'distutils.emxccompiler.sys': 'sys',
              'distutils.emxccompiler.sysconfig': 'distutils.sysconfig',
              'distutils.emxccompiler.write_file': 'distutils.file_util.write_file',
              'distutils.extension.*': 'types.*',
              'distutils.extension.TextFile': 'distutils.text_file.TextFile',
              'distutils.extension._variable_rx': 'distutils.sysconfig._variable_rx',
              'distutils.extension.expand_makefile_vars': 'distutils.sysconfig.expand_makefile_vars',
              'distutils.extension.os': 'os',
              'distutils.extension.parse_makefile': 'distutils.sysconfig.parse_makefile',
              'distutils.extension.split_quoted': 'distutils.util.split_quoted',
              'distutils.extension.string': 'string',
              'distutils.extension.sys': 'sys',
              'distutils.extension.warnings': 'warnings',
              'distutils.fancy_getopt.*': 'distutils.errors.*',
              'distutils.fancy_getopt.getopt': 'getopt',
              'distutils.fancy_getopt.re': 're',
              'distutils.fancy_getopt.string': 'string',
              'distutils.fancy_getopt.sys': 'sys',
              'distutils.file_util.DistutilsFileError': 'distutils.errors.DistutilsFileError',
              'distutils.file_util.ST_ATIME': 'stat.ST_ATIME',
              'distutils.file_util.ST_MODE': 'stat.ST_MODE',
              'distutils.file_util.ST_MTIME': 'stat.ST_MTIME',
              'distutils.file_util.S_IMODE': 'stat.S_IMODE',
              'distutils.file_util.basename': 'os.path.basename',
              'distutils.file_util.dirname': 'os.path.dirname',
              'distutils.file_util.errno': 'errno',
              'distutils.file_util.exists': 'os.path.exists',
              'distutils.file_util.isdir': 'os.path.isdir',
              'distutils.file_util.isfile': 'os.path.isfile',
              'distutils.file_util.log': 'distutils.log',
              'distutils.file_util.macostools': 'macostools',
              'distutils.file_util.newer': 'distutils.dep_util.newer',
              'distutils.file_util.os': 'os',
              'distutils.filelist.*': 'types.*',
              'distutils.filelist.DEBUG': 'distutils.debug.DEBUG',
              'distutils.filelist.DistutilsInternalError': 'distutils.errors.DistutilsInternalError',
              'distutils.filelist.DistutilsTemplateError': 'distutils.errors.DistutilsTemplateError',
              'distutils.filelist.ST_MODE': 'stat.ST_MODE',
              'distutils.filelist.S_ISDIR': 'stat.S_ISDIR',
              'distutils.filelist.S_ISLNK': 'stat.S_ISLNK',
              'distutils.filelist.S_ISREG': 'stat.S_ISREG',
              'distutils.filelist.convert_path': 'distutils.util.convert_path',
              'distutils.filelist.fnmatch': 'fnmatch',
              'distutils.filelist.glob': 'glob.glob',
              'distutils.filelist.log': 'distutils.log',
              'distutils.filelist.os': 'os',
              'distutils.filelist.re': 're',
              'distutils.filelist.string': 'string',
              'distutils.log.sys': 'sys',
              'distutils.msvccompiler.CCompiler': 'distutils.ccompiler.CCompiler',
              'distutils.msvccompiler.CompileError': 'distutils.errors.CompileError',
              'distutils.msvccompiler.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'distutils.msvccompiler.DistutilsPlatformError': 'distutils.errors.DistutilsPlatformError',
              'distutils.msvccompiler.LibError': 'distutils.errors.LibError',
              'distutils.msvccompiler.LinkError': 'distutils.errors.LinkError',
              'distutils.msvccompiler._winreg': '_winreg',
              'distutils.msvccompiler.gen_lib_options': 'distutils.ccompiler.gen_lib_options',
              'distutils.msvccompiler.gen_preprocess_options': 'distutils.ccompiler.gen_preprocess_options',
              'distutils.msvccompiler.log': 'distutils.log',
              'distutils.msvccompiler.os': 'os',
              'distutils.msvccompiler.string': 'string',
              'distutils.msvccompiler.sys': 'sys',
              'distutils.msvccompiler.win32api': 'win32api',
              'distutils.msvccompiler.win32con': 'win32con',
              'distutils.mwerkscompiler.*': 'types.*',
              'distutils.mwerkscompiler.CCompiler': 'distutils.ccompiler.CCompiler',
              'distutils.mwerkscompiler.CompileError': 'distutils.errors.CompileError',
              'distutils.mwerkscompiler.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'distutils.mwerkscompiler.DistutilsPlatformError': 'distutils.errors.DistutilsPlatformError',
              'distutils.mwerkscompiler.LibError': 'distutils.errors.LibError',
              'distutils.mwerkscompiler.LinkError': 'distutils.errors.LinkError',
              'distutils.mwerkscompiler.distutils.dir_util': 'distutils.dir_util',
              'distutils.mwerkscompiler.distutils.util': 'distutils.util',
              'distutils.mwerkscompiler.gen_lib_options': 'distutils.ccompiler.gen_lib_options',
              'distutils.mwerkscompiler.gen_preprocess_options': 'distutils.ccompiler.gen_preprocess_options',
              'distutils.mwerkscompiler.log': 'distutils.log',
              'distutils.mwerkscompiler.mkcwproject': 'mkcwproject',
              'distutils.mwerkscompiler.os': 'os',
              'distutils.mwerkscompiler.string': 'string',
              'distutils.mwerkscompiler.sys': 'sys',
              'distutils.spawn.*': 'distutils.errors.*',
              'distutils.spawn.errno': 'errno',
              'distutils.spawn.log': 'distutils.log',
              'distutils.spawn.os': 'os',
              'distutils.spawn.string': 'string',
              'distutils.spawn.sys': 'sys',
              'distutils.sysconfig.DistutilsPlatformError': 'distutils.errors.DistutilsPlatformError',
              'distutils.sysconfig.MacOS': 'MacOS',
              'distutils.sysconfig.TextFile': 'distutils.text_file.TextFile',
              'distutils.sysconfig.os': 'os',
              'distutils.sysconfig.re': 're',
              'distutils.sysconfig.string': 'string',
              'distutils.sysconfig.sys': 'sys',
              'distutils.tests.os': 'os',
              'distutils.tests.support.log': 'distutils.log',
              'distutils.tests.support.shutil': 'shutil',
              'distutils.tests.support.tempfile': 'tempfile',
              'distutils.tests.sys': 'sys',
              'distutils.tests.test_build_py.Distribution': 'distutils.core.Distribution',
              'distutils.tests.test_build_py.DistutilsFileError': 'distutils.errors.DistutilsFileError',
              'distutils.tests.test_build_py.StringIO': 'StringIO',
              'distutils.tests.test_build_py.build_py': 'distutils.command.build_py.build_py',
              'distutils.tests.test_build_py.os': 'os',
              'distutils.tests.test_build_py.support': 'distutils.tests.support',
              'distutils.tests.test_build_py.sys': 'sys',
              'distutils.tests.test_build_py.unittest': 'unittest',
              'distutils.tests.test_build_scripts.Distribution': 'distutils.core.Distribution',
              'distutils.tests.test_build_scripts.build_scripts': 'distutils.command.build_scripts.build_scripts',
              'distutils.tests.test_build_scripts.os': 'os',
              'distutils.tests.test_build_scripts.support': 'distutils.tests.support',
              'distutils.tests.test_build_scripts.sys': 'sys',
              'distutils.tests.test_build_scripts.unittest': 'unittest',
              'distutils.tests.test_dist.StringIO': 'StringIO',
              'distutils.tests.test_dist.TESTFN': 'test.test_support.TESTFN',
              'distutils.tests.test_dist.distutils.cmd': 'distutils.cmd',
              'distutils.tests.test_dist.distutils.dist': 'distutils.dist',
              'distutils.tests.test_dist.os': 'os',
              'distutils.tests.test_dist.shutil': 'shutil',
              'distutils.tests.test_dist.sys': 'sys',
              'distutils.tests.test_dist.tempfile': 'tempfile',
              'distutils.tests.test_dist.unittest': 'unittest',
              'distutils.tests.test_install.Distribution': 'distutils.core.Distribution',
              'distutils.tests.test_install.install': 'distutils.command.install.install',
              'distutils.tests.test_install.os': 'os',
              'distutils.tests.test_install.support': 'distutils.tests.support',
              'distutils.tests.test_install.unittest': 'unittest',
              'distutils.tests.test_install_scripts.Distribution': 'distutils.core.Distribution',
              'distutils.tests.test_install_scripts.install_scripts': 'distutils.command.install_scripts.install_scripts',
              'distutils.tests.test_install_scripts.os': 'os',
              'distutils.tests.test_install_scripts.support': 'distutils.tests.support',
              'distutils.tests.test_install_scripts.unittest': 'unittest',
              'distutils.tests.test_versionpredicate.distutils.versionpredicate': 'distutils.versionpredicate',
              'distutils.tests.test_versionpredicate.doctest': 'doctest',
              'distutils.tests.unittest': 'unittest',
              'distutils.text_file.*': 'types.*',
              'distutils.text_file.os': 'os',
              'distutils.text_file.string': 'string',
              'distutils.text_file.sys': 'sys',
              'distutils.unixccompiler.CCompiler': 'distutils.ccompiler.CCompiler',
              'distutils.unixccompiler.CompileError': 'distutils.errors.CompileError',
              'distutils.unixccompiler.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'distutils.unixccompiler.LibError': 'distutils.errors.LibError',
              'distutils.unixccompiler.LinkError': 'distutils.errors.LinkError',
              'distutils.unixccompiler.NoneType': 'types.NoneType',
              'distutils.unixccompiler.StringType': 'types.StringType',
              'distutils.unixccompiler.copy': 'copy.copy',
              'distutils.unixccompiler.gen_lib_options': 'distutils.ccompiler.gen_lib_options',
              'distutils.unixccompiler.gen_preprocess_options': 'distutils.ccompiler.gen_preprocess_options',
              'distutils.unixccompiler.log': 'distutils.log',
              'distutils.unixccompiler.newer': 'distutils.dep_util.newer',
              'distutils.unixccompiler.os': 'os',
              'distutils.unixccompiler.sys': 'sys',
              'distutils.unixccompiler.sysconfig': 'distutils.sysconfig',
              'distutils.util.DistutilsPlatformError': 'distutils.errors.DistutilsPlatformError',
              'distutils.util.compile': 'py_compile.compile',
              'distutils.util.get_config_vars': 'distutils.sysconfig.get_config_vars',
              'distutils.util.log': 'distutils.log',
              'distutils.util.mkstemp': 'tempfile.mkstemp',
              'distutils.util.mktemp': 'tempfile.mktemp',
              'distutils.util.newer': 'distutils.dep_util.newer',
              'distutils.util.os': 'os',
              'distutils.util.pwd': 'pwd',
              'distutils.util.re': 're',
              'distutils.util.spawn': 'distutils.spawn.spawn',
              'distutils.util.string': 'string',
              'distutils.util.sys': 'sys',
              'distutils.version.StringType': 'types.StringType',
              'distutils.version.re': 're',
              'distutils.version.string': 'string',
              'distutils.versionpredicate.distutils.version': 'distutils.version',
              'distutils.versionpredicate.operator': 'operator',
              'distutils.versionpredicate.re': 're',
              'doctest.StringIO': 'StringIO.StringIO',
              'doctest.__future__': '__future__',
              'doctest.difflib': 'difflib',
              'doctest.inspect': 'inspect',
              'doctest.linecache': 'linecache',
              'doctest.new': 'new',
              'doctest.os': 'os',
              'doctest.pdb': 'pdb',
              'doctest.re': 're',
              'doctest.sys': 'sys',
              'doctest.tempfile': 'tempfile',
              'doctest.traceback': 'traceback',
              'doctest.unittest': 'unittest',
              'doctest.warnings': 'warnings',
              'dumbdbm.UserDict': 'UserDict',
              'dumbdbm.__builtin__': '__builtin__',
              'dumbdbm._os': 'os',
              'dummy_thread._traceback': 'traceback',
              'dummy_thread.warnings': 'warnings',
              'dummy_threading.*': '_dummy_threading.*',
              'dummy_threading.__all__': '_dummy_threading.__all__',
              'dummy_threading.dummy_thread': 'dummy_thread',
              'dummy_threading.sys_modules': 'sys.modules',
              'dummy_threading.threading': 'threading',
              'email.Parser': 'email.parser.Parser',
              'email._parseaddr.time': 'time',
              'email.base64mime.a2b_base64': 'binascii.a2b_base64',
              'email.base64mime.b2a_base64': 'binascii.b2a_base64',
              'email.base64mime.fix_eols': 'email.utils.fix_eols',
              'email.base64mime.re': 're',
              'email.charset.email.base64mime': 'email.base64mime',
              'email.charset.email.quoprimime': 'email.quoprimime',
              'email.charset.encode_7or8bit': 'email.encoders.encode_7or8bit',
              'email.charset.errors': 'email.errors',
              'email.email.mime': 'email.mime',
              'email.encoders._encodestring': 'quopri.encodestring',
              'email.encoders.base64': 'base64',
              'email.feedparser.errors': 'email.errors',
              'email.feedparser.message': 'email.message',
              'email.feedparser.re': 're',
              'email.generator.Header': 'email.header.Header',
              'email.generator.StringIO': 'cStringIO.StringIO',
              'email.generator.random': 'random',
              'email.generator.re': 're',
              'email.generator.sys': 'sys',
              'email.generator.time': 'time',
              'email.generator.warnings': 'warnings',
              'email.header.Charset': 'email.charset.Charset',
              'email.header.HeaderParseError': 'email.errors.HeaderParseError',
              'email.header.binascii': 'binascii',
              'email.header.email.base64mime': 'email.base64mime',
              'email.header.email.quoprimime': 'email.quoprimime',
              'email.header.re': 're',
              'email.iterators.StringIO': 'cStringIO.StringIO',
              'email.iterators.sys': 'sys',
              'email.message.Generator': 'email.Generator.Generator',
              'email.message.StringIO': 'cStringIO.StringIO',
              'email.message.binascii': 'binascii',
              'email.message.email.charset': 'email.charset',
              'email.message.errors': 'email.errors',
              'email.message.re': 're',
              'email.message.utils': 'email.utils',
              'email.message.uu': 'uu',
              'email.message.walk': 'email.Iterators.walk',
              'email.message.warnings': 'warnings',
              'email.mime.application.MIMENonMultipart': 'email.mime.nonmultipart.MIMENonMultipart',
              'email.mime.application.encoders': 'email.encoders',
              'email.mime.audio.MIMENonMultipart': 'email.mime.nonmultipart.MIMENonMultipart',
              'email.mime.audio.StringIO': 'cStringIO.StringIO',
              'email.mime.audio.encoders': 'email.encoders',
              'email.mime.audio.sndhdr': 'sndhdr',
              'email.mime.base.message': 'email.message',
              'email.mime.image.MIMENonMultipart': 'email.mime.nonmultipart.MIMENonMultipart',
              'email.mime.image.encoders': 'email.encoders',
              'email.mime.image.imghdr': 'imghdr',
              'email.mime.message.MIMENonMultipart': 'email.mime.nonmultipart.MIMENonMultipart',
              'email.mime.message.message': 'email.message',
              'email.mime.multipart.MIMEBase': 'email.mime.base.MIMEBase',
              'email.mime.nonmultipart.MIMEBase': 'email.mime.base.MIMEBase',
              'email.mime.nonmultipart.errors': 'email.errors',
              'email.mime.text.MIMENonMultipart': 'email.mime.nonmultipart.MIMENonMultipart',
              'email.mime.text.encode_7or8bit': 'email.encoders.encode_7or8bit',
              'email.parser.FeedParser': 'email.feedparser.FeedParser',
              'email.parser.Message': 'email.message.Message',
              'email.parser.StringIO': 'cStringIO.StringIO',
              'email.parser.warnings': 'warnings',
              'email.quoprimime.fix_eols': 'email.utils.fix_eols',
              'email.quoprimime.hexdigits': 'string.hexdigits',
              'email.quoprimime.re': 're',
              'email.string': 'string',
              'email.sys': 'sys',
              'email.utils.StringIO': 'cStringIO.StringIO',
              'email.utils._AddressList': 'email._parseaddr.AddressList',
              'email.utils._bencode': 'email.encoders._bencode',
              'email.utils._parsedate': 'email._parseaddr.parsedate',
              'email.utils._parsedate_tz': 'email._parseaddr.parsedate_tz',
              'email.utils._qdecode': 'quopri.decodestring',
              'email.utils._qencode': 'email.encoders._qencode',
              'email.utils.base64': 'base64',
              'email.utils.mktime_tz': 'email._parseaddr.mktime_tz',
              'email.utils.os': 'os',
              'email.utils.quote': 'email._parseaddr.quote',
              'email.utils.random': 'random',
              'email.utils.re': 're',
              'email.utils.socket': 'socket',
              'email.utils.time': 'time',
              'email.utils.urllib': 'urllib',
              'email.utils.warnings': 'warnings',
              'encodings.aliases': 'encodings.aliases',
              'encodings.ascii.codecs': 'codecs',
              'encodings.base64_codec.base64': 'base64',
              'encodings.base64_codec.codecs': 'codecs',
              'encodings.big5._codecs_tw': '_codecs_tw',
              'encodings.big5.codecs': 'codecs',
              'encodings.big5.mbc': '_multibytecodec',
              'encodings.big5hkscs._codecs_hk': '_codecs_hk',
              'encodings.big5hkscs.codecs': 'codecs',
              'encodings.big5hkscs.mbc': '_multibytecodec',
              'encodings.bz2_codec.bz2': 'bz2',
              'encodings.bz2_codec.codecs': 'codecs',
              'encodings.charmap.codecs': 'codecs',
              'encodings.codecs': 'codecs',
              'encodings.cp037.codecs': 'codecs',
              'encodings.cp1006.codecs': 'codecs',
              'encodings.cp1026.codecs': 'codecs',
              'encodings.cp1140.codecs': 'codecs',
              'encodings.cp1250.codecs': 'codecs',
              'encodings.cp1251.codecs': 'codecs',
              'encodings.cp1252.codecs': 'codecs',
              'encodings.cp1253.codecs': 'codecs',
              'encodings.cp1254.codecs': 'codecs',
              'encodings.cp1255.codecs': 'codecs',
              'encodings.cp1256.codecs': 'codecs',
              'encodings.cp1257.codecs': 'codecs',
              'encodings.cp1258.codecs': 'codecs',
              'encodings.cp424.codecs': 'codecs',
              'encodings.cp437.codecs': 'codecs',
              'encodings.cp500.codecs': 'codecs',
              'encodings.cp737.codecs': 'codecs',
              'encodings.cp775.codecs': 'codecs',
              'encodings.cp850.codecs': 'codecs',
              'encodings.cp852.codecs': 'codecs',
              'encodings.cp855.codecs': 'codecs',
              'encodings.cp856.codecs': 'codecs',
              'encodings.cp857.codecs': 'codecs',
              'encodings.cp860.codecs': 'codecs',
              'encodings.cp861.codecs': 'codecs',
              'encodings.cp862.codecs': 'codecs',
              'encodings.cp863.codecs': 'codecs',
              'encodings.cp864.codecs': 'codecs',
              'encodings.cp865.codecs': 'codecs',
              'encodings.cp866.codecs': 'codecs',
              'encodings.cp869.codecs': 'codecs',
              'encodings.cp874.codecs': 'codecs',
              'encodings.cp875.codecs': 'codecs',
              'encodings.cp932._codecs_jp': '_codecs_jp',
              'encodings.cp932.codecs': 'codecs',
              'encodings.cp932.mbc': '_multibytecodec',
              'encodings.cp949._codecs_kr': '_codecs_kr',
              'encodings.cp949.codecs': 'codecs',
              'encodings.cp949.mbc': '_multibytecodec',
              'encodings.cp950._codecs_tw': '_codecs_tw',
              'encodings.cp950.codecs': 'codecs',
              'encodings.cp950.mbc': '_multibytecodec',
              'encodings.euc_jis_2004._codecs_jp': '_codecs_jp',
              'encodings.euc_jis_2004.codecs': 'codecs',
              'encodings.euc_jis_2004.mbc': '_multibytecodec',
              'encodings.euc_jisx0213._codecs_jp': '_codecs_jp',
              'encodings.euc_jisx0213.codecs': 'codecs',
              'encodings.euc_jisx0213.mbc': '_multibytecodec',
              'encodings.euc_jp._codecs_jp': '_codecs_jp',
              'encodings.euc_jp.codecs': 'codecs',
              'encodings.euc_jp.mbc': '_multibytecodec',
              'encodings.euc_kr._codecs_kr': '_codecs_kr',
              'encodings.euc_kr.codecs': 'codecs',
              'encodings.euc_kr.mbc': '_multibytecodec',
              'encodings.gb18030._codecs_cn': '_codecs_cn',
              'encodings.gb18030.codecs': 'codecs',
              'encodings.gb18030.mbc': '_multibytecodec',
              'encodings.gb2312._codecs_cn': '_codecs_cn',
              'encodings.gb2312.codecs': 'codecs',
              'encodings.gb2312.mbc': '_multibytecodec',
              'encodings.gbk._codecs_cn': '_codecs_cn',
              'encodings.gbk.codecs': 'codecs',
              'encodings.gbk.mbc': '_multibytecodec',
              'encodings.hex_codec.binascii': 'binascii',
              'encodings.hex_codec.codecs': 'codecs',
              'encodings.hp_roman8.codecs': 'codecs',
              'encodings.hz._codecs_cn': '_codecs_cn',
              'encodings.hz.codecs': 'codecs',
              'encodings.hz.mbc': '_multibytecodec',
              'encodings.idna.codecs': 'codecs',
              'encodings.idna.re': 're',
              'encodings.idna.stringprep': 'stringprep',
              'encodings.idna.unicodedata': 'unicodedata.ucd_3_2_0',
              'encodings.iso2022_jp._codecs_iso2022': '_codecs_iso2022',
              'encodings.iso2022_jp.codecs': 'codecs',
              'encodings.iso2022_jp.mbc': '_multibytecodec',
              'encodings.iso2022_jp_1._codecs_iso2022': '_codecs_iso2022',
              'encodings.iso2022_jp_1.codecs': 'codecs',
              'encodings.iso2022_jp_1.mbc': '_multibytecodec',
              'encodings.iso2022_jp_2._codecs_iso2022': '_codecs_iso2022',
              'encodings.iso2022_jp_2.codecs': 'codecs',
              'encodings.iso2022_jp_2.mbc': '_multibytecodec',
              'encodings.iso2022_jp_2004._codecs_iso2022': '_codecs_iso2022',
              'encodings.iso2022_jp_2004.codecs': 'codecs',
              'encodings.iso2022_jp_2004.mbc': '_multibytecodec',
              'encodings.iso2022_jp_3._codecs_iso2022': '_codecs_iso2022',
              'encodings.iso2022_jp_3.codecs': 'codecs',
              'encodings.iso2022_jp_3.mbc': '_multibytecodec',
              'encodings.iso2022_jp_ext._codecs_iso2022': '_codecs_iso2022',
              'encodings.iso2022_jp_ext.codecs': 'codecs',
              'encodings.iso2022_jp_ext.mbc': '_multibytecodec',
              'encodings.iso2022_kr._codecs_iso2022': '_codecs_iso2022',
              'encodings.iso2022_kr.codecs': 'codecs',
              'encodings.iso2022_kr.mbc': '_multibytecodec',
              'encodings.iso8859_1.codecs': 'codecs',
              'encodings.iso8859_10.codecs': 'codecs',
              'encodings.iso8859_11.codecs': 'codecs',
              'encodings.iso8859_13.codecs': 'codecs',
              'encodings.iso8859_14.codecs': 'codecs',
              'encodings.iso8859_15.codecs': 'codecs',
              'encodings.iso8859_16.codecs': 'codecs',
              'encodings.iso8859_2.codecs': 'codecs',
              'encodings.iso8859_3.codecs': 'codecs',
              'encodings.iso8859_4.codecs': 'codecs',
              'encodings.iso8859_5.codecs': 'codecs',
              'encodings.iso8859_6.codecs': 'codecs',
              'encodings.iso8859_7.codecs': 'codecs',
              'encodings.iso8859_8.codecs': 'codecs',
              'encodings.iso8859_9.codecs': 'codecs',
              'encodings.johab._codecs_kr': '_codecs_kr',
              'encodings.johab.codecs': 'codecs',
              'encodings.johab.mbc': '_multibytecodec',
              'encodings.koi8_r.codecs': 'codecs',
              'encodings.koi8_u.codecs': 'codecs',
              'encodings.latin_1.codecs': 'codecs',
              'encodings.mac_arabic.codecs': 'codecs',
              'encodings.mac_centeuro.codecs': 'codecs',
              'encodings.mac_croatian.codecs': 'codecs',
              'encodings.mac_cyrillic.codecs': 'codecs',
              'encodings.mac_farsi.codecs': 'codecs',
              'encodings.mac_greek.codecs': 'codecs',
              'encodings.mac_iceland.codecs': 'codecs',
              'encodings.mac_latin2.codecs': 'codecs',
              'encodings.mac_roman.codecs': 'codecs',
              'encodings.mac_romanian.codecs': 'codecs',
              'encodings.mac_turkish.codecs': 'codecs',
              'encodings.mbcs.codecs': 'codecs',
              'encodings.mbcs.mbcs_decode': 'codecs.mbcs_decode',
              'encodings.mbcs.mbcs_encode': 'codecs.mbcs_encode',
              'encodings.palmos.codecs': 'codecs',
              'encodings.ptcp154.codecs': 'codecs',
              'encodings.punycode.codecs': 'codecs',
              'encodings.quopri_codec.StringIO': 'StringIO.StringIO',
              'encodings.quopri_codec.codecs': 'codecs',
              'encodings.quopri_codec.quopri': 'quopri',
              'encodings.raw_unicode_escape.codecs': 'codecs',
              'encodings.rot_13.codecs': 'codecs',
              'encodings.rot_13.sys': 'sys',
              'encodings.shift_jis._codecs_jp': '_codecs_jp',
              'encodings.shift_jis.codecs': 'codecs',
              'encodings.shift_jis.mbc': '_multibytecodec',
              'encodings.shift_jis_2004._codecs_jp': '_codecs_jp',
              'encodings.shift_jis_2004.codecs': 'codecs',
              'encodings.shift_jis_2004.mbc': '_multibytecodec',
              'encodings.shift_jisx0213._codecs_jp': '_codecs_jp',
              'encodings.shift_jisx0213.codecs': 'codecs',
              'encodings.shift_jisx0213.mbc': '_multibytecodec',
              'encodings.string_escape.codecs': 'codecs',
              'encodings.tis_620.codecs': 'codecs',
              'encodings.types': 'types',
              'encodings.undefined.codecs': 'codecs',
              'encodings.unicode_escape.codecs': 'codecs',
              'encodings.unicode_internal.codecs': 'codecs',
              'encodings.utf_16.codecs': 'codecs',
              'encodings.utf_16.sys': 'sys',
              'encodings.utf_16_be.codecs': 'codecs',
              'encodings.utf_16_le.codecs': 'codecs',
              'encodings.utf_7.codecs': 'codecs',
              'encodings.utf_8.codecs': 'codecs',
              'encodings.utf_8_sig.codecs': 'codecs',
              'encodings.uu_codec.StringIO': 'cStringIO.StringIO',
              'encodings.uu_codec.a2b_uu': 'binascii.a2b_uu',
              'encodings.uu_codec.b2a_uu': 'binascii.b2a_uu',
              'encodings.uu_codec.binascii': 'binascii',
              'encodings.uu_codec.codecs': 'codecs',
              'encodings.zlib_codec.codecs': 'codecs',
              'encodings.zlib_codec.zlib': 'zlib',
              'filecmp.getopt': 'getopt',
              'filecmp.ifilter': 'itertools.ifilter',
              'filecmp.ifilterfalse': 'itertools.ifilterfalse',
              'filecmp.imap': 'itertools.imap',
              'filecmp.izip': 'itertools.izip',
              'filecmp.os': 'os',
              'filecmp.stat': 'stat',
              'filecmp.sys': 'sys',
              'filecmp.warnings': 'warnings',
              'fileinput.bz2': 'bz2',
              'fileinput.codecs': 'codecs',
              'fileinput.getopt': 'getopt',
              'fileinput.gzip': 'gzip',
              'fileinput.os': 'os',
              'fileinput.sys': 'sys',
              'fnmatch.os': 'os',
              'fnmatch.posixpath': 'posixpath',
              'fnmatch.re': 're',
              'formatter.sys': 'sys',
              'fpformat.re': 're',
              'ftplib.SOCKS': 'SOCKS',
              'ftplib.getfqdn': 'socket.getfqdn',
              'ftplib.os': 'os',
              'ftplib.re': 're',
              'ftplib.socket': 'socket',
              'ftplib.sys': 'sys',
              'functools.partial': '_functools.partial',
              'getopt.os': 'os',
              'getopt.sys': 'sys',
              'getpass.AskPassword': 'EasyDialogs.AskPassword',
              'getpass.msvcrt': 'msvcrt',
              'getpass.os': 'os',
              'getpass.pwd': 'pwd',
              'getpass.sys': 'sys',
              'getpass.termios': 'termios',
              'gettext.ENOENT': 'errno.ENOENT',
              'gettext.StringIO': 'StringIO.StringIO',
              'gettext.__builtin__': '__builtin__',
              'gettext.copy': 'copy',
              'gettext.locale': 'locale',
              'gettext.normalize': 'locale.normalize',
              'gettext.os': 'os',
              'gettext.re': 're',
              'gettext.struct': 'struct',
              'gettext.sys': 'sys',
              'gettext.token': 'token',
              'gettext.tokenize': 'tokenize',
              'glob.fnmatch': 'fnmatch',
              'glob.os': 'os',
              'glob.re': 're',
              'gopherlib.getopt': 'getopt',
              'gopherlib.socket': 'socket',
              'gopherlib.sys': 'sys',
              'gopherlib.warnings': 'warnings',
              'gzip.__builtin__': '__builtin__',
              'gzip.errno': 'errno',
              'gzip.struct': 'struct',
              'gzip.sys': 'sys',
              'gzip.time': 'time',
              'gzip.zlib': 'zlib',
              'hashlib._hashlib': '_hashlib',
              'hashlib._md5': '_md5',
              'hashlib._sha': '_sha',
              'hashlib._sha256': '_sha256',
              'hashlib._sha512': '_sha512',
              'heapq.bisect': 'bisect',
              'heapq.count': 'itertools.count',
              'heapq.heapify': '_heapq.heapify',
              'heapq.heappop': '_heapq.heappop',
              'heapq.heappush': '_heapq.heappush',
              'heapq.heapreplace': '_heapq.heapreplace',
              'heapq.imap': 'itertools.imap',
              'heapq.islice': 'itertools.islice',
              'heapq.itemgetter': 'operator.itemgetter',
              'heapq.izip': 'itertools.izip',
              'heapq.neg': 'operator.neg',
              'heapq.nlargest': '_heapq.nlargest',
              'heapq.nsmallest': '_heapq.nsmallest',
              'heapq.repeat': 'itertools.repeat',
              'heapq.tee': 'itertools.tee',
              'hmac.hashlib': 'hashlib',
              'hotshot.ProfilerError': '_hotshot.ProfilerError',
              'hotshot.__main__': '__main__',
              'hotshot._hotshot': '_hotshot',
              'hotshot.log.WHAT_ADD_INFO': '_hotshot.WHAT_ADD_INFO',
              'hotshot.log.WHAT_DEFINE_FILE': '_hotshot.WHAT_DEFINE_FILE',
              'hotshot.log.WHAT_DEFINE_FUNC': '_hotshot.WHAT_DEFINE_FUNC',
              'hotshot.log.WHAT_ENTER': '_hotshot.WHAT_ENTER',
              'hotshot.log.WHAT_EXIT': '_hotshot.WHAT_EXIT',
              'hotshot.log.WHAT_LINENO': '_hotshot.WHAT_LINENO',
              'hotshot.log._hotshot': '_hotshot',
              'hotshot.log.os.path': 'os.path',
              'hotshot.log.parser': 'parser',
              'hotshot.log.symbol': 'symbol',
              'hotshot.log.sys': 'sys',
              'hotshot.stats.ENTER': 'hotshot.log.ENTER',
              'hotshot.stats.EXIT': 'hotshot.log.EXIT',
              'hotshot.stats.hotshot.log': 'hotshot.log',
              'hotshot.stats.profile': 'profile',
              'hotshot.stats.pstats': 'pstats',
              'hotshot.stones.errno': 'errno',
              'hotshot.stones.hotshot': 'hotshot',
              'hotshot.stones.hotshot.stats': 'hotshot.stats',
              'hotshot.stones.os': 'os',
              'hotshot.stones.sys': 'sys',
              'hotshot.stones.tempfile': 'tempfile',
              'hotshot.stones.test.pystone': 'test.pystone',
              'htmllib.AS_IS': 'formatter.AS_IS',
              'htmllib.entitydefs': 'htmlentitydefs.entitydefs',
              'htmllib.formatter': 'formatter',
              'htmllib.sgmllib': 'sgmllib',
              'htmllib.sys': 'sys',
              'httplib.StringIO': 'StringIO.StringIO',
              'httplib.errno': 'errno',
              'httplib.getopt': 'getopt',
              'httplib.mimetools': 'mimetools',
              'httplib.socket': 'socket',
              'httplib.sys': 'sys',
              'httplib.urlsplit': 'urlparse.urlsplit',
              'idlelib.AutoComplete.AutoCompleteWindow': 'idlelib.AutoCompleteWindow',
              'idlelib.AutoComplete.HyperParser': 'idlelib.HyperParser.HyperParser',
              'idlelib.AutoComplete.__main__': '__main__',
              'idlelib.AutoComplete.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.AutoComplete.os': 'os',
              'idlelib.AutoComplete.string': 'string',
              'idlelib.AutoComplete.sys': 'sys',
              'idlelib.AutoCompleteWindow.*': 'Tkinter.*',
              'idlelib.AutoCompleteWindow.AutoComplete': 'idlelib.AutoComplete',
              'idlelib.AutoCompleteWindow.MC_SHIFT': 'idlelib.MultiCall.MC_SHIFT',
              'idlelib.AutoExpand.re': 're',
              'idlelib.AutoExpand.string': 'string',
              'idlelib.Bindings.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.Bindings.sys': 'sys',
              'idlelib.CallTipWindow.*': 'Tkinter.*',
              'idlelib.CallTips.CallTipWindow': 'idlelib.CallTipWindow',
              'idlelib.CallTips.HyperParser': 'idlelib.HyperParser.HyperParser',
              'idlelib.CallTips.__main__': '__main__',
              'idlelib.CallTips.sys': 'sys',
              'idlelib.CallTips.types': 'types',
              'idlelib.ClassBrowser.ListedToplevel': 'idlelib.WindowList.ListedToplevel',
              'idlelib.ClassBrowser.PyShell': 'idlelib.PyShell',
              'idlelib.ClassBrowser.ScrolledCanvas': 'idlelib.TreeWidget.ScrolledCanvas',
              'idlelib.ClassBrowser.TreeItem': 'idlelib.TreeWidget.TreeItem',
              'idlelib.ClassBrowser.TreeNode': 'idlelib.TreeWidget.TreeNode',
              'idlelib.ClassBrowser.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.ClassBrowser.os': 'os',
              'idlelib.ClassBrowser.pyclbr': 'pyclbr',
              'idlelib.ClassBrowser.sys': 'sys',
              'idlelib.CodeContext.INFINITY': 'sys.maxint',
              'idlelib.CodeContext.Tkinter': 'Tkinter',
              'idlelib.CodeContext.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.CodeContext.re': 're',
              'idlelib.ColorDelegator.*': 'Tkinter.*',
              'idlelib.ColorDelegator.Delegator': 'idlelib.Delegator.Delegator',
              'idlelib.ColorDelegator.Percolator': 'idlelib.Percolator.Percolator',
              'idlelib.ColorDelegator.__builtin__': '__builtin__',
              'idlelib.ColorDelegator.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.ColorDelegator.keyword': 'keyword',
              'idlelib.ColorDelegator.re': 're',
              'idlelib.ColorDelegator.time': 'time',
              'idlelib.Debugger.*': 'Tkinter.*',
              'idlelib.Debugger.ListedToplevel': 'idlelib.WindowList.ListedToplevel',
              'idlelib.Debugger.ScrolledList': 'idlelib.ScrolledList.ScrolledList',
              'idlelib.Debugger.bdb': 'bdb',
              'idlelib.Debugger.linecache': 'linecache',
              'idlelib.Debugger.macosxSupport': 'idlelib.macosxSupport',
              'idlelib.Debugger.os': 'os',
              'idlelib.Debugger.repr': 'repr',
              'idlelib.Debugger.string': 'string',
              'idlelib.Debugger.types': 'types',
              'idlelib.EditorWindow.*': 'Tkinter.*',
              'idlelib.EditorWindow.Bindings': 'idlelib.Bindings',
              'idlelib.EditorWindow.ClassBrowser': 'idlelib.ClassBrowser',
              'idlelib.EditorWindow.ColorDelegator': 'idlelib.ColorDelegator.ColorDelegator',
              'idlelib.EditorWindow.GrepDialog': 'idlelib.GrepDialog',
              'idlelib.EditorWindow.IOBinding': 'idlelib.IOBinding.IOBinding',
              'idlelib.EditorWindow.MultiCallCreator': 'idlelib.MultiCall.MultiCallCreator',
              'idlelib.EditorWindow.MultiStatusBar': 'idlelib.MultiStatusBar.MultiStatusBar',
              'idlelib.EditorWindow.PathBrowser': 'idlelib.PathBrowser',
              'idlelib.EditorWindow.Percolator': 'idlelib.Percolator.Percolator',
              'idlelib.EditorWindow.PyParse': 'idlelib.PyParse',
              'idlelib.EditorWindow.ReplaceDialog': 'idlelib.ReplaceDialog',
              'idlelib.EditorWindow.SearchDialog': 'idlelib.SearchDialog',
              'idlelib.EditorWindow.Toplevel': 'Tkinter.Toplevel',
              'idlelib.EditorWindow.UndoDelegator': 'idlelib.UndoDelegator.UndoDelegator',
              'idlelib.EditorWindow.WindowList': 'idlelib.WindowList',
              'idlelib.EditorWindow.aboutDialog': 'idlelib.aboutDialog',
              'idlelib.EditorWindow.configDialog': 'idlelib.configDialog',
              'idlelib.EditorWindow.count': 'itertools.count',
              'idlelib.EditorWindow.encoding': 'idlelib.IOBinding.encoding',
              'idlelib.EditorWindow.filesystemencoding': 'idlelib.IOBinding.filesystemencoding',
              'idlelib.EditorWindow.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.EditorWindow.idlever': 'idlelib.idlever',
              'idlelib.EditorWindow.imp': 'imp',
              'idlelib.EditorWindow.macosxSupport': 'idlelib.macosxSupport',
              'idlelib.EditorWindow.os': 'os',
              'idlelib.EditorWindow.re': 're',
              'idlelib.EditorWindow.sys': 'sys',
              'idlelib.EditorWindow.textView': 'idlelib.textView',
              'idlelib.EditorWindow.tkMessageBox': 'tkMessageBox',
              'idlelib.EditorWindow.tkSimpleDialog': 'tkSimpleDialog',
              'idlelib.EditorWindow.tokenize': 'tokenize',
              'idlelib.EditorWindow.traceback': 'traceback',
              'idlelib.EditorWindow.webbrowser': 'webbrowser',
              'idlelib.FileList.*': 'Tkinter.*',
              'idlelib.FileList.EditorWindow': 'idlelib.EditorWindow.EditorWindow',
              'idlelib.FileList.fixwordbreaks': 'idlelib.EditorWindow.fixwordbreaks',
              'idlelib.FileList.os': 'os',
              'idlelib.FileList.sys': 'sys',
              'idlelib.FileList.tkMessageBox': 'tkMessageBox',
              'idlelib.FormatParagraph.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.FormatParagraph.re': 're',
              'idlelib.GrepDialog.*': 'Tkinter.*',
              'idlelib.GrepDialog.OutputWindow': 'idlelib.OutputWindow.OutputWindow',
              'idlelib.GrepDialog.SearchDialogBase': 'idlelib.SearchDialogBase.SearchDialogBase',
              'idlelib.GrepDialog.SearchEngine': 'idlelib.SearchEngine',
              'idlelib.GrepDialog.fnmatch': 'fnmatch',
              'idlelib.GrepDialog.os': 'os',
              'idlelib.GrepDialog.sys': 'sys',
              'idlelib.HyperParser.PyParse': 'idlelib.PyParse',
              'idlelib.HyperParser.keyword': 'keyword',
              'idlelib.HyperParser.string': 'string',
              'idlelib.IOBinding.*': 'Tkinter.*',
              'idlelib.IOBinding.BOM_UTF8': 'codecs.BOM_UTF8',
              'idlelib.IOBinding.SimpleDialog': 'SimpleDialog.SimpleDialog',
              'idlelib.IOBinding.codecs': 'codecs',
              'idlelib.IOBinding.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.IOBinding.locale': 'locale',
              'idlelib.IOBinding.os': 'os',
              'idlelib.IOBinding.re': 're',
              'idlelib.IOBinding.sys': 'sys',
              'idlelib.IOBinding.tempfile': 'tempfile',
              'idlelib.IOBinding.tkFileDialog': 'tkFileDialog',
              'idlelib.IOBinding.tkMessageBox': 'tkMessageBox',
              'idlelib.IOBinding.types': 'types',
              'idlelib.IdleHistory.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.MultiCall.Tkinter': 'Tkinter',
              'idlelib.MultiCall.os': 'os',
              'idlelib.MultiCall.re': 're',
              'idlelib.MultiCall.string': 'string',
              'idlelib.MultiCall.sys': 'sys',
              'idlelib.MultiStatusBar.*': 'Tkinter.*',
              'idlelib.ObjectBrowser.*': 'types.*',
              'idlelib.ObjectBrowser.Repr': 'repr.Repr',
              'idlelib.ObjectBrowser.ScrolledCanvas': 'idlelib.TreeWidget.ScrolledCanvas',
              'idlelib.ObjectBrowser.Tk': 'Tkinter.Tk',
              'idlelib.ObjectBrowser.TreeItem': 'idlelib.TreeWidget.TreeItem',
              'idlelib.ObjectBrowser.TreeNode': 'idlelib.TreeWidget.TreeNode',
              'idlelib.ObjectBrowser.sys': 'sys',
              'idlelib.OutputWindow.*': 'Tkinter.*',
              'idlelib.OutputWindow.EditorWindow': 'idlelib.EditorWindow.EditorWindow',
              'idlelib.OutputWindow.IOBinding': 'idlelib.IOBinding',
              'idlelib.OutputWindow.re': 're',
              'idlelib.OutputWindow.tkMessageBox': 'tkMessageBox',
              'idlelib.ParenMatch.HyperParser': 'idlelib.HyperParser.HyperParser',
              'idlelib.ParenMatch.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.PathBrowser.ClassBrowser': 'idlelib.ClassBrowser.ClassBrowser',
              'idlelib.PathBrowser.ModuleBrowserTreeItem': 'idlelib.ClassBrowser.ModuleBrowserTreeItem',
              'idlelib.PathBrowser.PyShell': 'idlelib.PyShell',
              'idlelib.PathBrowser.TreeItem': 'idlelib.TreeWidget.TreeItem',
              'idlelib.PathBrowser.imp': 'imp',
              'idlelib.PathBrowser.os': 'os',
              'idlelib.PathBrowser.sys': 'sys',
              'idlelib.Percolator.*': 'Tkinter.*',
              'idlelib.Percolator.Delegator': 'idlelib.Delegator.Delegator',
              'idlelib.Percolator.WidgetRedirector': 'idlelib.WidgetRedirector.WidgetRedirector',
              'idlelib.PyParse.re': 're',
              'idlelib.PyParse.sys': 'sys',
              'idlelib.PyShell.*': 'Tkinter.*',
              'idlelib.PyShell.ColorDelegator': 'idlelib.ColorDelegator.ColorDelegator',
              'idlelib.PyShell.Debugger': 'idlelib.Debugger',
              'idlelib.PyShell.EditorWindow': 'idlelib.EditorWindow.EditorWindow',
              'idlelib.PyShell.FileList': 'idlelib.FileList.FileList',
              'idlelib.PyShell.History': 'idlelib.IdleHistory.History',
              'idlelib.PyShell.IOBinding': 'idlelib.IOBinding',
              'idlelib.PyShell.InteractiveInterpreter': 'code.InteractiveInterpreter',
              'idlelib.PyShell.OutputWindow': 'idlelib.OutputWindow.OutputWindow',
              'idlelib.PyShell.RemoteDebugger': 'idlelib.RemoteDebugger',
              'idlelib.PyShell.RemoteObjectBrowser': 'idlelib.RemoteObjectBrowser',
              'idlelib.PyShell.SIGTERM': 'signal.SIGTERM',
              'idlelib.PyShell.ScrolledCanvas': 'idlelib.TreeWidget.ScrolledCanvas',
              'idlelib.PyShell.StackBrowser': 'idlelib.StackViewer.StackBrowser',
              'idlelib.PyShell.Tkinter': 'Tkinter',
              'idlelib.PyShell.TreeNode': 'idlelib.TreeWidget.TreeNode',
              'idlelib.PyShell.UndoDelegator': 'idlelib.UndoDelegator.UndoDelegator',
              'idlelib.PyShell.fixwordbreaks': 'idlelib.EditorWindow.fixwordbreaks',
              'idlelib.PyShell.getopt': 'getopt',
              'idlelib.PyShell.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.PyShell.idlever': 'idlelib.idlever',
              'idlelib.PyShell.linecache': 'linecache',
              'idlelib.PyShell.macosxSupport': 'idlelib.macosxSupport',
              'idlelib.PyShell.os': 'os',
              'idlelib.PyShell.os.path': 'os.path',
              'idlelib.PyShell.re': 're',
              'idlelib.PyShell.rpc': 'idlelib.rpc',
              'idlelib.PyShell.socket': 'socket',
              'idlelib.PyShell.string': 'string',
              'idlelib.PyShell.sys': 'sys',
              'idlelib.PyShell.threading': 'threading',
              'idlelib.PyShell.time': 'time',
              'idlelib.PyShell.tkMessageBox': 'tkMessageBox',
              'idlelib.PyShell.traceback': 'traceback',
              'idlelib.PyShell.types': 'types',
              'idlelib.PyShell.warnings': 'warnings',
              'idlelib.RemoteDebugger.Debugger': 'idlelib.Debugger',
              'idlelib.RemoteDebugger.__main__': '__main__',
              'idlelib.RemoteDebugger.rpc': 'idlelib.rpc',
              'idlelib.RemoteDebugger.sys': 'sys',
              'idlelib.RemoteDebugger.types': 'types',
              'idlelib.RemoteObjectBrowser.rpc': 'idlelib.rpc',
              'idlelib.ReplaceDialog.*': 'Tkinter.*',
              'idlelib.ReplaceDialog.SearchDialogBase': 'idlelib.SearchDialogBase.SearchDialogBase',
              'idlelib.ReplaceDialog.SearchEngine': 'idlelib.SearchEngine',
              'idlelib.ScriptBinding.PyShell': 'idlelib.PyShell',
              'idlelib.ScriptBinding.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.ScriptBinding.os': 'os',
              'idlelib.ScriptBinding.re': 're',
              'idlelib.ScriptBinding.string': 'string',
              'idlelib.ScriptBinding.tabnanny': 'tabnanny',
              'idlelib.ScriptBinding.tkMessageBox': 'tkMessageBox',
              'idlelib.ScriptBinding.tokenize': 'tokenize',
              'idlelib.ScrolledList.*': 'Tkinter.*',
              'idlelib.SearchDialog.*': 'Tkinter.*',
              'idlelib.SearchDialog.SearchDialogBase': 'idlelib.SearchDialogBase.SearchDialogBase',
              'idlelib.SearchDialog.SearchEngine': 'idlelib.SearchEngine',
              'idlelib.SearchDialogBase.*': 'Tkinter.*',
              'idlelib.SearchEngine.*': 'Tkinter.*',
              'idlelib.SearchEngine.re': 're',
              'idlelib.SearchEngine.tkMessageBox': 'tkMessageBox',
              'idlelib.StackViewer.ObjectTreeItem': 'idlelib.ObjectBrowser.ObjectTreeItem',
              'idlelib.StackViewer.ScrolledCanvas': 'idlelib.TreeWidget.ScrolledCanvas',
              'idlelib.StackViewer.Tk': 'Tkinter.Tk',
              'idlelib.StackViewer.Toplevel': 'Tkinter.Toplevel',
              'idlelib.StackViewer.TreeItem': 'idlelib.TreeWidget.TreeItem',
              'idlelib.StackViewer.TreeNode': 'idlelib.TreeWidget.TreeNode',
              'idlelib.StackViewer.linecache': 'linecache',
              'idlelib.StackViewer.make_objecttreeitem': 'idlelib.ObjectBrowser.make_objecttreeitem',
              'idlelib.StackViewer.os': 'os',
              'idlelib.StackViewer.sys': 'sys',
              'idlelib.StackViewer.testcode': 'idlelib.testcode',
              'idlelib.ToolTip.*': 'Tkinter.*',
              'idlelib.TreeWidget.*': 'Tkinter.*',
              'idlelib.TreeWidget.PyShell': 'idlelib.PyShell',
              'idlelib.TreeWidget.ZoomHeight': 'idlelib.ZoomHeight',
              'idlelib.TreeWidget.glob': 'glob',
              'idlelib.TreeWidget.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.TreeWidget.imp': 'imp',
              'idlelib.TreeWidget.os': 'os',
              'idlelib.TreeWidget.sys': 'sys',
              'idlelib.UndoDelegator.*': 'Tkinter.*',
              'idlelib.UndoDelegator.Delegator': 'idlelib.Delegator.Delegator',
              'idlelib.UndoDelegator.Percolator': 'idlelib.Percolator.Percolator',
              'idlelib.UndoDelegator.pprint': 'pprint.pprint',
              'idlelib.UndoDelegator.string': 'string',
              'idlelib.UndoDelegator.sys': 'sys',
              'idlelib.WidgetRedirector.*': 'Tkinter.*',
              'idlelib.WindowList.*': 'Tkinter.*',
              'idlelib.ZoomHeight.macosxSupport': 'idlelib.macosxSupport',
              'idlelib.ZoomHeight.re': 're',
              'idlelib.ZoomHeight.sys': 'sys',
              'idlelib.aboutDialog.*': 'Tkinter.*',
              'idlelib.aboutDialog.aboutDialog': 'idlelib.aboutDialog',
              'idlelib.aboutDialog.codecs': 'codecs',
              'idlelib.aboutDialog.idlever': 'idlelib.idlever',
              'idlelib.aboutDialog.os': 'os',
              'idlelib.aboutDialog.string': 'string',
              'idlelib.aboutDialog.textView': 'idlelib.textView',
              'idlelib.aboutDialog.tkMessageBox': 'tkMessageBox',
              'idlelib.configDialog.*': 'Tkinter.*',
              'idlelib.configDialog.DynOptionMenu': 'idlelib.dynOptionMenuWidget.DynOptionMenu',
              'idlelib.configDialog.GetCfgSectionNameDialog': 'idlelib.configSectionNameDialog.GetCfgSectionNameDialog',
              'idlelib.configDialog.GetHelpSourceDialog': 'idlelib.configHelpSourceEdit.GetHelpSourceDialog',
              'idlelib.configDialog.GetKeysDialog': 'idlelib.keybindingDialog.GetKeysDialog',
              'idlelib.configDialog.TabPageSet': 'idlelib.tabpage.TabPageSet',
              'idlelib.configDialog.copy': 'copy',
              'idlelib.configDialog.idleConf': 'idlelib.configHandler.idleConf',
              'idlelib.configDialog.string': 'string',
              'idlelib.configDialog.tkColorChooser': 'tkColorChooser',
              'idlelib.configDialog.tkFont': 'tkFont',
              'idlelib.configDialog.tkMessageBox': 'tkMessageBox',
              'idlelib.configHandler.ConfigParser': 'ConfigParser.ConfigParser',
              'idlelib.configHandler.NoOptionError': 'ConfigParser.NoOptionError',
              'idlelib.configHandler.NoSectionError': 'ConfigParser.NoSectionError',
              'idlelib.configHandler.macosxSupport': 'idlelib.macosxSupport',
              'idlelib.configHandler.os': 'os',
              'idlelib.configHandler.string': 'string',
              'idlelib.configHandler.sys': 'sys',
              'idlelib.configHelpSourceEdit.*': 'Tkinter.*',
              'idlelib.configHelpSourceEdit.os': 'os',
              'idlelib.configHelpSourceEdit.sys': 'sys',
              'idlelib.configHelpSourceEdit.tkFileDialog': 'tkFileDialog',
              'idlelib.configHelpSourceEdit.tkMessageBox': 'tkMessageBox',
              'idlelib.configSectionNameDialog.*': 'Tkinter.*',
              'idlelib.configSectionNameDialog.tkMessageBox': 'tkMessageBox',
              'idlelib.dynOptionMenuWidget.OptionMenu': 'Tkinter.OptionMenu',
              'idlelib.dynOptionMenuWidget._setit': 'Tkinter._setit',
              'idlelib.dynOptionMenuWidget.copy': 'copy',
              'idlelib.idle.PyShell': 'idlelib.PyShell',
              'idlelib.idle.idlelib.PyShell': 'idlelib.PyShell',
              'idlelib.idle.os': 'os',
              'idlelib.keybindingDialog.*': 'Tkinter.*',
              'idlelib.keybindingDialog.os': 'os',
              'idlelib.keybindingDialog.string': 'string',
              'idlelib.keybindingDialog.sys': 'sys',
              'idlelib.keybindingDialog.tkMessageBox': 'tkMessageBox',
              'idlelib.macosxSupport.Bindings': 'idlelib.Bindings',
              'idlelib.macosxSupport.Menu': 'Tkinter.Menu',
              'idlelib.macosxSupport.MultiCallCreator': 'idlelib.MultiCall.MultiCallCreator',
              'idlelib.macosxSupport.Text': 'Tkinter.Text',
              'idlelib.macosxSupport.Tkinter': 'Tkinter',
              'idlelib.macosxSupport.WindowList': 'idlelib.WindowList',
              'idlelib.macosxSupport.aboutDialog': 'idlelib.aboutDialog',
              'idlelib.macosxSupport.configDialog': 'idlelib.configDialog',
              'idlelib.macosxSupport.get_accelerator': 'idlelib.EditorWindow.get_accelerator',
              'idlelib.macosxSupport.prepstr': 'idlelib.EditorWindow.prepstr',
              'idlelib.macosxSupport.sys': 'sys',
              'idlelib.rpc.Queue': 'Queue',
              'idlelib.rpc.SocketServer': 'SocketServer',
              'idlelib.rpc.copy_reg': 'copy_reg',
              'idlelib.rpc.marshal': 'marshal',
              'idlelib.rpc.os': 'os',
              'idlelib.rpc.pickle': 'cPickle',
              'idlelib.rpc.select': 'select',
              'idlelib.rpc.socket': 'socket',
              'idlelib.rpc.struct': 'struct',
              'idlelib.rpc.sys': 'sys',
              'idlelib.rpc.threading': 'threading',
              'idlelib.rpc.traceback': 'traceback',
              'idlelib.rpc.types': 'types',
              'idlelib.run.AutoComplete': 'idlelib.AutoComplete',
              'idlelib.run.CallTips': 'idlelib.CallTips',
              'idlelib.run.IOBinding': 'idlelib.IOBinding',
              'idlelib.run.Queue': 'Queue',
              'idlelib.run.RemoteDebugger': 'idlelib.RemoteDebugger',
              'idlelib.run.RemoteObjectBrowser': 'idlelib.RemoteObjectBrowser',
              'idlelib.run.StackViewer': 'idlelib.StackViewer',
              'idlelib.run.Tkinter': 'Tkinter',
              'idlelib.run.__main__': '__main__',
              'idlelib.run.linecache': 'linecache',
              'idlelib.run.os': 'os',
              'idlelib.run.rpc': 'idlelib.rpc',
              'idlelib.run.socket': 'socket',
              'idlelib.run.sys': 'sys',
              'idlelib.run.thread': 'thread',
              'idlelib.run.threading': 'threading',
              'idlelib.run.time': 'time',
              'idlelib.run.tkMessageBox': 'tkMessageBox',
              'idlelib.run.traceback': 'traceback',
              'idlelib.run.warnings': 'warnings',
              'idlelib.tabpage.*': 'Tkinter.*',
              'idlelib.testcode.string': 'string',
              'idlelib.textView.*': 'Tkinter.*',
              'idlelib.textView.tkMessageBox': 'tkMessageBox',
              'ihooks.C_BUILTIN': 'imp.C_BUILTIN',
              'ihooks.C_EXTENSION': 'imp.C_EXTENSION',
              'ihooks.PKG_DIRECTORY': 'imp.PKG_DIRECTORY',
              'ihooks.PY_COMPILED': 'imp.PY_COMPILED',
              'ihooks.PY_FROZEN': 'imp.PY_FROZEN',
              'ihooks.PY_SOURCE': 'imp.PY_SOURCE',
              'ihooks.__builtin__': '__builtin__',
              'ihooks.imp': 'imp',
              'ihooks.marshal': 'marshal',
              'ihooks.os': 'os',
              'ihooks.sys': 'sys',
              'imaplib.binascii': 'binascii',
              'imaplib.getopt': 'getopt',
              'imaplib.getpass': 'getpass',
              'imaplib.hmac': 'hmac',
              'imaplib.os': 'os',
              'imaplib.random': 'random',
              'imaplib.re': 're',
              'imaplib.socket': 'socket',
              'imaplib.sys': 'sys',
              'imaplib.time': 'time',
              'imghdr.glob': 'glob',
              'imghdr.os': 'os',
              'imghdr.sys': 'sys',
              'imputil.__builtin__': '__builtin__',
              'imputil.imp': 'imp',
              'imputil.marshal': 'marshal',
              'imputil.stat': 'mac.stat',
              'imputil.struct': 'struct',
              'imputil.sys': 'sys',
              'inspect.attrgetter': 'operator.attrgetter',
              'inspect.dis': 'dis',
              'inspect.imp': 'imp',
              'inspect.linecache': 'linecache',
              'inspect.os': 'os',
              'inspect.re': 're',
              'inspect.string': 'string',
              'inspect.sys': 'sys',
              'inspect.tokenize': 'tokenize',
              'inspect.types': 'types',
              'keyword.re': 're',
              'keyword.sys': 'sys',
              'linecache.os': 'os',
              'linecache.sys': 'sys',
              'locale.*': '_locale.*',
              'locale._locale': '_locale',
              'locale.encodings': 'encodings',
              'locale.encodings.aliases': 'encodings.aliases',
              'locale.operator': 'operator',
              'locale.os': 'os',
              'locale.re': 're',
              'locale.sys': 'sys',
              'logging.atexit': 'atexit',
              'logging.cStringIO': 'cStringIO',
              'logging.codecs': 'codecs',
              'logging.config.ConfigParser': 'ConfigParser',
              'logging.config.StreamRequestHandler': 'SocketServer.StreamRequestHandler',
              'logging.config.ThreadingTCPServer': 'SocketServer.ThreadingTCPServer',
              'logging.config.logging': 'logging',
              'logging.config.logging.handlers': 'logging.handlers',
              'logging.config.os': 'os',
              'logging.config.select': 'select',
              'logging.config.socket': 'socket',
              'logging.config.string': 'string',
              'logging.config.struct': 'struct',
              'logging.config.sys': 'sys',
              'logging.config.tempfile': 'tempfile',
              'logging.config.thread': 'thread',
              'logging.config.threading': 'threading',
              'logging.config.traceback': 'traceback',
              'logging.config.types': 'types',
              'logging.handlers.cPickle': 'cPickle',
              'logging.handlers.codecs': 'codecs',
              'logging.handlers.formatdate': 'email.Utils.formatdate',
              'logging.handlers.glob': 'glob',
              'logging.handlers.httplib': 'httplib',
              'logging.handlers.logging': 'logging',
              'logging.handlers.os': 'os',
              'logging.handlers.smtplib': 'smtplib',
              'logging.handlers.socket': 'socket',
              'logging.handlers.string': 'string',
              'logging.handlers.struct': 'struct',
              'logging.handlers.sys': 'sys',
              'logging.handlers.time': 'time',
              'logging.handlers.types': 'types',
              'logging.handlers.urllib': 'urllib',
              'logging.handlers.win32evtlog': 'win32evtlog',
              'logging.handlers.win32evtlogutil': 'win32evtlogutil',
              'logging.os': 'os',
              'logging.string': 'string',
              'logging.sys': 'sys',
              'logging.thread': 'thread',
              'logging.threading': 'threading',
              'logging.time': 'time',
              'logging.traceback': 'traceback',
              'logging.types': 'types',
              'macpath.*': 'stat.*',
              'macpath.Carbon.File': 'Carbon.File',
              'macpath.os': 'os',
              'macurl2path.os': 'os',
              'macurl2path.urllib': 'urllib',
              'mailbox.StringIO': 'StringIO',
              'mailbox.calendar': 'calendar',
              'mailbox.copy': 'copy',
              'mailbox.email': 'email',
              'mailbox.email.Generator': 'email.Generator',
              'mailbox.email.Message': 'email.Message',
              'mailbox.errno': 'errno',
              'mailbox.fcntl': 'fcntl',
              'mailbox.os': 'os',
              'mailbox.re': 're',
              'mailbox.rfc822': 'rfc822',
              'mailbox.socket': 'socket',
              'mailbox.sys': 'sys',
              'mailbox.time': 'time',
              'mailcap.os': 'os',
              'mailcap.sys': 'sys',
              'markupbase.re': 're',
              'md5.md5': 'hashlib.md5',
              'mhlib.StringIO': 'StringIO.StringIO',
              'mhlib.bisect': 'bisect.bisect',
              'mhlib.mimetools': 'mimetools',
              'mhlib.multifile': 'multifile',
              'mhlib.os': 'os',
              'mhlib.re': 're',
              'mhlib.shutil': 'shutil',
              'mhlib.sys': 'sys',
              'mimetools.base64': 'base64',
              'mimetools.os': 'os',
              'mimetools.quopri': 'quopri',
              'mimetools.rfc822': 'rfc822',
              'mimetools.socket': 'socket',
              'mimetools.tempfile': 'tempfile',
              'mimetools.thread': 'dummy_thread',
              'mimetools.time': 'time',
              'mimetools.uu': 'uu',
              'mimetypes.getopt': 'getopt',
              'mimetypes.os': 'os',
              'mimetypes.posixpath': 'posixpath',
              'mimetypes.sys': 'sys',
              'mimetypes.urllib': 'urllib',
              'mimify.base64': 'base64',
              'mimify.getopt': 'getopt',
              'mimify.os': 'os',
              'mimify.re': 're',
              'mimify.sys': 'sys',
              'modulefinder.dis': 'dis',
              'modulefinder.getopt': 'getopt',
              'modulefinder.imp': 'imp',
              'modulefinder.marshal': 'marshal',
              'modulefinder.new': 'new',
              'modulefinder.os': 'os',
              'modulefinder.sys': 'sys',
              'mutex.deque': 'collections.deque',
              'netrc.os': 'os',
              'netrc.shlex': 'shlex',
              'new.classobj': 'types.ClassType',
              'new.code': 'types.CodeType',
              'new.function': 'types.FunctionType',
              'new.instance': 'types.InstanceType',
              'new.instancemethod': 'types.MethodType',
              'new.module': 'types.ModuleType',
              'nntplib.netrc': 'netrc',
              'nntplib.os': 'os',
              'nntplib.re': 're',
              'nntplib.socket': 'socket',
              'ntpath._getfullpathname': 'nt._getfullpathname',
              'ntpath.os': 'os',
              'ntpath.stat': 'stat',
              'ntpath.string': 'string',
              'ntpath.sys': 'sys',
              'nturl2path.string': 'string',
              'nturl2path.urllib': 'urllib',
              'optparse.__builtin__': '__builtin__',
              'optparse.gettext': 'gettext.gettext',
              'optparse.os': 'os',
              'optparse.sys': 'sys',
              'optparse.textwrap': 'textwrap',
              'optparse.types': 'types',
              'os.*': 'riscos.*',
              'os.UserDict': 'UserDict',
              'os._Environ': 'riscosenviron._Environ',
              'os._copy_reg': 'copy_reg',
              'os._exit': 'riscos._exit',
              'os.altsep': 'os.path.altsep',
              'os.ce': 'ce',
              'os.curdir': 'os.path.curdir',
              'os.defpath': 'os.path.defpath',
              'os.devnull': 'os.path.devnull',
              'os.errno': 'errno',
              'os.extsep': 'os.path.extsep',
              'os.isdir': 'os.path.isdir',
              'os.islink': 'os.path.islink',
              'os.join': 'os.path.join',
              'os.link': '_emx_link.link',
              'os.mac': 'mac',
              'os.nt': 'nt',
              'os.os2': 'os2',
              'os.pardir': 'os.path.pardir',
              'os.path': 'riscospath',
              'os.pathsep': 'os.path.pathsep',
              'os.popen2': 'popen2',
              'os.posix': 'posix',
              'os.riscos': 'riscos',
              'os.sep': 'os.path.sep',
              'os.sys': 'sys',
              'os2emxpath.os': 'os',
              'os2emxpath.stat': 'stat',
              'os2emxpath.string': 'string',
              'pdb.Repr': 'repr.Repr',
              'pdb.bdb': 'bdb',
              'pdb.cmd': 'cmd',
              'pdb.linecache': 'linecache',
              'pdb.os': 'os',
              'pdb.pprint': 'pprint',
              'pdb.re': 're',
              'pdb.readline': 'readline',
              'pdb.sys': 'sys',
              'pdb.traceback': 'traceback',
              'pickle.*': 'types.*',
              'pickle.PyStringMap': 'org.python.core.PyStringMap',
              'pickle.StringIO': 'StringIO.StringIO',
              'pickle._binascii': 'binascii',
              'pickle._extension_cache': 'copy_reg._extension_cache',
              'pickle._extension_registry': 'copy_reg._extension_registry',
              'pickle._inverted_registry': 'copy_reg._inverted_registry',
              'pickle.dispatch_table': 'copy_reg.dispatch_table',
              'pickle.doctest': 'doctest',
              'pickle.marshal': 'marshal',
              'pickle.re': 're',
              'pickle.struct': 'struct',
              'pickle.sys': 'sys',
              'pickletools.StringIO': 'cStringIO',
              'pickletools._unpack': 'struct.unpack',
              'pickletools.decode_long': 'pickle.decode_long',
              'pickletools.doctest': 'doctest',
              'pickletools.pickle': 'pickle',
              'pickletools.re': 're',
              'pipes.os': 'os',
              'pipes.re': 're',
              'pipes.string': 'string',
              'pipes.tempfile': 'tempfile',
              'pkgutil.ModuleType': 'types.ModuleType',
              'pkgutil.imp': 'imp',
              'pkgutil.inspect': 'inspect',
              'pkgutil.marshal': 'marshal',
              'pkgutil.os': 'os',
              'pkgutil.os.path': 'os.path',
              'pkgutil.sys': 'sys',
              'pkgutil.zipimport': 'zipimport',
              'pkgutil.zipimporter': 'zipimport.zipimporter',
              'platform.GetVersionEx': 'win32api.GetVersionEx',
              'platform.HKEY_LOCAL_MACHINE': 'win32con.HKEY_LOCAL_MACHINE',
              'platform.MacOS': 'MacOS',
              'platform.RegCloseKey': 'win32api.RegCloseKey',
              'platform.RegOpenKeyEx': 'win32api.RegOpenKeyEx',
              'platform.RegQueryValueEx': 'win32api.RegQueryValueEx',
              'platform.System': 'java.lang.System',
              'platform.VER_PLATFORM_WIN32_NT': 'win32con.VER_PLATFORM_WIN32_NT',
              'platform.VER_PLATFORM_WIN32_WINDOWS': 'win32con.VER_PLATFORM_WIN32_WINDOWS',
              'platform.gestalt': 'gestalt',
              'platform.java.lang': 'java.lang',
              'platform.os': 'os',
              'platform.re': 're',
              'platform.socket': 'socket',
              'platform.string': 'string',
              'platform.struct': 'struct',
              'platform.sys': 'sys',
              'platform.tempfile': 'tempfile',
              'platform.vms_lib': 'vms_lib',
              'platform.win32api': 'win32api',
              'platform.win32pipe': 'win32pipe',
              'plistlib.FSGetResourceForkName': 'Carbon.File.FSGetResourceForkName',
              'plistlib.FSRef': 'Carbon.File.FSRef',
              'plistlib.ParserCreate': 'xml.parsers.expat.ParserCreate',
              'plistlib.Res': 'Carbon.Res',
              'plistlib.StringIO': 'cStringIO.StringIO',
              'plistlib.binascii': 'binascii',
              'plistlib.datetime': 'datetime',
              'plistlib.fsRdPerm': 'Carbon.Files.fsRdPerm',
              'plistlib.fsRdWrPerm': 'Carbon.Files.fsRdWrPerm',
              'plistlib.re': 're',
              'plistlib.warn': 'warnings.warn',
              'popen2.os': 'os',
              'popen2.sys': 'sys',
              'poplib.hashlib': 'hashlib',
              'poplib.re': 're',
              'poplib.socket': 'socket',
              'poplib.sys': 'sys',
              'posixfile.__builtin__': '__builtin__',
              'posixfile.fcntl': 'fcntl',
              'posixfile.os': 'os',
              'posixfile.posix': 'posix',
              'posixfile.struct': 'struct',
              'posixfile.sys': 'sys',
              'posixfile.types': 'types',
              'posixpath.os': 'os',
              'posixpath.pwd': 'pwd',
              'posixpath.re': 're',
              'posixpath.stat': 'stat',
              'pprint._StringIO': 'cStringIO.StringIO',
              'pprint._sys': 'sys',
              'pprint.time': 'time',
              'pty.I_PUSH': 'fcntl.I_PUSH',
              'pty.ioctl': 'fcntl.ioctl',
              'pty.os': 'os',
              'pty.select': 'select.select',
              'pty.sgi': 'sgi',
              'pty.tty': 'tty',
              'py_compile.MacOS': 'MacOS',
              'py_compile.__builtin__': '__builtin__',
              'py_compile.imp': 'imp',
              'py_compile.marshal': 'marshal',
              'py_compile.os': 'os',
              'py_compile.sys': 'sys',
              'py_compile.traceback': 'traceback',
              'pyclbr.DEDENT': 'token.DEDENT',
              'pyclbr.NAME': 'token.NAME',
              'pyclbr.NEWLINE': 'token.NEWLINE',
              'pyclbr.OP': 'token.OP',
              'pyclbr.imp': 'imp',
              'pyclbr.itemgetter': 'operator.itemgetter',
              'pyclbr.os': 'os',
              'pyclbr.sys': 'sys',
              'pyclbr.tokenize': 'tokenize',
              'pydoc.BaseHTTPServer': 'BaseHTTPServer',
              'pydoc.Repr': 'repr.Repr',
              'pydoc.StringIO': 'StringIO',
              'pydoc.Tkinter': 'Tkinter',
              'pydoc.__builtin__': '__builtin__',
              'pydoc.deque': 'collections.deque',
              'pydoc.expandtabs': 'string.expandtabs',
              'pydoc.find': 'string.find',
              'pydoc.formatter': 'formatter',
              'pydoc.getopt': 'getopt',
              'pydoc.htmllib': 'htmllib',
              'pydoc.ic': 'ic',
              'pydoc.imp': 'imp',
              'pydoc.inspect': 'inspect',
              'pydoc.join': 'string.join',
              'pydoc.lower': 'string.lower',
              'pydoc.mimetools': 'mimetools',
              'pydoc.nturl2path': 'nturl2path',
              'pydoc.os': 'os',
              'pydoc.pkgutil': 'pkgutil',
              'pydoc.re': 're',
              'pydoc.rfind': 'string.rfind',
              'pydoc.rstrip': 'string.rstrip',
              'pydoc.select': 'select',
              'pydoc.split': 'string.split',
              'pydoc.strip': 'string.strip',
              'pydoc.sys': 'sys',
              'pydoc.tempfile': 'tempfile',
              'pydoc.threading': 'threading',
              'pydoc.tty': 'tty',
              'pydoc.types': 'types',
              'pydoc.warnings': 'warnings',
              'pydoc.webbrowser': 'webbrowser',
              'quopri.StringIO': 'cStringIO.StringIO',
              'quopri.a2b_qp': 'binascii.a2b_qp',
              'quopri.b2a_qp': 'binascii.b2a_qp',
              'quopri.getopt': 'getopt',
              'quopri.sys': 'sys',
              'random._BuiltinMethodType': 'types.BuiltinMethodType',
              'random._MethodType': 'types.MethodType',
              'random._acos': 'math.acos',
              'random._ceil': 'math.ceil',
              'random._cos': 'math.cos',
              'random._e': 'math.e',
              'random._exp': 'math.exp',
              'random._hexlify': 'binascii.hexlify',
              'random._log': 'math.log',
              'random._pi': 'math.pi',
              'random._random': '_random',
              'random._sin': 'math.sin',
              'random._sqrt': 'math.sqrt',
              'random._urandom': 'os.urandom',
              'random._warn': 'warnings.warn',
              'random.time': 'time',
              're.BRANCH': 'sre_constants.BRANCH',
              're.SUBPATTERN': 'sre_constants.SUBPATTERN',
              're.copy_reg': 'copy_reg',
              're.sre_compile': 'sre_compile',
              're.sre_parse': 'sre_parse',
              're.sys': 'sys',
              'repr.__builtin__': '__builtin__',
              'repr.islice': 'itertools.islice',
              'rexec.__builtin__': '__builtin__',
              'rexec.code': 'code',
              'rexec.getopt': 'getopt',
              'rexec.ihooks': 'ihooks',
              'rexec.imp': 'imp',
              'rexec.os': 'os',
              'rexec.readline': 'readline',
              'rexec.sys': 'sys',
              'rexec.traceback': 'traceback',
              'rfc822.os': 'os',
              'rfc822.sys': 'sys',
              'rfc822.time': 'time',
              'rlcompleter.__builtin__': '__builtin__',
              'rlcompleter.__main__': '__main__',
              'rlcompleter.keyword': 'keyword',
              'rlcompleter.re': 're',
              'rlcompleter.readline': 'readline',
              'robotparser.time': 'time',
              'robotparser.urllib': 'urllib',
              'robotparser.urlparse': 'urlparse',
              'runpy.get_loader': 'pkgutil.get_loader',
              'runpy.imp': 'imp',
              'runpy.sys': 'sys',
              'sched.heapq': 'heapq',
              'sets.deepcopy': 'copy.deepcopy',
              'sets.generators': '__future__.generators',
              'sets.ifilter': 'itertools.ifilter',
              'sets.ifilterfalse': 'itertools.ifilterfalse',
              'sgmllib.markupbase': 'markupbase',
              'sgmllib.re': 're',
              'sgmllib.sys': 'sys',
              'sha.sha': 'hashlib.sha1',
              'shelve.Pickler': 'pickle.Pickler',
              'shelve.StringIO': 'StringIO.StringIO',
              'shelve.Unpickler': 'pickle.Unpickler',
              'shelve.UserDict': 'UserDict',
              'shelve.anydbm': 'anydbm',
              'shelve.warnings': 'warnings',
              'shlex.StringIO': 'StringIO.StringIO',
              'shlex.deque': 'collections.deque',
              'shlex.os.path': 'os.path',
              'shlex.sys': 'sys',
              'shutil.abspath': 'os.path.abspath',
              'shutil.os': 'os',
              'shutil.stat': 'stat',
              'shutil.sys': 'sys',
              'site.__builtin__': '__builtin__',
              'site.codecs': 'codecs',
              'site.encodings': 'encodings',
              'site.locale': 'locale',
              'site.os': 'os',
              'site.pydoc': 'pydoc',
              'site.sitecustomize': 'sitecustomize',
              'site.sys': 'sys',
              'sitecustomize.apport_python_hook': 'apport_python_hook',
              'smtpd.MailList': 'Mailman.MailList',
              'smtpd.Message': 'Mailman.Message',
              'smtpd.StringIO': 'cStringIO.StringIO',
              'smtpd.Utils': 'Mailman.Utils',
              'smtpd.asynchat': 'asynchat',
              'smtpd.asyncore': 'asyncore',
              'smtpd.errno': 'errno',
              'smtpd.getopt': 'getopt',
              'smtpd.mod': '__main__',
              'smtpd.os': 'os',
              'smtpd.pwd': 'pwd',
              'smtpd.smtplib': 'smtplib',
              'smtpd.socket': 'socket',
              'smtpd.sys': 'sys',
              'smtpd.time': 'time',
              'smtplib.base64': 'base64',
              'smtplib.email.Utils': 'email.Utils',
              'smtplib.encode_base64': 'email.base64MIME.encode',
              'smtplib.hmac': 'hmac',
              'smtplib.re': 're',
              'smtplib.socket': 'socket',
              'smtplib.stderr': 'sys.stderr',
              'smtplib.sys': 'sys',
              'sndhdr.aifc': 'aifc',
              'sndhdr.glob': 'glob',
              'sndhdr.os': 'os',
              'sndhdr.sys': 'sys',
              'socket.*': '_ssl.*',
              'socket.EBADF': 'errno.EBADF',
              'socket.StringIO': 'StringIO.StringIO',
              'socket._socket': '_socket',
              'socket._ssl': '_ssl',
              'socket.os': 'os',
              'socket.sys': 'sys',
              'sqlite3.*': 'sqlite3.dbapi2.*',
              'sqlite3.dbapi2.*': '_sqlite3.*',
              'sqlite3.dbapi2.datetime': 'datetime',
              'sqlite3.dbapi2.time': 'time',
              'sre.*': 're.*',
              'sre.__all__': 're.__all__',
              'sre._compile': 're._compile',
              'sre.warnings': 'warnings',
              'sre_compile.*': 'sre_constants.*',
              'sre_compile._sre': '_sre',
              'sre_compile.array': 'array',
              'sre_compile.sre_parse': 'sre_parse',
              'sre_compile.sys': 'sys',
              'sre_parse.*': 'sre_constants.*',
              'sre_parse.sys': 'sys',
              'string._re': 're',
              'string.lowercase': 'strop.lowercase',
              'string.maketrans': 'strop.maketrans',
              'string.uppercase': 'strop.uppercase',
              'string.whitespace': 'strop.whitespace',
              'stringold.*': 'stringold.*',
              'stringold.lowercase': 'strop.lowercase',
              'stringold.maketrans': 'strop.maketrans',
              'stringold.uppercase': 'strop.uppercase',
              'stringold.whitespace': 'strop.whitespace',
              'stringprep.unicodedata': 'unicodedata.ucd_3_2_0',
              'struct.Struct': '_struct.Struct',
              'struct.error': '_struct.error',
              'subprocess.*': '_subprocess.*',
              'subprocess.CREATE_NEW_CONSOLE': 'win32process.CREATE_NEW_CONSOLE',
              'subprocess.CreatePipe': 'win32pipe.CreatePipe',
              'subprocess.CreateProcess': 'win32process.CreateProcess',
              'subprocess.DUPLICATE_SAME_ACCESS': 'win32con.DUPLICATE_SAME_ACCESS',
              'subprocess.DuplicateHandle': 'win32api.DuplicateHandle',
              'subprocess.GetCurrentProcess': 'win32api.GetCurrentProcess',
              'subprocess.GetExitCodeProcess': 'win32process.GetExitCodeProcess',
              'subprocess.GetModuleFileName': 'win32api.GetModuleFileName',
              'subprocess.GetStdHandle': 'win32api.GetStdHandle',
              'subprocess.GetVersion': 'win32api.GetVersion',
              'subprocess.INFINITE': 'win32event.INFINITE',
              'subprocess.STARTF_USESHOWWINDOW': 'win32process.STARTF_USESHOWWINDOW',
              'subprocess.STARTF_USESTDHANDLES': 'win32process.STARTF_USESTDHANDLES',
              'subprocess.STARTUPINFO': 'win32process.STARTUPINFO',
              'subprocess.STD_ERROR_HANDLE': 'win32api.STD_ERROR_HANDLE',
              'subprocess.STD_INPUT_HANDLE': 'win32api.STD_INPUT_HANDLE',
              'subprocess.STD_OUTPUT_HANDLE': 'win32api.STD_OUTPUT_HANDLE',
              'subprocess.SW_HIDE': 'win32con.SW_HIDE',
              'subprocess.WAIT_OBJECT_0': 'win32event.WAIT_OBJECT_0',
              'subprocess.WaitForSingleObject': 'win32event.WaitForSingleObject',
              'subprocess.errno': 'errno',
              'subprocess.fcntl': 'fcntl',
              'subprocess.gc': 'gc',
              'subprocess.msvcrt': 'msvcrt',
              'subprocess.os': 'os',
              'subprocess.pickle': 'pickle',
              'subprocess.pywintypes': 'pywintypes',
              'subprocess.select': 'select',
              'subprocess.sys': 'sys',
              'subprocess.threading': 'threading',
              'subprocess.traceback': 'traceback',
              'subprocess.types': 'types',
              'sunau.__builtin__': '__builtin__',
              'sunau.audioop': 'audioop',
              'symbol.sys': 'sys',
              'symbol.token': 'token',
              'symtable.DEF_BOUND': '_symtable.DEF_BOUND',
              'symtable.DEF_DOUBLESTAR': '_symtable.DEF_DOUBLESTAR',
              'symtable.DEF_FREE': '_symtable.DEF_FREE',
              'symtable.DEF_FREE_CLASS': '_symtable.DEF_FREE_CLASS',
              'symtable.DEF_FREE_GLOBAL': '_symtable.DEF_FREE_GLOBAL',
              'symtable.DEF_GLOBAL': '_symtable.DEF_GLOBAL',
              'symtable.DEF_IMPORT': '_symtable.DEF_IMPORT',
              'symtable.DEF_INTUPLE': '_symtable.DEF_INTUPLE',
              'symtable.DEF_LOCAL': '_symtable.DEF_LOCAL',
              'symtable.DEF_PARAM': '_symtable.DEF_PARAM',
              'symtable.DEF_STAR': '_symtable.DEF_STAR',
              'symtable.OPT_BARE_EXEC': '_symtable.OPT_BARE_EXEC',
              'symtable.OPT_EXEC': '_symtable.OPT_EXEC',
              'symtable.OPT_IMPORT_STAR': '_symtable.OPT_IMPORT_STAR',
              'symtable.USE': '_symtable.USE',
              'symtable._symtable': '_symtable',
              'symtable.os': 'os',
              'symtable.sys': 'sys',
              'symtable.weakref': 'weakref',
              'tabnanny.getopt': 'getopt',
              'tabnanny.os': 'os',
              'tabnanny.sys': 'sys',
              'tabnanny.tokenize': 'tokenize',
              'tarfile.StringIO': 'StringIO.StringIO',
              'tarfile.bz2': 'bz2',
              'tarfile.calendar': 'calendar',
              'tarfile.copy': 'copy',
              'tarfile.errno': 'errno',
              'tarfile.grp': 'grp',
              'tarfile.gzip': 'gzip',
              'tarfile.os': 'os',
              'tarfile.pwd': 'pwd',
              'tarfile.shutil': 'shutil',
              'tarfile.stat': 'stat',
              'tarfile.struct': 'struct',
              'tarfile.sys': 'sys',
              'tarfile.time': 'time',
              'tarfile.zlib': 'zlib',
              'telnetlib.re': 're',
              'telnetlib.select': 'select',
              'telnetlib.socket': 'socket',
              'telnetlib.sys': 'sys',
              'telnetlib.thread': 'thread',
              'telnetlib.time': 'time.time',
              'tempfile._Folder': 'Carbon.Folder',
              'tempfile._Folders': 'Carbon.Folders',
              'tempfile._Random': 'random.Random',
              'tempfile._errno': 'errno',
              'tempfile._fcntl': 'fcntl',
              'tempfile._os': 'os',
              'tempfile._thread': 'dummy_thread',
              'textwrap.re': 're',
              'textwrap.string': 'string',
              'threading._format_exc': 'traceback.format_exc',
              'threading._sleep': 'time.sleep',
              'threading._sys': 'sys',
              'threading._time': 'time.time',
              'threading.deque': 'collections.deque',
              'threading.local': '_threading_local.local',
              'threading.random': 'random.random',
              'threading.stack_size': 'thread.stack_size',
              'threading.thread': 'thread',
              'timeit.gc': 'gc',
              'timeit.getopt': 'getopt',
              'timeit.itertools': 'itertools',
              'timeit.linecache': 'linecache',
              'timeit.os': 'os',
              'timeit.sys': 'sys',
              'timeit.time': 'time',
              'timeit.traceback': 'traceback',
              'tkColorChooser.Dialog': 'tkCommonDialog.Dialog',
              'tkCommonDialog.*': 'Tkinter.*',
              'tkFileDialog.Dialog': 'tkCommonDialog.Dialog',
              'tkFileDialog.locale': 'locale',
              'tkFileDialog.os': 'os',
              'tkFileDialog.sys': 'sys',
              'tkFont.Tkinter': 'Tkinter',
              'tkMessageBox.Dialog': 'tkCommonDialog.Dialog',
              'tkSimpleDialog.*': 'Tkinter.*',
              'tkSimpleDialog.Tkinter': 'Tkinter',
              'tkSimpleDialog.os': 'os',
              'tkSimpleDialog.tkMessageBox': 'tkMessageBox',
              'toaiff.os': 'os',
              'toaiff.pipes': 'pipes',
              'toaiff.sndhdr': 'sndhdr',
              'toaiff.tempfile': 'tempfile',
              'token.re': 're',
              'token.sys': 'sys',
              'tokenize.*': 'token.*',
              'tokenize.re': 're',
              'tokenize.string': 'string',
              'tokenize.sys': 'sys',
              'tokenize.token': 'token',
              'trace.__main__': '__main__',
              'trace.cPickle': 'cPickle',
              'trace.gc': 'gc',
              'trace.getopt': 'getopt',
              'trace.linecache': 'linecache',
              'trace.os': 'os',
              'trace.pickle': 'pickle',
              'trace.re': 're',
              'trace.sys': 'sys',
              'trace.threading': 'threading',
              'trace.token': 'token',
              'trace.tokenize': 'tokenize',
              'trace.types': 'types',
              'traceback.linecache': 'linecache',
              'traceback.sys': 'sys',
              'traceback.types': 'types',
              'tty.*': 'termios.*',
              'turtle.*': 'math.*',
              'turtle.Tkinter': 'Tkinter',
              'turtle.sleep': 'time.sleep',
              'types._types': '_types',
              'types.sys': 'sys',
              'unittest.__builtin__': '__builtin__',
              'unittest.getopt': 'getopt',
              'unittest.os': 'os',
              'unittest.sys': 'sys',
              'unittest.time': 'time',
              'unittest.traceback': 'traceback',
              'unittest.types': 'types',
              'urllib.StringIO': 'StringIO.StringIO',
              'urllib._winreg': '_winreg',
              'urllib.base64': 'base64',
              'urllib.basejoin': 'urlparse.urljoin',
              'urllib.email.Utils': 'email.Utils',
              'urllib.ftplib': 'ftplib',
              'urllib.getopt': 'getopt',
              'urllib.getpass': 'getpass',
              'urllib.gopherlib': 'gopherlib',
              'urllib.httplib': 'httplib',
              'urllib.ic': 'ic',
              'urllib.mimetools': 'mimetools',
              'urllib.mimetypes': 'mimetypes',
              'urllib.os': 'os',
              'urllib.pathname2url': 'rourl2path.pathname2url',
              'urllib.re': 're',
              'urllib.socket': 'socket',
              'urllib.string': 'string',
              'urllib.sys': 'sys',
              'urllib.tempfile': 'tempfile',
              'urllib.time': 'time',
              'urllib.url2pathname': 'rourl2path.url2pathname',
              'urllib2.StringIO': 'StringIO.StringIO',
              'urllib2.addinfourl': 'urllib.addinfourl',
              'urllib2.base64': 'base64',
              'urllib2.bisect': 'bisect',
              'urllib2.cookielib': 'cookielib',
              'urllib2.email.Utils': 'email.Utils',
              'urllib2.ftplib': 'ftplib',
              'urllib2.ftpwrapper': 'urllib.ftpwrapper',
              'urllib2.getproxies': 'urllib.getproxies',
              'urllib2.gopherlib': 'gopherlib',
              'urllib2.hashlib': 'hashlib',
              'urllib2.httplib': 'httplib',
              'urllib2.localhost': 'urllib.localhost',
              'urllib2.mimetools': 'mimetools',
              'urllib2.mimetypes': 'mimetypes',
              'urllib2.noheaders': 'urllib.noheaders',
              'urllib2.os': 'os',
              'urllib2.posixpath': 'posixpath',
              'urllib2.quote': 'urllib.quote',
              'urllib2.random': 'random',
              'urllib2.re': 're',
              'urllib2.socket': 'socket',
              'urllib2.splitattr': 'urllib.splitattr',
              'urllib2.splitgophertype': 'urllib.splitgophertype',
              'urllib2.splithost': 'urllib.splithost',
              'urllib2.splitpasswd': 'urllib.splitpasswd',
              'urllib2.splitport': 'urllib.splitport',
              'urllib2.splitquery': 'urllib.splitquery',
              'urllib2.splittype': 'urllib.splittype',
              'urllib2.splituser': 'urllib.splituser',
              'urllib2.splitvalue': 'urllib.splitvalue',
              'urllib2.sys': 'sys',
              'urllib2.time': 'time',
              'urllib2.types': 'types',
              'urllib2.unquote': 'urllib.unquote',
              'urllib2.unwrap': 'urllib.unwrap',
              'urllib2.url2pathname': 'urllib.url2pathname',
              'urllib2.urlparse': 'urlparse',
              'urlparse.StringIO': 'StringIO.StringIO',
              'urlparse.sys': 'sys',
              'user.os': 'os',
              'uu.binascii': 'binascii',
              'uu.optparse': 'optparse',
              'uu.os': 'os',
              'uu.sys': 'sys',
              'uuid.ctypes': 'ctypes',
              'uuid.ctypes.util': 'ctypes.util',
              'uuid.md5': 'md5',
              'uuid.netbios': 'netbios',
              'uuid.os': 'os',
              'uuid.random': 'random',
              'uuid.re': 're',
              'uuid.sha': 'sha',
              'uuid.socket': 'socket',
              'uuid.sys': 'sys',
              'uuid.time': 'time',
              'uuid.win32wnet': 'win32wnet',
              'warnings.linecache': 'linecache',
              'warnings.re': 're',
              'warnings.sys': 'sys',
              'warnings.types': 'types',
              'wave.Chunk': 'chunk.Chunk',
              'wave.__builtin__': '__builtin__',
              'wave.array': 'array',
              'wave.struct': 'struct',
              'weakref.CallableProxyType': '_weakref.CallableProxyType',
              'weakref.ProxyType': '_weakref.ProxyType',
              'weakref.ReferenceError': 'exceptions.ReferenceError',
              'weakref.ReferenceType': '_weakref.ReferenceType',
              'weakref.UserDict': 'UserDict',
              'weakref.getweakrefcount': '_weakref.getweakrefcount',
              'weakref.getweakrefs': '_weakref.getweakrefs',
              'weakref.proxy': '_weakref.proxy',
              'weakref.ref': '_weakref.ref',
              'webbrowser.copy': 'copy',
              'webbrowser.getopt': 'getopt',
              'webbrowser.glob': 'glob',
              'webbrowser.ic': 'ic',
              'webbrowser.os': 'os',
              'webbrowser.pwd': 'pwd',
              'webbrowser.shlex': 'shlex',
              'webbrowser.socket': 'socket',
              'webbrowser.stat': 'stat',
              'webbrowser.subprocess': 'subprocess',
              'webbrowser.sys': 'sys',
              'webbrowser.tempfile': 'tempfile',
              'webbrowser.time': 'time',
              'whichdb.dbm': 'dbm',
              'whichdb.os': 'os',
              'whichdb.struct': 'struct',
              'whichdb.sys': 'sys',
              'wsgiref.handlers.FileWrapper': 'wsgiref.util.FileWrapper',
              'wsgiref.handlers.Headers': 'wsgiref.headers.Headers',
              'wsgiref.handlers.StringType': 'types.StringType',
              'wsgiref.handlers.guess_scheme': 'wsgiref.util.guess_scheme',
              'wsgiref.handlers.is_hop_by_hop': 'wsgiref.util.is_hop_by_hop',
              'wsgiref.handlers.os': 'os',
              'wsgiref.handlers.print_exception': 'traceback.print_exception',
              'wsgiref.handlers.sys': 'sys',
              'wsgiref.handlers.time': 'time',
              'wsgiref.headers.ListType': 'types.ListType',
              'wsgiref.headers.TupleType': 'types.TupleType',
              'wsgiref.headers.re': 're',
              'wsgiref.simple_server.BaseHTTPRequestHandler': 'BaseHTTPServer.BaseHTTPRequestHandler',
              'wsgiref.simple_server.HTTPServer': 'BaseHTTPServer.HTTPServer',
              'wsgiref.simple_server.SimpleHandler': 'wsgiref.handlers.SimpleHandler',
              'wsgiref.simple_server.StringIO': 'StringIO.StringIO',
              'wsgiref.simple_server.sys': 'sys',
              'wsgiref.simple_server.urllib': 'urllib',
              'wsgiref.simple_server.webbrowser': 'webbrowser',
              'wsgiref.util.StringIO': 'StringIO.StringIO',
              'wsgiref.util.posixpath': 'posixpath',
              'wsgiref.util.quote': 'urllib.quote',
              'wsgiref.validate.DictType': 'types.DictType',
              'wsgiref.validate.ListType': 'types.ListType',
              'wsgiref.validate.StringType': 'types.StringType',
              'wsgiref.validate.TupleType': 'types.TupleType',
              'wsgiref.validate.re': 're',
              'wsgiref.validate.sys': 'sys',
              'wsgiref.validate.warnings': 'warnings',
              'xdrlib._StringIO': 'StringIO.StringIO',
              'xdrlib.struct': 'struct',
              'xml._xmlplus': '_xmlplus',
              'xml.dom.domreg.*': 'xml.dom.minicompat.*',
              'xml.dom.domreg.os': 'os',
              'xml.dom.expatbuilder.*': 'xml.dom.minicompat.*',
              'xml.dom.expatbuilder.EMPTY_NAMESPACE': 'xml.dom.EMPTY_NAMESPACE',
              'xml.dom.expatbuilder.EMPTY_PREFIX': 'xml.dom.EMPTY_PREFIX',
              'xml.dom.expatbuilder.Node': 'xml.dom.Node',
              'xml.dom.expatbuilder.NodeFilter': 'xml.dom.NodeFilter.NodeFilter',
              'xml.dom.expatbuilder.XMLNS_NAMESPACE': 'xml.dom.XMLNS_NAMESPACE',
              'xml.dom.expatbuilder._append_child': 'xml.dom.minidom._append_child',
              'xml.dom.expatbuilder._set_attribute_node': 'xml.dom.minidom._set_attribute_node',
              'xml.dom.expatbuilder.expat': 'xml.parsers.expat',
              'xml.dom.expatbuilder.minidom': 'xml.dom.minidom',
              'xml.dom.expatbuilder.xmlbuilder': 'xml.dom.xmlbuilder',
              'xml.dom.getDOMImplementation': 'xml.dom.domreg.getDOMImplementation',
              'xml.dom.minicompat.xml.dom': 'xml.dom',
              'xml.dom.minidom.*': 'xml.dom.minicompat.*',
              'xml.dom.minidom.DOMImplementationLS': 'xml.dom.xmlbuilder.DOMImplementationLS',
              'xml.dom.minidom.DocumentLS': 'xml.dom.xmlbuilder.DocumentLS',
              'xml.dom.minidom.EMPTY_NAMESPACE': 'xml.dom.EMPTY_NAMESPACE',
              'xml.dom.minidom.EMPTY_PREFIX': 'xml.dom.EMPTY_PREFIX',
              'xml.dom.minidom.StringIO': 'StringIO.StringIO',
              'xml.dom.minidom.XMLNS_NAMESPACE': 'xml.dom.XMLNS_NAMESPACE',
              'xml.dom.minidom.codecs': 'codecs',
              'xml.dom.minidom.domreg': 'xml.dom.domreg',
              'xml.dom.minidom.expatbuilder': 'xml.dom.expatbuilder',
              'xml.dom.minidom.pulldom': 'xml.dom.pulldom',
              'xml.dom.minidom.xml.dom': 'xml.dom',
              'xml.dom.pulldom.StringIO': 'StringIO.StringIO',
              'xml.dom.pulldom.XML_NAMESPACE': 'xml.dom.XML_NAMESPACE',
              'xml.dom.pulldom.types': 'types',
              'xml.dom.pulldom.xml.dom.minidom': 'xml.dom.minidom',
              'xml.dom.pulldom.xml.sax': 'xml.sax',
              'xml.dom.pulldom.xml.sax.handler': 'xml.sax.handler',
              'xml.dom.registerDOMImplementation': 'xml.dom.domreg.registerDOMImplementation',
              'xml.dom.xmlbuilder.NodeFilter': 'xml.dom.NodeFilter.NodeFilter',
              'xml.dom.xmlbuilder.copy': 'copy',
              'xml.dom.xmlbuilder.posixpath': 'posixpath',
              'xml.dom.xmlbuilder.urllib2': 'urllib2',
              'xml.dom.xmlbuilder.urlparse': 'urlparse',
              'xml.dom.xmlbuilder.xml.dom': 'xml.dom',
              'xml.dom.xmlbuilder.xml.dom.expatbuilder': 'xml.dom.expatbuilder',
              'xml.etree.ElementInclude.ElementTree': 'xml.etree.ElementTree',
              'xml.etree.ElementInclude.copy': 'copy',
              'xml.etree.ElementPath.re': 're',
              'xml.etree.ElementTree.ElementPath': 'xml.etree.ElementPath',
              'xml.etree.ElementTree.expat': 'xml.parsers.expat',
              'xml.etree.ElementTree.re': 're',
              'xml.etree.ElementTree.string': 'string',
              'xml.etree.ElementTree.sys': 'sys',
              'xml.etree.cElementTree.*': '_elementtree.*',
              'xml.parsers.expat.*': 'pyexpat.*',
              'xml.sax.ContentHandler': 'xml.sax.handler.ContentHandler',
              'xml.sax.ErrorHandler': 'xml.sax.handler.ErrorHandler',
              'xml.sax.InputSource': 'xml.sax.xmlreader.InputSource',
              'xml.sax.SAXException': 'xml.sax._exceptions.SAXException',
              'xml.sax.SAXNotRecognizedException': 'xml.sax._exceptions.SAXNotRecognizedException',
              'xml.sax.SAXNotSupportedException': 'xml.sax._exceptions.SAXNotSupportedException',
              'xml.sax.SAXParseException': 'xml.sax._exceptions.SAXParseException',
              'xml.sax.SAXReaderNotAvailable': 'xml.sax._exceptions.SAXReaderNotAvailable',
              'xml.sax.StringIO': 'StringIO.StringIO',
              'xml.sax._exceptions.Exception': 'java.lang.Exception',
              'xml.sax._exceptions.sys': 'sys',
              'xml.sax.expatreader.*': 'xml.sax._exceptions.*',
              'xml.sax.expatreader._weakref': '_weakref',
              'xml.sax.expatreader.expat': 'xml.parsers.expat',
              'xml.sax.expatreader.feature_external_ges': 'xml.sax.handler.feature_external_ges',
              'xml.sax.expatreader.feature_external_pes': 'xml.sax.handler.feature_external_pes',
              'xml.sax.expatreader.feature_namespace_prefixes': 'xml.sax.handler.feature_namespace_prefixes',
              'xml.sax.expatreader.feature_namespaces': 'xml.sax.handler.feature_namespaces',
              'xml.sax.expatreader.feature_string_interning': 'xml.sax.handler.feature_string_interning',
              'xml.sax.expatreader.feature_validation': 'xml.sax.handler.feature_validation',
              'xml.sax.expatreader.handler': 'xml.sax.handler',
              'xml.sax.expatreader.property_interning_dict': 'xml.sax.handler.property_interning_dict',
              'xml.sax.expatreader.property_xml_string': 'xml.sax.handler.property_xml_string',
              'xml.sax.expatreader.saxutils': 'xml.sax.saxutils',
              'xml.sax.expatreader.sys': 'sys',
              'xml.sax.expatreader.weakref': 'weakref',
              'xml.sax.expatreader.xml.sax': 'xml.sax',
              'xml.sax.expatreader.xmlreader': 'xml.sax.xmlreader',
              'xml.sax.imp': 'org.python.core.imp',
              'xml.sax.os': 'os',
              'xml.sax.saxutils.handler': 'xml.sax.handler',
              'xml.sax.saxutils.os': 'os',
              'xml.sax.saxutils.sys': 'sys',
              'xml.sax.saxutils.types': 'types',
              'xml.sax.saxutils.urllib': 'urllib',
              'xml.sax.saxutils.urlparse': 'urlparse',
              'xml.sax.saxutils.xmlcharrefreplace_errors': 'codecs.xmlcharrefreplace_errors',
              'xml.sax.saxutils.xmlreader': 'xml.sax.xmlreader',
              'xml.sax.sys': 'sys',
              'xml.sax.xml.sax.expatreader': 'xml.sax.expatreader',
              'xml.sax.xmlreader.SAXNotRecognizedException': 'xml.sax._exceptions.SAXNotRecognizedException',
              'xml.sax.xmlreader.SAXNotSupportedException': 'xml.sax._exceptions.SAXNotSupportedException',
              'xml.sax.xmlreader.handler': 'xml.sax.handler',
              'xml.sax.xmlreader.saxutils': 'xml.sax.saxutils',
              'xml.sys': 'sys',
              'xmllib.getopt': 'getopt',
              'xmllib.re': 're',
              'xmllib.string': 'string',
              'xmllib.sys': 'sys',
              'xmllib.time': 'time.time',
              'xmllib.warnings': 'warnings',
              'xmlrpclib.*': 'types.*',
              'xmlrpclib.StringIO': 'StringIO',
              'xmlrpclib._xmlrpclib': '_xmlrpclib',
              'xmlrpclib.base64': 'base64',
              'xmlrpclib.datetime': 'datetime',
              'xmlrpclib.expat': 'xml.parsers.expat',
              'xmlrpclib.httplib': 'httplib',
              'xmlrpclib.operator': 'operator',
              'xmlrpclib.re': 're',
              'xmlrpclib.sgmlop': 'sgmlop',
              'xmlrpclib.string': 'string',
              'xmlrpclib.time': 'time',
              'xmlrpclib.urllib': 'urllib',
              'xmlrpclib.xmllib': 'xmllib',
              'zipfile.binascii': 'binascii',
              'zipfile.cStringIO': 'cStringIO',
              'zipfile.os': 'os',
              'zipfile.py_compile': 'py_compile',
              'zipfile.struct': 'struct',
              'zipfile.sys': 'sys',
              'zipfile.textwrap': 'textwrap',
              'zipfile.time': 'time',
              'zipfile.zlib': 'zlib'}}
